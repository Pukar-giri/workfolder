source_filename = "test"
target datalayout = "e-m:e-p:64:64-i64:64-f80:128-n8:16:32:64-S128"

%_IO_FILE = type { i32 }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%lconv = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%timespec = type { i64, i32 }
%__dirstream = type { i32 }
%passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%option = type { i8*, i32, i32*, i32 }
%_TYPEDEF___mbstate_t = type { i32, i64 }
%group = type { i8*, i8*, i32, i8** }
%timeval = type { i64, i64 }
%timezone = type { i32, i32 }
%__jmp_buf_tag = type { [8 x i32], i32, %_TYPEDEF___sigset_t }
%_TYPEDEF___sigset_t = type { [1 x i32] }
%dirent = type { i32, i32, i16, i8, [256 x i8] }

@df = internal unnamed_addr global i1 false
@fpu_stat_TOP = internal unnamed_addr global i3 0
@xmm0 = internal unnamed_addr global i128 0
@xmm1 = internal unnamed_addr global i128 0
@rax = internal unnamed_addr global i64 0
@rcx = internal unnamed_addr global i64 0
@rdx = internal unnamed_addr global i64 0
@rbx = internal unnamed_addr global i64 0
@rsp = internal unnamed_addr global i64 0
@rbp = internal unnamed_addr global i64 0
@rsi = internal unnamed_addr global i64 0
@rdi = internal unnamed_addr global i64 0
@r8 = internal unnamed_addr global i64 0
@r9 = internal unnamed_addr global i64 0
@r10 = internal unnamed_addr global i64 0
@r12 = internal unnamed_addr global i64 0
@r13 = internal unnamed_addr global i64 0
@r14 = internal unnamed_addr global i64 0
@r15 = internal unnamed_addr global i64 0
@global_var_17d95.7 = constant [18 x i8] c"/usr/share/locale\00"
@global_var_17d7b.8 = constant [10 x i8] c"coreutils\00"
@global_var_221370.12 = global i64 0
@global_var_221380.14 = local_unnamed_addr global i64 0
@global_var_17da7.18 = constant [14 x i8] c"QUOTING_STYLE\00"
@global_var_2212e8.30 = local_unnamed_addr global i64 0
@global_var_2212e0.31 = local_unnamed_addr global i64 0
@global_var_1ab60.33 = constant i64 4294967296
@global_var_180c4.34 = constant [8 x i8] c"literal\00"
@global_var_1a6bf.35 = constant [6 x i8] c"shell\00"
@global_var_1a6c5.36 = constant [13 x i8] c"shell-always\00"
@global_var_1a6d2.37 = constant [13 x i8] c"shell-escape\00"
@global_var_1a6df.38 = constant [20 x i8] c"shell-escape-always\00"
@global_var_1af0c.39 = constant i64 4412437125446762595
@global_var_1a6f3.40 = constant [8 x i8] c"c-maybe\00"
@global_var_1a6d8.41 = constant [7 x i8] c"escape\00"
@global_var_17da0.42 = constant [7 x i8] c"locale\00"
@global_var_1a6fb.43 = constant [8 x i8] c"clocale\00"
@global_var_21f9e0.44 = global [10 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_180c4.34, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1a6bf.35, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_1a6c5.36, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_1a6d2.37, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @global_var_1a6df.38, i32 0, i32 0), i8* bitcast (i64* @global_var_1af0c.39 to i8*), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_1a6f3.40, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_1a6d8.41, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_17da0.42, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_1a6fb.43, i32 0, i32 0)]
@global_var_17db5.45 = constant [8 x i8] c"COLUMNS\00"
@global_var_17dbd.47 = constant [8 x i8] c"TABSIZE\00"
@global_var_16598.49 = constant i64 -298620486230445
@global_var_1806a.50 = constant [4 x i8] c"all\00"
@global_var_21f2e0.51 = global [4 x i8]* @global_var_1806a.50
@global_var_1a148.52 = constant [44 x i8] c"abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1\00"
@global_var_221328.53 = global i64 0
@global_var_221320.55 = global i64 0
@global_var_220018.56 = local_unnamed_addr global i64 1
@global_var_17d82.68 = constant [3 x i8] c"ls\00"
@global_var_17cfe.69 = constant [5 x i8] c"vdir\00"
@global_var_17cff.70 = constant [4 x i8] c"dir\00"
@global_var_17d77.74 = constant [14 x i8] c"GNU coreutils\00"
@global_var_17f80.76 = constant [6 x i8] c"atime\00"
@global_var_1a31c.77 = constant [7 x i8] c"access\00"
@global_var_17f86.78 = constant [4 x i8] c"use\00"
@global_var_17f8a.79 = constant [6 x i8] c"ctime\00"
@global_var_17f90.80 = constant [7 x i8] c"status\00"
@global_var_17f6f.84 = constant [5 x i8] c"none\00"
@global_var_17dfd.85 = constant [5 x i8] c"time\00"
@global_var_17def.86 = constant [5 x i8] c"size\00"
@global_var_17f97.87 = constant [10 x i8] c"extension\00"
@global_var_17c1b.88 = constant [8 x i8] c"version\00"
@global_var_21f260.89 = global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_17f6f.84, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_17dfd.85, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_17def.86, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_17f97.87, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_17c1b.88, i32 0, i32 0)]
@global_var_181bb.93 = constant [6 x i8] c"slash\00"
@global_var_18086.94 = constant [10 x i8] c"file-type\00"
@global_var_1807d.95 = constant [9 x i8] c"classify\00"
@global_var_1a6ec.99 = constant [7 x i8] c"always\00"
@global_var_17f5c.100 = constant [4 x i8] c"yes\00"
@global_var_17f60.101 = constant [6 x i8] c"force\00"
@global_var_17f66.102 = constant [6 x i8] c"never\00"
@global_var_17f6c.103 = constant [3 x i8] c"no\00"
@global_var_17f74.104 = constant [5 x i8] c"auto\00"
@global_var_17f7c.105 = constant [4 x i8] c"tty\00"
@global_var_17f79.106 = constant [7 x i8] c"if-tty\00"
@global_var_17d89.111 = constant [9 x i8] c"full-iso\00"
@global_var_17fa1.112 = constant [8 x i8] c"verbose\00"
@global_var_17fa9.113 = constant [5 x i8] c"long\00"
@global_var_17fae.114 = constant [7 x i8] c"commas\00"
@global_var_17fb5.115 = constant [11 x i8] c"horizontal\00"
@global_var_17fc0.116 = constant [7 x i8] c"across\00"
@global_var_17fc7.117 = constant [9 x i8] c"vertical\00"
@global_var_17fd0.118 = constant [14 x i8] c"single-column\00"
@global_var_17dd8.124 = constant [7 x i8] c"%s: %s\00"
@global_var_17e68.126 = constant [11 x i8] c"BLOCK_SIZE\00"
@global_var_17e73.130 = constant [6 x i8] c"*=>@|\00"
@global_var_2212c8.131 = local_unnamed_addr global i64 0
@global_var_16ad3.132 = constant [7 x i8] c"posix-\00"
@global_var_2213c8.134 = local_unnamed_addr global i64 0
@global_var_21ffc8.135 = local_unnamed_addr global i64 0
@global_var_2210e0.136 = global i64 0
@global_var_17f3c.137 = constant [3 x i8] c"TZ\00"
@global_var_2212a8.138 = local_unnamed_addr global i64 0
@global_var_2213b8.141 = local_unnamed_addr global i64 0
@global_var_2213c0.143 = local_unnamed_addr global i64 0
@global_var_2210f8.144 = local_unnamed_addr global i64 0
@global_var_2210f0.145 = local_unnamed_addr global i64 0
@global_var_1a080.147 = constant [65 x i8] c"ignoring invalid value of environment variable QUOTING_STYLE: %s\00"
@global_var_1a0c8.148 = constant [59 x i8] c"ignoring invalid width in environment variable COLUMNS: %s\00"
@global_var_220060.150 = global i64 2
@global_var_1813c.151 = constant i64 3761415196229262107
@global_var_220068.152 = local_unnamed_addr global i64* @global_var_1813c.151
@global_var_220070.153 = global i64 1
@global_var_17e65.156 = constant [14 x i8] c"LS_BLOCK_SIZE\00"
@global_var_2211a0.160 = global i64 0
@global_var_221140.161 = global i64 0
@global_var_2211f8.162 = local_unnamed_addr global i64 0
@global_var_17f45.163 = constant [10 x i8] c"//DIRED//\00"
@global_var_17f4f.164 = constant [13 x i8] c"//SUBDIRED//\00"
@global_var_1a1e8.165 = constant [38 x i8] c"//DIRED-OPTIONS// --quoting-style=%s\0A\00"
@global_var_17f03.166 = constant [10 x i8] c"LS_COLORS\00"
@global_var_17f0d.167 = constant [10 x i8] c"COLORTERM\00"
@global_var_17f12.168 = constant [5 x i8] c"TERM\00"
@global_var_16ba0.169 = constant [66 x i8] c"# Configuration file for dircolors, a utility to help you set the\00"
@global_var_17f17.171 = constant [6 x i8] c"TERM \00"
@global_var_1a108.174 = constant [62 x i8] c"ignoring invalid tab size in environment variable TABSIZE: %s\00"
@global_var_16b80.175 = constant i64 4294967296
@global_var_181c1.176 = constant [9 x i8] c"long-iso\00"
@global_var_181c6.177 = constant [4 x i8] c"iso\00"
@global_var_21f980.178 = global [4 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_17d89.111, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_181c1.176, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_181c6.177, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_17da0.42, i32 0, i32 0)]
@global_var_18126.179 = constant [10 x i8] c"%b %e  %Y\00"
@global_var_18130.180 = constant [12 x i8] c"%b %e %H:%M\00"
@global_var_220040.181 = global [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_18126.179, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_18130.180, i32 0, i32 0)]
@global_var_220048.182 = local_unnamed_addr global [12 x i8]* @global_var_18130.180
@global_var_17e79.183 = constant [11 x i8] c"TIME_STYLE\00"
@global_var_17d92.184 = constant [3 x i8] c"lc\00"
@global_var_18185.185 = constant [3 x i8] c"rc\00"
@global_var_18188.186 = constant [3 x i8] c"ec\00"
@global_var_18058.187 = constant [3 x i8] c"rs\00"
@global_var_1818b.188 = constant [3 x i8] c"fi\00"
@global_var_1818e.189 = constant [3 x i8] c"di\00"
@global_var_18191.190 = constant [3 x i8] c"ln\00"
@global_var_18194.191 = constant [3 x i8] c"pi\00"
@global_var_181c7.192 = constant i64 28531
@global_var_18197.193 = constant [3 x i8] c"bd\00"
@global_var_1819a.194 = constant [3 x i8] c"cd\00"
@global_var_1819d.195 = constant [3 x i8] c"mi\00"
@global_var_1811e.196 = constant [3 x i8] c"or\00"
@global_var_181a0.197 = constant [3 x i8] c"ex\00"
@global_var_181a3.198 = constant [3 x i8] c"do\00"
@global_var_181a6.199 = constant [3 x i8] c"su\00"
@global_var_181a9.200 = constant [3 x i8] c"sg\00"
@global_var_1800d.201 = constant [3 x i8] c"st\00"
@global_var_181ac.202 = constant [3 x i8] c"ow\00"
@global_var_181af.203 = constant [3 x i8] c"tw\00"
@global_var_181b2.204 = constant [3 x i8] c"ca\00"
@global_var_181b5.205 = constant [3 x i8] c"mh\00"
@global_var_181b8.206 = constant [3 x i8] c"cl\00"
@global_var_21f860.207 = global [24 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_17d92.184, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_18185.185, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_18188.186, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_18058.187, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_17f6c.103, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1818b.188, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1818e.189, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_18191.190, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_18194.191, i32 0, i32 0), i8* bitcast (i64* @global_var_181c7.192 to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_18197.193, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1819a.194, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1819d.195, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1811e.196, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_181a0.197, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_181a3.198, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_181a6.199, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_181a9.200, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1800d.201, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_181ac.202, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_181af.203, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_181b2.204, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_181b5.205, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_181b8.206, i32 0, i32 0)]
@global_var_221300.208 = local_unnamed_addr global i64 0
@global_var_17f1d.209 = constant [24 x i8] c"unrecognized prefix: %s\00"
@global_var_1a240.210 = constant [52 x i8] c"unparsable value for LS_COLORS environment variable\00"
@global_var_221308.211 = local_unnamed_addr global i64 0
@global_var_2200d0.212 = local_unnamed_addr global i64 5
@global_var_18145.213 = constant [6 x i8] c"01;36\00"
@global_var_2200d8.214 = local_unnamed_addr global [6 x i8]* @global_var_18145.213
@global_var_17f35.215 = constant [7 x i8] c"target\00"
@global_var_17d5e.216 = constant i64 7957614745501696109
@global_var_220078.217 = local_unnamed_addr global i64* @global_var_17d5e.216
@global_var_17ed2.218 = constant [24 x i8] c"%Y-%m-%d %H:%M:%S.%N %z\00"
@global_var_17ea1.219 = constant [11 x i8] c"time style\00"
@global_var_17ec2.220 = constant [16 x i8] c"  - [posix-]%s\0A\00"
@global_var_17eac.222 = constant [22 x i8] c"Valid arguments are:\0A\00"
@global_var_1a178.223 = constant [54 x i8] c"  - +FORMAT (e.g., +%H:%M) for a 'date'-style format\0A\00"
@global_var_17eea.224 = constant [15 x i8] c"%Y-%m-%d %H:%M\00"
@global_var_17ef9.225 = constant [10 x i8] c"%Y-%m-%d \00"
@global_var_17eed.226 = constant [12 x i8] c"%m-%d %H:%M\00"
@global_var_17e84.227 = constant [29 x i8] c"invalid time style format %s\00"
@global_var_16a38.228 = constant [12 x i8] c"dev_ino_pop\00"
@global_var_17c00.229 = constant [9 x i8] c"src/ls.c\00"
@global_var_1a1b0.230 = constant [55 x i8] c"dev_ino_size <= obstack_object_size (&dev_ino_obstack)\00"
@global_var_16ada.232 = constant [5 x i8] c"main\00"
@global_var_17f3f.233 = constant [6 x i8] c"found\00"
@global_var_1a210.235 = constant [41 x i8] c"hash_get_n_entries (active_dir_set) == 0\00"
@global_var_220008 = external global i64
@global_var_163a0.238 = constant i64 -291855912732808
@global_var_17bed.240 = constant [3 x i8] c"00\00"
@global_var_658.241 = global i64 77309411577
@global_var_648.244 = global i64 0
@global_var_17bf0.246 = constant [9 x i8] c"%.*s%s%s\00"
@global_var_1a2fc.247 = constant [3 x i8] c"%s\00"
@global_var_220022.248 = global i64 63
@global_var_2213a0.249 = local_unnamed_addr global i64 0
@global_var_17bf9.262 = constant [7 x i8] c"%%%02x\00"
@global_var_221398.263 = local_unnamed_addr global i64 0
@global_var_21f000.265 = global i64 25904
@global_var_16ac8.266 = constant [11 x i8] c"sort_files\00"
@global_var_17c09.267 = constant [26 x i8] c"sort_type != sort_version\00"
@global_var_17c23.269 = constant [5 x i8] c" %lu\00"
@global_var_17c28.270 = constant [6 x i8] c"%*lu \00"
@global_var_16a90.275 = constant i64 0
@global_var_220088.283 = local_unnamed_addr global i64 0
@global_var_220080.284 = global i64 0
@global_var_220090.285 = global i64 1
@global_var_2200a0.286 = global i64 0
@global_var_2000.287 = global [5 x i8*]* @global_var_21f260.89
@global_var_21f278.289 = global [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_17f97.87, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_17c1b.88, i32 0, i32 0)]
@global_var_2048.290 = global [2 x i8*]* @global_var_21f278.289
@global_var_17c44.293 = constant i64 2666138930381348123
@global_var_16aa0.294 = constant i64 34359738381
@global_var_2201d0.295 = global i64 3
@global_var_17c5b.298 = constant [5 x i8] c"%*s \00"
@global_var_1328.299 = constant [13 x i8] c"_assert_fail\00"
@global_var_17c4b.302 = constant [8 x i8] c"%s %*s \00"
@global_var_1318.304 = constant [6 x i8] c"_name\00"
@global_var_16b90.305 = constant [11 x i8] c"?pcdb-lswd\00"
@global_var_17c60.306 = constant [5 x i8] c" -> \00"
@global_var_3e9.307 = global i64 301989889
@global_var_17c53.308 = constant [3 x i8] c"  \00"
@global_var_17c56.311 = constant [10 x i8] c"%*s, %*s \00"
@global_var_221361.313 = global i64 0
@global_var_22135d.314 = global i64 0
@global_var_221355.315 = global i64 0
@global_var_16584.318 = constant i64 -228780023008900
@global_var_17c24.319 = constant [4 x i8] c"%lu\00"
@global_var_17c7d.321 = constant [17 x i8] c"cannot access %s\00"
@global_var_2202f0.322 = local_unnamed_addr global i64 0
@global_var_17cab.323 = constant [10 x i8] c"unlabeled\00"
@global_var_2202f8.324 = local_unnamed_addr global i64 0
@global_var_17c65.325 = constant [24 x i8] c"error canonicalizing %s\00"
@global_var_17c8e.327 = constant [29 x i8] c"cannot read symbolic link %s\00"
@global_var_348.328 = global i64 -5963724045824161380
@global_var_181d0.329 = constant [40 x i8] c"cannot determine device and inode of %s\00"
@global_var_338.330 = global i64 -2385732121838558278
@global_var_181f8.331 = constant [41 x i8] c"%s: not listing already-listed directory\00"
@global_var_221100.332 = local_unnamed_addr global i64 0
@global_var_17ebf.334 = constant [3 x i8] c":\0A\00"
@global_var_17cce.335 = constant [21 x i8] c"reading directory %s\00"
@global_var_17cf8.336 = constant [6 x i8] c"total\00"
@global_var_16a00.337 = constant i64 8589934593
@global_var_17cb5.338 = constant [25 x i8] c"cannot open directory %s\00"
@global_var_17ce3.339 = constant [21 x i8] c"closing directory %s\00"
@global_var_221400.340 = local_unnamed_addr global i64 0
@global_var_18228.341 = constant [39 x i8] c"Try '%s --help' for more information.\0A\00"
@global_var_18250.342 = constant [33 x i8] c"Usage: %s [OPTION]... [FILE]...\0A\00"
@global_var_18278.343 = constant [144 x i8] c"List information about the FILEs (the current directory by default).\0ASort entries alphabetically if none of -cftuvSUX nor --sort is specified.\0A\00"
@global_var_18308.344 = constant [75 x i8] c"\0AMandatory arguments to long options are mandatory for short options too.\0A\00"
@global_var_18358.345 = constant [271 x i8] c"  -a, --all                  do not ignore entries starting with .\0A  -A, --almost-all           do not list implied . and ..\0A      --author               with -l, print the author of each file\0A  -b, --escape               print C-style escapes for nongraphic characters\0A\00"
@global_var_18468.346 = constant [582 x i8] c"      --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,\0A                               '--block-size=M' prints sizes in units of\0A                               1,048,576 bytes; see SIZE format below\0A  -B, --ignore-backups       do not list implied entries ending with ~\0A  -c                         with -lt: sort by, and show, ctime (time of last\0A                               modification of file status information);\0A                               with -l: show ctime and sort by name;\0A                               otherwise: sort by ctime, newest first\0A\00"
@global_var_186b0.347 = constant [367 x i8] c"  -C                         list entries by columns\0A      --color[=WHEN]         colorize the output; WHEN can be 'always' (default\0A                               if omitted), 'auto', or 'never'; more info below\0A  -d, --directory            list directories themselves, not their contents\0A  -D, --dired                generate output designed for Emacs' dired mode\0A\00"
@global_var_18820.348 = constant [419 x i8] c"  -f                         do not sort, enable -aU, disable -ls --color\0A  -F, --classify             append indicator (one of */=>@|) to entries\0A      --file-type            likewise, except do not append '*'\0A      --format=WORD          across -x, commas -m, horizontal -x, long -l,\0A                               single-column -1, verbose -l, vertical -C\0A      --full-time            like -l --time-style=full-iso\0A\00"
@global_var_189c8.349 = constant [61 x i8] c"  -g                         like -l, but do not list owner\0A\00"
@global_var_18a08.350 = constant [245 x i8] c"      --group-directories-first\0A                             group directories before files;\0A                               can be augmented with a --sort option, but any\0A                               use of --sort=none (-U) disables grouping\0A\00"
@global_var_18b00.351 = constant [269 x i8] c"  -G, --no-group             in a long listing, don't print group names\0A  -h, --human-readable       with -l and/or -s, print human readable sizes\0A                               (e.g., 1K 234M 2G)\0A      --si                   likewise, but use powers of 1000 not 1024\0A\00"
@global_var_18c10.352 = constant [422 x i8] c"  -H, --dereference-command-line\0A                             follow symbolic links listed on the command line\0A      --dereference-command-line-symlink-to-dir\0A                             follow each command line symbolic link\0A                               that points to a directory\0A      --hide=PATTERN         do not list implied entries matching shell PATTERN\0A                               (overridden by -a or -A)\0A\00"
@global_var_18db8.353 = constant [145 x i8] c"      --hyperlink[=WHEN]     hyperlink file names; WHEN can be 'always'\0A                               (default if omitted), 'auto', or 'never'\0A\00"
@global_var_18e50.354 = constant [426 x i8] c"      --indicator-style=WORD  append indicator with style WORD to entry names:\0A                               none (default), slash (-p),\0A                               file-type (--file-type), classify (-F)\0A  -i, --inode                print the index number of each file\0A  -I, --ignore=PATTERN       do not list implied entries matching shell PATTERN\0A  -k, --kibibytes            default to 1024-byte blocks for disk usage\0A\00"
@global_var_19000.355 = constant [359 x i8] c"  -l                         use a long listing format\0A  -L, --dereference          when showing file information for a symbolic\0A                               link, show information for the file the link\0A                               references rather than for the link itself\0A  -m                         fill width with a comma separated list of entries\0A\00"
@global_var_19168.356 = constant [303 x i8] c"  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs\0A  -N, --literal              print entry names without quoting\0A  -o                         like -l, but do not list group information\0A  -p, --indicator-style=slash\0A                             append / indicator to directories\0A\00"
@global_var_19298.357 = constant [507 x i8] c"  -q, --hide-control-chars   print ? instead of nongraphic characters\0A      --show-control-chars   show nongraphic characters as-is (the default,\0A                               unless program is 'ls' and output is a terminal)\0A  -Q, --quote-name           enclose entry names in double quotes\0A      --quoting-style=WORD   use quoting style WORD for entry names:\0A                               literal, locale, shell, shell-always,\0A                               shell-escape, shell-escape-always, c, escape\0A\00"
@global_var_19498.358 = constant [197 x i8] c"  -r, --reverse              reverse order while sorting\0A  -R, --recursive            list subdirectories recursively\0A  -s, --size                 print the allocated size of each file, in blocks\0A\00"
@global_var_19560.359 = constant [519 x i8] c"  -S                         sort by file size, largest first\0A      --sort=WORD            sort by WORD instead of name: none (-U), size (-S),\0A                               time (-t), version (-v), extension (-X)\0A      --time=WORD            with -l, show time as WORD instead of default\0A                               modification time: atime or access or use (-u);\0A                               ctime or status (-c); also use specified time\0A                               as sort key if --sort=time (newest first)\0A\00"
@global_var_19768.360 = constant [531 x i8] c"      --time-style=STYLE     with -l, show times using style STYLE:\0A                               full-iso, long-iso, iso, locale, or +FORMAT;\0A                               FORMAT is interpreted like in 'date'; if FORMAT\0A                               is FORMAT1<newline>FORMAT2, then FORMAT1 applies\0A                               to non-recent files and FORMAT2 to recent files;\0A                               if STYLE is prefixed with 'posix-', STYLE\0A                               takes effect only outside the POSIX locale\0A\00"
@global_var_19980.361 = constant [142 x i8] c"  -t                         sort by modification time, newest first\0A  -T, --tabsize=COLS         assume tab stops at each COLS instead of 8\0A\00"
@global_var_19a10.362 = constant [372 x i8] c"  -u                         with -lt: sort by, and show, access time;\0A                               with -l: show access time and sort by name;\0A                               otherwise: sort by access time, newest first\0A  -U                         do not sort; list entries in directory order\0A  -v                         natural sort of (version) numbers within text\0A\00"
@global_var_19b88.363 = constant [363 x i8] c"  -w, --width=COLS           set output width to COLS.  0 means no limit\0A  -x                         list entries by lines instead of by columns\0A  -X                         sort alphabetically by entry extension\0A  -Z, --context              print any security context of each file\0A  -1                         list one file per line.  Avoid '\5Cn' with -q or -b\0A\00"
@global_var_19cf8.364 = constant [45 x i8] c"      --help     display this help and exit\0A\00"
@global_var_19d28.365 = constant [54 x i8] c"      --version  output version information and exit\0A\00"
@global_var_19d60.366 = constant [153 x i8] c"\0AThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\0AUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\0A\00"
@global_var_19e00.367 = constant [286 x i8] c"\0AUsing color to distinguish file types is disabled both by default and\0Awith --color=never.  With --color=auto, ls emits color codes only when\0Astandard output is connected to a terminal.  The LS_COLORS environment\0Avariable can change the settings.  Use the dircolors command to set it.\0A\00"
@global_var_19f20.368 = constant [152 x i8] c"\0AExit status:\0A 0  if OK,\0A 1  if minor problems (e.g., cannot access subdirectory),\0A 2  if serious trouble (e.g., cannot access command-line argument).\0A\00"
@global_var_17d56.374 = constant [10 x i8] c"sha512sum\00"
@global_var_17d33.376 = constant [15 x i8] c"sha2 utilities\00"
@global_var_17d60.377 = constant [23 x i8] c"\0A%s online help: <%s>\0A\00"
@global_var_19fb8.378 = constant [39 x i8] c"http://www.gnu.org/software/coreutils/\00"
@global_var_17d85.379 = constant [4 x i8] c"en_\00"
@global_var_1a028.380 = constant [31 x i8] c"Full documentation at: <%s%s>\0A\00"
@global_var_17d1d.381 = constant [12 x i8] c" invocation\00"
@global_var_1a048.382 = constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00"
@global_var_19fe0.383 = constant [69 x i8] c"Report %s translation bugs to <http://translationproject.org/team/>\0A\00"
@global_var_1a2c0.385 = constant [29 x i8] c"ambiguous argument %s for %s\00"
@global_var_1a2a5.386 = constant [27 x i8] c"invalid argument %s for %s\00"
@global_var_1a2dd.387 = constant [21 x i8] c"Valid arguments are:\00"
@global_var_1a2f2.388 = constant [8 x i8] c"\0A  - %s\00"
@global_var_1a2fa.389 = constant [5 x i8] c", %s\00"
@global_var_1a2ff.393 = constant [12 x i8] c"write error\00"
@global_var_1a30b.394 = constant [24 x i8] c"system.posix_acl_access\00"
@global_var_1a323.395 = constant [25 x i8] c"system.posix_acl_default\00"
@global_var_1a33c.396 = constant [3 x i8] c"..\00"
@global_var_1a341.399 = constant [6 x i8] c"POSIX\00"
@global_var_1a3c0.400 = constant i64 4575657221408423936
@global_var_1a347.406 = constant [24 x i8] c"# entries:         %lu\0A\00"
@global_var_1a35f.407 = constant [24 x i8] c"# buckets:         %lu\0A\00"
@global_var_1a390.409 = constant [33 x i8] c"# buckets used:    %lu (%.2f%%)\0A\00"
@global_var_1a377.410 = constant [24 x i8] c"max bucket length: %lu\0A\00"
@global_var_287.414 = global i64 -5815294081556377950
@global_var_1a406.416 = constant [6 x i8] c"%.1Lf\00"
@global_var_1a400.418 = constant [6 x i8] c"%.0Lf\00"
@global_var_1a440.419 = constant i64 6504693559710272256
@global_var_288.420 = global i64 3580163709390317198
@global_var_1a438.422 = constant i64 618475290800
@global_var_18010.423 = constant [15 x i8] c"human-readable\00"
@global_var_18090.424 = constant [3 x i8] c"si\00"
@global_var_21f9b0.425 = global [2 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_18010.423, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_18090.424, i32 0, i32 0)]
@global_var_1a426.426 = constant [18 x i8] c"eEgGkKmMpPtTyYzZ0\00"
@global_var_1a416.427 = constant [16 x i8] c"POSIXLY_CORRECT\00"
@global_var_1a40c.428 = constant [10 x i8] c"BLOCKSIZE\00"
@global_var_1a47c.434 = constant i64 -171502339133196
@global_var_1a6a0.442 = constant [8 x i8] c"/.libs/\00"
@global_var_1a6a8.443 = constant [4 x i8] c"lt-\00"
@global_var_220280.444 = local_unnamed_addr global i64 0
@global_var_2202a8.445 = local_unnamed_addr global i64 0
@global_var_1a668.446 = constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00"
@global_var_1a6bb.447 = constant i64 7810763971880812578
@global_var_1a6b4.449 = constant i64 2450151303320766369
@global_var_1a6b8.450 = constant i64 8286728868048449441
@global_var_1a6ac.451 = constant i64 43207379597689058
@global_var_1a6b0.452 = constant i64 28437360728965346
@global_var_1a720.453 = constant i64 -146424025085830
@global_var_220240.458 = local_unnamed_addr global i64* bitcast (i128* @global_var_220250.457 to i64*)
@global_var_221420.460 = global i64 0
@global_var_220258.462 = global i64* @global_var_221420.460
@global_var_220248.463 = local_unnamed_addr global i64 0
@global_var_221550.464 = local_unnamed_addr global i64 0
@global_var_220200.467 = global i64 8
@global_var_1ab88.468 = constant [12 x i8] c"%s (%s) %s\0A\00"
@global_var_1ab9b.469 = constant [4 x i8] c"(C)\00"
@global_var_1aec0.470 = constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00"
@global_var_7e1.471 = global i64 0
@global_var_1ac28.472 = constant [203 x i8] c"\0ALicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\0A\00"
@global_var_1ae80.473 = constant i64 -121354300976137
@global_var_1ab94.474 = constant [7 x i8] c"%s %s\0A\00"
@global_var_1ae00.484 = constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00"
@global_var_1abe2.485 = constant [21 x i8] c"\0AReport bugs to: %s\0A\00"
@global_var_1abf7.486 = constant [22 x i8] c"bug-coreutils@gnu.org\00"
@global_var_1ac0d.487 = constant [20 x i8] c"%s home page: <%s>\0A\00"
@global_var_1ae40.488 = constant [64 x i8] c"General help using GNU software: <http://www.gnu.org/gethelp/>\0A\00"
@global_var_1aeef.489 = constant [17 x i8] c"memory exhausted\00"
@global_var_1af38.490 = constant i64 -109723529536194
@global_var_1af10.491 = constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00"
@global_var_1b010.492 = constant [9 x i8] c"xstrtoul\00"
@global_var_1af00.493 = constant [14 x i8] c"lib/xstrtol.c\00"
@global_var_1b034.494 = constant [29 x i8] c"%s%s argument '%s' too large\00"
@global_var_1b051.495 = constant [3 x i8] c"--\00"
@global_var_1b058.496 = constant [37 x i8] c"invalid suffix in %s%s argument '%s'\00"
@global_var_1b019.497 = constant [27 x i8] c"invalid %s%s argument '%s'\00"
@global_var_1b080.498 = constant i64 -105840879099706
@global_var_1b158.499 = constant [11 x i8] c"xstrtoumax\00"
@global_var_1ab90.500 = constant [4 x i8] c"%s\0A\00"
@global_var_fe0.501 = global i64 4
@global_var_1b163.503 = constant [6 x i8] c"ASCII\00"
@global_var_1b183.504 = constant [16 x i8] c"CHARSETALIASDIR\00"
@global_var_1b169.505 = constant [26 x i8] c"/usr/lib/x86_64-linux-gnu\00"
@global_var_1b193.507 = constant [10 x i8] c"%50s %50s\00"
@global_var_21eff0.508 = global i64 22864
@global_var_21eff8.509 = global i64 22800
@0 = external global i32
@global_var_221388.159 = external local_unnamed_addr global i8*
@global_var_17c4a.6 = external constant i8*
@global_var_221558.502 = external local_unnamed_addr global i8*
@global_var_2201f8.9 = local_unnamed_addr global i32 1
@global_var_221210.10 = local_unnamed_addr global i32 0
@global_var_2212b8.11 = local_unnamed_addr global i8 0
@global_var_2201e0.13 = local_unnamed_addr global i32 1
@global_var_221378.15 = local_unnamed_addr global i32 0
@global_var_2212d8.16 = local_unnamed_addr global i8 0
@global_var_221338.17 = local_unnamed_addr global i32 0
@global_var_221334.19 = local_unnamed_addr global i32 0
@global_var_221330.20 = local_unnamed_addr global i32 0
@global_var_22132f.21 = local_unnamed_addr global i8 0
@global_var_22132d.22 = local_unnamed_addr global i8 0
@global_var_22132c.23 = local_unnamed_addr global i8 0
@global_var_221314.24 = local_unnamed_addr global i32 0
@global_var_2212fc.25 = local_unnamed_addr global i8 0
@global_var_2212f8.26 = local_unnamed_addr global i32 0
@global_var_2212f6.27 = local_unnamed_addr global i8 0
@global_var_2212f5.28 = local_unnamed_addr global i8 0
@global_var_2212f0.29 = local_unnamed_addr global i32 0
@global_var_221365.32 = local_unnamed_addr global i8 0
@global_var_2212b0.46 = external local_unnamed_addr global i128
@global_var_2212c0.48 = external local_unnamed_addr global i128
@global_var_22131c.54 = local_unnamed_addr global i32 0
@global_var_220021.57 = local_unnamed_addr global i8 1
@global_var_221312.58 = local_unnamed_addr global i8 0
@global_var_221311.59 = local_unnamed_addr global i8 0
@global_var_2202a0.61 = local_unnamed_addr global i32 0
@global_var_220020.62 = local_unnamed_addr global i8 1
@global_var_221318.63 = local_unnamed_addr global i8 0
@global_var_220288.71 = local_unnamed_addr global %_IO_FILE* null
@global_var_2212f4.110 = local_unnamed_addr global i32 0
@global_var_22132e.125 = local_unnamed_addr global i8 0
@global_var_2202e0.316 = external local_unnamed_addr global i128
@global_var_221200.127 = external local_unnamed_addr global i128
@global_var_2213a8.128 = local_unnamed_addr global i8 0
@global_var_2212d0.129 = local_unnamed_addr global i32 0
@global_var_220290.133 = local_unnamed_addr global i32 0
@global_var_2212a1.139 = local_unnamed_addr global i8 0
@global_var_2212a0.140 = local_unnamed_addr global i8 0
@global_var_2213b0.142 = external local_unnamed_addr global i128
@global_var_221310.146 = local_unnamed_addr global i8 0
@1 = internal constant [2 x i8] c".\00"
@global_var_1a33d.149 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i64 0, i64 0)
@global_var_221214.154 = local_unnamed_addr global i32 0
@global_var_221218.155 = local_unnamed_addr global i32 0
@global_var_400.157 = global i32 843
@global_var_220fe0.158 = external global i8*
@global_var_104c.170 = global i1 true
@global_var_221390.172 = local_unnamed_addr global i8 0
@global_var_2212fd.173 = local_unnamed_addr global i8 0
@global_var_2202c0.221 = local_unnamed_addr global %_IO_FILE* null
@global_var_402.231 = global i32 1179648
@global_var_638.234 = global i32 0
@global_var_66c.236 = global i32 0
@global_var_2202c8.237 = local_unnamed_addr global i8 0
@global_var_3ff.239 = global i32 215808
@global_var_600.242 = global i32 0
@global_var_2203c8.243 = local_unnamed_addr global i8 0
@global_var_2203e0.245 = global i32 0
@global_var_2213a9.250 = local_unnamed_addr global i32 0
@global_var_221364.251 = local_unnamed_addr global i8 0
@global_var_221360.252 = local_unnamed_addr global i32 0
@global_var_22135c.253 = local_unnamed_addr global i32 0
@global_var_221358.254 = local_unnamed_addr global i32 0
@global_var_221350.255 = local_unnamed_addr global i32 0
@global_var_22134c.256 = local_unnamed_addr global i32 0
@global_var_221348.257 = local_unnamed_addr global i32 0
@global_var_221354.258 = local_unnamed_addr global i32 0
@global_var_221344.259 = local_unnamed_addr global i32 0
@global_var_221340.260 = external local_unnamed_addr global i8*
@global_var_22133c.261 = local_unnamed_addr global i32 0
@global_var_220300.264 = global i32 0
@global_var_ee5.268 = global i32 1811943168
@2 = internal constant [2 x i8] c"?\00"
@global_var_17c2e.271 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0)
@global_var_221215.272 = global i32 0
@global_var_16a64.273 = constant i32* inttoptr (i64 4294967310 to i32*)
@global_var_221220.274 = global %_TYPEDEF_sigset_t* null
@global_var_221230.276 = external local_unnamed_addr global i128
@global_var_221240.277 = external local_unnamed_addr global i128
@global_var_221250.278 = external local_unnamed_addr global i128
@global_var_221260.279 = external local_unnamed_addr global i128
@global_var_221270.280 = external local_unnamed_addr global i128
@global_var_221280.281 = external local_unnamed_addr global i128
@global_var_221290.282 = external local_unnamed_addr global i128
@global_var_1fff.288 = global i1 false
@3 = internal constant [2 x i8] c"/\00"
@4 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0)
@5 = internal constant [20 x i8] c"\1B]8;;file://%s%s%s\07\00"
@global_var_17c30.292 = constant i8* getelementptr inbounds ([20 x i8], [20 x i8]* @5, i64 0, i64 0)
@global_var_800.296 = global i32 0
@global_var_2a8.297 = global i1 false
@global_var_e3b.301 = global i32 8704
@global_var_220014.303 = local_unnamed_addr global i32 -1
@global_var_fff.310 = global i32 370688
@global_var_2038.312 = global i1 false
@global_var_221208.317 = external local_unnamed_addr global i8*
@global_var_378.320 = global i1 true
@global_var_2202e8.326 = local_unnamed_addr global i32 0
@global_var_220010.333 = local_unnamed_addr global i8 1
@6 = internal constant [2 x i8] c"[\00"
@global_var_1813d.371 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i64 0, i64 0)
@global_var_401.384 = global i1 true
@global_var_1000.390 = global i1 false
@global_var_2213d8.391 = local_unnamed_addr global i32 0
@global_var_2213d0.392 = local_unnamed_addr global i8 0
@global_var_3e8.397 = external global i128
@7 = internal constant [2 x i8] c"C\00"
@global_var_1a33f.398 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0)
@global_var_286.421 = global i32* inttoptr (i64 5470985092040925945 to i32*)
@global_var_2213f8.429 = local_unnamed_addr global i32* null
@global_var_2213f0.430 = local_unnamed_addr global i32 0
@global_var_2213e8.431 = local_unnamed_addr global i32* null
@global_var_2213e0.432 = local_unnamed_addr global i32 0
@global_var_4d8.433 = global i1 true
@8 = internal constant [2 x i8] c"'\00"
@global_var_1b032.448 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0)
@9 = internal constant [2 x i8] c"`\00"
@global_var_220250.457 = external global i128
@global_var_220238.459 = local_unnamed_addr global i32 1
@global_var_221520.461 = external global i128
@global_var_221530.465 = external local_unnamed_addr global i128
@global_var_221540.466 = external local_unnamed_addr global i128
@10 = internal constant [2 x i8] c"r\00"
@11 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0)
@global_var_17f4d.291 = constant [2 x i8] c"/\00"
@global_var_17f6a.506 = constant [2 x i8] c"r\00"

define i64 @_init() local_unnamed_addr {
dec_label_pc_3758:
  %v0_375c = load i64, i64* inttoptr (i64 2228192 to i64*), align 32
  %v1_3763 = icmp eq i64 %v0_375c, 0
  br i1 %v1_3763, label %dec_label_pc_376a, label %dec_label_pc_3768

dec_label_pc_3768:                                ; preds = %dec_label_pc_3758
  call void @__gmon_start__()
  br label %dec_label_pc_376a

dec_label_pc_376a:                                ; preds = %dec_label_pc_3768, %dec_label_pc_3758
  %v0_376e = phi i64 [ ptrtoint (i32* @0 to i64), %dec_label_pc_3768 ], [ 0, %dec_label_pc_3758 ]
  ret i64 %v0_376e
}

define i32** @function_3780() local_unnamed_addr {
dec_label_pc_3780:
  %v0_3780 = call i32** @__ctype_toupper_loc()
  ret i32** %v0_3780
}

define i32 @function_3790(%_IO_FILE* %arg1) local_unnamed_addr {
dec_label_pc_3790:
  %tmp234 = ptrtoint %_IO_FILE* %arg1 to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3790 = call i32 @__uflow(%_IO_FILE* %arg1)
  ret i32 %v2_3790
}

define i8* @function_37a0(i8* %name) local_unnamed_addr {
dec_label_pc_37a0:
  %tmp234 = ptrtoint i8* %name to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_37a0 = call i8* @getenv(i8* %name)
  ret i8* %v2_37a0
}

define i32 @function_37b0(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset) local_unnamed_addr {
dec_label_pc_37b0:
  %tmp234 = ptrtoint %_TYPEDEF_sigset_t* %oset to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint %_TYPEDEF_sigset_t* %set to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = sext i32 %how to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_37b0 = call i32 @sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset)
  ret i32 %v6_37b0
}

define i32 @function_37c0(i8* %s, i32 %n, i32 %flag, i32 %slen, i8* %format, ...) local_unnamed_addr {
dec_label_pc_37c0:
  %tmp234 = ptrtoint i8* %format to i64
  store i64 %tmp234, i64* @r8, align 8
  %tmp235 = sext i32 %slen to i64
  store i64 %tmp235, i64* @rcx, align 8
  %tmp236 = sext i32 %flag to i64
  store i64 %tmp236, i64* @rdx, align 8
  %tmp237 = sext i32 %n to i64
  store i64 %tmp237, i64* @rsi, align 8
  %tmp238 = ptrtoint i8* %s to i64
  store i64 %tmp238, i64* @rdi, align 8
  %v10_37c0 = call i32 (i8*, i32, i32, i32, i8*, ...) @__snprintf_chk(i8* %s, i32 %n, i32 %flag, i32 %slen, i8* %format)
  ret i32 %v10_37c0
}

define i32 @function_37d0(i32 %sig) local_unnamed_addr {
dec_label_pc_37d0:
  %tmp234 = sext i32 %sig to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_37d0 = call i32 @raise(i32 %sig)
  ret i32 %v2_37d0
}

define void @function_37e0() local_unnamed_addr {
dec_label_pc_37e0:
  call void @abort()
  ret void
}

define i32* @function_37f0() local_unnamed_addr {
dec_label_pc_37f0:
  %v0_37f0 = call i32* @__errno_location()
  ret i32* %v0_37f0
}

define i32 @function_3800(i8* %s1, i8* %s2, i32 %n) local_unnamed_addr {
dec_label_pc_3800:
  %tmp234 = sext i32 %n to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i8* %s2 to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i8* %s1 to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3800 = call i32 @strncmp(i8* %s1, i8* %s2, i32 %n)
  ret i32 %v6_3800
}

define %tm* @function_3810(i32* %timer, %tm* %tp) local_unnamed_addr {
dec_label_pc_3810:
  %tmp234 = ptrtoint %tm* %tp to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i32* %timer to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3810 = call %tm* @localtime_r(i32* %timer, %tm* %tp)
  ret %tm* %v4_3810
}

define void @function_3820(i32 %status) local_unnamed_addr {
dec_label_pc_3820:
  %tmp234 = sext i32 %status to i64
  store i64 %tmp234, i64* @rdi, align 8
  call void @_exit(i32 %status)
  ret void
}

define i8* @function_3830(i8* %dest, i8* %src) local_unnamed_addr {
dec_label_pc_3830:
  %tmp234 = ptrtoint i8* %src to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i8* %dest to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3830 = call i8* @strcpy(i8* %dest, i8* %src)
  ret i8* %v4_3830
}

define i32 @function_3840(%_IO_FILE* %fp) local_unnamed_addr {
dec_label_pc_3840:
  %tmp234 = ptrtoint %_IO_FILE* %fp to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3840 = call i32 @__fpending(%_IO_FILE* %fp)
  ret i32 %v2_3840
}

define i32 @function_3850(i32 %fd) local_unnamed_addr {
dec_label_pc_3850:
  %tmp234 = sext i32 %fd to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3850 = call i32 @isatty(i32 %fd)
  ret i32 %v2_3850
}

define i32 @function_3860(i32 %sig, %sigaction* %act, %sigaction* %oact) local_unnamed_addr {
dec_label_pc_3860:
  %tmp234 = ptrtoint %sigaction* %oact to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint %sigaction* %act to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = sext i32 %sig to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3860 = call i32 @sigaction(i32 %sig, %sigaction* %act, %sigaction* %oact)
  ret i32 %v6_3860
}

define i32 @function_3870(i32 %wc) local_unnamed_addr {
dec_label_pc_3870:
  %tmp234 = sext i32 %wc to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3870 = call i32 @iswcntrl(i32 %wc)
  ret i32 %v2_3870
}

define i32 @function_3880(i32* %s, i32 %n) local_unnamed_addr {
dec_label_pc_3880:
  %tmp234 = sext i32 %n to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i32* %s to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3880 = call i32 @wcswidth(i32* %s, i32 %n)
  ret i32 %v4_3880
}

define %lconv* @function_3890() local_unnamed_addr {
dec_label_pc_3890:
  %v0_3890 = call %lconv* @localeconv()
  ret %lconv* %v0_3890
}

define i32 @function_38a0(i32* %pwcs, i8* %s, i32 %n) local_unnamed_addr {
dec_label_pc_38a0:
  %tmp234 = sext i32 %n to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i8* %s to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i32* %pwcs to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_38a0 = call i32 @mbstowcs(i32* %pwcs, i8* %s, i32 %n)
  ret i32 %v6_38a0
}

define i32 @function_38b0(i8* %path, i8* %buf, i32 %len) local_unnamed_addr {
dec_label_pc_38b0:
  %tmp234 = sext i32 %len to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i8* %buf to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i8* %path to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_38b0 = call i32 @readlink(i8* %path, i8* %buf, i32 %len)
  ret i32 %v6_38b0
}

define i32 @function_38c0(i32 %clock_id, %timespec* %tp) local_unnamed_addr {
dec_label_pc_38c0:
  %tmp234 = ptrtoint %timespec* %tp to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = sext i32 %clock_id to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_38c0 = call i32 @clock_gettime(i32 %clock_id, %timespec* %tp)
  ret i32 %v4_38c0
}

define i32 @function_38d0(i8* %name, i8* %value, i32 %replace) local_unnamed_addr {
dec_label_pc_38d0:
  %tmp234 = sext i32 %replace to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i8* %value to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i8* %name to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_38d0 = call i32 @setenv(i8* %name, i8* %value, i32 %replace)
  ret i32 %v6_38d0
}

define i8* @function_38e0(i8* %domainname) local_unnamed_addr {
dec_label_pc_38e0:
  %tmp234 = ptrtoint i8* %domainname to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_38e0 = call i8* @textdomain(i8* %domainname)
  ret i8* %v2_38e0
}

define i32 @function_38f0(%_IO_FILE* %stream) local_unnamed_addr {
dec_label_pc_38f0:
  %tmp234 = ptrtoint %_IO_FILE* %stream to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_38f0 = call i32 @fclose(%_IO_FILE* %stream)
  ret i32 %v2_38f0
}

define %__dirstream* @function_3900(i8* %name) local_unnamed_addr {
dec_label_pc_3900:
  %tmp234 = ptrtoint i8* %name to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3900 = call %__dirstream* @opendir(i8* %name)
  ret %__dirstream* %v2_3900
}

define %passwd* @function_3910(i32 %uid) local_unnamed_addr {
dec_label_pc_3910:
  %tmp234 = sext i32 %uid to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3910 = call %passwd* @getpwuid(i32 %uid)
  ret %passwd* %v2_3910
}

define i8* @function_3920(i8* %domainname, i8* %dirname) local_unnamed_addr {
dec_label_pc_3920:
  %tmp234 = ptrtoint i8* %dirname to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i8* %domainname to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3920 = call i8* @bindtextdomain(i8* %domainname, i8* %dirname)
  ret i8* %v4_3920
}

define i8* @function_3930(i8* %domainname, i8* %msgid, i32 %category) local_unnamed_addr {
dec_label_pc_3930:
  %tmp234 = sext i32 %category to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i8* %msgid to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i8* %domainname to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3930 = call i8* @dcgettext(i8* %domainname, i8* %msgid, i32 %category)
  ret i8* %v6_3930
}

define i32 @function_3940() local_unnamed_addr {
dec_label_pc_3940:
  %v0_3940 = call i32 @__ctype_get_mb_cur_max()
  ret i32 %v0_3940
}

define i32 @function_3950(i8* %s) local_unnamed_addr {
dec_label_pc_3950:
  %tmp234 = ptrtoint i8* %s to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3950 = call i32 @strlen(i8* %s)
  ret i32 %v2_3950
}

define i32 @function_3960(i32 %ver, i8* %filename, %stat* %stat_buf) local_unnamed_addr {
dec_label_pc_3960:
  %tmp234 = ptrtoint %stat* %stat_buf to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i8* %filename to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = sext i32 %ver to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3960 = call i32 @__lxstat(i32 %ver, i8* %filename, %stat* %stat_buf)
  ret i32 %v6_3960
}

define void @function_3970() local_unnamed_addr {
dec_label_pc_3970:
  call void @__stack_chk_fail()
  ret void
}

define i32 @function_3980(i32 %argc, i8** %argv, i8* %shortopts, %option* %longopts, i32* %longind) local_unnamed_addr {
dec_label_pc_3980:
  %tmp234 = ptrtoint i32* %longind to i64
  store i64 %tmp234, i64* @r8, align 8
  %tmp235 = ptrtoint %option* %longopts to i64
  store i64 %tmp235, i64* @rcx, align 8
  %tmp236 = ptrtoint i8* %shortopts to i64
  store i64 %tmp236, i64* @rdx, align 8
  %tmp237 = ptrtoint i8** %argv to i64
  store i64 %tmp237, i64* @rsi, align 8
  %tmp238 = sext i32 %argc to i64
  store i64 %tmp238, i64* @rdi, align 8
  %v10_3980 = call i32 @getopt_long(i32 %argc, i8** %argv, i8* %shortopts, %option* %longopts, i32* %longind)
  ret i32 %v10_3980
}

define i32 @function_3990(i32* %pwc, i8* %s, i32 %n, %_TYPEDEF___mbstate_t* %p) local_unnamed_addr {
dec_label_pc_3990:
  %tmp234 = ptrtoint %_TYPEDEF___mbstate_t* %p to i64
  store i64 %tmp234, i64* @rcx, align 8
  %tmp235 = sext i32 %n to i64
  store i64 %tmp235, i64* @rdx, align 8
  %tmp236 = ptrtoint i8* %s to i64
  store i64 %tmp236, i64* @rsi, align 8
  %tmp237 = ptrtoint i32* %pwc to i64
  store i64 %tmp237, i64* @rdi, align 8
  %v8_3990 = call i32 @mbrtowc(i32* %pwc, i8* %s, i32 %n, %_TYPEDEF___mbstate_t* %p)
  ret i32 %v8_3990
}

define i8* @function_39a0(i8* %s, i32 %c) local_unnamed_addr {
dec_label_pc_39a0:
  %tmp234 = sext i32 %c to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i8* %s to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_39a0 = call i8* @strchr(i8* %s, i32 %c)
  ret i8* %v4_39a0
}

define %group* @function_39b0(i32 %gid) local_unnamed_addr {
dec_label_pc_39b0:
  %tmp234 = sext i32 %gid to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_39b0 = call %group* @getgrgid(i32 %gid)
  ret %group* %v2_39b0
}

define i32 @function_39c0(i8* %s, i32 %maxlen, i8* %format, ...) local_unnamed_addr {
dec_label_pc_39c0:
  %tmp234 = ptrtoint i8* %format to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = sext i32 %maxlen to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i8* %s to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_39c0 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %s, i32 %maxlen, i8* %format)
  ret i32 %v6_39c0
}

define i32 @function_39d0(%_IO_FILE* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_39d0:
  %tmp234 = sext i32 %arg2 to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint %_IO_FILE* %arg1 to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_39d0 = call i32 @__overflow(%_IO_FILE* %arg1, i32 %arg2)
  ret i32 %v4_39d0
}

define i8* @function_39e0(i8* %s, i32 %c) local_unnamed_addr {
dec_label_pc_39e0:
  %tmp234 = sext i32 %c to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i8* %s to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_39e0 = call i8* @strrchr(i8* %s, i32 %c)
  ret i8* %v4_39e0
}

define i64 @function_39f0() local_unnamed_addr {
dec_label_pc_39f0:
  %v0_39f0 = call i64 @fgetfilecon()
  ret i64 %v0_39f0
}

define %tm* @function_3a00(i32* %timer, %tm* %tp) local_unnamed_addr {
dec_label_pc_3a00:
  %tmp234 = ptrtoint %tm* %tp to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i32* %timer to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3a00 = call %tm* @gmtime_r(i32* %timer, %tm* %tp)
  ret %tm* %v4_3a00
}

define i32 @function_3a10(i32 %fd, i32 %offset, i32 %whence) local_unnamed_addr {
dec_label_pc_3a10:
  %tmp234 = sext i32 %whence to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = sext i32 %offset to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = sext i32 %fd to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3a10 = call i32 @lseek(i32 %fd, i32 %offset, i32 %whence)
  ret i32 %v6_3a10
}

define i32 @function_3a20(%timeval* %tv, %timezone* %tz) local_unnamed_addr {
dec_label_pc_3a20:
  %tmp234 = ptrtoint %timezone* %tz to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint %timeval* %tv to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3a20 = call i32 @gettimeofday(%timeval* %tv, %timezone* %tz)
  ret i32 %v4_3a20
}

define void @function_3a30(i8* %assertion, i8* %file, i32 %line, i8* %function) local_unnamed_addr {
dec_label_pc_3a30:
  %tmp234 = ptrtoint i8* %function to i64
  store i64 %tmp234, i64* @rcx, align 8
  %tmp235 = sext i32 %line to i64
  store i64 %tmp235, i64* @rdx, align 8
  %tmp236 = ptrtoint i8* %file to i64
  store i64 %tmp236, i64* @rsi, align 8
  %tmp237 = ptrtoint i8* %assertion to i64
  store i64 %tmp237, i64* @rdi, align 8
  call void @__assert_fail(i8* %assertion, i8* %file, i32 %line, i8* %function)
  ret void
}

define i32 @function_3a40(i8* %nptr, i8** %endptr, i32 %base, i32 %group) local_unnamed_addr {
dec_label_pc_3a40:
  %tmp234 = sext i32 %group to i64
  store i64 %tmp234, i64* @rcx, align 8
  %tmp235 = sext i32 %base to i64
  store i64 %tmp235, i64* @rdx, align 8
  %tmp236 = ptrtoint i8** %endptr to i64
  store i64 %tmp236, i64* @rsi, align 8
  %tmp237 = ptrtoint i8* %nptr to i64
  store i64 %tmp237, i64* @rdi, align 8
  %v8_3a40 = call i32 @__strtoul_internal(i8* %nptr, i8** %endptr, i32 %base, i32 %group)
  ret i32 %v8_3a40
}

define i32 @function_3a50(i8* %pattern, i8* %name, i32 %flags) local_unnamed_addr {
dec_label_pc_3a50:
  %tmp234 = sext i32 %flags to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i8* %name to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i8* %pattern to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3a50 = call i32 @fnmatch(i8* %pattern, i8* %name, i32 %flags)
  ret i32 %v6_3a50
}

define i64* @function_3a60(i64* %s, i32 %c, i32 %n) local_unnamed_addr {
dec_label_pc_3a60:
  %tmp234 = sext i32 %n to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = sext i32 %c to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i64* %s to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3a60 = call i64* @memset(i64* %s, i32 %c, i32 %n)
  ret i64* %v6_3a60
}

define i32 @function_3a70(%_IO_FILE* %stream, i8* %format, ...) local_unnamed_addr {
dec_label_pc_3a70:
  %tmp234 = ptrtoint i8* %format to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint %_IO_FILE* %stream to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3a70 = call i32 (%_IO_FILE*, i8*, ...) @fscanf(%_IO_FILE* %stream, i8* %format)
  ret i32 %v4_3a70
}

define i32 @function_3a80(i32 %fd, i32 %request, ...) local_unnamed_addr {
dec_label_pc_3a80:
  %tmp234 = sext i32 %request to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = sext i32 %fd to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3a80 = call i32 (i32, i32, ...) @ioctl(i32 %fd, i32 %request)
  ret i32 %v4_3a80
}

define i8* @function_3a90(i8* %buf, i32 %size) local_unnamed_addr {
dec_label_pc_3a90:
  %tmp234 = sext i32 %size to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i8* %buf to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3a90 = call i8* @getcwd(i8* %buf, i32 %size)
  ret i8* %v4_3a90
}

define i32 @function_3aa0(i32 %fd) local_unnamed_addr {
dec_label_pc_3aa0:
  %tmp234 = sext i32 %fd to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3aa0 = call i32 @close(i32 %fd)
  ret i32 %v2_3aa0
}

define i32 @function_3ab0(i8* %s, i8* %accept) local_unnamed_addr {
dec_label_pc_3ab0:
  %tmp234 = ptrtoint i8* %accept to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i8* %s to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3ab0 = call i32 @strspn(i8* %s, i8* %accept)
  ret i32 %v4_3ab0
}

define i32 @function_3ac0(%__dirstream* %dirp) local_unnamed_addr {
dec_label_pc_3ac0:
  %tmp234 = ptrtoint %__dirstream* %dirp to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3ac0 = call i32 @closedir(%__dirstream* %dirp)
  ret i32 %v2_3ac0
}

define i32 @function_3ad0(i64* %s1, i64* %s2, i32 %n) local_unnamed_addr {
dec_label_pc_3ad0:
  %tmp234 = sext i32 %n to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i64* %s2 to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i64* %s1 to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3ad0 = call i32 @memcmp(i64* %s1, i64* %s2, i32 %n)
  ret i32 %v6_3ad0
}

define i32 @function_3ae0([1 x %__jmp_buf_tag] %env) local_unnamed_addr {
dec_label_pc_3ae0:
  %tmp234 = extractvalue [1 x %__jmp_buf_tag] %env, 0
  %tmp235 = extractvalue %__jmp_buf_tag %tmp234, 0
  %tmp236 = extractvalue [8 x i32] %tmp235, 0
  %tmp237 = sext i32 %tmp236 to i64
  store i64 %tmp237, i64* @rdi, align 8
  %v5_3ae0 = call i32 @_setjmp([1 x %__jmp_buf_tag] %env)
  ret i32 %v5_3ae0
}

define i32 @function_3af0(i8* %s, %_IO_FILE* %stream) local_unnamed_addr {
dec_label_pc_3af0:
  %tmp234 = ptrtoint %_IO_FILE* %stream to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i8* %s to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3af0 = call i32 @fputs_unlocked(i8* %s, %_IO_FILE* %stream)
  ret i32 %v4_3af0
}

define i64* @function_3b00(i32 %nmemb, i32 %size) local_unnamed_addr {
dec_label_pc_3b00:
  %tmp234 = sext i32 %size to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = sext i32 %nmemb to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3b00 = call i64* @calloc(i32 %nmemb, i32 %size)
  ret i64* %v4_3b00
}

define i64 @function_3b10() local_unnamed_addr {
dec_label_pc_3b10:
  %v0_3b10 = call i64 @lgetfilecon()
  ret i64 %v0_3b10
}

define i32 @function_3b20(i8* %s1, i8* %s2) local_unnamed_addr {
dec_label_pc_3b20:
  %tmp234 = ptrtoint i8* %s2 to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i8* %s1 to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3b20 = call i32 @strcmp(i8* %s1, i8* %s2)
  ret i32 %v4_3b20
}

define void (i32)* @function_3b30(i32 %sig, void (i32)* %handler) local_unnamed_addr {
dec_label_pc_3b30:
  %tmp234 = ptrtoint void (i32)* %handler to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = sext i32 %sig to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3b30 = call void (i32)* @signal(i32 %sig, void (i32)* %handler)
  ret void (i32)* %v4_3b30
}

define i32 @function_3b40(%__dirstream* %dirp) local_unnamed_addr {
dec_label_pc_3b40:
  %tmp234 = ptrtoint %__dirstream* %dirp to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3b40 = call i32 @dirfd(%__dirstream* %dirp)
  ret i32 %v2_3b40
}

define %passwd* @function_3b50(i8* %name) local_unnamed_addr {
dec_label_pc_3b50:
  %tmp234 = ptrtoint i8* %name to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3b50 = call %passwd* @getpwnam(i8* %name)
  ret %passwd* %v2_3b50
}

define i64* @function_3b60(i64* %dest, i64* %src, i32 %len, i32 %dstlen) local_unnamed_addr {
dec_label_pc_3b60:
  %tmp234 = sext i32 %dstlen to i64
  store i64 %tmp234, i64* @rcx, align 8
  %tmp235 = sext i32 %len to i64
  store i64 %tmp235, i64* @rdx, align 8
  %tmp236 = ptrtoint i64* %src to i64
  store i64 %tmp236, i64* @rsi, align 8
  %tmp237 = ptrtoint i64* %dest to i64
  store i64 %tmp237, i64* @rdi, align 8
  %v8_3b60 = call i64* @__memcpy_chk(i64* %dest, i64* %src, i32 %len, i32 %dstlen)
  ret i64* %v8_3b60
}

define i32 @function_3b70(%_TYPEDEF_sigset_t* %set) local_unnamed_addr {
dec_label_pc_3b70:
  %tmp234 = ptrtoint %_TYPEDEF_sigset_t* %set to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3b70 = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %set)
  ret i32 %v2_3b70
}

define i64* @function_3b80(i64* %dest, i64* %src, i32 %n) local_unnamed_addr {
dec_label_pc_3b80:
  %tmp234 = sext i32 %n to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i64* %src to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i64* %dest to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3b80 = call i64* @memcpy(i64* %dest, i64* %src, i32 %n)
  ret i64* %v6_3b80
}

define %group* @function_3b90(i8* %name) local_unnamed_addr {
dec_label_pc_3b90:
  %tmp234 = ptrtoint i8* %name to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3b90 = call %group* @getgrnam(i8* %name)
  ret %group* %v2_3b90
}

define i64 @function_3ba0() local_unnamed_addr {
dec_label_pc_3ba0:
  %v0_3ba0 = call i64 @getfilecon()
  ret i64 %v0_3ba0
}

define void @function_3bb0() local_unnamed_addr {
dec_label_pc_3bb0:
  call void @tzset()
  ret void
}

define i32 @function_3bc0(%_IO_FILE* %stream) local_unnamed_addr {
dec_label_pc_3bc0:
  %tmp234 = ptrtoint %_IO_FILE* %stream to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3bc0 = call i32 @fileno(%_IO_FILE* %stream)
  ret i32 %v2_3bc0
}

define i32 @function_3bd0(i32 %fd) local_unnamed_addr {
dec_label_pc_3bd0:
  %tmp234 = sext i32 %fd to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3bd0 = call i32 @tcgetpgrp(i32 %fd)
  ret i32 %v2_3bd0
}

define i32 @function_3be0(i32 %ver, i8* %filename, %stat* %stat_buf) local_unnamed_addr {
dec_label_pc_3be0:
  %tmp234 = ptrtoint %stat* %stat_buf to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i8* %filename to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = sext i32 %ver to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3be0 = call i32 @__xstat(i32 %ver, i8* %filename, %stat* %stat_buf)
  ret i32 %v6_3be0
}

define %dirent* @function_3bf0(%__dirstream* %dirp) local_unnamed_addr {
dec_label_pc_3bf0:
  %tmp234 = ptrtoint %__dirstream* %dirp to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3bf0 = call %dirent* @readdir(%__dirstream* %dirp)
  ret %dirent* %v2_3bf0
}

define i32 @function_3c00(i32 %c) local_unnamed_addr {
dec_label_pc_3c00:
  %tmp234 = sext i32 %c to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3c00 = call i32 @wcwidth(i32 %c)
  ret i32 %v2_3c00
}

define i32 @function_3c10(%_IO_FILE* %stream) local_unnamed_addr {
dec_label_pc_3c10:
  %tmp234 = ptrtoint %_IO_FILE* %stream to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3c10 = call i32 @fflush(%_IO_FILE* %stream)
  ret i32 %v2_3c10
}

define i8* @function_3c20(i32 %item) local_unnamed_addr {
dec_label_pc_3c20:
  %tmp234 = sext i32 %item to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3c20 = call i8* @nl_langinfo(i32 %item)
  ret i8* %v2_3c20
}

define i32 @function_3c30(i32 %c, %_IO_FILE* %stream) local_unnamed_addr {
dec_label_pc_3c30:
  %tmp234 = ptrtoint %_IO_FILE* %stream to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = sext i32 %c to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3c30 = call i32 @ungetc(i32 %c, %_IO_FILE* %stream)
  ret i32 %v4_3c30
}

define i32 @function_3c40(i32 %ver, i32 %fildes, %stat* %stat_buf) local_unnamed_addr {
dec_label_pc_3c40:
  %tmp234 = ptrtoint %stat* %stat_buf to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = sext i32 %fildes to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = sext i32 %ver to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3c40 = call i32 @__fxstat(i32 %ver, i32 %fildes, %stat* %stat_buf)
  ret i32 %v6_3c40
}

define i32 @function_3c50(i8* %s1, i8* %s2) local_unnamed_addr {
dec_label_pc_3c50:
  %tmp234 = ptrtoint i8* %s2 to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i8* %s1 to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3c50 = call i32 @strcoll(i8* %s1, i8* %s2)
  ret i32 %v4_3c50
}

define i32 @function_3c60(%tm* %tp) local_unnamed_addr {
dec_label_pc_3c60:
  %tmp234 = ptrtoint %tm* %tp to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3c60 = call i32 @mktime(%tm* %tp)
  ret i32 %v2_3c60
}

define i32 @function_3c70(%_IO_FILE* %fp) local_unnamed_addr {
dec_label_pc_3c70:
  %tmp234 = ptrtoint %_IO_FILE* %fp to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3c70 = call i32 @__freading(%_IO_FILE* %fp)
  ret i32 %v2_3c70
}

define i32 @function_3c80(i64* %ptr, i32 %size, i32 %n, %_IO_FILE* %stream) local_unnamed_addr {
dec_label_pc_3c80:
  %tmp234 = ptrtoint %_IO_FILE* %stream to i64
  store i64 %tmp234, i64* @rcx, align 8
  %tmp235 = sext i32 %n to i64
  store i64 %tmp235, i64* @rdx, align 8
  %tmp236 = sext i32 %size to i64
  store i64 %tmp236, i64* @rsi, align 8
  %tmp237 = ptrtoint i64* %ptr to i64
  store i64 %tmp237, i64* @rdi, align 8
  %v8_3c80 = call i32 @fwrite_unlocked(i64* %ptr, i32 %size, i32 %n, %_IO_FILE* %stream)
  ret i32 %v8_3c80
}

define i64* @function_3c90(i64* %ptr, i32 %size) local_unnamed_addr {
dec_label_pc_3c90:
  %tmp234 = sext i32 %size to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i64* %ptr to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3c90 = call i64* @realloc(i64* %ptr, i32 %size)
  ret i64* %v4_3c90
}

define i8* @function_3ca0(i8* %dest, i8* %src, i32 %n) local_unnamed_addr {
dec_label_pc_3ca0:
  %tmp234 = sext i32 %n to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i8* %src to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i8* %dest to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3ca0 = call i8* @stpncpy(i8* %dest, i8* %src, i32 %n)
  ret i8* %v6_3ca0
}

define %_IO_FILE* @function_3cb0(i32 %fd, i8* %modes) local_unnamed_addr {
dec_label_pc_3cb0:
  %tmp234 = ptrtoint i8* %modes to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = sext i32 %fd to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3cb0 = call %_IO_FILE* @fdopen(i32 %fd, i8* %modes)
  ret %_IO_FILE* %v4_3cb0
}

define i8* @function_3cc0(i32 %category, i8* %locale) local_unnamed_addr {
dec_label_pc_3cc0:
  %tmp234 = ptrtoint i8* %locale to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = sext i32 %category to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3cc0 = call i8* @setlocale(i32 %category, i8* %locale)
  ret i8* %v4_3cc0
}

define i32 @function_3cd0(i32 %flag, i8* %format, ...) local_unnamed_addr {
dec_label_pc_3cd0:
  %tmp234 = ptrtoint i8* %format to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = sext i32 %flag to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3cd0 = call i32 (i32, i8*, ...) @__printf_chk(i32 %flag, i8* %format)
  ret i32 %v4_3cd0
}

define i32 @function_3ce0(%tm* %tp) local_unnamed_addr {
dec_label_pc_3ce0:
  %tmp234 = ptrtoint %tm* %tp to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3ce0 = call i32 @timegm(%tm* %tp)
  ret i32 %v2_3ce0
}

define i32 @function_3cf0(i8* %s, i32 %maxsize, i8* %format, %tm* %tp) local_unnamed_addr {
dec_label_pc_3cf0:
  %tmp234 = ptrtoint %tm* %tp to i64
  store i64 %tmp234, i64* @rcx, align 8
  %tmp235 = ptrtoint i8* %format to i64
  store i64 %tmp235, i64* @rdx, align 8
  %tmp236 = sext i32 %maxsize to i64
  store i64 %tmp236, i64* @rsi, align 8
  %tmp237 = ptrtoint i8* %s to i64
  store i64 %tmp237, i64* @rdi, align 8
  %v8_3cf0 = call i32 @strftime(i8* %s, i32 %maxsize, i8* %format, %tm* %tp)
  ret i32 %v8_3cf0
}

define i64* @function_3d00(i64* %dest, i64* %src, i32 %n) local_unnamed_addr {
dec_label_pc_3d00:
  %tmp234 = sext i32 %n to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i64* %src to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i64* %dest to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3d00 = call i64* @mempcpy(i64* %dest, i64* %src, i32 %n)
  ret i64* %v6_3d00
}

define i64* @function_3d10(i64* %dest, i64* %src, i32 %n) local_unnamed_addr {
dec_label_pc_3d10:
  %tmp234 = sext i32 %n to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i64* %src to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i64* %dest to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3d10 = call i64* @memmove(i64* %dest, i64* %src, i32 %n)
  ret i64* %v6_3d10
}

define void @function_3d20(i32 %status, i32 %errnum, i8* %format, ...) local_unnamed_addr {
dec_label_pc_3d20:
  %tmp234 = ptrtoint i8* %format to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = sext i32 %errnum to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = sext i32 %status to i64
  store i64 %tmp236, i64* @rdi, align 8
  call void (i32, i32, i8*, ...) @error(i32 %status, i32 %errnum, i8* %format)
  ret void
}

define i32 @function_3d30(i8* %file, i32 %oflag, ...) local_unnamed_addr {
dec_label_pc_3d30:
  %tmp234 = sext i32 %oflag to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i8* %file to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3d30 = call i32 (i8*, i32, ...) @open(i8* %file, i32 %oflag)
  ret i32 %v4_3d30
}

define i32 @function_3d40(%_IO_FILE* %stream, i32 %off, i32 %whence) local_unnamed_addr {
dec_label_pc_3d40:
  %tmp234 = sext i32 %whence to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = sext i32 %off to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint %_IO_FILE* %stream to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3d40 = call i32 @fseeko(%_IO_FILE* %stream, i32 %off, i32 %whence)
  ret i32 %v6_3d40
}

define i32 @function_3d50(i8* %name) local_unnamed_addr {
dec_label_pc_3d50:
  %tmp234 = ptrtoint i8* %name to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3d50 = call i32 @unsetenv(i8* %name)
  ret i32 %v2_3d50
}

define i32 @function_3d60(i8* %nptr, i8** %endptr, i32 %base) local_unnamed_addr {
dec_label_pc_3d60:
  %tmp234 = sext i32 %base to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i8** %endptr to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i8* %nptr to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3d60 = call i32 @strtoul(i8* %nptr, i8** %endptr, i32 %base)
  ret i32 %v6_3d60
}

define i32 @function_3d70(void (i64*)* %func, i64* %arg, i64* %dso_handle) local_unnamed_addr {
dec_label_pc_3d70:
  %tmp234 = ptrtoint i64* %dso_handle to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i64* %arg to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint void (i64*)* %func to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3d70 = call i32 @__cxa_atexit(void (i64*)* %func, i64* %arg, i64* %dso_handle)
  ret i32 %v6_3d70
}

define i32 @function_3d80(i8* %s, i32* %pwcs, i32 %n) local_unnamed_addr {
dec_label_pc_3d80:
  %tmp234 = sext i32 %n to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = ptrtoint i32* %pwcs to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint i8* %s to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3d80 = call i32 @wcstombs(i8* %s, i32* %pwcs, i32 %n)
  ret i32 %v6_3d80
}

define i32 @function_3d90(i8* %path, i8* %name, i64* %value, i32 %size) local_unnamed_addr {
dec_label_pc_3d90:
  %tmp234 = sext i32 %size to i64
  store i64 %tmp234, i64* @rcx, align 8
  %tmp235 = ptrtoint i64* %value to i64
  store i64 %tmp235, i64* @rdx, align 8
  %tmp236 = ptrtoint i8* %name to i64
  store i64 %tmp236, i64* @rsi, align 8
  %tmp237 = ptrtoint i8* %path to i64
  store i64 %tmp237, i64* @rdi, align 8
  %v8_3d90 = call i32 @getxattr(i8* %path, i8* %name, i64* %value, i32 %size)
  ret i32 %v8_3d90
}

define i64 @function_3da0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_3da0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_3da0 = call i64 @freecon()
  ret i64 %v0_3da0
}

define i32 @function_3db0(i8* %name, i32 %len) local_unnamed_addr {
dec_label_pc_3db0:
  %tmp234 = sext i32 %len to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint i8* %name to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3db0 = call i32 @gethostname(i8* %name, i32 %len)
  ret i32 %v4_3db0
}

define i32 @function_3dc0(%_TYPEDEF_sigset_t* %set, i32 %signo) local_unnamed_addr {
dec_label_pc_3dc0:
  %tmp234 = sext i32 %signo to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint %_TYPEDEF_sigset_t* %set to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3dc0 = call i32 @sigismember(%_TYPEDEF_sigset_t* %set, i32 %signo)
  ret i32 %v4_3dc0
}

define void @function_3dd0(i32 %status) local_unnamed_addr {
dec_label_pc_3dd0:
  %tmp234 = sext i32 %status to i64
  store i64 %tmp234, i64* @rdi, align 8
  call void @exit(i32 %status)
  ret void
}

define i32 @function_3de0(i64* %ptr, i32 %size, i32 %n, %_IO_FILE* %s) local_unnamed_addr {
dec_label_pc_3de0:
  %tmp234 = ptrtoint %_IO_FILE* %s to i64
  store i64 %tmp234, i64* @rcx, align 8
  %tmp235 = sext i32 %n to i64
  store i64 %tmp235, i64* @rdx, align 8
  %tmp236 = sext i32 %size to i64
  store i64 %tmp236, i64* @rsi, align 8
  %tmp237 = ptrtoint i64* %ptr to i64
  store i64 %tmp237, i64* @rdi, align 8
  %v8_3de0 = call i32 @fwrite(i64* %ptr, i32 %size, i32 %n, %_IO_FILE* %s)
  ret i32 %v8_3de0
}

define i32 @function_3df0(%_IO_FILE* %stream, i32 %flag, i8* %format, ...) local_unnamed_addr {
dec_label_pc_3df0:
  %tmp234 = ptrtoint i8* %format to i64
  store i64 %tmp234, i64* @rdx, align 8
  %tmp235 = sext i32 %flag to i64
  store i64 %tmp235, i64* @rsi, align 8
  %tmp236 = ptrtoint %_IO_FILE* %stream to i64
  store i64 %tmp236, i64* @rdi, align 8
  %v6_3df0 = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %stream, i32 %flag, i8* %format)
  ret i32 %v6_3df0
}

define i32 @function_3e00(%_IO_FILE* %stream) local_unnamed_addr {
dec_label_pc_3e00:
  %tmp234 = ptrtoint %_IO_FILE* %stream to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3e00 = call i32 @fflush_unlocked(%_IO_FILE* %stream)
  ret i32 %v2_3e00
}

define i32 @function_3e10(%_TYPEDEF___mbstate_t* %ps) local_unnamed_addr {
dec_label_pc_3e10:
  %tmp234 = ptrtoint %_TYPEDEF___mbstate_t* %ps to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3e10 = call i32 @mbsinit(%_TYPEDEF___mbstate_t* %ps)
  ret i32 %v2_3e10
}

define i32 @function_3e20(i32 %wc) local_unnamed_addr {
dec_label_pc_3e20:
  %tmp234 = sext i32 %wc to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3e20 = call i32 @iswprint(i32 %wc)
  ret i32 %v2_3e20
}

define i32 @function_3e30(%_TYPEDEF_sigset_t* %set, i32 %signo) local_unnamed_addr {
dec_label_pc_3e30:
  %tmp234 = sext i32 %signo to i64
  store i64 %tmp234, i64* @rsi, align 8
  %tmp235 = ptrtoint %_TYPEDEF_sigset_t* %set to i64
  store i64 %tmp235, i64* @rdi, align 8
  %v4_3e30 = call i32 @sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo)
  ret i32 %v4_3e30
}

define i32** @function_3e40() local_unnamed_addr {
dec_label_pc_3e40:
  %v0_3e40 = call i32** @__ctype_tolower_loc()
  ret i32** %v0_3e40
}

define i16** @function_3e50() local_unnamed_addr {
dec_label_pc_3e50:
  %v0_3e50 = call i16** @__ctype_b_loc()
  ret i16** %v0_3e50
}

define i32 @function_3e60(i8* %s, i32 %flag, i32 %slen, i8* %format, ...) local_unnamed_addr {
dec_label_pc_3e60:
  %tmp234 = ptrtoint i8* %format to i64
  store i64 %tmp234, i64* @rcx, align 8
  %tmp235 = sext i32 %slen to i64
  store i64 %tmp235, i64* @rdx, align 8
  %tmp236 = sext i32 %flag to i64
  store i64 %tmp236, i64* @rsi, align 8
  %tmp237 = ptrtoint i8* %s to i64
  store i64 %tmp237, i64* @rdi, align 8
  %v8_3e60 = call i32 (i8*, i32, i32, i8*, ...) @__sprintf_chk(i8* %s, i32 %flag, i32 %slen, i8* %format)
  ret i32 %v8_3e60
}

define void @function_3e70(i64* %ptr) local_unnamed_addr {
dec_label_pc_3e70:
  %tmp234 = ptrtoint i64* %ptr to i64
  store i64 %tmp234, i64* @rdi, align 8
  call void @free(i64* %ptr)
  ret void
}

define i64* @function_3e78(i32 %size) local_unnamed_addr {
dec_label_pc_3e78:
  %tmp234 = sext i32 %size to i64
  store i64 %tmp234, i64* @rdi, align 8
  %v2_3e78 = call i64* @malloc(i32 %size)
  ret i64* %v2_3e78
}

define void @function_3e80(i64* %d) local_unnamed_addr {
dec_label_pc_3e80:
  %tmp234 = ptrtoint i64* %d to i64
  store i64 %tmp234, i64* @rdi, align 8
  call void @__cxa_finalize(i64* %d)
  ret void
}

define i64 @function_3e90(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_3e90:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-67 = alloca i16, align 2
  %stack_var_-96 = alloca i8*, align 8
  %tmp822 = call i16 @__decompiler_undefined_function_8()
  %stack_var_-88 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_3e90 = load i64, i64* @r15, align 8
  %v0_3e94 = load i64, i64* @r13, align 8
  %v0_3e96 = load i64, i64* %r12.global-to-local, align 8
  %v0_3e98 = load i64, i64* %rbp.global-to-local, align 8
  %v0_3e99 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_3e99, i64* %stack_var_-48, align 8
  %v0_3e9a = load i64, i64* @rdi, align 8
  store i64 %v0_3e9a, i64* @rbp, align 8
  %v0_3e9c = load i64, i64* @rsi, align 8
  store i64 %v0_3e9c, i64* @rbx, align 8
  store i64 %v0_3e9c, i64* @rdi, align 8
  %v0_3ea6 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v1_3eb6 = call i64 @function_11fd0(i64 %v0_3e9c)
  store i64 %v1_3eb6, i64* %rax.global-to-local, align 8
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @rsi, align 8
  store i64 6, i64* @rdi, align 8
  %v6_3ec7 = call i8* @setlocale(i32 6, i8* bitcast (i8** @global_var_17c4a.6 to i8*))
  %v8_3ec7 = ptrtoint i8* %v6_3ec7 to i64
  store i64 %v8_3ec7, i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([18 x i8]* @global_var_17d95.7 to i64), i64* @rsi, align 8
  store i64 ptrtoint ([10 x i8]* @global_var_17d7b.8 to i64), i64* @rdi, align 8
  %v5_3eda = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_17d7b.8, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @global_var_17d95.7, i64 0, i64 0))
  %v7_3eda = ptrtoint i8* %v5_3eda to i64
  store i64 %v7_3eda, i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([10 x i8]* @global_var_17d7b.8 to i64), i64* @rdi, align 8
  %v3_3ee6 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_17d7b.8, i64 0, i64 0))
  %v5_3ee6 = ptrtoint i8* %v3_3ee6 to i64
  store i64 %v5_3ee6, i64* %rax.global-to-local, align 8
  store i64 52384, i64* @rdi, align 8
  store i32 2, i32* @global_var_2201f8.9, align 4
  %v2_3efc = load i64, i64* @rsi, align 8
  %v3_3efc = load i64, i64* @rdx, align 8
  %v4_3efc = call i64 @function_16340(i64 52384, i64 %v2_3efc, i64 %v3_3efc)
  store i32 0, i32* @global_var_221210.10, align 4
  store i8 1, i8* @global_var_2212b8.11, align 1
  store i64 -9223372036854775808, i64* @global_var_221370.12, align 8
  %v0_3f23 = load i32, i32* @global_var_2201e0.13, align 4
  %v1_3f23 = zext i32 %v0_3f23 to i64
  store i64 %v1_3f23, i64* %rax.global-to-local, align 8
  store i64 0, i64* @global_var_221380.14, align 8
  store i32 -1, i32* @global_var_221378.15, align 4
  store i8 0, i8* @global_var_2212d8.16, align 1
  %v11_3f46 = icmp eq i32 %v0_3f23, 2
  br i1 %v11_3f46, label %dec_label_pc_4ce7, label %dec_label_pc_3f4f

dec_label_pc_3f4f:                                ; preds = %dec_label_pc_3e90
  %v11_3f4f = icmp eq i32 %v0_3f23, 3
  br i1 %v11_3f4f, label %dec_label_pc_3f62, label %dec_label_pc_3f54

dec_label_pc_3f54:                                ; preds = %dec_label_pc_3f4f
  %v2_3f54 = add i32 %v0_3f23, -1
  %v11_3f54 = icmp eq i32 %v2_3f54, 0
  %v17_3f54 = zext i32 %v2_3f54 to i64
  store i64 %v17_3f54, i64* %rax.global-to-local, align 8
  br i1 %v11_3f54, label %dec_label_pc_4857, label %dec_label_pc_3f5d

dec_label_pc_3f5d:                                ; preds = %dec_label_pc_3f54
  call void @abort()
  unreachable

dec_label_pc_3f62:                                ; preds = %dec_label_pc_3f4f
  store i64 7, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i32 0, i32* @global_var_221338.17, align 4
  %v4_3f73 = call i64 @function_135b0(i32 0, i64 7)
  store i64 %v4_3f73, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_3f78

dec_label_pc_3f78:                                ; preds = %dec_label_pc_5311, %dec_label_pc_4ce7, %dec_label_pc_4869, %dec_label_pc_3f62
  store i64 ptrtoint ([14 x i8]* @global_var_17da7.18 to i64), i64* @rdi, align 8
  store i32 0, i32* @global_var_221334.19, align 4
  store i32 0, i32* @global_var_221330.20, align 4
  store i8 0, i8* @global_var_22132f.21, align 1
  store i8 0, i8* @global_var_22132d.22, align 1
  store i8 0, i8* @global_var_22132c.23, align 1
  store i32 0, i32* @global_var_221314.24, align 4
  store i8 0, i8* @global_var_2212fc.25, align 1
  store i32 1, i32* @global_var_2212f8.26, align 4
  store i8 0, i8* @global_var_2212f6.27, align 1
  store i8 0, i8* @global_var_2212f5.28, align 1
  store i32 0, i32* @global_var_2212f0.29, align 4
  store i64 0, i64* @global_var_2212e8.30, align 8
  store i64 0, i64* @global_var_2212e0.31, align 8
  store i8 0, i8* @global_var_221365.32, align 1
  %v3_3ff8 = call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_17da7.18, i64 0, i64 0))
  %v4_3ff8 = ptrtoint i8* %v3_3ff8 to i64
  store i64 %v4_3ff8, i64* %rax.global-to-local, align 8
  %v1_3ffd = icmp eq i8* %v3_3ff8, null
  store i64 %v4_3ff8, i64* @r12, align 8
  br i1 %v1_3ffd, label %dec_label_pc_403b, label %dec_label_pc_4005

dec_label_pc_4005:                                ; preds = %dec_label_pc_3f78
  store i64 ptrtoint (i64* @global_var_1ab60.33 to i64), i64* @rdx, align 8
  store i64 ptrtoint ([10 x i8*]* @global_var_21f9e0.44 to i64), i64* @rsi, align 8
  store i64 4, i64* @rcx, align 8
  store i64 %v4_3ff8, i64* @rdi, align 8
  %sext = mul i64 %v4_3ff8, 4294967296
  %v1_401b = sdiv i64 %sext, 4294967296
  %v8_401b = call i64 @function_c2c0(i64 %v1_401b, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @global_var_21f9e0.44, i64 0, i64 0), i64* nonnull @global_var_1ab60.33, i64 4)
  store i64 %v8_401b, i64* @rax, align 8
  %v4_4020 = trunc i64 %v8_401b to i32
  %v6_4020 = icmp slt i32 %v4_4020, 0
  br i1 %v6_4020, label %dec_label_pc_4d02, label %dec_label_pc_4028

dec_label_pc_4028:                                ; preds = %dec_label_pc_4005
  store i64 ptrtoint (i64* @global_var_1ab60.33 to i64), i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v2_4033 = mul i64 %v8_401b, 4
  %v3_4033 = add i64 %v2_4033, ptrtoint (i64* @global_var_1ab60.33 to i64)
  %v4_4033 = inttoptr i64 %v3_4033 to i32*
  %v5_4033 = load i32, i32* %v4_4033, align 4
  %v6_4033 = zext i32 %v5_4033 to i64
  store i64 %v6_4033, i64* @rsi, align 8
  %v4_4036 = call i64 @function_135b0(i32 0, i64 %v6_4033)
  store i64 %v4_4036, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_403b

dec_label_pc_403b:                                ; preds = %dec_label_pc_4d02, %dec_label_pc_4028, %dec_label_pc_3f78
  store i64 ptrtoint ([8 x i8]* @global_var_17db5.45 to i64), i64* @rdi, align 8
  store i128 80, i128* @global_var_2212b0.46, align 8
  %v3_404d = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_17db5.45, i64 0, i64 0))
  %v5_404d = ptrtoint i8* %v3_404d to i64
  store i64 %v5_404d, i64* %rax.global-to-local, align 8
  %v1_4052 = icmp eq i8* %v3_404d, null
  store i64 %v5_404d, i64* @r12, align 8
  br i1 %v1_4052, label %dec_label_pc_4063, label %dec_label_pc_405a

dec_label_pc_405a:                                ; preds = %dec_label_pc_403b
  %v2_405a = load i8, i8* %v3_404d, align 1
  %v9_405a = icmp eq i8 %v2_405a, 0
  %v1_405d = icmp eq i1 %v9_405a, false
  br i1 %v1_405d, label %dec_label_pc_4d3d, label %dec_label_pc_4063

dec_label_pc_4063:                                ; preds = %dec_label_pc_4d4d, %dec_label_pc_4d3d, %dec_label_pc_405a, %dec_label_pc_403b
  %v2_4063 = ptrtoint i64* %stack_var_-88 to i64
  store i64 %v2_4063, i64* @r12, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  store i64 21523, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  store i64 %v2_4063, i64* @rdx, align 8
  %v6_4077 = call i32 (i32, i32, ...) @ioctl(i32 1, i32 21523)
  %v8_4077 = sext i32 %v6_4077 to i64
  store i64 %v8_4077, i64* %rax.global-to-local, align 8
  %v11_407c = icmp eq i32 %v6_4077, -1
  br i1 %v11_407c, label %dec_label_pc_4092, label %dec_label_pc_4081

dec_label_pc_4081:                                ; preds = %dec_label_pc_4063
  %v4_4081 = zext i16 %tmp822 to i64
  store i64 %v4_4081, i64* %rax.global-to-local, align 8
  %v5_4086 = icmp eq i16 %tmp822, 0
  br i1 %v5_4086, label %dec_label_pc_4092, label %dec_label_pc_408b

dec_label_pc_408b:                                ; preds = %dec_label_pc_4081
  %v1_408b = zext i16 %tmp822 to i128
  store i128 %v1_408b, i128* @global_var_2212b0.46, align 8
  br label %dec_label_pc_4092

dec_label_pc_4092:                                ; preds = %dec_label_pc_408b, %dec_label_pc_4081, %dec_label_pc_4063
  store i64 ptrtoint ([8 x i8]* @global_var_17dbd.47 to i64), i64* @rdi, align 8
  %v3_4099 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_17dbd.47, i64 0, i64 0))
  %v4_4099 = ptrtoint i8* %v3_4099 to i64
  store i64 %v4_4099, i64* %rax.global-to-local, align 8
  %v1_409e = icmp eq i8* %v3_4099, null
  store i64 %v4_4099, i64* @r13, align 8
  store i128 8, i128* @global_var_2212c0.48, align 8
  br i1 %v1_409e, label %dec_label_pc_40d7, label %dec_label_pc_40b1

dec_label_pc_40b1:                                ; preds = %dec_label_pc_4092
  store i64 0, i64* @r8, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 %v2_4063, i64* @rcx, align 8
  store i64 %v4_4099, i64* @rdi, align 8
  %v12_40be = load i64, i64* @r9, align 8
  %v13_40be = call i64 @function_14950(i64 %v4_4099, i32 0, i32 0, i64* nonnull %stack_var_-88, i32 0, i64 %v12_40be)
  store i64 %v13_40be, i64* @rax, align 8
  %v4_40c3 = trunc i64 %v13_40be to i32
  %v5_40c3 = icmp eq i32 %v4_40c3, 0
  %v1_40c5 = icmp eq i1 %v5_40c3, false
  br i1 %v1_40c5, label %dec_label_pc_51ef, label %dec_label_pc_40cb

dec_label_pc_40cb:                                ; preds = %dec_label_pc_40b1
  %v3_40cb = load i64, i64* %stack_var_-88, align 8
  store i64 %v3_40cb, i64* %rax.global-to-local, align 8
  %v1_40d0 = sext i64 %v3_40cb to i128
  store i128 %v1_40d0, i128* @global_var_2212c0.48, align 8
  br label %dec_label_pc_40d7

dec_label_pc_40d7:                                ; preds = %dec_label_pc_51ef, %dec_label_pc_40cb, %dec_label_pc_4092
  store i64 ptrtoint (i64* @global_var_16598.49 to i64), i64* %r13.global-to-local, align 8
  store i64 0, i64* @r14, align 8
  store i64 1, i64* @r15, align 8
  store i64 ptrtoint ([4 x i8]** @global_var_21f2e0.51 to i64), i64* @rcx, align 8
  store i64 ptrtoint ([44 x i8]* @global_var_1a148.52 to i64), i64* @rdx, align 8
  %tmp850 = bitcast i64* %stack_var_-88 to i32*
  store i64 %v2_4063, i64* @r8, align 8
  %v0_4109 = load i64, i64* @rbx, align 8
  store i64 %v0_4109, i64* @rsi, align 8
  %v0_410c = load i64, i64* @rbp, align 8
  store i64 %v0_410c, i64* @rdi, align 8
  store i64 -1, i64* %stack_var_-88, align 8
  %v1_4116 = trunc i64 %v0_410c to i32
  %v3_4116 = inttoptr i64 %v0_4109 to i8**
  %v12_4116 = call i32 @getopt_long(i32 %v1_4116, i8** %v3_4116, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @global_var_1a148.52, i64 0, i64 0), %option* bitcast ([4 x i8]** @global_var_21f2e0.51 to %option*), i32* %tmp850)
  %v14_4116 = sext i32 %v12_4116 to i64
  store i64 %v14_4116, i64* %rax.global-to-local, align 8
  %v11_411b = icmp eq i32 %v12_4116, -1
  br i1 %v11_411b, label %dec_label_pc_48b8, label %dec_label_pc_4124

dec_label_pc_4124:                                ; preds = %dec_label_pc_40d7
  %v2_4124 = add i32 %v12_4116, 131
  %v17_4124 = zext i32 %v2_4124 to i64
  store i64 %v17_4124, i64* %rax.global-to-local, align 8
  %tmp912 = icmp ult i32 %v2_4124, 276
  br i1 %tmp912, label %dec_label_pc_4134, label %dec_label_pc_5699

dec_label_pc_4134:                                ; preds = %dec_label_pc_4124
  %v0_4134 = load i64, i64* %r13.global-to-local, align 8
  %v2_4134 = mul nuw nsw i64 %v17_4124, 4
  %v3_4134 = add i64 %v0_4134, %v2_4134
  %v4_4134 = inttoptr i64 %v3_4134 to i32*
  %v5_4134 = load i32, i32* %v4_4134, align 4
  %v6_4134 = sext i32 %v5_4134 to i64
  %v2_4139 = add i64 %v6_4134, %v0_4134
  store i64 %v2_4139, i64* %rax.global-to-local, align 8
  ret i64 %v2_4139

dec_label_pc_4857:                                ; preds = %dec_label_pc_3f54
  store i64 1, i64* @rdi, align 8
  %v3_485c = call i32 @isatty(i32 1)
  %v5_485c = sext i32 %v3_485c to i64
  store i64 %v5_485c, i64* %rax.global-to-local, align 8
  %v5_4861 = icmp eq i32 %v3_485c, 0
  %v1_4863 = icmp eq i1 %v5_4861, false
  br i1 %v1_4863, label %dec_label_pc_5311, label %dec_label_pc_4869

dec_label_pc_4869:                                ; preds = %dec_label_pc_4857
  store i32 1, i32* @global_var_221338.17, align 4
  br label %dec_label_pc_3f78

dec_label_pc_48b8:                                ; preds = %dec_label_pc_40d7
  %v0_48b8 = load i64, i64* @global_var_221320.55, align 8
  %v7_48b8 = icmp eq i64 %v0_48b8, 0
  br i1 %v7_48b8, label %dec_label_pc_4edb, label %dec_label_pc_48c6

dec_label_pc_48c6:                                ; preds = %dec_label_pc_4f23, %dec_label_pc_48b8
  %v0_48c6 = load i128, i128* @global_var_2212b0.46, align 8
  %v1_48c6 = trunc i128 %v0_48c6 to i64
  store i64 3, i64* @rcx, align 8
  %div = udiv i64 %v1_48c6, 3
  %tmp852 = urem i64 %v1_48c6, 3
  %v1_48d7 = icmp eq i64 %tmp852, 0
  %v1_48da = icmp eq i1 %v1_48d7, false
  %v2_48da = zext i1 %v1_48da to i64
  store i64 %v2_48da, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v2_48e2 = add nuw i64 %v2_48da, %div
  store i64 %v2_48e2, i64* %rax.global-to-local, align 8
  %v1_48e5 = sext i64 %v2_48e2 to i128
  store i128 %v1_48e5, i128* @global_var_221200.127, align 8
  %v3_48ec = call i64 @function_13590(i32 0)
  store i64 %v3_48ec, i64* %rax.global-to-local, align 8
  %v0_48f1 = load i32, i32* @global_var_221338.17, align 4
  %v1_48f1 = zext i32 %v0_48f1 to i64
  store i64 %v1_48f1, i64* @rdx, align 8
  store i64 %v3_48ec, i64* @r13, align 8
  %v11_48fa = icmp eq i32 %v0_48f1, 4
  br i1 %v11_48fa, label %dec_label_pc_4d36, label %dec_label_pc_4903

dec_label_pc_4903:                                ; preds = %dec_label_pc_48c6
  %v6_4903 = icmp eq i32 %v0_48f1, 0
  %v11_4903 = icmp eq i32 %v0_48f1, 1
  br i1 %v11_4903, label %dec_label_pc_4d36, label %dec_label_pc_490c

dec_label_pc_490c:                                ; preds = %dec_label_pc_4903
  %v0_490c = load i128, i128* @global_var_2212b0.46, align 8
  %v1_490c = trunc i128 %v0_490c to i64
  %v8_490c = icmp eq i64 %v1_490c, 0
  %v1_4914 = icmp eq i1 %v8_490c, false
  br i1 %v1_4914, label %dec_label_pc_491c, label %dec_label_pc_4916

dec_label_pc_4916:                                ; preds = %dec_label_pc_490c
  store i64 0, i64* %rax.global-to-local, align 8
  %v1_491a = icmp eq i1 %v6_4903, false
  br i1 %v1_491a, label %dec_label_pc_4934, label %dec_label_pc_491c

dec_label_pc_491c:                                ; preds = %dec_label_pc_4916, %dec_label_pc_490c
  %v1_491f = trunc i64 %v3_48ec to i32
  %v2_491f = and i32 %v1_491f, -3
  %v2_4922 = add i32 %v2_491f, -1
  %v11_4922 = icmp eq i32 %v2_4922, 0
  %v17_4922 = zext i32 %v2_4922 to i64
  %v1_4925 = zext i1 %v11_4922 to i64
  %v3_4925 = and i64 %v17_4922, 4294967040
  %v4_4925 = or i64 %v1_4925, %v3_4925
  %v11_4928 = icmp eq i32 %v1_491f, 6
  %v1_492c = zext i1 %v11_4928 to i64
  %v3_492c = and i64 %v1_48f1, 4294967040
  %v4_492c = or i64 %v3_492c, %v1_492c
  store i64 %v4_492c, i64* @rdx, align 8
  %v4_492f16 = or i64 %v4_4925, %v4_492c
  store i64 %v4_492f16, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4934

dec_label_pc_4934:                                ; preds = %dec_label_pc_4d36, %dec_label_pc_491c, %dec_label_pc_4916
  %v0_4936 = phi i64 [ 0, %dec_label_pc_4d36 ], [ %v4_492f16, %dec_label_pc_491c ], [ 0, %dec_label_pc_4916 ]
  store i64 0, i64* @rdi, align 8
  %v1_4936 = trunc i64 %v0_4936 to i8
  %v1_493c = urem i8 %v1_4936, 2
  store i8 %v1_493c, i8* @global_var_2213a8.128, align 1
  %v2_4943 = call i64 @function_13550(i32 0)
  store i64 %v2_4943, i64* %rax.global-to-local, align 8
  %v0_4948 = load i64, i64* @r13, align 8
  %v1_4948 = trunc i64 %v0_4948 to i32
  %v11_4948 = icmp eq i32 %v1_4948, 7
  %v1_494c = trunc i64 %v2_4943 to i32
  store i32 %v1_494c, i32* @global_var_2212d0.129, align 4
  br i1 %v11_4948, label %dec_label_pc_52fa, label %dec_label_pc_4959

dec_label_pc_4959:                                ; preds = %dec_label_pc_52fa, %dec_label_pc_4934
  %v0_4959 = load i32, i32* @global_var_221314.24, align 4
  %v1_4959 = zext i32 %v0_4959 to i64
  store i64 %v1_4959, i64* %rax.global-to-local, align 8
  %tmp913 = or i32 %v0_4959, 1
  %tmp914 = icmp eq i32 %tmp913, 1
  br i1 %tmp914, label %dec_label_pc_499f, label %dec_label_pc_4964

dec_label_pc_4964:                                ; preds = %dec_label_pc_4959
  store i64 ptrtoint ([6 x i8]* @global_var_17e73.130 to i64), i64* @rdx, align 8
  %v2_496b = add i32 %v0_4959, -2
  %v17_496b = zext i32 %v2_496b to i64
  store i64 %v17_496b, i64* %rax.global-to-local, align 8
  %v3_496e = add i64 %v17_496b, ptrtoint ([6 x i8]* @global_var_17e73.130 to i64)
  %v4_496e = inttoptr i64 %v3_496e to i8*
  %v5_496e = load i8, i8* %v4_496e, align 1
  %v6_496e = sext i8 %v5_496e to i64
  store i64 %v6_496e, i64* @rsi, align 8
  %v5_4976 = icmp eq i8 %v5_496e, 0
  br i1 %v5_4976, label %dec_label_pc_499f, label %dec_label_pc_4980

dec_label_pc_4980:                                ; preds = %dec_label_pc_4964, %dec_label_pc_4980
  %v1_4990 = phi i8 [ %v2_4995, %dec_label_pc_4980 ], [ %v5_496e, %dec_label_pc_4964 ]
  %v0_4987 = phi i64 [ %v0_4995, %dec_label_pc_4980 ], [ %v3_496e, %dec_label_pc_4964 ]
  %v0_4980 = load i32, i32* @global_var_2212d0.129, align 4
  %v1_4980 = sext i32 %v0_4980 to i64
  store i64 %v1_4980, i64* @rdi, align 8
  %v1_4987 = add i64 %v0_4987, 1
  store i64 %v1_4987, i64* @r13, align 8
  store i64 1, i64* @rdx, align 8
  %v4_4990 = call i64 @function_135d0(i64 %v1_4980, i8 %v1_4990, i64 1)
  store i64 %v4_4990, i64* %rax.global-to-local, align 8
  %v0_4995 = load i64, i64* @r13, align 8
  %v1_4995 = inttoptr i64 %v0_4995 to i8*
  %v2_4995 = load i8, i8* %v1_4995, align 1
  %v3_4995 = sext i8 %v2_4995 to i64
  store i64 %v3_4995, i64* @rsi, align 8
  %v5_499a = icmp eq i8 %v2_4995, 0
  %v1_499d = icmp eq i1 %v5_499a, false
  br i1 %v1_499d, label %dec_label_pc_4980, label %dec_label_pc_499f

dec_label_pc_499f:                                ; preds = %dec_label_pc_4980, %dec_label_pc_4964, %dec_label_pc_4959
  store i64 0, i64* @rdi, align 8
  %v3_49a1 = call i64 @function_13550(i32 0)
  store i64 %v3_49a1, i64* %rax.global-to-local, align 8
  store i64 1, i64* @rdx, align 8
  store i64 58, i64* @rsi, align 8
  store i64 %v3_49a1, i64* @rdi, align 8
  store i64 %v3_49a1, i64* @global_var_2212c8.131, align 8
  %v4_49ba = call i64 @function_135d0(i64 %v3_49a1, i8 58, i64 1)
  store i64 %v4_49ba, i64* %rax.global-to-local, align 8
  %v0_49bf = load i8, i8* @global_var_221318.63, align 1
  %v7_49bf = icmp eq i8 %v0_49bf, 0
  %v0_49e2.pre = load i32, i32* @global_var_221338.17, align 4
  br i1 %v7_49bf, label %dec_label_pc_49dc, label %dec_label_pc_49c8

dec_label_pc_49c8:                                ; preds = %dec_label_pc_499f
  %v7_49c8 = icmp eq i32 %v0_49e2.pre, 0
  br i1 %v7_49c8, label %dec_label_pc_4e80, label %dec_label_pc_49d5

dec_label_pc_49d5:                                ; preds = %dec_label_pc_4e80, %dec_label_pc_49c8
  store i8 0, i8* @global_var_221318.63, align 1
  br label %dec_label_pc_49dc

dec_label_pc_49dc:                                ; preds = %dec_label_pc_499f, %dec_label_pc_49d5
  %v0_49dc = load i32, i32* @global_var_221334.19, align 4
  %v1_49e2 = zext i32 %v0_49e2.pre to i64
  store i64 %v1_49e2, i64* @rdx, align 8
  %v2_49e8 = add i32 %v0_49dc, -1
  %v11_49e8 = icmp eq i32 %v2_49e8, 0
  %v17_49e8 = zext i32 %v2_49e8 to i64
  store i64 %v17_49e8, i64* %rax.global-to-local, align 8
  %v11_49eb = icmp eq i32 %v0_49dc, 2
  %v2_49ee = or i1 %v11_49e8, %v11_49eb
  %v5_5333 = icmp eq i32 %v0_49e2.pre, 0
  br i1 %v2_49ee, label %dec_label_pc_49f0, label %dec_label_pc_49fb

dec_label_pc_49f0:                                ; preds = %dec_label_pc_49dc
  br i1 %v5_5333, label %dec_label_pc_49ff, label %dec_label_pc_533b

dec_label_pc_49fb:                                ; preds = %dec_label_pc_49dc
  %v1_49fd = icmp eq i1 %v5_5333, false
  br i1 %v1_49fd, label %dec_label_pc_4a42, label %dec_label_pc_49ff

dec_label_pc_49ff:                                ; preds = %dec_label_pc_49f0, %dec_label_pc_4e80, %dec_label_pc_49fb
  %v0_49ff = load i64, i64* @r14, align 8
  %v1_49ff = icmp eq i64 %v0_49ff, 0
  br i1 %v1_49ff, label %dec_label_pc_5367, label %dec_label_pc_4a08

dec_label_pc_4a08:                                ; preds = %dec_label_pc_5367, %dec_label_pc_49ff
  %v0_4a24109 = phi i64 [ %v4_536e, %dec_label_pc_5367 ], [ %v0_49ff, %dec_label_pc_49ff ]
  store i64 ptrtoint ([7 x i8]* @global_var_16ad3.132 to i64), i64* @r13, align 8
  br label %dec_label_pc_4a1c

dec_label_pc_4a18:                                ; preds = %dec_label_pc_4a34
  %v0_4a18 = load i64, i64* @r14, align 8
  %v1_4a18 = add i64 %v0_4a18, 6
  store i64 %v1_4a18, i64* @r14, align 8
  %v0_4a21.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_4a1c

dec_label_pc_4a1c:                                ; preds = %dec_label_pc_4a18, %dec_label_pc_4a08
  %v0_4a24 = phi i64 [ %v1_4a18, %dec_label_pc_4a18 ], [ %v0_4a24109, %dec_label_pc_4a08 ]
  %v0_4a21 = phi i64 [ %v0_4a21.pre, %dec_label_pc_4a18 ], [ ptrtoint ([7 x i8]* @global_var_16ad3.132 to i64), %dec_label_pc_4a08 ]
  store i64 6, i64* @rdx, align 8
  store i64 %v0_4a21, i64* @rsi, align 8
  %v1_4a24 = inttoptr i64 %v0_4a24 to i8*
  store i64 %v0_4a24, i64* @rdi, align 8
  %v4_4a27 = inttoptr i64 %v0_4a21 to i8*
  %v7_4a27 = call i32 @strncmp(i8* %v1_4a24, i8* %v4_4a27, i32 6)
  %v9_4a27 = sext i32 %v7_4a27 to i64
  store i64 %v9_4a27, i64* %rax.global-to-local, align 8
  %v5_4a2c = icmp eq i32 %v7_4a27, 0
  %v1_4a2e = icmp eq i1 %v5_4a2c, false
  br i1 %v1_4a2e, label %dec_label_pc_5243, label %dec_label_pc_4a34

dec_label_pc_4a34:                                ; preds = %dec_label_pc_4a1c
  store i64 2, i64* @rdi, align 8
  %v1_4a39 = load i64, i64* @rsi, align 8
  %v2_4a39 = call i64 @function_d830(i64 2, i64 %v1_4a39)
  store i64 %v2_4a39, i64* %rax.global-to-local, align 8
  %v4_4a3e = trunc i64 %v2_4a39 to i8
  %v5_4a3e = icmp eq i8 %v4_4a3e, 0
  %v1_4a40 = icmp eq i1 %v5_4a3e, false
  br i1 %v1_4a40, label %dec_label_pc_4a18, label %dec_label_pc_4a42

dec_label_pc_4a42:                                ; preds = %dec_label_pc_4a34, %dec_label_pc_533b, %dec_label_pc_52d3, %dec_label_pc_49fb
  %v0_4a42 = load i8, i8* @global_var_221312.58, align 1
  %v7_4a42 = icmp eq i8 %v0_4a42, 0
  %v0_4a49 = load i32, i32* @global_var_220290.133, align 4
  %v1_4a49 = sext i32 %v0_4a49 to i64
  store i64 %v1_4a49, i64* @r13, align 8
  %v1_4a50 = icmp eq i1 %v7_4a42, false
  br i1 %v1_4a50, label %dec_label_pc_50c1, label %dec_label_pc_4a56

dec_label_pc_4a56:                                ; preds = %dec_label_pc_5192.thread, %dec_label_pc_51e3, %dec_label_pc_51d6, %dec_label_pc_51c4, %dec_label_pc_5192, %dec_label_pc_4a42
  %v0_4a56 = load i32, i32* @global_var_2212f8.26, align 4
  %v10_4a56 = icmp eq i32 %v0_4a56, 1
  br i1 %v10_4a56, label %dec_label_pc_4eaa, label %dec_label_pc_4a63

dec_label_pc_4a63:                                ; preds = %dec_label_pc_4ed0, %dec_label_pc_4a56
  %v0_4a63 = load i8, i8* @global_var_2212f6.27, align 1
  %v7_4a63 = icmp eq i8 %v0_4a63, 0
  br i1 %v7_4a63, label %dec_label_pc_4abb, label %dec_label_pc_4a6c

dec_label_pc_4a6c:                                ; preds = %dec_label_pc_4a63
  store i64 22960, i64* @r8, align 8
  store i64 22896, i64* @rcx, align 8
  store i64 22880, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 30, i64* @rdi, align 8
  %v8_4a88 = call i64 @function_e100(i64 30, i32 0, i64 22880, i64 22896, i64 22960)
  store i64 %v8_4a88, i64* %rax.global-to-local, align 8
  %v1_4a8d = icmp eq i64 %v8_4a88, 0
  store i64 %v8_4a88, i64* @global_var_2213c8.134, align 8
  br i1 %v1_4a8d, label %dec_label_pc_5846, label %dec_label_pc_4a9d

dec_label_pc_4a9d:                                ; preds = %dec_label_pc_4a6c
  %v0_4a9d = load i64, i64* @global_var_21ffc8.135, align 8
  store i64 %v0_4a9d, i64* @r8, align 8
  %v0_4aa4 = load i64, i64* inttoptr (i64 2228200 to i64*), align 8
  store i64 %v0_4aa4, i64* @rcx, align 8
  store i64 ptrtoint (i64* @global_var_2210e0.136 to i64), i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  %v8_4ab6 = call i64 @_obstack_begin(i64* nonnull @global_var_2210e0.136, i32 0, i32 0, i64 %v0_4aa4, i64 %v0_4a9d)
  store i64 %v8_4ab6, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4abb

dec_label_pc_4abb:                                ; preds = %dec_label_pc_4a9d, %dec_label_pc_4a63
  store i64 ptrtoint ([3 x i8]* @global_var_17f3c.137 to i64), i64* @rdi, align 8
  %v3_4ac2 = call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_17f3c.137, i64 0, i64 0))
  %v5_4ac2 = ptrtoint i8* %v3_4ac2 to i64
  store i64 %v5_4ac2, i64* %rax.global-to-local, align 8
  store i64 %v5_4ac2, i64* @rdi, align 8
  %v1_4aca = load i64, i64* @rsi, align 8
  %v2_4aca = load i64, i64* @rdx, align 8
  %v3_4aca = call i64 @function_15780(i64 %v5_4ac2, i64 %v1_4aca, i64 %v2_4aca)
  store i64 %v3_4aca, i64* @global_var_2212a8.138, align 8
  %v0_4ad6 = load i32, i32* @global_var_221330.20, align 4
  %v2_4adc = add i32 %v0_4ad6, -2
  %v2_4adf = and i32 %v2_4adc, -3
  %v3_4adf = icmp eq i32 %v2_4adf, 0
  %v9_4adf = zext i32 %v2_4adf to i64
  store i64 %v9_4adf, i64* %rax.global-to-local, align 8
  br i1 %v3_4adf, label %dec_label_pc_4af1, label %dec_label_pc_4ae4

dec_label_pc_4ae4:                                ; preds = %dec_label_pc_4abb
  %v0_4ae4 = load i32, i32* @global_var_221338.17, align 4
  %v7_4ae4 = icmp eq i32 %v0_4ae4, 0
  %v1_4aeb = icmp eq i1 %v7_4ae4, false
  br i1 %v1_4aeb, label %dec_label_pc_4e27, label %dec_label_pc_4af1

dec_label_pc_4af1:                                ; preds = %dec_label_pc_4e34, %dec_label_pc_4e27, %dec_label_pc_4ae4, %dec_label_pc_4abb
  store i8 1, i8* @global_var_2212a1.139, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4afa

dec_label_pc_4afa:                                ; preds = %dec_label_pc_4e74, %dec_label_pc_4e67, %dec_label_pc_4e5a, %dec_label_pc_4e41, %dec_label_pc_4af1
  %v0_4afa = phi i8 [ %v0_4e74, %dec_label_pc_4e74 ], [ 1, %dec_label_pc_4e67 ], [ 1, %dec_label_pc_4e5a ], [ 1, %dec_label_pc_4e41 ], [ 0, %dec_label_pc_4af1 ]
  %v1_4b00 = urem i8 %v0_4afa, 2
  store i8 %v1_4b00, i8* @global_var_2212a0.140, align 1
  %v0_4b07 = load i8, i8* @global_var_221318.63, align 1
  %v7_4b07 = icmp eq i8 %v0_4b07, 0
  %v1_4b0e = icmp eq i1 %v7_4b07, false
  br i1 %v1_4b0e, label %dec_label_pc_4fc4, label %dec_label_pc_4b14

dec_label_pc_4b14:                                ; preds = %dec_label_pc_4fc4, %dec_label_pc_4afa
  %v0_4b14 = load i8, i8* @global_var_221311.59, align 1
  %v7_4b14 = icmp eq i8 %v0_4b14, 0
  %v1_4b1b = icmp eq i1 %v7_4b14, false
  br i1 %v1_4b1b, label %dec_label_pc_4f48, label %dec_label_pc_4b21

dec_label_pc_4b21:                                ; preds = %dec_label_pc_4fb8, %dec_label_pc_4b14
  %v0_4b21 = load i64, i64* @rbp, align 8
  store i64 20000, i64* @rdi, align 8
  store i64 100, i64* @global_var_2213b8.141, align 8
  %v2_4b34 = load i64, i64* @r13, align 8
  %v4_4b34 = sub i64 %v0_4b21, %v2_4b34
  %v20_4b34 = and i64 %v4_4b34, 4294967295
  store i64 %v20_4b34, i64* @r14, align 8
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @r15, align 8
  %v1_4b3e = call i64 @function_14480(i64 20000)
  store i64 %v1_4b3e, i64* @rax, align 8
  store i128 0, i128* @global_var_2213b0.142, align 8
  store i64 %v1_4b3e, i64* @global_var_2213c0.143, align 8
  %v0_4b55 = call i64 @function_60e0()
  store i64 %v0_4b55, i64* %rax.global-to-local, align 8
  %v0_4b5a = load i64, i64* @r14, align 8
  %v4_4b5a = trunc i64 %v0_4b5a to i32
  %tmp863 = icmp slt i32 %v4_4b5a, 1
  br i1 %tmp863, label %dec_label_pc_4d81, label %dec_label_pc_4b68.preheader

dec_label_pc_4b68.preheader:                      ; preds = %dec_label_pc_4b21
  %v1_4b68.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_4b68

dec_label_pc_4b68:                                ; preds = %dec_label_pc_4b68.preheader, %dec_label_pc_4b68
  %v0_4b76 = phi i64 [ %v1_4b68.pre, %dec_label_pc_4b68.preheader ], [ %v2_4b7f, %dec_label_pc_4b68 ]
  %v0_4b68 = load i64, i64* @rbx, align 8
  %v2_4b68 = mul i64 %v0_4b76, 8
  %v3_4b68 = add i64 %v2_4b68, %v0_4b68
  %v4_4b68 = inttoptr i64 %v3_4b68 to i64*
  %v5_4b68 = load i64, i64* %v4_4b68, align 8
  store i64 %v5_4b68, i64* @rdi, align 8
  store i64 0, i64* @rsi, align 8
  %v0_4b6e = load i64, i64* @r15, align 8
  store i64 %v0_4b6e, i64* @rcx, align 8
  store i64 1, i64* @rdx, align 8
  %v1_4b76 = add i64 %v0_4b76, 1
  store i64 %v1_4b76, i64* @r13, align 8
  %v5_4b7a = call i64 @function_99e0(i64 %v5_4b68, i32 0, i64 1, i64 %v0_4b6e)
  store i64 %v5_4b7a, i64* %rax.global-to-local, align 8
  %v0_4b7f = load i64, i64* @rbp, align 8
  %v2_4b7f = load i64, i64* @r13, align 8
  %sext81 = mul i64 %v2_4b7f, 4294967296
  %v8_4b82 = sdiv i64 %sext81, 4294967296
  %v9_4b82 = icmp sgt i64 %v0_4b7f, %v8_4b82
  br i1 %v9_4b82, label %dec_label_pc_4b68, label %dec_label_pc_4b84

dec_label_pc_4b84:                                ; preds = %dec_label_pc_4b68, %dec_label_pc_4e92, %dec_label_pc_4d8e
  %v0_4b84 = load i128, i128* @global_var_2213b0.142, align 8
  %v1_4b84 = trunc i128 %v0_4b84 to i64
  %v8_4b84 = icmp eq i64 %v1_4b84, 0
  %v1_4b8c = icmp eq i1 %v8_4b84, false
  br i1 %v1_4b8c, label %dec_label_pc_5003, label %dec_label_pc_4b92

dec_label_pc_4b92:                                ; preds = %dec_label_pc_5015, %dec_label_pc_4b84
  %v0_4b92 = load i64, i64* @r14, align 8
  %v1_4b92 = trunc i64 %v0_4b92 to i32
  %v3_4b92 = add i64 %v0_4b92, 4294967295
  %v18_4b92 = and i64 %v3_4b92, 4294967295
  store i64 %v18_4b92, i64* @r14, align 8
  %v0_4b96 = load i64, i64* @global_var_221380.14, align 8
  store i64 %v0_4b96, i64* @rbx, align 8
  %v10_4b9d = icmp sgt i32 %v1_4b92, 1
  br i1 %v10_4b9d, label %dec_label_pc_4bdc.preheader, label %dec_label_pc_5223

dec_label_pc_4bdc.preheader.thread:               ; preds = %dec_label_pc_522c, %dec_label_pc_5237
  br label %dec_label_pc_4be5

dec_label_pc_4bdc.preheader:                      ; preds = %dec_label_pc_4b92, %dec_label_pc_5056
  %v0_4bdc86 = phi i64 [ %v0_4b96, %dec_label_pc_4b92 ], [ %v0_505e, %dec_label_pc_5056 ]
  %v1_4bdc87 = icmp eq i64 %v0_4bdc86, 0
  br i1 %v1_4bdc87, label %dec_label_pc_4c76, label %dec_label_pc_4be5

dec_label_pc_4ba8:                                ; preds = %dec_label_pc_4bff, %dec_label_pc_4be5
  %v1_4ba8 = add i64 %v0_4ba8, 16
  %v2_4ba8 = inttoptr i64 %v1_4ba8 to i8*
  %v3_4ba8 = load i8, i8* %v2_4ba8, align 1
  %v4_4ba8 = zext i8 %v3_4ba8 to i64
  store i64 %v4_4ba8, i64* @rdx, align 8
  %v1_4bac = add i64 %v0_4ba8, 8
  %v2_4bac = inttoptr i64 %v1_4bac to i64*
  %v3_4bac = load i64, i64* %v2_4bac, align 8
  store i64 %v3_4bac, i64* @rsi, align 8
  %v5_4bb0 = call i64 @function_a860(i64 %v2_4be9, i64 %v3_4bac, i8 %v3_4ba8)
  store i64 %v5_4bb0, i64* %rax.global-to-local, align 8
  %v0_4bb5 = load i64, i64* @rbx, align 8
  %v1_4bb5 = inttoptr i64 %v0_4bb5 to i64*
  %v2_4bb5 = load i64, i64* %v1_4bb5, align 8
  store i64 %v2_4bb5, i64* @rdi, align 8
  %v1_4bb8 = inttoptr i64 %v2_4bb5 to i64*
  call void @free(i64* %v1_4bb8)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_4bbd = load i64, i64* @rbx, align 8
  %v1_4bbd = add i64 %v0_4bbd, 8
  %v2_4bbd = inttoptr i64 %v1_4bbd to i64*
  %v3_4bbd = load i64, i64* %v2_4bbd, align 8
  store i64 %v3_4bbd, i64* @rdi, align 8
  %v1_4bc1 = inttoptr i64 %v3_4bbd to i64*
  call void @free(i64* %v1_4bc1)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_4bc6 = load i64, i64* @rbx, align 8
  store i64 %v0_4bc6, i64* @rdi, align 8
  %v1_4bc9 = inttoptr i64 %v0_4bc6 to i64*
  call void @free(i64* %v1_4bc9)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  store i8 1, i8* @global_var_2212b8.11, align 1
  br label %dec_label_pc_4bd5

dec_label_pc_4bd5:                                ; preds = %dec_label_pc_4ba8, %dec_label_pc_4c50
  %v0_4bd5 = load i64, i64* @global_var_221380.14, align 8
  store i64 %v0_4bd5, i64* @rbx, align 8
  %v1_4bdc = icmp eq i64 %v0_4bd5, 0
  br i1 %v1_4bdc, label %dec_label_pc_4c76, label %dec_label_pc_4be5

dec_label_pc_4be5:                                ; preds = %dec_label_pc_4bdc.preheader.thread, %dec_label_pc_4bdc.preheader, %dec_label_pc_4bd5
  %v0_4ba8 = phi i64 [ %v0_4bd5, %dec_label_pc_4bd5 ], [ %v0_4b96, %dec_label_pc_4bdc.preheader.thread ], [ %v0_4bdc86, %dec_label_pc_4bdc.preheader ]
  %v1_4be5 = add i64 %v0_4ba8, 24
  %v2_4be5 = inttoptr i64 %v1_4be5 to i64*
  %v3_4be5 = load i64, i64* %v2_4be5, align 8
  store i64 %v3_4be5, i64* %rax.global-to-local, align 8
  %v1_4be9 = inttoptr i64 %v0_4ba8 to i64*
  %v2_4be9 = load i64, i64* %v1_4be9, align 8
  store i64 %v2_4be9, i64* @rdi, align 8
  store i64 %v3_4be5, i64* @global_var_221380.14, align 8
  %v0_4bf3 = load i64, i64* @global_var_2213c8.134, align 8
  store i64 %v0_4bf3, i64* %rax.global-to-local, align 8
  %v1_4bfa = icmp eq i64 %v0_4bf3, 0
  br i1 %v1_4bfa, label %dec_label_pc_4ba8, label %dec_label_pc_4bff

dec_label_pc_4bff:                                ; preds = %dec_label_pc_4be5
  %v1_4bff = icmp eq i64 %v2_4be9, 0
  %v1_4c02 = icmp eq i1 %v1_4bff, false
  br i1 %v1_4c02, label %dec_label_pc_4ba8, label %dec_label_pc_4c04

dec_label_pc_4c04:                                ; preds = %dec_label_pc_4bff
  %v0_4c04 = load i64, i64* @global_var_2210f8.144, align 8
  store i64 %v0_4c04, i64* @rdx, align 8
  %v1_4c0e = load i64, i64* @global_var_2210f0.145, align 8
  %v2_4c0e = sub i64 %v0_4c04, %v1_4c0e
  store i64 %v2_4c0e, i64* @rcx, align 8
  %tmp915 = icmp ult i64 %v2_4c0e, 16
  br i1 %tmp915, label %dec_label_pc_57e4, label %dec_label_pc_4c1f

dec_label_pc_4c1f:                                ; preds = %dec_label_pc_4c04
  %v1_4c1f = add i64 %v0_4c04, -16
  store i64 %v1_4c1f, i64* @rcx, align 8
  %v0_4c23 = load i64, i64* @r12, align 8
  store i64 %v0_4c23, i64* @rsi, align 8
  store i64 %v0_4bf3, i64* @rdi, align 8
  store i64 %v1_4c1f, i64* @global_var_2210f8.144, align 8
  %v2_4c30 = inttoptr i64 %v1_4c1f to i64*
  %v3_4c30 = load i64, i64* %v2_4c30, align 8
  store i64 %v3_4c30, i64* @rcx, align 8
  %v1_4c34 = add i64 %v0_4c04, -8
  %v2_4c34 = inttoptr i64 %v1_4c34 to i64*
  %v3_4c34 = load i64, i64* %v2_4c34, align 8
  store i64 %v3_4c34, i64* @rdx, align 8
  store i64 %v3_4c30, i64* %stack_var_-88, align 8
  %v1_4c42 = call i64 @function_e960(i64 %v0_4bf3)
  store i64 %v1_4c42, i64* %rax.global-to-local, align 8
  %v1_4c47 = icmp eq i64 %v1_4c42, 0
  br i1 %v1_4c47, label %dec_label_pc_5803, label %dec_label_pc_4c50

dec_label_pc_4c50:                                ; preds = %dec_label_pc_4c1f
  store i64 %v1_4c42, i64* @rdi, align 8
  %v1_4c53 = inttoptr i64 %v1_4c42 to i64*
  call void @free(i64* %v1_4c53)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_4c58 = load i64, i64* @rbx, align 8
  %v1_4c58 = inttoptr i64 %v0_4c58 to i64*
  %v2_4c58 = load i64, i64* %v1_4c58, align 8
  store i64 %v2_4c58, i64* @rdi, align 8
  %v1_4c5b = inttoptr i64 %v2_4c58 to i64*
  call void @free(i64* %v1_4c5b)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_4c60 = load i64, i64* @rbx, align 8
  %v1_4c60 = add i64 %v0_4c60, 8
  %v2_4c60 = inttoptr i64 %v1_4c60 to i64*
  %v3_4c60 = load i64, i64* %v2_4c60, align 8
  store i64 %v3_4c60, i64* @rdi, align 8
  %v1_4c64 = inttoptr i64 %v3_4c60 to i64*
  call void @free(i64* %v1_4c64)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_4c69 = load i64, i64* @rbx, align 8
  store i64 %v0_4c69, i64* @rdi, align 8
  %v1_4c6c = inttoptr i64 %v0_4c69 to i64*
  call void @free(i64* %v1_4c6c)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4bd5

dec_label_pc_4c76:                                ; preds = %dec_label_pc_4bd5, %dec_label_pc_4bdc.preheader, %dec_label_pc_5223, %dec_label_pc_5023
  %v0_4c76 = load i8, i8* @global_var_221312.58, align 1
  %v7_4c76 = icmp eq i8 %v0_4c76, 0
  br i1 %v7_4c76, label %dec_label_pc_4c8c, label %dec_label_pc_4c7f

dec_label_pc_4c7f:                                ; preds = %dec_label_pc_4c76
  %v0_4c7f = load i8, i8* @global_var_221310.146, align 1
  %v7_4c7f = icmp eq i8 %v0_4c7f, 0
  %v1_4c86 = icmp eq i1 %v7_4c7f, false
  br i1 %v1_4c86, label %dec_label_pc_4dac, label %dec_label_pc_4c8c

dec_label_pc_4c8c:                                ; preds = %dec_label_pc_4e1d, %dec_label_pc_4e0f, %dec_label_pc_4c7f, %dec_label_pc_4c76
  %v0_4c8c = load i8, i8* @global_var_221318.63, align 1
  %v7_4c8c = icmp eq i8 %v0_4c8c, 0
  %v1_4c93 = icmp eq i1 %v7_4c8c, false
  br i1 %v1_4c93, label %dec_label_pc_506a, label %dec_label_pc_4c99

dec_label_pc_4c99:                                ; preds = %dec_label_pc_506a, %dec_label_pc_4c8c
  %v0_4c99 = load i64, i64* @global_var_2213c8.134, align 8
  store i64 %v0_4c99, i64* @rbx, align 8
  %v1_4ca0 = icmp eq i64 %v0_4c99, 0
  br i1 %v1_4ca0, label %dec_label_pc_4cbe, label %dec_label_pc_4ca5

dec_label_pc_4ca5:                                ; preds = %dec_label_pc_4c99
  store i64 %v0_4c99, i64* @rdi, align 8
  %v1_4ca8 = call i64 @function_dc80(i64 %v0_4c99)
  store i64 %v1_4ca8, i64* %rax.global-to-local, align 8
  %v1_4cad = icmp eq i64 %v1_4ca8, 0
  %v1_4cb0 = icmp eq i1 %v1_4cad, false
  br i1 %v1_4cb0, label %dec_label_pc_5822, label %dec_label_pc_4cb6

dec_label_pc_4cb6:                                ; preds = %dec_label_pc_4ca5
  store i64 %v0_4c99, i64* @rdi, align 8
  %v1_4cb9 = call i64 @function_e350(i64 %v0_4c99)
  store i64 %v1_4cb9, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4cbe

dec_label_pc_4cbe:                                ; preds = %dec_label_pc_4cb6, %dec_label_pc_4c99
  store i64 %v0_3ea6, i64* @rsi, align 8
  %v1_4cc3 = call i64 @__readfsqword(i64 40)
  %v2_4cc3 = xor i64 %v1_4cc3, %v0_3ea6
  %v3_4cc3 = icmp eq i64 %v2_4cc3, 0
  store i64 %v2_4cc3, i64* @rsi, align 8
  %v0_4ccc = load i32, i32* @global_var_221210.10, align 4
  %v1_4ccc = zext i32 %v0_4ccc to i64
  store i64 %v1_4ccc, i64* %rax.global-to-local, align 8
  %v1_4cd2 = icmp eq i1 %v3_4cc3, false
  br i1 %v1_4cd2, label %dec_label_pc_5841, label %dec_label_pc_4cd8

dec_label_pc_4cd8:                                ; preds = %dec_label_pc_4cbe
  %v2_4cdc = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_4cdc, i64* %rbx.global-to-local, align 8
  store i64 %v0_3e98, i64* %rbp.global-to-local, align 8
  store i64 %v0_3e96, i64* %r12.global-to-local, align 8
  store i64 %v0_3e94, i64* %r13.global-to-local, align 8
  store i64 %v0_3e90, i64* %r15.global-to-local, align 8
  ret i64 %v1_4ccc

dec_label_pc_4ce7:                                ; preds = %dec_label_pc_3e90
  store i64 7, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i32 2, i32* @global_var_221338.17, align 4
  %v4_4cf8 = call i64 @function_135b0(i32 0, i64 7)
  store i64 %v4_4cf8, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_3f78

dec_label_pc_4d02:                                ; preds = %dec_label_pc_4005
  %v0_4d02 = load i64, i64* @r12, align 8
  store i64 %v0_4d02, i64* @rdi, align 8
  %sext77 = mul i64 %v0_4d02, 4294967296
  %v1_4d05 = sdiv i64 %sext77, 4294967296
  %v2_4d05 = call i64 @function_13ce0(i64 %v1_4d05)
  store i64 %v2_4d05, i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([65 x i8]* @global_var_1a080.147 to i64), i64* @rsi, align 8
  store i64 %v2_4d05, i64* %r12.global-to-local, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_4d1b = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @global_var_1a080.147, i64 0, i64 0), i32 5)
  %v11_4d1b = ptrtoint i8* %v9_4d1b to i64
  store i64 %v2_4d05, i64* @rcx, align 8
  store i64 %v11_4d1b, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %v9_4d1b)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_403b

dec_label_pc_4d36:                                ; preds = %dec_label_pc_4903, %dec_label_pc_48c6
  store i64 0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4934

dec_label_pc_4d3d:                                ; preds = %dec_label_pc_405a
  store i64 %v5_404d, i64* @rdi, align 8
  %v1_4d40 = load i64, i64* @rsi, align 8
  %v2_4d40 = load i64, i64* @rdx, align 8
  %v3_4d40 = call i64 @function_5ca0(i64 %v5_404d, i64 %v1_4d40, i64 %v2_4d40)
  store i64 %v3_4d40, i64* @rax, align 8
  %v4_4d45 = trunc i64 %v3_4d40 to i8
  %v5_4d45 = icmp eq i8 %v4_4d45, 0
  %v1_4d47 = icmp eq i1 %v5_4d45, false
  br i1 %v1_4d47, label %dec_label_pc_4063, label %dec_label_pc_4d4d

dec_label_pc_4d4d:                                ; preds = %dec_label_pc_4d3d
  %v0_4d4d = load i64, i64* @r12, align 8
  store i64 %v0_4d4d, i64* @rdi, align 8
  %sext73 = mul i64 %v0_4d4d, 4294967296
  %v1_4d50 = sdiv i64 %sext73, 4294967296
  %v2_4d50 = call i64 @function_13ce0(i64 %v1_4d50)
  store i64 %v2_4d50, i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([59 x i8]* @global_var_1a0c8.148 to i64), i64* @rsi, align 8
  store i64 %v2_4d50, i64* %r12.global-to-local, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_4d66 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @global_var_1a0c8.148, i64 0, i64 0), i32 5)
  %v11_4d66 = ptrtoint i8* %v9_4d66 to i64
  store i64 %v2_4d50, i64* @rcx, align 8
  store i64 %v11_4d66, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %v9_4d66)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4063

dec_label_pc_4d81:                                ; preds = %dec_label_pc_4b21
  %v0_4d81 = load i8, i8* @global_var_2212f5.28, align 1
  %v7_4d81 = icmp eq i8 %v0_4d81, 0
  store i64 ptrtoint (i8** @global_var_1a33d.149 to i64), i64* @rdi, align 8
  br i1 %v7_4d81, label %dec_label_pc_4e92, label %dec_label_pc_4d8e

dec_label_pc_4d8e:                                ; preds = %dec_label_pc_4d81
  %v0_4d95 = load i64, i64* @r15, align 8
  store i64 %v0_4d95, i64* @rcx, align 8
  store i64 1, i64* @rdx, align 8
  store i64 3, i64* @rsi, align 8
  %v5_4da2 = call i64 @function_99e0(i64 ptrtoint (i8** @global_var_1a33d.149 to i64), i32 3, i64 1, i64 %v0_4d95)
  store i64 %v5_4da2, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4b84

dec_label_pc_4dac:                                ; preds = %dec_label_pc_4c7f
  %v0_4dac = load i64, i64* @global_var_220060.150, align 8
  %v10_4dac = icmp eq i64 %v0_4dac, 2
  %v1_4db4 = icmp eq i1 %v10_4dac, false
  br i1 %v1_4db4, label %dec_label_pc_4dc8, label %dec_label_pc_4db6

dec_label_pc_4db6:                                ; preds = %dec_label_pc_4dac
  %v0_4db6 = load i64, i64* bitcast (i64** @global_var_220068.152 to i64*), align 8
  store i64 %v0_4db6, i64* %rax.global-to-local, align 8
  %tmp870 = trunc i64 %v0_4db6 to i16
  %v12_4dbd = icmp eq i16 %tmp870, 23323
  br i1 %v12_4dbd, label %dec_label_pc_5555, label %dec_label_pc_4dc8

dec_label_pc_4dc8:                                ; preds = %dec_label_pc_5563, %dec_label_pc_5555, %dec_label_pc_4db6, %dec_label_pc_4dac
  store i64 ptrtoint (i64* @global_var_220060.150 to i64), i64* @rdi, align 8
  %v2_4dcf = call i64 @function_72f0(i64* nonnull @global_var_220060.150)
  store i64 %v2_4dcf, i64* %rax.global-to-local, align 8
  store i64 ptrtoint (i64* @global_var_220070.153 to i64), i64* @rdi, align 8
  %v2_4ddb = call i64 @function_72f0(i64* nonnull @global_var_220070.153)
  store i64 %v2_4ddb, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4de0

dec_label_pc_4de0:                                ; preds = %dec_label_pc_5563, %dec_label_pc_4dc8
  %v0_4de0 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_4de0 = ptrtoint %_IO_FILE* %v0_4de0 to i64
  store i64 %v1_4de0, i64* @rdi, align 8
  %v3_4de7 = call i32 @fflush_unlocked(%_IO_FILE* %v0_4de0)
  %v5_4de7 = sext i32 %v3_4de7 to i64
  store i64 %v5_4de7, i64* %rax.global-to-local, align 8
  store i64 0, i64* @rdi, align 8
  %v3_4dee = call i64 @function_70d0(i32 0)
  store i64 %v3_4dee, i64* %rax.global-to-local, align 8
  %v0_4df3 = load i32, i32* @global_var_221214.154, align 4
  %v1_4df3 = zext i32 %v0_4df3 to i64
  store i64 %v1_4df3, i64* @rbx, align 8
  %v5_4df9 = icmp eq i32 %v0_4df3, 0
  br i1 %v5_4df9, label %dec_label_pc_4e0f, label %dec_label_pc_4e00

dec_label_pc_4e00:                                ; preds = %dec_label_pc_4de0, %dec_label_pc_4e00
  store i64 19, i64* @rdi, align 8
  %v3_4e05 = call i32 @raise(i32 19)
  %v5_4e05 = sext i32 %v3_4e05 to i64
  store i64 %v5_4e05, i64* %rax.global-to-local, align 8
  %v0_4e0a = load i64, i64* @rbx, align 8
  %v1_4e0a = trunc i64 %v0_4e0a to i32
  %v2_4e0a = add i32 %v1_4e0a, -1
  %v11_4e0a = icmp eq i32 %v2_4e0a, 0
  %v17_4e0a = zext i32 %v2_4e0a to i64
  store i64 %v17_4e0a, i64* @rbx, align 8
  %v1_4e0d = icmp eq i1 %v11_4e0a, false
  br i1 %v1_4e0d, label %dec_label_pc_4e00, label %dec_label_pc_4e0f

dec_label_pc_4e0f:                                ; preds = %dec_label_pc_4e00, %dec_label_pc_4de0
  %v0_4e0f = load i32, i32* @global_var_221218.155, align 4
  %v1_4e0f = zext i32 %v0_4e0f to i64
  store i64 %v1_4e0f, i64* @rdi, align 8
  %v5_4e15 = icmp eq i32 %v0_4e0f, 0
  br i1 %v5_4e15, label %dec_label_pc_4c8c, label %dec_label_pc_4e1d

dec_label_pc_4e1d:                                ; preds = %dec_label_pc_4e0f
  %v2_4e1d = call i32 @raise(i32 %v0_4e0f)
  %v4_4e1d = sext i32 %v2_4e1d to i64
  store i64 %v4_4e1d, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4c8c

dec_label_pc_4e27:                                ; preds = %dec_label_pc_4ae4
  %v0_4e27 = load i8, i8* @global_var_221365.32, align 1
  %v7_4e27 = icmp eq i8 %v0_4e27, 0
  %v1_4e2e = icmp eq i1 %v7_4e27, false
  br i1 %v1_4e2e, label %dec_label_pc_4af1, label %dec_label_pc_4e34

dec_label_pc_4e34:                                ; preds = %dec_label_pc_4e27
  %v0_4e34 = load i8, i8* @global_var_22132c.23, align 1
  %v7_4e34 = icmp eq i8 %v0_4e34, 0
  %v1_4e3b = icmp eq i1 %v7_4e34, false
  br i1 %v1_4e3b, label %dec_label_pc_4af1, label %dec_label_pc_4e41

dec_label_pc_4e41:                                ; preds = %dec_label_pc_4e34
  %v0_4e41 = load i8, i8* @global_var_2212f6.27, align 1
  %v7_4e41 = icmp eq i8 %v0_4e41, 0
  store i8 0, i8* @global_var_2212a1.139, align 1
  store i64 1, i64* %rax.global-to-local, align 8
  %v1_4e54 = icmp eq i1 %v7_4e41, false
  br i1 %v1_4e54, label %dec_label_pc_4afa, label %dec_label_pc_4e5a

dec_label_pc_4e5a:                                ; preds = %dec_label_pc_4e41
  %v0_4e5a = load i8, i8* @global_var_221312.58, align 1
  %v7_4e5a = icmp eq i8 %v0_4e5a, 0
  %v1_4e61 = icmp eq i1 %v7_4e5a, false
  br i1 %v1_4e61, label %dec_label_pc_4afa, label %dec_label_pc_4e67

dec_label_pc_4e67:                                ; preds = %dec_label_pc_4e5a
  %v0_4e67 = load i32, i32* @global_var_221314.24, align 4
  %v7_4e67 = icmp eq i32 %v0_4e67, 0
  %v1_4e6e = icmp eq i1 %v7_4e67, false
  br i1 %v1_4e6e, label %dec_label_pc_4afa, label %dec_label_pc_4e74

dec_label_pc_4e74:                                ; preds = %dec_label_pc_4e67
  %v0_4e74 = load i8, i8* bitcast (i32* @global_var_2212f4.110 to i8*), align 4
  %v1_4e74 = zext i8 %v0_4e74 to i64
  store i64 %v1_4e74, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4afa

dec_label_pc_4e80:                                ; preds = %dec_label_pc_49c8
  %v0_4e80 = load i8, i8* @global_var_221311.59, align 1
  %v7_4e80 = icmp eq i8 %v0_4e80, 0
  br i1 %v7_4e80, label %dec_label_pc_49ff, label %dec_label_pc_49d5

dec_label_pc_4e92:                                ; preds = %dec_label_pc_4d81
  store i64 1, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  %v5_4ea0 = call i64 @function_5f80(i64* bitcast (i8** @global_var_1a33d.149 to i64*), i32 0, i64 1)
  store i64 %v5_4ea0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4b84

dec_label_pc_4eaa:                                ; preds = %dec_label_pc_4a56
  %v0_4eaa = load i8, i8* @global_var_2212f5.28, align 1
  %v7_4eaa = icmp eq i8 %v0_4eaa, 0
  store i64 2, i64* %rax.global-to-local, align 8
  %v1_4eb6 = icmp eq i1 %v7_4eaa, false
  br i1 %v1_4eb6, label %dec_label_pc_4ed0, label %dec_label_pc_4eb8

dec_label_pc_4eb8:                                ; preds = %dec_label_pc_4eaa
  %v0_4eb8 = load i32, i32* @global_var_221314.24, align 4
  %v10_4eb8 = icmp eq i32 %v0_4eb8, 3
  br i1 %v10_4eb8, label %dec_label_pc_4ed0, label %dec_label_pc_4ec1

dec_label_pc_4ec1:                                ; preds = %dec_label_pc_4eb8
  %v0_4ec1 = load i32, i32* @global_var_221338.17, align 4
  %v5_4ec1 = icmp eq i32 %v0_4ec1, 0
  %v2_4ecd = select i1 %v5_4ec1, i32 2, i32 4
  %v17_4ecd = zext i32 %v2_4ecd to i64
  store i64 %v17_4ecd, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4ed0

dec_label_pc_4ed0:                                ; preds = %dec_label_pc_4ec1, %dec_label_pc_4eb8, %dec_label_pc_4eaa
  %v0_4ed0 = phi i32 [ %v2_4ecd, %dec_label_pc_4ec1 ], [ 2, %dec_label_pc_4eb8 ], [ 2, %dec_label_pc_4eaa ]
  store i32 %v0_4ed0, i32* @global_var_2212f8.26, align 4
  br label %dec_label_pc_4a63

dec_label_pc_4edb:                                ; preds = %dec_label_pc_48b8
  store i64 ptrtoint ([14 x i8]* @global_var_17e65.156 to i64), i64* @rdi, align 8
  %v3_4ee2 = call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_17e65.156, i64 0, i64 0))
  %v5_4ee2 = ptrtoint i8* %v3_4ee2 to i64
  store i64 %v5_4ee2, i64* %rax.global-to-local, align 8
  store i64 ptrtoint (i64* @global_var_221320.55 to i64), i64* @rdx, align 8
  store i64 ptrtoint (i64* @global_var_221328.53 to i64), i64* @rsi, align 8
  store i64 %v5_4ee2, i64* @r13, align 8
  store i64 %v5_4ee2, i64* @rdi, align 8
  %v5_4efb = call i64 @function_f720(i64 %v5_4ee2, i64* nonnull @global_var_221328.53, i64* nonnull @global_var_221320.55)
  store i64 %v5_4efb, i64* %rax.global-to-local, align 8
  %v1_4f00 = icmp eq i8* %v3_4ee2, null
  br i1 %v1_4f00, label %dec_label_pc_5717, label %dec_label_pc_4f09

dec_label_pc_4f09:                                ; preds = %dec_label_pc_5717, %dec_label_pc_4edb
  %v0_4f09 = load i32, i32* bitcast (i64* @global_var_221328.53 to i32*), align 8
  store i32 %v0_4f09, i32* @global_var_22131c.54, align 4
  %v0_4f15 = load i64, i64* @global_var_221320.55, align 8
  store i64 %v0_4f15, i64* %rax.global-to-local, align 8
  store i64 %v0_4f15, i64* @global_var_220018.56, align 8
  br label %dec_label_pc_4f23

dec_label_pc_4f23:                                ; preds = %dec_label_pc_5717, %dec_label_pc_4f09
  br label %dec_label_pc_48c6

dec_label_pc_4f48:                                ; preds = %dec_label_pc_4b14
  store i64 ptrtoint (i8** @global_var_220fe0.158 to i64), i64* @rdx, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4f88

dec_label_pc_4f58:                                ; preds = %dec_label_pc_4f88
  %v7_4f5b = icmp slt i32 %v1_4f88, 65
  br i1 %v7_4f5b, label %dec_label_pc_4f5d, label %dec_label_pc_4f95

dec_label_pc_4f5d:                                ; preds = %dec_label_pc_4f58
  %v1_4f5d = add i64 %v0_4f95, -48
  store i64 %v1_4f5d, i64* @rcx, align 8
  %v1_4f60 = trunc i64 %v1_4f5d to i32
  %tmp916 = icmp ult i32 %v1_4f60, 10
  br i1 %tmp916, label %dec_label_pc_4f95, label %dec_label_pc_4f65

dec_label_pc_4f65:                                ; preds = %dec_label_pc_4f8d, %dec_label_pc_4f5d
  %v1_4f65 = add i64 %v0_4f95, -45
  store i64 %v1_4f65, i64* @rcx, align 8
  %v1_4f68 = trunc i64 %v1_4f65 to i32
  %tmp917 = or i32 %v1_4f68, 1
  %tmp918 = icmp eq i32 %tmp917, 1
  br i1 %tmp918, label %dec_label_pc_4f95, label %dec_label_pc_4f6d

dec_label_pc_4f6d:                                ; preds = %dec_label_pc_4f65
  %v11_4f6d = icmp eq i32 %v1_4f88, 126
  br i1 %v11_4f6d, label %dec_label_pc_4f95, label %dec_label_pc_4f72

dec_label_pc_4f72:                                ; preds = %dec_label_pc_4f6d
  %v11_4f72 = icmp eq i32 %v1_4f88, 95
  %v1_4f75 = zext i1 %v11_4f72 to i64
  %v3_4f75 = and i64 %v1_4f65, -256
  %v4_4f75 = or i64 %v1_4f75, %v3_4f75
  store i64 %v4_4f75, i64* @rcx, align 8
  %v2_4f78 = add i64 %v0_4f95, 1
  %v17_4f78 = and i64 %v2_4f78, 4294967295
  store i64 %v17_4f78, i64* %rax.global-to-local, align 8
  %v1_4f7b = inttoptr i64 %v11_4f9d to i8*
  %v2_4f7b = load i8, i8* %v1_4f7b, align 1
  %v4_4f7b = zext i1 %v11_4f72 to i8
  %v5_4f7b = or i8 %v2_4f7b, %v4_4f7b
  store i8 %v5_4f7b, i8* %v1_4f7b, align 1
  %v0_4f7d = load i64, i64* @rdx, align 8
  %v1_4f7d = add i64 %v0_4f7d, 1
  store i64 %v1_4f7d, i64* @rdx, align 8
  %v0_4f81 = load i64, i64* %rax.global-to-local, align 8
  %v1_4f81 = trunc i64 %v0_4f81 to i32
  %v10_4f81 = icmp eq i32 %v1_4f81, 256
  br i1 %v10_4f81, label %dec_label_pc_4faa, label %dec_label_pc_4f88

dec_label_pc_4f88:                                ; preds = %dec_label_pc_4f72, %dec_label_pc_4f95, %dec_label_pc_4f48
  %v11_4f9d = phi i64 [ ptrtoint (i8** @global_var_220fe0.158 to i64), %dec_label_pc_4f48 ], [ %v1_4f9f, %dec_label_pc_4f95 ], [ %v1_4f7d, %dec_label_pc_4f72 ]
  %v0_4f95 = phi i64 [ 0, %dec_label_pc_4f48 ], [ %v0_4fa3, %dec_label_pc_4f95 ], [ %v0_4f81, %dec_label_pc_4f72 ]
  %v1_4f88 = trunc i64 %v0_4f95 to i32
  %v9_4f8b = icmp sgt i32 %v1_4f88, 90
  br i1 %v9_4f8b, label %dec_label_pc_4f8d, label %dec_label_pc_4f58

dec_label_pc_4f8d:                                ; preds = %dec_label_pc_4f88
  %v1_4f8d = add i64 %v0_4f95, -97
  store i64 %v1_4f8d, i64* @rcx, align 8
  %v1_4f90 = trunc i64 %v1_4f8d to i32
  %tmp919 = icmp ult i32 %v1_4f90, 26
  br i1 %tmp919, label %dec_label_pc_4f95, label %dec_label_pc_4f65

dec_label_pc_4f95:                                ; preds = %dec_label_pc_4f58, %dec_label_pc_4f8d, %dec_label_pc_4f6d, %dec_label_pc_4f65, %dec_label_pc_4f5d
  %v2_4f95 = add i64 %v0_4f95, 1
  %v17_4f95 = and i64 %v2_4f95, 4294967295
  store i64 %v17_4f95, i64* %rax.global-to-local, align 8
  store i64 1, i64* @rcx, align 8
  %v1_4f9d = inttoptr i64 %v11_4f9d to i8*
  %v2_4f9d = load i8, i8* %v1_4f9d, align 1
  %v5_4f9d = or i8 %v2_4f9d, 1
  store i8 %v5_4f9d, i8* %v1_4f9d, align 1
  %v0_4f9f = load i64, i64* @rdx, align 8
  %v1_4f9f = add i64 %v0_4f9f, 1
  store i64 %v1_4f9f, i64* @rdx, align 8
  %v0_4fa3 = load i64, i64* %rax.global-to-local, align 8
  %v1_4fa3 = trunc i64 %v0_4fa3 to i32
  %v10_4fa3 = icmp eq i32 %v1_4fa3, 256
  %v1_4fa8 = icmp eq i1 %v10_4fa3, false
  br i1 %v1_4fa8, label %dec_label_pc_4f88, label %dec_label_pc_4faa

dec_label_pc_4faa:                                ; preds = %dec_label_pc_4f72, %dec_label_pc_4f95
  %v0_4faa = call i64 @function_14870()
  %v1_4faf = icmp eq i64 %v0_4faa, 0
  br i1 %v1_4faf, label %dec_label_pc_535b, label %dec_label_pc_4fb8

dec_label_pc_4fb8:                                ; preds = %dec_label_pc_535b, %dec_label_pc_4faa
  %storemerge = phi i64 [ ptrtoint (i8** @global_var_17c4a.6 to i64), %dec_label_pc_535b ], [ %v0_4faa, %dec_label_pc_4faa ]
  %v0_4fb8 = phi i64 [ ptrtoint (i8** @global_var_17c4a.6 to i64), %dec_label_pc_535b ], [ %v0_4faa, %dec_label_pc_4faa ]
  store i64 %storemerge, i64* %rax.global-to-local, align 8
  %v1_4fb8 = inttoptr i64 %v0_4fb8 to i8*
  store i8* %v1_4fb8, i8** @global_var_221388.159, align 8
  br label %dec_label_pc_4b21

dec_label_pc_4fc4:                                ; preds = %dec_label_pc_4afa
  %v0_4fc4 = load i64, i64* @global_var_21ffc8.135, align 8
  store i64 %v0_4fc4, i64* %r15.global-to-local, align 8
  %v0_4fcb = load i64, i64* inttoptr (i64 2228200 to i64*), align 8
  store i64 %v0_4fcb, i64* @r14, align 8
  store i64 ptrtoint (i64* @global_var_2211a0.160 to i64), i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 %v0_4fc4, i64* @r8, align 8
  store i64 %v0_4fcb, i64* @rcx, align 8
  %v10_4fe3 = call i64 @_obstack_begin(i64* nonnull @global_var_2211a0.160, i32 0, i32 0, i64 %v0_4fcb, i64 %v0_4fc4)
  store i64 %v10_4fe3, i64* %rax.global-to-local, align 8
  store i64 ptrtoint (i64* @global_var_221140.161 to i64), i64* @rdi, align 8
  %v0_4fef = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_4fef, i64* @r8, align 8
  %v0_4ff2 = load i64, i64* @r14, align 8
  store i64 %v0_4ff2, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  %v9_4ff9 = call i64 @_obstack_begin(i64* nonnull @global_var_221140.161, i32 0, i32 0, i64 %v0_4ff2, i64 %v0_4fef)
  store i64 %v9_4ff9, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4b14

dec_label_pc_5003:                                ; preds = %dec_label_pc_4b84
  %v0_5003 = load i64, i64* @rdi, align 8
  %v1_5003 = load i64, i64* @rsi, align 8
  %v2_5003 = load i64, i64* @rdx, align 8
  %v3_5003 = load i64, i64* @rcx, align 8
  %v4_5003 = call i64 @function_62f0(i64 %v0_5003, i64 %v1_5003, i64 %v2_5003, i64 %v3_5003)
  store i64 %v4_5003, i64* @rax, align 8
  %v0_5008 = load i8, i8* @global_var_2212f5.28, align 1
  %v7_5008 = icmp eq i8 %v0_5008, 0
  br i1 %v7_5008, label %dec_label_pc_534a, label %dec_label_pc_5015

dec_label_pc_5015:                                ; preds = %dec_label_pc_534a, %dec_label_pc_5003
  %v0_5015 = load i128, i128* @global_var_2213b0.142, align 8
  %v1_5015 = trunc i128 %v0_5015 to i64
  %v8_5015 = icmp eq i64 %v1_5015, 0
  br i1 %v8_5015, label %dec_label_pc_4b92, label %dec_label_pc_5023

dec_label_pc_5023:                                ; preds = %dec_label_pc_5015
  %v0_5023 = load i64, i64* @rdi, align 8
  %v1_5023 = load i64, i64* @rsi, align 8
  %v2_5023 = load i64, i64* @rdx, align 8
  %v3_5023 = load i64, i64* @rcx, align 8
  %v9_5023 = call i64 @function_9420(i64 %v0_5023, i64 %v1_5023, i64 %v2_5023, i64 %v3_5023, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v9_5023, i64* %rax.global-to-local, align 8
  %v0_5028 = load i64, i64* @global_var_221380.14, align 8
  %v7_5028 = icmp eq i64 %v0_5028, 0
  br i1 %v7_5028, label %dec_label_pc_4c76, label %dec_label_pc_5036

dec_label_pc_5036:                                ; preds = %dec_label_pc_5023
  %v0_5036 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_5036 = ptrtoint %_IO_FILE* %v0_5036 to i64
  store i64 %v1_5036, i64* @rdi, align 8
  %v1_503d = add i64 %v1_5036, 40
  %v2_503d = inttoptr i64 %v1_503d to i64*
  %v3_503d = load i64, i64* %v2_503d, align 8
  store i64 %v3_503d, i64* %rax.global-to-local, align 8
  %v1_5041 = add i64 %v1_5036, 48
  %v2_5041 = inttoptr i64 %v1_5041 to i64*
  %v3_5041 = load i64, i64* %v2_5041, align 8
  %tmp920 = icmp ugt i64 %v3_5041, %v3_503d
  br i1 %tmp920, label %dec_label_pc_504b, label %dec_label_pc_576c

dec_label_pc_504b:                                ; preds = %dec_label_pc_5036
  %v1_504b = add i64 %v3_503d, 1
  store i64 %v1_504b, i64* @rdx, align 8
  store i64 %v1_504b, i64* %v2_503d, align 8
  %v0_5053 = load i64, i64* %rax.global-to-local, align 8
  %v1_5053 = inttoptr i64 %v0_5053 to i8*
  store i8 10, i8* %v1_5053, align 1
  br label %dec_label_pc_5056

dec_label_pc_5056:                                ; preds = %dec_label_pc_576c, %dec_label_pc_504b
  %v0_5056 = load i64, i64* @global_var_2211f8.162, align 8
  %v1_5056 = add i64 %v0_5056, 1
  store i64 %v1_5056, i64* @global_var_2211f8.162, align 8
  %v0_505e = load i64, i64* @global_var_221380.14, align 8
  store i64 %v0_505e, i64* @rbx, align 8
  br label %dec_label_pc_4bdc.preheader

dec_label_pc_506a:                                ; preds = %dec_label_pc_4c8c
  store i64 ptrtoint (i64* @global_var_2211a0.160 to i64), i64* @rsi, align 8
  store i64 ptrtoint ([10 x i8]* @global_var_17f45.163 to i64), i64* @rdi, align 8
  %v5_5078 = call i64 @function_67b0(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_17f45.163, i64 0, i64 0), i64* nonnull @global_var_2211a0.160)
  store i64 %v5_5078, i64* %rax.global-to-local, align 8
  store i64 ptrtoint (i64* @global_var_221140.161 to i64), i64* @rsi, align 8
  store i64 ptrtoint ([13 x i8]* @global_var_17f4f.164 to i64), i64* @rdi, align 8
  %v5_508b = call i64 @function_67b0(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_17f4f.164, i64 0, i64 0), i64* nonnull @global_var_221140.161)
  store i64 %v5_508b, i64* %rax.global-to-local, align 8
  %v0_5090 = load i32, i32* @global_var_2212d0.129, align 4
  %v1_5090 = sext i32 %v0_5090 to i64
  store i64 %v1_5090, i64* @rdi, align 8
  %v3_5097 = call i64 @function_13590(i32 %v0_5090)
  store i64 ptrtoint ([10 x i8*]* @global_var_21f9e0.44 to i64), i64* @rdx, align 8
  store i64 %v3_5097, i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([38 x i8]* @global_var_1a1e8.165 to i64), i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v2_50b1 = mul i64 %v3_5097, 8
  %v3_50b1 = add i64 %v2_50b1, ptrtoint ([10 x i8*]* @global_var_21f9e0.44 to i64)
  %v4_50b1 = inttoptr i64 %v3_50b1 to i64*
  %v5_50b1 = load i64, i64* %v4_50b1, align 8
  %v6_50b1 = inttoptr i64 %v5_50b1 to i8*
  store i64 %v5_50b1, i64* @rdx, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v8_50b7 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @global_var_1a1e8.165, i64 0, i64 0), i8* %v6_50b1)
  %v10_50b7 = sext i32 %v8_50b7 to i64
  store i64 %v10_50b7, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4c99

dec_label_pc_50c1:                                ; preds = %dec_label_pc_4a42
  store i64 ptrtoint ([10 x i8]* @global_var_17f03.166 to i64), i64* @rdi, align 8
  %v3_50c8 = call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_17f03.166, i64 0, i64 0))
  %v4_50c8 = ptrtoint i8* %v3_50c8 to i64
  store i64 %v4_50c8, i64* %rax.global-to-local, align 8
  %v2_50cd = icmp eq i8* %v3_50c8, null
  %tmp886 = bitcast i8** %stack_var_-96 to i64*
  store i64 %v4_50c8, i64* %tmp886, align 8
  br i1 %v2_50cd, label %dec_label_pc_50e0, label %dec_label_pc_50d7

dec_label_pc_50d7:                                ; preds = %dec_label_pc_50c1
  %v3_50d7 = load i8, i8* %v3_50c8, align 1
  %v10_50d7 = icmp eq i8 %v3_50d7, 0
  %v1_50da = icmp eq i1 %v10_50d7, false
  br i1 %v1_50da, label %dec_label_pc_53da, label %dec_label_pc_50e0

dec_label_pc_50e0:                                ; preds = %dec_label_pc_50d7, %dec_label_pc_50c1
  store i64 ptrtoint ([10 x i8]* @global_var_17f0d.167 to i64), i64* @rdi, align 8
  %v3_50e7 = call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_17f0d.167, i64 0, i64 0))
  %v4_50e7 = ptrtoint i8* %v3_50e7 to i64
  store i64 %v4_50e7, i64* %rax.global-to-local, align 8
  %v2_50ec = icmp eq i8* %v3_50e7, null
  br i1 %v2_50ec, label %dec_label_pc_50fa, label %dec_label_pc_50f1

dec_label_pc_50f1:                                ; preds = %dec_label_pc_50e0
  %v3_50f1 = load i8, i8* %v3_50e7, align 1
  %v10_50f1 = icmp eq i8 %v3_50f1, 0
  %v1_50f4 = icmp eq i1 %v10_50f1, false
  br i1 %v1_50f4, label %dec_label_pc_5192, label %dec_label_pc_50fa

dec_label_pc_50fa:                                ; preds = %dec_label_pc_50f1, %dec_label_pc_50e0
  store i64 ptrtoint ([5 x i8]* @global_var_17f12.168 to i64), i64* @rdi, align 8
  %v3_5101 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_17f12.168, i64 0, i64 0))
  %v4_5101 = ptrtoint i8* %v3_5101 to i64
  store i64 %v4_5101, i64* %rax.global-to-local, align 8
  %sext34 = mul i64 %v4_5101, 72057594037927936
  %v2_5106 = icmp eq i64 %sext34, 0
  %v6_5109 = sdiv i64 %sext34, 72057594037927936
  br i1 %v2_5106, label %dec_label_pc_5192.thread, label %dec_label_pc_5110

dec_label_pc_5110:                                ; preds = %dec_label_pc_50fa
  store i64 %v6_5109, i64* %rax.global-to-local, align 8
  %v1_5115 = inttoptr i64 %v6_5109 to i8*
  %v2_5115 = load i8, i8* %v1_5115, align 1
  %v9_5115 = icmp eq i8 %v2_5115, 0
  br i1 %v9_5115, label %dec_label_pc_5192.thread, label %dec_label_pc_511a

dec_label_pc_511a:                                ; preds = %dec_label_pc_5110
  store i64 ptrtoint ([66 x i8]* @global_var_16ba0.169 to i64), i64* @r14, align 8
  store i64 %v2_4063, i64* %rax.global-to-local, align 8
  %v0_5124 = load i64, i64* @rbx, align 8
  store i64 %v0_5124, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_5143

dec_label_pc_512f:                                ; preds = %dec_label_pc_5169, %dec_label_pc_5151
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_5131 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_5131, i64* @rdi, align 8
  store i64 -1, i64* @rcx, align 8
  br label %bb

bb:                                               ; preds = %bb887, %dec_label_pc_512f
  %v22_5138 = phi i64 [ %v25_5138, %bb887 ], [ %v0_5131, %dec_label_pc_512f ]
  %v0_5138 = phi i64 [ %v26_5138, %bb887 ], [ -1, %dec_label_pc_512f ]
  %v1_5138 = icmp eq i64 %v0_5138, 0
  br i1 %v1_5138, label %bb888, label %bb887

bb887:                                            ; preds = %bb
  %v5_5138 = inttoptr i64 %v22_5138 to i8*
  %v6_5138 = load i8, i8* %v5_5138, align 1
  %v17_5138 = icmp eq i8 %v6_5138, 0
  %v23_5138 = load i1, i1* @df, align 1
  %v24_5138 = select i1 %v23_5138, i64 -1, i64 1
  %v25_5138 = add i64 %v24_5138, %v22_5138
  store i64 %v25_5138, i64* @rdi, align 8
  %v26_5138 = add i64 %v0_5138, -1
  store i64 %v26_5138, i64* @rcx, align 8
  br i1 %v17_5138, label %bb888, label %bb

bb888:                                            ; preds = %bb, %bb887
  %v0_513a = phi i64 [ 0, %bb ], [ %v26_5138, %bb887 ]
  %v1_513d = sub i64 -1, %v0_513a
  store i64 %v1_513d, i64* %rax.global-to-local, align 8
  %v2_5140 = add i64 %v0_5131, %v1_513d
  %v1_5146.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_5143

dec_label_pc_5143:                                ; preds = %bb888, %dec_label_pc_511a
  %v1_5146 = phi i64 [ %v1_5146.pre, %bb888 ], [ ptrtoint ([66 x i8]* @global_var_16ba0.169 to i64), %dec_label_pc_511a ]
  %v0_515d = phi i64 [ %v2_5140, %bb888 ], [ ptrtoint ([66 x i8]* @global_var_16ba0.169 to i64), %dec_label_pc_511a ]
  store i64 %v0_515d, i64* %rbx.global-to-local, align 8
  %v2_5146 = sub i64 %v0_515d, %v1_5146
  store i64 %v2_5146, i64* %rax.global-to-local, align 8
  %tmp921 = icmp ugt i64 %v2_5146, ptrtoint (i1* @global_var_104c.170 to i64)
  br i1 %tmp921, label %dec_label_pc_5185, label %dec_label_pc_5151

dec_label_pc_5151:                                ; preds = %dec_label_pc_5143
  store i64 ptrtoint ([6 x i8]* @global_var_17f17.171 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  %v1_515d = inttoptr i64 %v0_515d to i8*
  store i64 %v0_515d, i64* @rdi, align 8
  %v7_5160 = call i32 @strncmp(i8* %v1_515d, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_17f17.171, i64 0, i64 0), i32 5)
  %v9_5160 = sext i32 %v7_5160 to i64
  store i64 %v9_5160, i64* %rax.global-to-local, align 8
  %v5_5165 = icmp eq i32 %v7_5160, 0
  %v1_5167 = icmp eq i1 %v5_5165, false
  br i1 %v1_5167, label %dec_label_pc_512f, label %dec_label_pc_5169

dec_label_pc_5169:                                ; preds = %dec_label_pc_5151
  store i64 %v6_5109, i64* @rsi, align 8
  %v0_516e = load i64, i64* %rbx.global-to-local, align 8
  %v1_516e = add i64 %v0_516e, 5
  %v2_516e = inttoptr i64 %v1_516e to i8*
  store i64 %v1_516e, i64* @rdi, align 8
  store i64 0, i64* @rdx, align 8
  %v7_5174 = call i32 @fnmatch(i8* %v2_516e, i8* %v1_5115, i32 0)
  %v9_5174 = sext i32 %v7_5174 to i64
  store i64 %v9_5174, i64* %rax.global-to-local, align 8
  %v5_5179 = icmp eq i32 %v7_5174, 0
  %v1_517b = icmp eq i1 %v5_5179, false
  br i1 %v1_517b, label %dec_label_pc_512f, label %dec_label_pc_517d

dec_label_pc_517d:                                ; preds = %dec_label_pc_5169
  %v0_517d = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_517d, i64* @rbx, align 8
  store i64 %v2_4063, i64* @r12, align 8
  br label %dec_label_pc_5192

dec_label_pc_5185:                                ; preds = %dec_label_pc_5143
  %v0_5185 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_5185, i64* @rbx, align 8
  store i64 %v2_4063, i64* @r12, align 8
  br label %dec_label_pc_5192.thread

dec_label_pc_5192.thread:                         ; preds = %dec_label_pc_50fa, %dec_label_pc_5110, %dec_label_pc_5185
  store i8 0, i8* @global_var_221312.58, align 1
  br label %dec_label_pc_4a56

dec_label_pc_5192:                                ; preds = %dec_label_pc_5549, %dec_label_pc_5529, %dec_label_pc_551b, %dec_label_pc_517d, %dec_label_pc_50f1
  %v0_5192.pr = load i8, i8* @global_var_221312.58, align 1
  %v7_5192 = icmp eq i8 %v0_5192.pr, 0
  br i1 %v7_5192, label %dec_label_pc_4a56, label %dec_label_pc_519f

dec_label_pc_519f:                                ; preds = %dec_label_pc_5192
  store i64 13, i64* @rdi, align 8
  %v1_51a4 = call i64 @function_5c50(i64 13)
  store i64 %v1_51a4, i64* %rax.global-to-local, align 8
  %v4_51a9 = trunc i64 %v1_51a4 to i8
  %v5_51a9 = icmp eq i8 %v4_51a9, 0
  %v1_51ab = icmp eq i1 %v5_51a9, false
  br i1 %v1_51ab, label %dec_label_pc_51e3, label %dec_label_pc_51ad

dec_label_pc_51ad:                                ; preds = %dec_label_pc_519f
  store i64 14, i64* @rdi, align 8
  %v1_51b2 = call i64 @function_5c50(i64 14)
  store i64 %v1_51b2, i64* %rax.global-to-local, align 8
  %v4_51b7 = trunc i64 %v1_51b2 to i8
  %v5_51b7 = icmp eq i8 %v4_51b7, 0
  br i1 %v5_51b7, label %dec_label_pc_51c4, label %dec_label_pc_51bb

dec_label_pc_51bb:                                ; preds = %dec_label_pc_51ad
  %v0_51bb = load i8, i8* @global_var_221390.172, align 1
  %v7_51bb = icmp eq i8 %v0_51bb, 0
  %v1_51c2 = icmp eq i1 %v7_51bb, false
  br i1 %v1_51c2, label %dec_label_pc_51e3, label %dec_label_pc_51c4

dec_label_pc_51c4:                                ; preds = %dec_label_pc_51bb, %dec_label_pc_51ad
  store i64 12, i64* @rdi, align 8
  %v1_51c9 = call i64 @function_5c50(i64 12)
  store i64 %v1_51c9, i64* %rax.global-to-local, align 8
  %v4_51ce = trunc i64 %v1_51c9 to i8
  %v5_51ce = icmp eq i8 %v4_51ce, 0
  br i1 %v5_51ce, label %dec_label_pc_4a56, label %dec_label_pc_51d6

dec_label_pc_51d6:                                ; preds = %dec_label_pc_51c4
  %v0_51d6 = load i32, i32* @global_var_221338.17, align 4
  %v7_51d6 = icmp eq i32 %v0_51d6, 0
  %v1_51dd = icmp eq i1 %v7_51d6, false
  br i1 %v1_51dd, label %dec_label_pc_4a56, label %dec_label_pc_51e3

dec_label_pc_51e3:                                ; preds = %dec_label_pc_51d6, %dec_label_pc_51bb, %dec_label_pc_519f
  store i8 1, i8* @global_var_2212fd.173, align 1
  br label %dec_label_pc_4a56

dec_label_pc_51ef:                                ; preds = %dec_label_pc_40b1
  %v0_51ef = load i64, i64* @r13, align 8
  store i64 %v0_51ef, i64* @rdi, align 8
  %sext68 = mul i64 %v0_51ef, 4294967296
  %v1_51f2 = sdiv i64 %sext68, 4294967296
  %v2_51f2 = call i64 @function_13ce0(i64 %v1_51f2)
  store i64 %v2_51f2, i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([62 x i8]* @global_var_1a108.174 to i64), i64* @rsi, align 8
  store i64 %v2_51f2, i64* %r13.global-to-local, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_5208 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @global_var_1a108.174, i64 0, i64 0), i32 5)
  %v11_5208 = ptrtoint i8* %v9_5208 to i64
  store i64 %v2_51f2, i64* @rcx, align 8
  store i64 %v11_5208, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %v9_5208)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_40d7

dec_label_pc_5223:                                ; preds = %dec_label_pc_4b92
  %v1_5223 = icmp eq i64 %v0_4b96, 0
  br i1 %v1_5223, label %dec_label_pc_4c76, label %dec_label_pc_522c

dec_label_pc_522c:                                ; preds = %dec_label_pc_5223
  %v1_522c = add i64 %v0_4b96, 24
  %v2_522c = inttoptr i64 %v1_522c to i64*
  %v3_522c = load i64, i64* %v2_522c, align 8
  %v10_522c = icmp eq i64 %v3_522c, 0
  %v1_5231 = icmp eq i1 %v10_522c, false
  br i1 %v1_5231, label %dec_label_pc_4bdc.preheader.thread, label %dec_label_pc_5237

dec_label_pc_5237:                                ; preds = %dec_label_pc_522c
  store i8 0, i8* @global_var_2212b8.11, align 1
  br label %dec_label_pc_4bdc.preheader.thread

dec_label_pc_5243:                                ; preds = %dec_label_pc_4a1c
  %v0_5243 = load i64, i64* @r14, align 8
  %v1_5243 = inttoptr i64 %v0_5243 to i8*
  %v2_5243 = load i8, i8* %v1_5243, align 1
  %v12_5243 = icmp eq i8 %v2_5243, 43
  br i1 %v12_5243, label %dec_label_pc_538b, label %dec_label_pc_524d

dec_label_pc_524d:                                ; preds = %dec_label_pc_537f, %dec_label_pc_5243
  %v0_5260 = phi i64 [ ptrtoint ([7 x i8]* @global_var_17da0.42 to i64), %dec_label_pc_537f ], [ %v0_5243, %dec_label_pc_5243 ]
  store i64 ptrtoint (i64* @global_var_16b80.175 to i64), i64* @rdx, align 8
  store i64 ptrtoint ([4 x i8*]* @global_var_21f980.178 to i64), i64* @rsi, align 8
  store i64 4, i64* @rcx, align 8
  store i64 %v0_5260, i64* @rdi, align 8
  %v6_5263 = call i64 @function_c2c0(i64 %v0_5260, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @global_var_21f980.178, i64 0, i64 0), i64* nonnull @global_var_16b80.175, i64 4)
  store i64 %v6_5263, i64* %rax.global-to-local, align 8
  %v1_5268 = icmp eq i64 %v6_5263, 0
  %v2_5268 = icmp slt i64 %v6_5263, 0
  br i1 %v2_5268, label %dec_label_pc_5606, label %dec_label_pc_5271

dec_label_pc_5271:                                ; preds = %dec_label_pc_524d
  %v10_5271 = icmp eq i64 %v6_5263, 1
  br i1 %v10_5271, label %dec_label_pc_5731, label %dec_label_pc_527b

dec_label_pc_527b:                                ; preds = %dec_label_pc_5271
  %v7_527b = icmp sgt i64 %v6_5263, 1
  br i1 %v7_527b, label %dec_label_pc_5281, label %dec_label_pc_5578

dec_label_pc_5281:                                ; preds = %dec_label_pc_527b
  %v10_5281 = icmp eq i64 %v6_5263, 2
  br i1 %v10_5281, label %dec_label_pc_574b, label %dec_label_pc_528b

dec_label_pc_528b:                                ; preds = %dec_label_pc_5281
  %v10_528b = icmp eq i64 %v6_5263, 3
  %v1_528f = icmp eq i1 %v10_528b, false
  br i1 %v1_528f, label %dec_label_pc_52d3, label %dec_label_pc_5291

dec_label_pc_5291:                                ; preds = %dec_label_pc_528b
  store i64 2, i64* @rdi, align 8
  %v1_5296 = load i64, i64* @rsi, align 8
  %v2_5296 = call i64 @function_d830(i64 2, i64 %v1_5296)
  store i64 %v2_5296, i64* %rax.global-to-local, align 8
  %v4_529b = trunc i64 %v2_5296 to i8
  %v5_529b = icmp eq i8 %v4_529b, 0
  br i1 %v5_529b, label %dec_label_pc_52d3, label %dec_label_pc_529f

dec_label_pc_529f:                                ; preds = %dec_label_pc_5291
  %v0_529f = load i64, i64* bitcast ([2 x i8*]* @global_var_220040.181 to i64*), align 8
  %v1_529f = inttoptr i64 %v0_529f to i8*
  store i64 %v0_529f, i64* @rsi, align 8
  store i64 2, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_52ad = call i8* @dcgettext(i8* null, i8* %v1_529f, i32 2)
  %v11_52ad = ptrtoint i8* %v9_52ad to i64
  store i64 %v11_52ad, i64* %rax.global-to-local, align 8
  %v0_52b2 = load i64, i64* bitcast ([12 x i8]** @global_var_220048.182 to i64*), align 8
  store i64 %v0_52b2, i64* @rsi, align 8
  store i64 2, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  store i64 %v11_52ad, i64* bitcast ([2 x i8*]* @global_var_220040.181 to i64*), align 8
  %v3_52c7 = inttoptr i64 %v0_52b2 to i8*
  %v6_52c7 = call i8* @dcgettext(i8* null, i8* %v3_52c7, i32 2)
  %v8_52c7 = ptrtoint i8* %v6_52c7 to i64
  store i64 %v8_52c7, i64* %rax.global-to-local, align 8
  store i64 %v8_52c7, i64* bitcast ([12 x i8]** @global_var_220048.182 to i64*), align 8
  br label %dec_label_pc_52d3

dec_label_pc_52d3:                                ; preds = %dec_label_pc_574b, %dec_label_pc_5731, %dec_label_pc_5581, %dec_label_pc_5578, %dec_label_pc_53c7, %dec_label_pc_529f, %dec_label_pc_5291, %dec_label_pc_528b
  %v0_52d3 = load i64, i64* @rdi, align 8
  %v1_52d3 = load i64, i64* @rsi, align 8
  %v2_52d3 = call i64 @function_5d20(i64 %v0_52d3, i64 %v1_52d3)
  store i64 %v2_52d3, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4a42

dec_label_pc_52fa:                                ; preds = %dec_label_pc_4934
  store i64 1, i64* @rdx, align 8
  store i64 32, i64* @rsi, align 8
  store i64 %v2_4943, i64* @rdi, align 8
  %v5_5307 = call i64 @function_135d0(i64 %v2_4943, i8 32, i64 1)
  store i64 %v5_5307, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_4959

dec_label_pc_5311:                                ; preds = %dec_label_pc_4857
  store i64 3, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i32 2, i32* @global_var_221338.17, align 4
  %v4_5322 = call i64 @function_135b0(i32 0, i64 3)
  store i64 %v4_5322, i64* %rax.global-to-local, align 8
  store i8 1, i8* @global_var_2212d8.16, align 1
  br label %dec_label_pc_3f78

dec_label_pc_533b:                                ; preds = %dec_label_pc_49f0
  store i32 4, i32* @global_var_221330.20, align 4
  br label %dec_label_pc_4a42

dec_label_pc_534a:                                ; preds = %dec_label_pc_5003
  store i64 1, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v3_5351 = load i64, i64* @rdx, align 8
  %v4_5351 = call i64 @function_6570(i32 0, i64 1, i64 %v3_5351)
  store i64 %v4_5351, i64* @rax, align 8
  br label %dec_label_pc_5015

dec_label_pc_535b:                                ; preds = %dec_label_pc_4faa
  br label %dec_label_pc_4fb8

dec_label_pc_5367:                                ; preds = %dec_label_pc_49ff
  store i64 ptrtoint ([11 x i8]* @global_var_17e79.183 to i64), i64* @rdi, align 8
  %v3_536e = call i8* @getenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_17e79.183, i64 0, i64 0))
  %v4_536e = ptrtoint i8* %v3_536e to i64
  store i64 %v4_536e, i64* %rax.global-to-local, align 8
  %v2_5373 = icmp eq i8* %v3_536e, null
  store i64 %v4_536e, i64* @r14, align 8
  %v1_5379 = icmp eq i1 %v2_5373, false
  br i1 %v1_5379, label %dec_label_pc_4a08, label %dec_label_pc_537f

dec_label_pc_537f:                                ; preds = %dec_label_pc_5367
  store i64 ptrtoint ([7 x i8]* @global_var_17da0.42 to i64), i64* @r14, align 8
  br label %dec_label_pc_524d

dec_label_pc_538b:                                ; preds = %dec_label_pc_5243
  %v1_538b = add i64 %v0_5243, 1
  store i64 %v1_538b, i64* @r14, align 8
  store i64 10, i64* @rsi, align 8
  store i64 %v1_538b, i64* @rdi, align 8
  %v1_5397 = inttoptr i64 %v1_538b to i8*
  %v4_5397 = call i8* @strchr(i8* %v1_5397, i32 10)
  %v5_5397 = ptrtoint i8* %v4_5397 to i64
  store i64 %v5_5397, i64* %rax.global-to-local, align 8
  %v2_539c = icmp eq i8* %v4_5397, null
  store i64 %v5_5397, i64* %r13.global-to-local, align 8
  br i1 %v2_539c, label %dec_label_pc_559b, label %dec_label_pc_53a8

dec_label_pc_53a8:                                ; preds = %dec_label_pc_538b
  %v2_53a8 = add i64 %v5_5397, 1
  store i64 %v2_53a8, i64* @r15, align 8
  store i64 10, i64* @rsi, align 8
  store i64 %v2_53a8, i64* @rdi, align 8
  %v1_53b4 = inttoptr i64 %v2_53a8 to i8*
  %v4_53b4 = call i8* @strchr(i8* %v1_53b4, i32 10)
  %v6_53b4 = ptrtoint i8* %v4_53b4 to i64
  store i64 %v6_53b4, i64* @rax, align 8
  %v1_53b9 = icmp eq i8* %v4_53b4, null
  %v1_53bc = icmp eq i1 %v1_53b9, false
  br i1 %v1_53bc, label %dec_label_pc_5797, label %dec_label_pc_53c2

dec_label_pc_53c2:                                ; preds = %dec_label_pc_53a8
  %v0_53c2 = load i64, i64* %r13.global-to-local, align 8
  %v1_53c2 = inttoptr i64 %v0_53c2 to i8*
  store i8 0, i8* %v1_53c2, align 1
  %v0_53c7.pre = load i64, i64* @r14, align 8
  %v0_53ce.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_53c7

dec_label_pc_53c7:                                ; preds = %dec_label_pc_559b, %dec_label_pc_53c2
  %v0_53c7 = phi i64 [ %v0_559b, %dec_label_pc_559b ], [ %v0_53c7.pre, %dec_label_pc_53c2 ]
  %v0_53ce = phi i64 [ %v0_559b, %dec_label_pc_559b ], [ %v0_53ce.pre, %dec_label_pc_53c2 ]
  store i64 %v0_53c7, i64* bitcast ([2 x i8*]* @global_var_220040.181 to i64*), align 8
  store i64 %v0_53ce, i64* bitcast ([12 x i8]** @global_var_220048.182 to i64*), align 8
  br label %dec_label_pc_52d3

dec_label_pc_53da:                                ; preds = %dec_label_pc_50d7
  store i64 %v4_50c8, i64* @rdi, align 8
  store i64 ptrtoint ([24 x i8*]* @global_var_21f860.207 to i64), i64* @r15, align 8
  store i16 16191, i16* %stack_var_-67, align 2
  %v1_53f0 = call i64 @function_146b0(i64 %v4_50c8)
  store i64 %v1_53f0, i64* %rax.global-to-local, align 8
  %v0_53f5 = load i64, i64* @rbp, align 8
  store i64 %v1_53f0, i64* @global_var_221300.208, align 8
  store i64 %v1_53f0, i64* %stack_var_-88, align 8
  %v0_5405 = load i64, i64* @rbx, align 8
  %v2_55a8 = ptrtoint i8** %stack_var_-96 to i64
  %v2_5471 = ptrtoint i16* %stack_var_-67 to i64
  %tmp894 = bitcast i16* %stack_var_-67 to i8*
  br label %dec_label_pc_540a

dec_label_pc_540a:                                ; preds = %dec_label_pc_577b, %dec_label_pc_56e1, %dec_label_pc_56ba, %dec_label_pc_53da
  %v3_540a = load i8*, i8** %stack_var_-96, align 8
  %v4_540a = ptrtoint i8* %v3_540a to i64
  store i64 %v4_540a, i64* %rax.global-to-local, align 8
  %v2_540f = load i8, i8* %v3_540a, align 1
  %v3_540f = zext i8 %v2_540f to i64
  store i64 %v3_540f, i64* @rdx, align 8
  %v11_5412 = icmp eq i8 %v2_540f, 42
  br i1 %v11_5412, label %dec_label_pc_55a3, label %dec_label_pc_541b

dec_label_pc_541b:                                ; preds = %dec_label_pc_540a
  %v11_541b = icmp eq i8 %v2_540f, 58
  br i1 %v11_541b, label %dec_label_pc_577b, label %dec_label_pc_5424

dec_label_pc_5424:                                ; preds = %dec_label_pc_541b
  %v5_5424 = icmp eq i8 %v2_540f, 0
  br i1 %v5_5424, label %dec_label_pc_5789, label %dec_label_pc_542c

dec_label_pc_542c:                                ; preds = %dec_label_pc_5424
  %v1_542c = add i64 %v4_540a, 1
  store i64 %v1_542c, i64* @rdx, align 8
  %v4_5430 = inttoptr i64 %v1_542c to i8*
  store i8* %v4_5430, i8** %stack_var_-96, align 8
  %v2_5435 = load i8, i8* %v3_540a, align 1
  %v3_5435 = zext i8 %v2_5435 to i64
  store i64 %v3_5435, i64* @rdx, align 8
  %v4_5438 = zext i8 %v2_5435 to i16
  store i16 %v4_5438, i16* %stack_var_-67, align 2
  %v3_543c = load i8, i8* %v4_5430, align 1
  %v10_543c = icmp eq i8 %v3_543c, 0
  br i1 %v10_543c, label %dec_label_pc_55f1, label %dec_label_pc_5446

dec_label_pc_5446:                                ; preds = %dec_label_pc_542c
  %v1_5446 = add i64 %v4_540a, 2
  %v4_544a = inttoptr i64 %v1_5446 to i8*
  %v1_5457 = add i64 %v4_540a, 3
  store i64 %v1_5457, i64* @rdx, align 8
  %v4_545b = inttoptr i64 %v1_5457 to i8*
  store i8* %v4_545b, i8** %stack_var_-96, align 8
  %v3_5460 = load i8, i8* %v4_544a, align 1
  %v13_5460 = icmp eq i8 %v3_5460, 61
  %v1_5464 = icmp eq i1 %v13_5460, false
  br i1 %v1_5464, label %dec_label_pc_55f1, label %dec_label_pc_546a

dec_label_pc_546a:                                ; preds = %dec_label_pc_5446
  store i64 ptrtoint ([3 x i8]* @global_var_17d92.184 to i64), i64* @rsi, align 8
  store i64 %v2_5471, i64* @rbx, align 8
  store i64 0, i64* @rbp, align 8
  br label %dec_label_pc_5478

dec_label_pc_5478:                                ; preds = %dec_label_pc_5488, %dec_label_pc_546a
  %v3_547b = phi i64 [ %v5_548c, %dec_label_pc_5488 ], [ ptrtoint ([3 x i8]* @global_var_17d92.184 to i64), %dec_label_pc_546a ]
  store i64 %v2_5471, i64* @rdi, align 8
  %v4_547b = inttoptr i64 %v3_547b to i8*
  %v5_547b = call i32 @strcmp(i8* %tmp894, i8* %v4_547b)
  %v7_547b = sext i32 %v5_547b to i64
  store i64 %v7_547b, i64* @rax, align 8
  %v5_5480 = icmp eq i32 %v5_547b, 0
  %v0_56e8 = load i64, i64* @rbp, align 8
  br i1 %v5_5480, label %dec_label_pc_56e1, label %dec_label_pc_5488

dec_label_pc_5488:                                ; preds = %dec_label_pc_5478
  %v1_5488 = add i64 %v0_56e8, 1
  store i64 %v1_5488, i64* @rbp, align 8
  %v0_548c = load i64, i64* @r15, align 8
  %v2_548c = mul i64 %v1_5488, 8
  %v3_548c = add i64 %v0_548c, %v2_548c
  %v4_548c = inttoptr i64 %v3_548c to i64*
  %v5_548c = load i64, i64* %v4_548c, align 8
  store i64 %v5_548c, i64* @rsi, align 8
  %v1_5490 = icmp eq i64 %v5_548c, 0
  %v1_5493 = icmp eq i1 %v1_5490, false
  br i1 %v1_5493, label %dec_label_pc_5478, label %dec_label_pc_5495

dec_label_pc_5495:                                ; preds = %dec_label_pc_56e1, %dec_label_pc_5488
  store i64 %v2_5471, i64* @rdi, align 8
  store i64 %v0_53f5, i64* @rbp, align 8
  store i64 %v0_5405, i64* @rbx, align 8
  %sext42 = mul i64 %v2_5471, 4294967296
  %v1_54a1 = sdiv i64 %sext42, 4294967296
  %v2_54a1 = call i64 @function_13ce0(i64 %v1_54a1)
  store i64 %v2_54a1, i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([24 x i8]* @global_var_17f1d.209 to i64), i64* @rsi, align 8
  store i64 %v2_54a1, i64* @r14, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_54b7 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @global_var_17f1d.209, i64 0, i64 0), i32 5)
  %v11_54b7 = ptrtoint i8* %v9_54b7 to i64
  %v0_54bc = load i64, i64* @r14, align 8
  store i64 %v0_54bc, i64* @rcx, align 8
  store i64 %v11_54b7, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %v9_54b7)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_54cd

dec_label_pc_54cd:                                ; preds = %dec_label_pc_55f1, %dec_label_pc_5495
  store i64 ptrtoint ([52 x i8]* @global_var_1a240.210 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_54db = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @global_var_1a240.210, i64 0, i64 0), i32 5)
  %v11_54db = ptrtoint i8* %v9_54db to i64
  store i64 0, i64* @rsi, align 8
  store i64 %v11_54db, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %v9_54db)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_54ee = load i64, i64* @global_var_221300.208, align 8
  store i64 %v0_54ee, i64* @rdi, align 8
  %v1_54f5 = inttoptr i64 %v0_54ee to i64*
  call void @free(i64* %v1_54f5)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %storemerge5094 = load i64, i64* @global_var_221308.211, align 8
  store i64 %storemerge5094, i64* @rdi, align 8
  %v1_550f95 = icmp eq i64 %storemerge5094, 0
  %v1_5512102 = icmp eq i1 %v1_550f95, false
  br i1 %v1_5512102, label %dec_label_pc_5503, label %dec_label_pc_5514

dec_label_pc_5503:                                ; preds = %dec_label_pc_54cd, %dec_label_pc_5503
  %v0_5503 = phi i64 [ %storemerge50, %dec_label_pc_5503 ], [ %storemerge5094, %dec_label_pc_54cd ]
  %v1_5503 = add i64 %v0_5503, 32
  %v2_5503 = inttoptr i64 %v1_5503 to i64*
  %v3_5503 = load i64, i64* %v2_5503, align 8
  store i64 %v3_5503, i64* @r14, align 8
  %v1_5507 = inttoptr i64 %v0_5503 to i64*
  call void @free(i64* %v1_5507)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %storemerge50 = load i64, i64* @r14, align 8
  store i64 %storemerge50, i64* @rdi, align 8
  %v1_550f = icmp eq i64 %storemerge50, 0
  %v1_5512 = icmp eq i1 %v1_550f, false
  br i1 %v1_5512, label %dec_label_pc_5503, label %dec_label_pc_5514

dec_label_pc_5514:                                ; preds = %dec_label_pc_5503, %dec_label_pc_54cd
  store i8 0, i8* @global_var_221312.58, align 1
  br label %dec_label_pc_551b

dec_label_pc_551b:                                ; preds = %dec_label_pc_5789, %dec_label_pc_5514
  %v0_551b = load i64, i64* @global_var_2200d0.212, align 8
  %v10_551b = icmp eq i64 %v0_551b, 6
  %v1_5523 = icmp eq i1 %v10_551b, false
  br i1 %v1_5523, label %dec_label_pc_5192, label %dec_label_pc_5529

dec_label_pc_5529:                                ; preds = %dec_label_pc_551b
  %v0_5529 = load i64, i64* bitcast ([6 x i8]** @global_var_2200d8.214 to i64*), align 8
  %v1_5529 = inttoptr i64 %v0_5529 to i8*
  store i64 %v0_5529, i64* @rdi, align 8
  store i64 ptrtoint ([7 x i8]* @global_var_17f35.215 to i64), i64* @rsi, align 8
  store i64 6, i64* @rdx, align 8
  %v7_553c = call i32 @strncmp(i8* %v1_5529, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_17f35.215, i64 0, i64 0), i32 6)
  %v9_553c = sext i32 %v7_553c to i64
  store i64 %v9_553c, i64* %rax.global-to-local, align 8
  %v5_5541 = icmp eq i32 %v7_553c, 0
  %v1_5543 = icmp eq i1 %v5_5541, false
  br i1 %v1_5543, label %dec_label_pc_5192, label %dec_label_pc_5549

dec_label_pc_5549:                                ; preds = %dec_label_pc_5529
  store i8 1, i8* @global_var_221390.172, align 1
  br label %dec_label_pc_5192

dec_label_pc_5555:                                ; preds = %dec_label_pc_4db6
  %v0_5555 = load i64, i64* @global_var_220070.153, align 8
  %v10_5555 = icmp eq i64 %v0_5555, 1
  %v1_555d = icmp eq i1 %v10_5555, false
  br i1 %v1_555d, label %dec_label_pc_4dc8, label %dec_label_pc_5563

dec_label_pc_5563:                                ; preds = %dec_label_pc_5555
  %v0_5563 = load i64, i64* bitcast (i64** @global_var_220078.217 to i64*), align 8
  store i64 %v0_5563, i64* %rax.global-to-local, align 8
  %tmp900 = trunc i64 %v0_5563 to i8
  %v12_556a = icmp eq i8 %tmp900, 109
  %v1_556d = icmp eq i1 %v12_556a, false
  br i1 %v1_556d, label %dec_label_pc_4dc8, label %dec_label_pc_4de0

dec_label_pc_5578:                                ; preds = %dec_label_pc_527b
  %v1_557b = icmp eq i1 %v1_5268, false
  br i1 %v1_557b, label %dec_label_pc_52d3, label %dec_label_pc_5581

dec_label_pc_5581:                                ; preds = %dec_label_pc_5578
  store i64 ptrtoint ([24 x i8]* @global_var_17ed2.218 to i64), i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([24 x i8]* @global_var_17ed2.218 to i64), i64* bitcast ([12 x i8]** @global_var_220048.182 to i64*), align 8
  store i64 ptrtoint ([24 x i8]* @global_var_17ed2.218 to i64), i64* bitcast ([2 x i8*]* @global_var_220040.181 to i64*), align 8
  br label %dec_label_pc_52d3

dec_label_pc_559b:                                ; preds = %dec_label_pc_538b
  %v0_559b = load i64, i64* @r14, align 8
  br label %dec_label_pc_53c7

dec_label_pc_55a3:                                ; preds = %dec_label_pc_540a
  store i64 40, i64* @rdi, align 8
  store i64 %v2_55a8, i64* @rbx, align 8
  %v1_55ad = call i64 @function_14480(i64 40)
  store i64 %v1_55ad, i64* @r14, align 8
  %v0_55b5 = load i64, i64* @global_var_221308.211, align 8
  store i64 1, i64* @rdx, align 8
  store i64 %v1_55ad, i64* @rcx, align 8
  store i64 %v2_55a8, i64* @rsi, align 8
  store i64 %v2_4063, i64* @rdi, align 8
  %v3_55ca = load i8*, i8** %stack_var_-96, align 8
  %v4_55ca = ptrtoint i8* %v3_55ca to i64
  %v5_55ca = add i64 %v4_55ca, 1
  %v23_55ca = inttoptr i64 %v5_55ca to i8*
  store i8* %v23_55ca, i8** %stack_var_-96, align 8
  store i64 %v1_55ad, i64* @global_var_221308.211, align 8
  %v2_55d7 = add i64 %v1_55ad, 32
  %v3_55d7 = inttoptr i64 %v2_55d7 to i64*
  store i64 %v0_55b5, i64* %v3_55d7, align 8
  %v3_55db = load i64, i64* %stack_var_-88, align 8
  store i64 %v3_55db, i64* %rax.global-to-local, align 8
  %v1_55e0 = load i64, i64* @r14, align 8
  %v2_55e0 = add i64 %v1_55e0, 8
  %v3_55e0 = inttoptr i64 %v2_55e0 to i64*
  store i64 %v3_55db, i64* %v3_55e0, align 8
  %v0_55e4 = load i64, i64* @rdi, align 8
  %v1_55e4 = inttoptr i64 %v0_55e4 to i64*
  %v5_55e4 = load i64, i64* @rcx, align 8
  %v8_55e4 = call i64 @function_59c0(i64* %v1_55e4, i64* nonnull %tmp886, i64 1, i64 %v5_55e4, i64 %v2_4063)
  store i64 %v8_55e4, i64* %rax.global-to-local, align 8
  %v4_55e9 = trunc i64 %v8_55e4 to i8
  %v5_55e9 = icmp eq i8 %v4_55e9, 0
  %v1_55eb = icmp eq i1 %v5_55e9, false
  br i1 %v1_55eb, label %dec_label_pc_56a3, label %dec_label_pc_55f1

dec_label_pc_55f1:                                ; preds = %dec_label_pc_56ba, %dec_label_pc_56a3, %dec_label_pc_55a3, %dec_label_pc_5446, %dec_label_pc_542c
  store i64 %v0_53f5, i64* @rbp, align 8
  store i64 %v0_5405, i64* @rbx, align 8
  br label %dec_label_pc_54cd

dec_label_pc_5606:                                ; preds = %dec_label_pc_524d
  store i64 ptrtoint ([11 x i8]* @global_var_17ea1.219 to i64), i64* @rdi, align 8
  store i64 %v6_5263, i64* @rdx, align 8
  %v0_5610 = load i64, i64* @r14, align 8
  store i64 %v0_5610, i64* @rsi, align 8
  store i64 ptrtoint ([16 x i8]* @global_var_17ec2.220 to i64), i64* @rbp, align 8
  %v6_561a = call i64 @function_c3e0(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_17ea1.219, i64 0, i64 0), i64 %v0_5610, i64 %v6_5263)
  store i64 %v6_561a, i64* %rax.global-to-local, align 8
  %v0_561f = load %_IO_FILE*, %_IO_FILE** @global_var_2202c0.221, align 8
  %v1_561f = ptrtoint %_IO_FILE* %v0_561f to i64
  store i64 %v1_561f, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([22 x i8]* @global_var_17eac.222 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_5634 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @global_var_17eac.222, i64 0, i64 0), i32 5)
  %v11_5634 = ptrtoint i8* %v9_5634 to i64
  store i64 %v11_5634, i64* %rax.global-to-local, align 8
  %v0_5639 = load i64, i64* %rbx.global-to-local, align 8
  %v1_5639 = inttoptr i64 %v0_5639 to %_IO_FILE*
  store i64 %v0_5639, i64* @rsi, align 8
  store i64 %v11_5634, i64* @rdi, align 8
  store i64 ptrtoint ([4 x i8*]* @global_var_21f980.178 to i64), i64* %rbx.global-to-local, align 8
  %v6_5646 = call i32 @fputs_unlocked(i8* %v9_5634, %_IO_FILE* %v1_5639)
  %v8_5646 = sext i32 %v6_5646 to i64
  store i64 %v8_5646, i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([9 x i8]* @global_var_17d89.111 to i64), i64* @rcx, align 8
  br label %dec_label_pc_5652

dec_label_pc_5652:                                ; preds = %dec_label_pc_5652, %dec_label_pc_5606
  %v9_5667 = phi i64 [ %v2_566c, %dec_label_pc_5652 ], [ ptrtoint ([9 x i8]* @global_var_17d89.111 to i64), %dec_label_pc_5606 ]
  %v0_5659 = phi i64 [ %v0_566c, %dec_label_pc_5652 ], [ ptrtoint ([4 x i8*]* @global_var_21f980.178 to i64), %dec_label_pc_5606 ]
  %v0_5652 = load %_IO_FILE*, %_IO_FILE** @global_var_2202c0.221, align 8
  %v1_5652 = ptrtoint %_IO_FILE* %v0_5652 to i64
  store i64 %v1_5652, i64* @rdi, align 8
  %v1_5659 = add i64 %v0_5659, 8
  store i64 %v1_5659, i64* %rbx.global-to-local, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_565f = load i64, i64* @rbp, align 8
  %v1_565f = inttoptr i64 %v0_565f to i8*
  store i64 %v0_565f, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %v10_5667 = inttoptr i64 %v9_5667 to i8*
  %v11_5667 = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v0_5652, i32 1, i8* %v1_565f, i8* %v10_5667)
  %v13_5667 = sext i32 %v11_5667 to i64
  store i64 %v13_5667, i64* %rax.global-to-local, align 8
  %v0_566c = load i64, i64* %rbx.global-to-local, align 8
  %v1_566c = inttoptr i64 %v0_566c to i64*
  %v2_566c = load i64, i64* %v1_566c, align 8
  store i64 %v2_566c, i64* @rcx, align 8
  %v1_566f = icmp eq i64 %v2_566c, 0
  %v1_5672 = icmp eq i1 %v1_566f, false
  br i1 %v1_5672, label %dec_label_pc_5652, label %dec_label_pc_5674

dec_label_pc_5674:                                ; preds = %dec_label_pc_5652
  %v0_5674 = load %_IO_FILE*, %_IO_FILE** @global_var_2202c0.221, align 8
  %v1_5674 = ptrtoint %_IO_FILE* %v0_5674 to i64
  store i64 %v1_5674, i64* @rbx, align 8
  store i64 ptrtoint ([54 x i8]* @global_var_1a178.223 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_5689 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @global_var_1a178.223, i64 0, i64 0), i32 5)
  %v11_5689 = ptrtoint i8* %v9_5689 to i64
  store i64 %v11_5689, i64* %rax.global-to-local, align 8
  %v0_568e = load i64, i64* @rbx, align 8
  %v1_568e = inttoptr i64 %v0_568e to %_IO_FILE*
  store i64 %v0_568e, i64* @rsi, align 8
  store i64 %v11_5689, i64* @rdi, align 8
  %v6_5694 = call i32 @fputs_unlocked(i8* %v9_5689, %_IO_FILE* %v1_568e)
  %v8_5694 = sext i32 %v6_5694 to i64
  store i64 %v8_5694, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5699

dec_label_pc_5699:                                ; preds = %dec_label_pc_4124, %dec_label_pc_5674
  store i64 2, i64* @rdi, align 8
  %v3_569e = call i64 @function_bb20(i32 2)
  unreachable

dec_label_pc_56a3:                                ; preds = %dec_label_pc_55a3
  %v3_56a3 = load i8*, i8** %stack_var_-96, align 8
  %v4_56a3 = ptrtoint i8* %v3_56a3 to i64
  store i64 %v4_56a3, i64* %rax.global-to-local, align 8
  %v1_56a8 = add i64 %v4_56a3, 1
  store i64 %v1_56a8, i64* @rdx, align 8
  %v4_56ac = inttoptr i64 %v1_56a8 to i8*
  store i8* %v4_56ac, i8** %stack_var_-96, align 8
  %v2_56b1 = load i8, i8* %v3_56a3, align 1
  %v12_56b1 = icmp eq i8 %v2_56b1, 61
  %v1_56b4 = icmp eq i1 %v12_56b1, false
  br i1 %v1_56b4, label %dec_label_pc_55f1, label %dec_label_pc_56ba

dec_label_pc_56ba:                                ; preds = %dec_label_pc_56a3
  %v3_56ba = load i64, i64* %stack_var_-88, align 8
  store i64 %v3_56ba, i64* %rax.global-to-local, align 8
  %v0_56bf = load i64, i64* @r14, align 8
  %v1_56bf = add i64 %v0_56bf, 16
  store i64 %v1_56bf, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %v2_55a8, i64* @rsi, align 8
  store i64 %v2_4063, i64* @rdi, align 8
  %v2_56cb = add i64 %v0_56bf, 24
  %v3_56cb = inttoptr i64 %v2_56cb to i64*
  store i64 %v3_56ba, i64* %v3_56cb, align 8
  %v0_56cf = load i64, i64* @rdi, align 8
  %v1_56cf = inttoptr i64 %v0_56cf to i64*
  %v2_56cf = load i64, i64* @rsi, align 8
  %v3_56cf = inttoptr i64 %v2_56cf to i64*
  %v5_56cf = load i64, i64* @rcx, align 8
  %v8_56cf = call i64 @function_59c0(i64* %v1_56cf, i64* %v3_56cf, i64 0, i64 %v5_56cf, i64 %v2_4063)
  store i64 %v8_56cf, i64* %rax.global-to-local, align 8
  %v4_56d4 = trunc i64 %v8_56cf to i8
  %v5_56d4 = icmp eq i8 %v4_56d4, 0
  %v1_56d6 = icmp eq i1 %v5_56d4, false
  br i1 %v1_56d6, label %dec_label_pc_540a, label %dec_label_pc_55f1

dec_label_pc_56e1:                                ; preds = %dec_label_pc_5478
  store i64 %v2_55a8, i64* @rsi, align 8
  %v2_56f0 = mul i64 %v0_56e8, 16
  store i64 0, i64* @rdx, align 8
  store i64 %v2_4063, i64* @rdi, align 8
  %v2_56f9 = add i64 %v2_56f0, ptrtoint (i64* @global_var_220060.150 to i64)
  store i64 %v2_56f9, i64* @rcx, align 8
  %v3_56fc = load i64, i64* %stack_var_-88, align 8
  store i64 %v3_56fc, i64* %rax.global-to-local, align 8
  %v2_5701 = add i64 %v2_56f0, add (i64 ptrtoint (i64* @global_var_220060.150 to i64), i64 8)
  %v3_5701 = inttoptr i64 %v2_5701 to i64*
  store i64 %v3_56fc, i64* %v3_5701, align 8
  %v0_5705 = load i64, i64* @rdi, align 8
  %v1_5705 = inttoptr i64 %v0_5705 to i64*
  %v2_5705 = load i64, i64* @rsi, align 8
  %v3_5705 = inttoptr i64 %v2_5705 to i64*
  %v5_5705 = load i64, i64* @rcx, align 8
  %v8_5705 = call i64 @function_59c0(i64* %v1_5705, i64* %v3_5705, i64 0, i64 %v5_5705, i64 %v2_4063)
  store i64 %v8_5705, i64* @rax, align 8
  %v4_570a = trunc i64 %v8_5705 to i8
  %v5_570a = icmp eq i8 %v4_570a, 0
  %v1_570c = icmp eq i1 %v5_570a, false
  br i1 %v1_570c, label %dec_label_pc_540a, label %dec_label_pc_5495

dec_label_pc_5717:                                ; preds = %dec_label_pc_4edb
  store i64 ptrtoint ([11 x i8]* @global_var_17e68.126 to i64), i64* @rdi, align 8
  %v2_571e = call i8* @getenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_17e68.126, i64 0, i64 0))
  %v4_571e = ptrtoint i8* %v2_571e to i64
  store i64 %v4_571e, i64* %rax.global-to-local, align 8
  %v1_5723 = icmp eq i8* %v2_571e, null
  %v1_5726 = icmp eq i1 %v1_5723, false
  br i1 %v1_5726, label %dec_label_pc_4f09, label %dec_label_pc_4f23

dec_label_pc_5731:                                ; preds = %dec_label_pc_5271
  store i64 ptrtoint ([15 x i8]* @global_var_17eea.224 to i64), i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([15 x i8]* @global_var_17eea.224 to i64), i64* bitcast ([12 x i8]** @global_var_220048.182 to i64*), align 8
  store i64 ptrtoint ([15 x i8]* @global_var_17eea.224 to i64), i64* bitcast ([2 x i8*]* @global_var_220040.181 to i64*), align 8
  br label %dec_label_pc_52d3

dec_label_pc_574b:                                ; preds = %dec_label_pc_5281
  store i64 ptrtoint ([10 x i8]* @global_var_17ef9.225 to i64), i64* bitcast ([2 x i8*]* @global_var_220040.181 to i64*), align 8
  store i64 ptrtoint ([12 x i8]* @global_var_17eed.226 to i64), i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([12 x i8]* @global_var_17eed.226 to i64), i64* bitcast ([12 x i8]** @global_var_220048.182 to i64*), align 8
  br label %dec_label_pc_52d3

dec_label_pc_576c:                                ; preds = %dec_label_pc_5036
  store i64 10, i64* @rsi, align 8
  %v5_5771 = call i32 @__overflow(%_IO_FILE* %v0_5036, i32 10)
  %v7_5771 = sext i32 %v5_5771 to i64
  store i64 %v7_5771, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5056

dec_label_pc_577b:                                ; preds = %dec_label_pc_541b
  %v1_577b = add i64 %v4_540a, 1
  store i64 %v1_577b, i64* %rax.global-to-local, align 8
  %v4_577f = inttoptr i64 %v1_577b to i8*
  store i8* %v4_577f, i8** %stack_var_-96, align 8
  br label %dec_label_pc_540a

dec_label_pc_5789:                                ; preds = %dec_label_pc_5424
  store i64 %v0_53f5, i64* @rbp, align 8
  store i64 %v0_5405, i64* @rbx, align 8
  br label %dec_label_pc_551b

dec_label_pc_5797:                                ; preds = %dec_label_pc_53a8
  %v0_5797 = load i64, i64* @r14, align 8
  store i64 %v0_5797, i64* @rdi, align 8
  %sext62 = mul i64 %v0_5797, 4294967296
  %v1_579a = sdiv i64 %sext62, 4294967296
  %v2_579a = call i64 @function_13ce0(i64 %v1_579a)
  store i64 %v2_579a, i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([29 x i8]* @global_var_17e84.227 to i64), i64* @rsi, align 8
  store i64 %v2_579a, i64* @rbx, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_57b0 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @global_var_17e84.227, i64 0, i64 0), i32 5)
  %v11_57b0 = ptrtoint i8* %v9_57b0 to i64
  %v0_57b5 = load i64, i64* @rbx, align 8
  store i64 %v0_57b5, i64* @rcx, align 8
  store i64 %v11_57b0, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 2, i64* @rdi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %v9_57b0)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_57c9 = load i32, i32* @global_var_2202a0.61, align 4
  %v1_57c9 = sext i32 %v0_57c9 to i64
  store i64 %v1_57c9, i64* @r8, align 8
  %v3_57d0 = load i64, i64* %stack_var_-88, align 8
  store i64 %v3_57d0, i64* @rsi, align 8
  store i64 ptrtoint ([4 x i8]** @global_var_21f2e0.51 to i64), i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  store i64 ptrtoint (i32* @0 to i64), i64* @rdi, align 8
  %v10_57df = call i64 @function_14d70(i64 ptrtoint (i32* @0 to i64), i64 %v3_57d0, i32 0, [4 x i8]** nonnull @global_var_21f2e0.51, i64 %v1_57c9)
  unreachable

dec_label_pc_57e4:                                ; preds = %dec_label_pc_4c04
  store i64 ptrtoint ([12 x i8]* @global_var_16a38.228 to i64), i64* @rcx, align 8
  store i64 ptrtoint ([9 x i8]* @global_var_17c00.229 to i64), i64* @rsi, align 8
  store i64 ptrtoint ([55 x i8]* @global_var_1a1b0.230 to i64), i64* @rdi, align 8
  store i64 ptrtoint (i32* @global_var_402.231 to i64), i64* @rdx, align 8
  call void @__assert_fail(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @global_var_1a1b0.230, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_17c00.229, i64 0, i64 0), i32 ptrtoint (i32* @global_var_402.231 to i32), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_16a38.228, i64 0, i64 0))
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5803

dec_label_pc_5803:                                ; preds = %dec_label_pc_4c1f, %dec_label_pc_57e4
  store i64 ptrtoint ([5 x i8]* @global_var_16ada.232 to i64), i64* @rcx, align 8
  store i64 ptrtoint ([9 x i8]* @global_var_17c00.229 to i64), i64* @rsi, align 8
  store i64 ptrtoint ([6 x i8]* @global_var_17f3f.233 to i64), i64* @rdi, align 8
  store i64 ptrtoint (i32* @global_var_638.234 to i64), i64* @rdx, align 8
  call void @__assert_fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_17f3f.233, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_17c00.229, i64 0, i64 0), i32 ptrtoint (i32* @global_var_638.234 to i32), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_16ada.232, i64 0, i64 0))
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5822

dec_label_pc_5822:                                ; preds = %dec_label_pc_5803, %dec_label_pc_4ca5
  store i64 ptrtoint ([5 x i8]* @global_var_16ada.232 to i64), i64* @rcx, align 8
  store i64 ptrtoint ([9 x i8]* @global_var_17c00.229 to i64), i64* @rsi, align 8
  store i64 ptrtoint ([41 x i8]* @global_var_1a210.235 to i64), i64* @rdi, align 8
  store i64 ptrtoint (i32* @global_var_66c.236 to i64), i64* @rdx, align 8
  call void @__assert_fail(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @global_var_1a210.235, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_17c00.229, i64 0, i64 0), i32 ptrtoint (i32* @global_var_66c.236 to i32), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_16ada.232, i64 0, i64 0))
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5841

dec_label_pc_5841:                                ; preds = %dec_label_pc_5822, %dec_label_pc_4cbe
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5846

dec_label_pc_5846:                                ; preds = %dec_label_pc_5841, %dec_label_pc_4a6c
  %v0_5846 = load i64, i64* @rdi, align 8
  %v1_5846 = call i64 @function_146d0(i64 %v0_5846)
  unreachable
}

define i64 @entry_point(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_5850:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_8 = alloca i64, align 8
  %v0_5852 = load i64, i64* @rdx, align 8
  store i64 %arg4, i64* @rsi, align 8
  %v4_5855 = ptrtoint i64* %stack_var_8 to i64
  %tmp248 = bitcast i64* %stack_var_8 to i8**
  store i64 %v4_5855, i64* @rdx, align 8
  store i64 90928, i64* @r8, align 8
  store i64 90816, i64* @rcx, align 8
  store i64 16016, i64* @rdi, align 8
  %v2_5874 = trunc i64 %arg4 to i32
  %v13_5874 = inttoptr i64 %v0_5852 to void ()*
  %v14_5874 = call i32 @__libc_start_main(i64 16016, i32 %v2_5874, i8** %tmp248, void ()* inttoptr (i64 90816 to void ()*), void ()* inttoptr (i64 90928 to void ()*), void ()* %v13_5874)
  %v0_587a = call i64 @__asm_hlt()
  unreachable
}

define i64 @function_5880() local_unnamed_addr {
dec_label_pc_5880:
  store i64 2228840, i64* @rdi, align 8
  ret i64 2228840
}

define i64 @function_58c0() local_unnamed_addr {
dec_label_pc_5900:
  store i64 2228840, i64* @rdi, align 8
  store i64 0, i64* @rsi, align 8
  ret i64 0
}

define i64 @function_5910() local_unnamed_addr {
dec_label_pc_5910:
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_5910 = load i8, i8* @global_var_2202c8.237, align 1
  %v7_5910 = icmp eq i8 %v0_5910, 0
  %v1_5917 = icmp eq i1 %v7_5910, false
  br i1 %v1_5917, label %dec_label_pc_5948, label %dec_label_pc_5919

dec_label_pc_5919:                                ; preds = %dec_label_pc_5910
  %v0_5919 = load i64, i64* inttoptr (i64 2228216 to i64*), align 8
  %v7_5919 = icmp eq i64 %v0_5919, 0
  %v0_5921 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_5921, i64* %stack_var_-8, align 8
  %v4_5921 = ptrtoint i64* %stack_var_-8 to i64
  store i64 %v4_5921, i64* %rbp.global-to-local, align 8
  br i1 %v7_5919, label %dec_label_pc_5933, label %dec_label_pc_5927

dec_label_pc_5927:                                ; preds = %dec_label_pc_5919
  %v0_5927 = load i64, i64* inttoptr (i64 2228232 to i64*), align 8
  store i64 %v0_5927, i64* @rdi, align 8
  %v1_592e = inttoptr i64 %v0_5927 to i64*
  call void @__cxa_finalize(i64* %v1_592e)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5933

dec_label_pc_5933:                                ; preds = %dec_label_pc_5927, %dec_label_pc_5919
  %v0_5933 = call i64 @function_5880()
  store i64 %v0_5933, i64* %rax.global-to-local, align 8
  store i8 1, i8* @global_var_2202c8.237, align 1
  %v2_593f = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_593f, i64* %rbp.global-to-local, align 8
  ret i64 %v0_5933

dec_label_pc_5948:                                ; preds = %dec_label_pc_5910
  %v0_5948 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_5948
}

define i64 @function_5950() local_unnamed_addr {
dec_label_pc_5950:
  %v0_5955 = call i64 @function_58c0()
  ret i64 %v0_5955
}

define i64 @function_5960(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_5960:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %tmp235 = urem i64 %arg1, %arg2
  store i64 %tmp235, i64* @rdx, align 8
  ret i64 %tmp235
}

define i64 @function_5970(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5970:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg2, i64* @rdx, align 8
  %v14_5975 = icmp eq i64 %arg1, %arg2
  br i1 %v14_5975, label %dec_label_pc_5980, label %dec_label_pc_597a

dec_label_pc_597a:                                ; preds = %dec_label_pc_5970
  ret i64 0

dec_label_pc_5980:                                ; preds = %dec_label_pc_5970
  %v1_5980 = add i64 %arg2, 8
  %v2_5980 = inttoptr i64 %v1_5980 to i64*
  %v3_5980 = load i64, i64* %v2_5980, align 8
  %v1_5984 = add i64 %arg1, 8
  %v2_5984 = inttoptr i64 %v1_5984 to i64*
  %v3_5984 = load i64, i64* %v2_5984, align 8
  %v15_5984 = icmp eq i64 %v3_5984, %v3_5980
  %v1_5988 = zext i1 %v15_5984 to i64
  %v3_5988 = and i64 %v3_5980, -256
  %v4_5988 = or i64 %v1_5988, %v3_5988
  ret i64 %v4_5988
}

define i64 @function_5990(i64 %arg1) local_unnamed_addr {
dec_label_pc_5990:
  store i64 %arg1, i64* @rdi, align 8
  %v0_5990 = load i32, i32* @global_var_221218.155, align 4
  %v1_5990 = zext i32 %v0_5990 to i64
  %v5_5996 = icmp eq i32 %v0_5990, 0
  %v1_5998 = icmp eq i1 %v5_5996, false
  br i1 %v1_5998, label %dec_label_pc_59a0, label %dec_label_pc_599a

dec_label_pc_599a:                                ; preds = %dec_label_pc_5990
  %v1_599a = trunc i64 %arg1 to i32
  store i32 %v1_599a, i32* @global_var_221218.155, align 4
  br label %dec_label_pc_59a0

dec_label_pc_59a0:                                ; preds = %dec_label_pc_599a, %dec_label_pc_5990
  ret i64 %v1_5990
}

define i64 @function_59b0() local_unnamed_addr {
dec_label_pc_59b0:
  %v0_59b0 = load i64, i64* @rdi, align 8
  %v1_59b0 = inttoptr i64 %v0_59b0 to i64*
  call void @free(i64* %v1_59b0)
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_59c0(i64* %arg1, i64* %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_59c0:
  %r10.global-to-local = alloca i64, align 8
  %r11.global-to-local = alloca i64, align 8
  %r9.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  %tmp = ptrtoint i64* %arg2 to i64
  store i64 %tmp, i64* @rsi, align 8
  %tmp47 = ptrtoint i64* %arg1 to i64
  store i64 %tmp47, i64* @rdi, align 8
  %stack_var_-48 = alloca i64, align 8
  %tmp55 = call i8 @__decompiler_undefined_function_5()
  %tmp56 = call i8 @__decompiler_undefined_function_5()
  %v2_59c0 = load i64, i64* @rsi, align 8
  store i64 %v2_59c0, i64* @r8, align 8
  %v2_59c3 = load i64, i64* @rdi, align 8
  store i64 %v2_59c3, i64* %r9.global-to-local, align 8
  store i64 ptrtoint (i64* @global_var_163a0.238 to i64), i64* %r11.global-to-local, align 8
  %v0_59cd = load i64, i64* @r15, align 8
  store i64 0, i64* %r10.global-to-local, align 8
  %v0_59d2 = load i64, i64* @r14, align 8
  store i64 1, i64* %rax.global-to-local, align 8
  %v0_59d9 = load i64, i64* @r13, align 8
  %v0_59db = load i64, i64* @r12, align 8
  %v0_59dd = load i64, i64* @rdx, align 8
  store i64 %v0_59dd, i64* @r12, align 8
  %v0_59e0 = load i64, i64* @rbp, align 8
  store i64 35465847065542656, i64* @rbp, align 8
  %v0_59eb = load i64, i64* @rbx, align 8
  store i64 %v0_59eb, i64* %stack_var_-48, align 8
  %v0_59ec = load i64, i64* @rcx, align 8
  store i64 %v0_59ec, i64* @rbx, align 8
  br label %dec_label_pc_59ef

dec_label_pc_59ef:                                ; preds = %dec_label_pc_5af0, %dec_label_pc_5a50, %dec_label_pc_59c0
  %v0_5af038 = phi i64 [ %v2_59c3, %dec_label_pc_59c0 ], [ %v1_5a5b, %dec_label_pc_5a50 ], [ %v1_5af8, %dec_label_pc_5af0 ]
  %v0_59ef = phi i64 [ %v2_59c0, %dec_label_pc_59c0 ], [ %v1_5a53, %dec_label_pc_5a50 ], [ %v0_5afc, %dec_label_pc_5af0 ]
  %.05 = phi i8 [ %tmp56, %dec_label_pc_59c0 ], [ %.38, %dec_label_pc_5a50 ], [ %.16, %dec_label_pc_5af0 ]
  %.0 = phi i8 [ %tmp55, %dec_label_pc_59c0 ], [ %.3, %dec_label_pc_5a50 ], [ %.1, %dec_label_pc_5af0 ]
  %v1_59ef = inttoptr i64 %v0_59ef to i8*
  %v2_59ef = load i8, i8* %v1_59ef, align 1
  %v3_59ef = zext i8 %v2_59ef to i64
  store i64 %v3_59ef, i64* @rcx, align 8
  %v11_59f3 = icmp eq i8 %v2_59ef, 61
  br i1 %v11_59f3, label %dec_label_pc_5a42, label %dec_label_pc_5a00

dec_label_pc_5a00:                                ; preds = %dec_label_pc_59ef, %dec_label_pc_5a2e
  %v2_5a2e = phi i64 [ %v1_5a39, %dec_label_pc_5a2e ], [ %v0_5af038, %dec_label_pc_59ef ]
  %v0_5a68 = phi i64 [ %v0_5a31, %dec_label_pc_5a2e ], [ %v0_59ef, %dec_label_pc_59ef ]
  %v0_5a0b = phi i64 [ %v3_5a31, %dec_label_pc_5a2e ], [ %v3_59ef, %dec_label_pc_59ef ]
  %.16 = phi i8 [ %v2_5a31, %dec_label_pc_5a2e ], [ %.05, %dec_label_pc_59ef ]
  %.1 = phi i8 [ 61, %dec_label_pc_5a2e ], [ %.0, %dec_label_pc_59ef ]
  %v9_5a00 = icmp sgt i8 %.16, %.1
  %v1_5a06 = trunc i64 %v0_5a0b to i8
  br i1 %v9_5a00, label %dec_label_pc_5a06, label %dec_label_pc_5ad8

dec_label_pc_5a06:                                ; preds = %dec_label_pc_5a00
  %v11_5a06 = icmp eq i8 %v1_5a06, 92
  br i1 %v11_5a06, label %dec_label_pc_5a68, label %dec_label_pc_5a0b

dec_label_pc_5a0b:                                ; preds = %dec_label_pc_5a06
  %v11_5a0b = icmp eq i8 %v1_5a06, 94
  %v1_5a0e = icmp eq i1 %v11_5a0b, false
  br i1 %v1_5a0e, label %dec_label_pc_5a50, label %dec_label_pc_5a10

dec_label_pc_5a10:                                ; preds = %dec_label_pc_5a0b
  %v1_5a10 = add i64 %v0_5a68, 1
  %v2_5a10 = inttoptr i64 %v1_5a10 to i8*
  %v3_5a10 = load i8, i8* %v2_5a10, align 1
  %v4_5a10 = zext i8 %v3_5a10 to i64
  store i64 %v4_5a10, i64* @rcx, align 8
  store i64 %v1_5a10, i64* @r14, align 8
  %v1_5a19 = add i8 %v3_5a10, -64
  %tmp116 = icmp ult i8 %v1_5a19, 63
  br i1 %tmp116, label %dec_label_pc_5a27, label %dec_label_pc_5ab8

dec_label_pc_5a27:                                ; preds = %dec_label_pc_5a10
  %v1_5a27 = add i64 %v0_5a68, 2
  store i64 %v1_5a27, i64* @r8, align 8
  %tmp117 = urem i8 %v3_5a10, 32
  %v9_5a2b = zext i8 %tmp117 to i64
  store i64 %v9_5a2b, i64* @rcx, align 8
  br label %dec_label_pc_5a2e

dec_label_pc_5a2e:                                ; preds = %dec_label_pc_5a68, %dec_label_pc_5a27
  %v0_5a2e = phi i8 [ %v3_5a68, %dec_label_pc_5a68 ], [ %tmp117, %dec_label_pc_5a27 ]
  %v3_5a2e = inttoptr i64 %v2_5a2e to i8*
  store i8 %v0_5a2e, i8* %v3_5a2e, align 1
  %v0_5a31 = load i64, i64* @r8, align 8
  %v1_5a31 = inttoptr i64 %v0_5a31 to i8*
  %v2_5a31 = load i8, i8* %v1_5a31, align 1
  %v3_5a31 = zext i8 %v2_5a31 to i64
  store i64 %v3_5a31, i64* @rcx, align 8
  %v0_5a35 = load i64, i64* %r10.global-to-local, align 8
  %v1_5a35 = add i64 %v0_5a35, 1
  store i64 %v1_5a35, i64* %r10.global-to-local, align 8
  %v0_5a39 = load i64, i64* %r9.global-to-local, align 8
  %v1_5a39 = add i64 %v0_5a39, 1
  store i64 %v1_5a39, i64* %r9.global-to-local, align 8
  %v12_5a3d = icmp eq i8 %v2_5a31, 61
  %v1_5a40 = icmp eq i1 %v12_5a3d, false
  br i1 %v1_5a40, label %dec_label_pc_5a00, label %dec_label_pc_5a42

dec_label_pc_5a42:                                ; preds = %dec_label_pc_5a2e, %dec_label_pc_59ef
  %v0_5a5045 = phi i64 [ %v3_59ef, %dec_label_pc_59ef ], [ %v3_5a31, %dec_label_pc_5a2e ]
  %v0_5abf43 = phi i64 [ %v0_5af038, %dec_label_pc_59ef ], [ %v1_5a39, %dec_label_pc_5a2e ]
  %v0_5a49 = phi i64 [ %v0_59ef, %dec_label_pc_59ef ], [ %v0_5a31, %dec_label_pc_5a2e ]
  %.27 = phi i8 [ %.05, %dec_label_pc_59ef ], [ %v2_5a31, %dec_label_pc_5a2e ]
  %.2 = phi i8 [ %.0, %dec_label_pc_59ef ], [ 61, %dec_label_pc_5a2e ]
  %v0_5a42 = load i64, i64* @r12, align 8
  %v4_5a42 = trunc i64 %v0_5a42 to i8
  %v5_5a42 = icmp eq i8 %v4_5a42, 0
  br i1 %v5_5a42, label %dec_label_pc_5a50, label %dec_label_pc_5a47

dec_label_pc_5a47:                                ; preds = %dec_label_pc_5a42
  %v0_5a47 = load i64, i64* @rdx, align 8
  store i64 %v0_5a47, i64* %rax.global-to-local, align 8
  store i64 %v0_5a49, i64* @r14, align 8
  br label %dec_label_pc_5abf

dec_label_pc_5a50:                                ; preds = %dec_label_pc_5a0b, %dec_label_pc_5adc, %dec_label_pc_5a42
  %v2_5a50 = phi i64 [ %v0_5abf43, %dec_label_pc_5a42 ], [ %v2_5a2e, %dec_label_pc_5adc ], [ %v2_5a2e, %dec_label_pc_5a0b ]
  %v0_5a50 = phi i64 [ %v0_5a5045, %dec_label_pc_5a42 ], [ %v0_5a0b, %dec_label_pc_5adc ], [ %v0_5a0b, %dec_label_pc_5a0b ]
  %.38 = phi i8 [ %.27, %dec_label_pc_5a42 ], [ %.16, %dec_label_pc_5adc ], [ %.16, %dec_label_pc_5a0b ]
  %.3 = phi i8 [ %.2, %dec_label_pc_5a42 ], [ %.1, %dec_label_pc_5adc ], [ %.1, %dec_label_pc_5a0b ]
  %v1_5a50 = trunc i64 %v0_5a50 to i8
  %v3_5a50 = inttoptr i64 %v2_5a50 to i8*
  store i8 %v1_5a50, i8* %v3_5a50, align 1
  %v0_5a53 = load i64, i64* @r8, align 8
  %v1_5a53 = add i64 %v0_5a53, 1
  store i64 %v1_5a53, i64* @r8, align 8
  %v0_5a57 = load i64, i64* %r10.global-to-local, align 8
  %v1_5a57 = add i64 %v0_5a57, 1
  store i64 %v1_5a57, i64* %r10.global-to-local, align 8
  %v0_5a5b = load i64, i64* %r9.global-to-local, align 8
  %v1_5a5b = add i64 %v0_5a5b, 1
  store i64 %v1_5a5b, i64* %r9.global-to-local, align 8
  br label %dec_label_pc_59ef

dec_label_pc_5a68:                                ; preds = %dec_label_pc_5a06
  %v1_5a68 = add i64 %v0_5a68, 1
  %v2_5a68 = inttoptr i64 %v1_5a68 to i8*
  %v3_5a68 = load i8, i8* %v2_5a68, align 1
  %v4_5a68 = zext i8 %v3_5a68 to i64
  store i64 %v4_5a68, i64* @rcx, align 8
  %v1_5a6d = add i64 %v0_5a68, 2
  store i64 %v1_5a6d, i64* @r8, align 8
  %tmp118 = icmp ult i8 %v3_5a68, 121
  br i1 %tmp118, label %dec_label_pc_5a76, label %dec_label_pc_5a2e

dec_label_pc_5a76:                                ; preds = %dec_label_pc_5a68
  %v0_5a7a = load i64, i64* %r11.global-to-local, align 8
  %v2_5a7a = mul nuw nsw i64 %v4_5a68, 4
  %v3_5a7a = add i64 %v0_5a7a, %v2_5a7a
  %v4_5a7a = inttoptr i64 %v3_5a7a to i32*
  %v5_5a7a = load i32, i32* %v4_5a7a, align 4
  %v6_5a7a = sext i32 %v5_5a7a to i64
  %v2_5a7e = add i64 %v6_5a7a, %v0_5a7a
  store i64 %v2_5a7e, i64* @r13, align 8
  %v0_5a81 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_5a81

dec_label_pc_5ab8:                                ; preds = %dec_label_pc_5a10
  %v11_5ab8 = icmp eq i8 %v3_5a10, 63
  br i1 %v11_5ab8, label %dec_label_pc_5af0, label %dec_label_pc_5abd

dec_label_pc_5abd:                                ; preds = %dec_label_pc_5ab8
  store i64 0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5abf

dec_label_pc_5abf:                                ; preds = %dec_label_pc_5ae5, %dec_label_pc_5abd, %dec_label_pc_5a47
  %v0_5abf = phi i64 [ %v2_5a2e, %dec_label_pc_5ae5 ], [ %v2_5a2e, %dec_label_pc_5abd ], [ %v0_5abf43, %dec_label_pc_5a47 ]
  %v1_5abf = load i64, i64* @rdi, align 8
  %v2_5abf = inttoptr i64 %v1_5abf to i64*
  store i64 %v0_5abf, i64* %v2_5abf, align 8
  %v0_5ac2 = load i64, i64* @r14, align 8
  %v1_5ac2 = load i64, i64* @rsi, align 8
  %v2_5ac2 = inttoptr i64 %v1_5ac2 to i64*
  store i64 %v0_5ac2, i64* %v2_5ac2, align 8
  %v0_5ac5 = load i64, i64* %r10.global-to-local, align 8
  %v1_5ac5 = load i64, i64* @rbx, align 8
  %v2_5ac5 = inttoptr i64 %v1_5ac5 to i64*
  store i64 %v0_5ac5, i64* %v2_5ac5, align 8
  %v2_5ac8 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_5ac8, i64* @rbx, align 8
  store i64 %v0_59e0, i64* @rbp, align 8
  store i64 %v0_59db, i64* @r12, align 8
  store i64 %v0_59d9, i64* @r13, align 8
  store i64 %v0_59d2, i64* @r14, align 8
  store i64 %v0_59cd, i64* @r15, align 8
  %v0_5ad2 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_5ad2

dec_label_pc_5ad8:                                ; preds = %dec_label_pc_5a00
  %v5_5ad8 = icmp eq i8 %v1_5a06, 0
  br i1 %v5_5ad8, label %dec_label_pc_5ae5, label %dec_label_pc_5adc

dec_label_pc_5adc:                                ; preds = %dec_label_pc_5ad8
  %v11_5adc = icmp eq i8 %v1_5a06, 58
  %v1_5adf = icmp eq i1 %v11_5adc, false
  br i1 %v1_5adf, label %dec_label_pc_5a50, label %dec_label_pc_5ae5

dec_label_pc_5ae5:                                ; preds = %dec_label_pc_5adc, %dec_label_pc_5ad8
  store i64 %v0_5a68, i64* @r14, align 8
  store i64 1, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5abf

dec_label_pc_5af0:                                ; preds = %dec_label_pc_5ab8
  %v1_5af0 = inttoptr i64 %v2_5a2e to i8*
  store i8 127, i8* %v1_5af0, align 1
  %v0_5af4 = load i64, i64* %r10.global-to-local, align 8
  %v1_5af4 = add i64 %v0_5af4, 1
  store i64 %v1_5af4, i64* %r10.global-to-local, align 8
  %v0_5af8 = load i64, i64* %r9.global-to-local, align 8
  %v1_5af8 = add i64 %v0_5af8, 1
  store i64 %v1_5af8, i64* %r9.global-to-local, align 8
  %v0_5afc = load i64, i64* @r14, align 8
  store i64 %v0_5afc, i64* @r8, align 8
  br label %dec_label_pc_59ef
}

define i64 @function_5b08() local_unnamed_addr {
dec_label_pc_5b08:
  %rax.global-to-local = alloca i64, align 8
  store i64 27, i64* @rcx, align 8
  %v0_5b0d = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_5b0d
}

define i64 @function_5b18(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_5b18:
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  ret i64 0
}

define i64 @function_5b20(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_5b20:
  %r10.global-to-local = alloca i64, align 8
  %r9.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg6, i64* %r9.global-to-local, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  br label %dec_label_pc_5b28

dec_label_pc_5b28:                                ; preds = %dec_label_pc_5c38, %dec_label_pc_5c20, %dec_label_pc_5b20
  %v0_5b28 = phi i64 [ %arg5, %dec_label_pc_5b20 ], [ %v1_5c3c, %dec_label_pc_5c38 ], [ %v1_5c24, %dec_label_pc_5c20 ]
  %storemerge3 = phi i64 [ 0, %dec_label_pc_5b20 ], [ %v4_5c40, %dec_label_pc_5c38 ], [ %v4_5c28, %dec_label_pc_5c20 ]
  %v1_5b28 = inttoptr i64 %v0_5b28 to i8*
  %v2_5b28 = load i8, i8* %v1_5b28, align 1
  %v3_5b28 = zext i8 %v2_5b28 to i64
  %v1_5b2c = add nsw i64 %v3_5b28, -48
  store i64 %v1_5b2c, i64* @rcx, align 8
  %v1_5b30 = trunc i64 %v1_5b2c to i8
  %tmp271 = icmp ult i8 %v1_5b30, 55
  br i1 %tmp271, label %dec_label_pc_5b35.preheader, label %dec_label_pc_5b78

dec_label_pc_5b35.preheader:                      ; preds = %dec_label_pc_5b28
  %v0_5b35.pre = load i64, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5b35

dec_label_pc_5b35:                                ; preds = %dec_label_pc_5b35.preheader, %dec_label_pc_5b5a
  %v0_5c28 = phi i64 [ %v3_5b28, %dec_label_pc_5b35.preheader ], [ %v3_5b67, %dec_label_pc_5b5a ]
  %v0_5c20 = phi i64 [ %storemerge3, %dec_label_pc_5b35.preheader ], [ %v4_5b62, %dec_label_pc_5b5a ]
  %v0_5c24 = phi i64 [ %v0_5b28, %dec_label_pc_5b35.preheader ], [ %v1_5b5a, %dec_label_pc_5b5a ]
  %v1_5b38 = phi i64 [ %v1_5b2c, %dec_label_pc_5b35.preheader ], [ %v1_5b6b, %dec_label_pc_5b5a ]
  %v2_5b38 = urem i64 %v1_5b38, 64
  %v4_5b38 = icmp eq i64 %v2_5b38, 0
  br i1 %v4_5b38, label %bb249, label %bb

bb:                                               ; preds = %dec_label_pc_5b35
  %v5_5b38 = shl i64 %v0_5b35.pre, %v2_5b38
  br label %bb249

bb249:                                            ; preds = %dec_label_pc_5b35, %bb
  %v0_5b51 = phi i64 [ %v0_5b35.pre, %dec_label_pc_5b35 ], [ %v5_5b38, %bb ]
  %v2_5b3b = and i64 %v0_5b51, 8257536
  %v3_5b3b = icmp eq i64 %v2_5b3b, 0
  %v1_5b42 = icmp eq i1 %v3_5b3b, false
  br i1 %v1_5b42, label %dec_label_pc_5c20, label %dec_label_pc_5b48

dec_label_pc_5b48:                                ; preds = %bb249
  %v1_5b48 = load i64, i64* %rbp.global-to-local, align 8
  %v2_5b48 = and i64 %v1_5b48, %v0_5b51
  %v3_5b48 = icmp eq i64 %v2_5b48, 0
  %v1_5b4b = icmp eq i1 %v3_5b48, false
  br i1 %v1_5b4b, label %dec_label_pc_5c38, label %dec_label_pc_5b51

dec_label_pc_5b51:                                ; preds = %dec_label_pc_5b48
  %v1_5b51 = trunc i64 %v0_5b51 to i32
  %v2_5b51 = and i32 %v1_5b51, ptrtoint (i32* @global_var_3ff.239 to i32)
  %v3_5b51 = icmp eq i32 %v2_5b51, 0
  br i1 %v3_5b51, label %dec_label_pc_5b78, label %dec_label_pc_5b5a

dec_label_pc_5b5a:                                ; preds = %dec_label_pc_5b51
  %v1_5b5a = add i64 %v0_5c24, 1
  store i64 %v1_5b5a, i64* @r8, align 8
  %v3_5b5e = mul nsw i64 %v0_5c20, 16
  %v10_5b5e = and i64 %v3_5b5e, 4294967280
  %v3_5b62 = add nsw i64 %v0_5c28, -48
  %v4_5b62 = add nsw i64 %v3_5b62, %v10_5b5e
  %v1_5b67 = inttoptr i64 %v1_5b5a to i8*
  %v2_5b67 = load i8, i8* %v1_5b67, align 1
  %v3_5b67 = zext i8 %v2_5b67 to i64
  %v1_5b6b = add nsw i64 %v3_5b67, -48
  store i64 %v1_5b6b, i64* @rcx, align 8
  %v1_5b6f = trunc i64 %v1_5b6b to i8
  %tmp272 = icmp ult i8 %v1_5b6f, 55
  br i1 %tmp272, label %dec_label_pc_5b35, label %dec_label_pc_5b78

dec_label_pc_5b78:                                ; preds = %dec_label_pc_5b28, %dec_label_pc_5b5a, %dec_label_pc_5b51
  %v0_5b78 = phi i64 [ %v4_5b62, %dec_label_pc_5b5a ], [ %v0_5c20, %dec_label_pc_5b51 ], [ %storemerge3, %dec_label_pc_5b28 ]
  %v1_5b78 = trunc i64 %v0_5b78 to i8
  %v3_5b78 = inttoptr i64 %arg6 to i8*
  store i8 %v1_5b78, i8* %v3_5b78, align 1
  %v0_5b7b = load i64, i64* %r10.global-to-local, align 8
  %v1_5b7b = add i64 %v0_5b7b, 1
  store i64 %v1_5b7b, i64* %r10.global-to-local, align 8
  %v0_5b7f = load i64, i64* %r9.global-to-local, align 8
  %v1_5b7f = add i64 %v0_5b7f, 1
  store i64 %v1_5b7f, i64* %r9.global-to-local, align 8
  %v0_5b83 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_5b83

dec_label_pc_5c20:                                ; preds = %bb249
  %v3_5c20 = mul nsw i64 %v0_5c20, 16
  %v10_5c20 = and i64 %v3_5c20, 4294967280
  %v1_5c24 = add i64 %v0_5c24, 1
  store i64 %v1_5c24, i64* @r8, align 8
  %v3_5c28 = add nsw i64 %v0_5c28, -55
  %v4_5c28 = add nsw i64 %v3_5c28, %v10_5c20
  br label %dec_label_pc_5b28

dec_label_pc_5c38:                                ; preds = %dec_label_pc_5b48
  %v3_5c38 = mul nsw i64 %v0_5c20, 16
  %v10_5c38 = and i64 %v3_5c38, 4294967280
  %v1_5c3c = add i64 %v0_5c24, 1
  store i64 %v1_5c3c, i64* @r8, align 8
  %v3_5c40 = add nsw i64 %v0_5c28, -87
  %v4_5c40 = add nsw i64 %v3_5c40, %v10_5c38
  br label %dec_label_pc_5b28
}

define i64 @function_5c50(i64 %arg1) local_unnamed_addr {
dec_label_pc_5c50:
  %v2_5c59 = mul i64 %arg1, 16
  %v2_5c5d = add i64 %v2_5c59, ptrtoint (i64* @global_var_220060.150 to i64)
  store i64 %v2_5c5d, i64* @rdi, align 8
  %v1_5c62 = inttoptr i64 %v2_5c5d to i64*
  %v2_5c62 = load i64, i64* %v1_5c62, align 8
  store i64 %v2_5c62, i64* @rdx, align 8
  %v1_5c65 = icmp eq i64 %v2_5c62, 0
  br i1 %v1_5c65, label %dec_label_pc_5c90, label %dec_label_pc_5c6a

dec_label_pc_5c6a:                                ; preds = %dec_label_pc_5c50
  %v10_5c6a = icmp eq i64 %v2_5c62, 1
  %v1_5c6e = add i64 %v2_5c59, add (i64 ptrtoint (i64* @global_var_220060.150 to i64), i64 8)
  %v2_5c6e = inttoptr i64 %v1_5c6e to i64*
  %v3_5c6e = load i64, i64* %v2_5c6e, align 8
  store i64 %v3_5c6e, i64* @rsi, align 8
  br i1 %v10_5c6a, label %dec_label_pc_5c98, label %dec_label_pc_5c74

dec_label_pc_5c74:                                ; preds = %dec_label_pc_5c6a
  %v10_5c74 = icmp eq i64 %v2_5c62, 2
  %v1_5c7d = icmp eq i1 %v10_5c74, false
  br i1 %v1_5c7d, label %dec_label_pc_5c90, label %dec_label_pc_5c7f

dec_label_pc_5c7f:                                ; preds = %dec_label_pc_5c74
  store i64 ptrtoint ([3 x i8]* @global_var_17bed.240 to i64), i64* @rdi, align 8
  store i64 2, i64* @rcx, align 8
  br label %bb

bb:                                               ; preds = %bb9, %dec_label_pc_5c7f
  %v24_5c8b = phi i64 [ %v27_5c8b, %bb9 ], [ ptrtoint ([3 x i8]* @global_var_17bed.240 to i64), %dec_label_pc_5c7f ]
  %v23_5c8b = phi i64 [ %v28_5c8b, %bb9 ], [ %v3_5c6e, %dec_label_pc_5c7f ]
  %v0_5c8b = phi i64 [ %v29_5c8b, %bb9 ], [ 2, %dec_label_pc_5c7f ]
  %v1_5c8b = icmp eq i64 %v0_5c8b, 0
  br i1 %v1_5c8b, label %bb10, label %bb9

bb9:                                              ; preds = %bb
  %v3_5c8b = inttoptr i64 %v23_5c8b to i8*
  %v4_5c8b = load i8, i8* %v3_5c8b, align 1
  %v6_5c8b = inttoptr i64 %v24_5c8b to i8*
  %v7_5c8b = load i8, i8* %v6_5c8b, align 1
  %v18_5c8b = icmp eq i8 %v4_5c8b, %v7_5c8b
  %v25_5c8b = load i1, i1* @df, align 1
  %v26_5c8b = select i1 %v25_5c8b, i64 -1, i64 1
  %v27_5c8b = add i64 %v26_5c8b, %v24_5c8b
  %v28_5c8b = add i64 %v26_5c8b, %v23_5c8b
  store i64 %v27_5c8b, i64* @rdi, align 8
  store i64 %v28_5c8b, i64* @rsi, align 8
  %v29_5c8b = add nsw i64 %v0_5c8b, -1
  store i64 %v29_5c8b, i64* @rcx, align 8
  br i1 %v18_5c8b, label %bb, label %bb10

bb10:                                             ; preds = %bb, %bb9
  %v0_5c8d = phi i64 [ 0, %bb ], [ 1, %bb9 ]
  br label %dec_label_pc_5c90

dec_label_pc_5c90:                                ; preds = %bb10, %dec_label_pc_5c74, %dec_label_pc_5c50
  %v0_5c90 = phi i64 [ %v0_5c8d, %bb10 ], [ 1, %dec_label_pc_5c74 ], [ 0, %dec_label_pc_5c50 ]
  ret i64 %v0_5c90

dec_label_pc_5c98:                                ; preds = %dec_label_pc_5c6a
  %v1_5c98 = inttoptr i64 %v3_5c6e to i8*
  %v2_5c98 = load i8, i8* %v1_5c98, align 1
  %v11_5c98 = icmp eq i8 %v2_5c98, 48
  %v1_5c9b = icmp eq i1 %v11_5c98, false
  %v2_5c9b = zext i1 %v1_5c9b to i64
  ret i64 %v2_5c9b
}

define i64 @function_5ca0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_5ca0:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v16_5ca0 = ptrtoint i64* %stack_var_-24 to i64
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @r8, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 %v16_5ca0, i64* @rcx, align 8
  %v0_5cb2 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v12_5cc2 = load i64, i64* @r9, align 8
  %v13_5cc2 = call i64 @function_14e20(i64 %arg1, i32 0, i32 0, i64* nonnull %stack_var_-24, i64* bitcast (i8** @global_var_17c4a.6 to i64*), i64 %v12_5cc2)
  store i64 %v13_5cc2, i64* %rax.global-to-local, align 8
  %v4_5cc7 = trunc i64 %v13_5cc2 to i32
  %v5_5cc7 = icmp eq i32 %v4_5cc7, 0
  br i1 %v5_5cc7, label %dec_label_pc_5d08, label %dec_label_pc_5ccb

dec_label_pc_5ccb:                                ; preds = %dec_label_pc_5ca0
  %v11_5ccb = icmp eq i32 %v4_5cc7, 1
  br i1 %v11_5ccb, label %dec_label_pc_5cf0, label %dec_label_pc_5cd0

dec_label_pc_5cd0:                                ; preds = %dec_label_pc_5ccb
  store i64 0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5cd2

dec_label_pc_5cd2:                                ; preds = %dec_label_pc_5d08, %dec_label_pc_5cf0, %dec_label_pc_5cd0
  store i64 %v0_5cb2, i64* @rdx, align 8
  %v1_5cd7 = call i64 @__readfsqword(i64 40)
  %v2_5cd7 = xor i64 %v1_5cd7, %v0_5cb2
  %v3_5cd7 = icmp eq i64 %v2_5cd7, 0
  store i64 %v2_5cd7, i64* @rdx, align 8
  %v1_5ce0 = icmp eq i1 %v3_5cd7, false
  br i1 %v1_5ce0, label %dec_label_pc_5d1a, label %dec_label_pc_5ce2

dec_label_pc_5ce2:                                ; preds = %dec_label_pc_5cd2
  %v0_5ce6 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_5ce6

dec_label_pc_5cf0:                                ; preds = %dec_label_pc_5ccb
  store i128 -1, i128* @global_var_2212b0.46, align 8
  store i64 1, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5cd2

dec_label_pc_5d08:                                ; preds = %dec_label_pc_5ca0
  %v2_5d08 = load i64, i64* %stack_var_-24, align 8
  %v1_5d0c = sext i64 %v2_5d08 to i128
  store i128 %v1_5d0c, i128* @global_var_2212b0.46, align 8
  store i64 1, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5cd2

dec_label_pc_5d1a:                                ; preds = %dec_label_pc_5cd2
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_5d20(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5d20:
  %r13.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %tmp60 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-1632 = alloca i64, align 8
  %stack_var_-1608 = alloca i64, align 8
  %stack_var_-1624 = alloca i64, align 8
  %stack_var_-1672 = alloca i64, align 8
  store i64 0, i64* @rsi, align 8
  %v2_5d33 = ptrtoint i64* %stack_var_-1624 to i64
  store i64 %v2_5d33, i64* @rdi, align 8
  %v0_5d38 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v1_5d57.pre = load i64, i64* @rsi, align 8
  br label %dec_label_pc_5d50

dec_label_pc_5d50:                                ; preds = %dec_label_pc_5d8e, %dec_label_pc_5d20
  %v1_5d57 = phi i64 [ %v1_5d92, %dec_label_pc_5d8e ], [ %v1_5d57.pre, %dec_label_pc_5d20 ]
  store i64 ptrtoint ([2 x i8*]* @global_var_220040.181 to i64), i64* %rax.global-to-local, align 8
  %v3_5d57 = add i64 %v1_5d57, ptrtoint ([2 x i8*]* @global_var_220040.181 to i64)
  %v4_5d57 = inttoptr i64 %v3_5d57 to i64*
  %v5_5d57 = load i64, i64* %v4_5d57, align 8
  store i64 %v5_5d57, i64* %rax.global-to-local, align 8
  %v1_5d5b = inttoptr i64 %v5_5d57 to i8*
  %v2_5d5b = load i8, i8* %v1_5d5b, align 1
  %v3_5d5b = zext i8 %v2_5d5b to i64
  store i64 %v3_5d5b, i64* @rdx, align 8
  %v5_5d5e = icmp eq i8 %v2_5d5b, 0
  br i1 %v5_5d5e, label %dec_label_pc_5d7b, label %dec_label_pc_5d68

dec_label_pc_5d68:                                ; preds = %dec_label_pc_5d50, %dec_label_pc_5d73
  %v0_5e40 = phi i64 [ %v1_5d73, %dec_label_pc_5d73 ], [ %v5_5d57, %dec_label_pc_5d50 ]
  %v0_5d68 = phi i64 [ %v0_5d77, %dec_label_pc_5d73 ], [ %v3_5d5b, %dec_label_pc_5d50 ]
  %v1_5d68 = trunc i64 %v0_5d68 to i8
  %v11_5d68 = icmp eq i8 %v1_5d68, 37
  %v1_5d6b = add i64 %v0_5e40, 1
  %v2_5d6b = inttoptr i64 %v1_5d6b to i8*
  %v3_5d6b = load i8, i8* %v2_5d6b, align 1
  %v4_5d6b = zext i8 %v3_5d6b to i64
  store i64 %v4_5d6b, i64* @rcx, align 8
  br i1 %v11_5d68, label %dec_label_pc_5d80, label %dec_label_pc_5d71

dec_label_pc_5d71:                                ; preds = %dec_label_pc_5d89, %dec_label_pc_5d68
  store i64 %v4_5d6b, i64* @rdx, align 8
  br label %dec_label_pc_5d73

dec_label_pc_5d73:                                ; preds = %dec_label_pc_5e40, %dec_label_pc_5d71
  %v0_5d77 = phi i64 [ %v4_5e40, %dec_label_pc_5e40 ], [ %v4_5d6b, %dec_label_pc_5d71 ]
  %v0_5d73 = phi i64 [ %v1_5d6b, %dec_label_pc_5e40 ], [ %v0_5e40, %dec_label_pc_5d71 ]
  %v1_5d73 = add i64 %v0_5d73, 1
  store i64 %v1_5d73, i64* %rax.global-to-local, align 8
  %v5_5d77 = icmp eq i64 %v0_5d77, 0
  %v1_5d79 = icmp eq i1 %v5_5d77, false
  br i1 %v1_5d79, label %dec_label_pc_5d68, label %dec_label_pc_5d7b

dec_label_pc_5d7b:                                ; preds = %dec_label_pc_5d73, %dec_label_pc_5d50
  store i64 0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5d8e

dec_label_pc_5d80:                                ; preds = %dec_label_pc_5d68
  %v11_5d80 = icmp eq i8 %v3_5d6b, 37
  br i1 %v11_5d80, label %dec_label_pc_5e40, label %dec_label_pc_5d89

dec_label_pc_5d89:                                ; preds = %dec_label_pc_5d80
  %v11_5d89 = icmp eq i8 %v3_5d6b, 98
  %v1_5d8c = icmp eq i1 %v11_5d89, false
  br i1 %v1_5d8c, label %dec_label_pc_5d71, label %dec_label_pc_5d8e

dec_label_pc_5d8e:                                ; preds = %dec_label_pc_5d89, %dec_label_pc_5d7b
  %v0_5d8e = phi i64 [ 0, %dec_label_pc_5d7b ], [ %v0_5e40, %dec_label_pc_5d89 ]
  %v1_5d8e = load i64, i64* @rdi, align 8
  %v4_5d8e = add i64 %v1_5d8e, %v1_5d57
  %v5_5d8e = inttoptr i64 %v4_5d8e to i64*
  store i64 %v0_5d8e, i64* %v5_5d8e, align 8
  %v0_5d92 = load i64, i64* @rsi, align 8
  %v1_5d92 = add i64 %v0_5d92, 8
  store i64 %v1_5d92, i64* @rsi, align 8
  %v9_5d96 = icmp eq i64 %v0_5d92, 8
  %v1_5d9a = icmp eq i1 %v9_5d96, false
  br i1 %v1_5d9a, label %dec_label_pc_5d50, label %dec_label_pc_5d9c

dec_label_pc_5d9c:                                ; preds = %dec_label_pc_5d8e
  %v3_5d9c = load i64, i64* %stack_var_-1624, align 8
  %v10_5d9c = icmp eq i64 %v3_5d9c, 0
  store i64 5, i64* @r13, align 8
  br i1 %v10_5d9c, label %dec_label_pc_5e91, label %dec_label_pc_5dae

dec_label_pc_5dae:                                ; preds = %dec_label_pc_5e91, %dec_label_pc_5d9c
  %v2_5dae = ptrtoint i64* %stack_var_-1608 to i64
  %v2_5db8 = ptrtoint i64* %stack_var_-1632 to i64
  store i64 %v2_5db8, i64* %rax.global-to-local, align 8
  store i64 %v2_5db8, i64* %stack_var_-1672, align 8
  %v1_5dce = add i64 %v2_5dae, ptrtoint (i32* @global_var_600.242 to i64)
  br label %dec_label_pc_5dc1

dec_label_pc_5dc1:                                ; preds = %dec_label_pc_5e38, %dec_label_pc_5dae
  %v0_5ddb20 = phi i64 [ %v3_5e22, %dec_label_pc_5e38 ], [ 5, %dec_label_pc_5dae ]
  store i64 %v2_5dae, i64* @rbx, align 8
  store i64 131086, i64* @r12, align 8
  store i64 0, i64* @rbp, align 8
  store i64 %v1_5dce, i64* @r14, align 8
  br label %dec_label_pc_5dd8

dec_label_pc_5dd8:                                ; preds = %dec_label_pc_5e1a, %dec_label_pc_5dc1
  %v0_5ddb = phi i64 [ %v0_5ddb20, %dec_label_pc_5dc1 ], [ %v0_5ddb.pre, %dec_label_pc_5e1a ]
  %v0_5dd8 = phi i64 [ 131086, %dec_label_pc_5dc1 ], [ %v17_5e2a, %dec_label_pc_5e1a ]
  %v1_5dd8 = trunc i64 %v0_5dd8 to i32
  store i64 %v0_5dd8, i64* @rdi, align 8
  store i64 %v0_5ddb, i64* %stack_var_-1632, align 8
  %v3_5de0 = call i8* @nl_langinfo(i32 %v1_5dd8)
  %v5_5de0 = ptrtoint i8* %v3_5de0 to i64
  store i64 %v5_5de0, i64* %rax.global-to-local, align 8
  store i64 37, i64* @rsi, align 8
  store i64 %v5_5de0, i64* @rdi, align 8
  store i64 %v5_5de0, i64* @r15, align 8
  %v6_5df0 = call i8* @strchr(i8* %v3_5de0, i32 37)
  %v8_5df0 = ptrtoint i8* %v6_5df0 to i64
  store i64 %v8_5df0, i64* %rax.global-to-local, align 8
  %v1_5df5 = icmp eq i8* %v6_5df0, null
  %v1_5df8 = icmp eq i1 %v1_5df5, false
  br i1 %v1_5df8, label %dec_label_pc_5e68, label %dec_label_pc_5dfa

dec_label_pc_5dfa:                                ; preds = %dec_label_pc_5dd8
  %v2_5dfa = load i64, i64* %stack_var_-1672, align 8
  store i64 %v2_5dfa, i64* @rcx, align 8
  store i64 0, i64* @r8, align 8
  store i64 128, i64* @rdx, align 8
  %v0_5e09 = load i64, i64* @rbx, align 8
  store i64 %v0_5e09, i64* @rsi, align 8
  %v0_5e0c = load i64, i64* @r15, align 8
  store i64 %v0_5e0c, i64* @rdi, align 8
  %v10_5e0f = call i64 @function_fd40(i64 %v0_5e0c, i64 %v0_5e09, i64 128, i64 %v2_5dfa, i32 0, i32 0)
  store i64 %v10_5e0f, i64* %rax.global-to-local, align 8
  %tmp89 = icmp ult i64 %v10_5e0f, 128
  br i1 %tmp89, label %dec_label_pc_5e1a, label %dec_label_pc_5e68

dec_label_pc_5e1a:                                ; preds = %dec_label_pc_5dfa
  %v3_5e1a = load i64, i64* %stack_var_-1632, align 8
  store i64 %v3_5e1a, i64* %rax.global-to-local, align 8
  %v0_5e1f = load i64, i64* @rbp, align 8
  %v7_5e1f = icmp ult i64 %v0_5e1f, %v3_5e1a
  %v3_5e22 = select i1 %v7_5e1f, i64 %v3_5e1a, i64 %v0_5e1f
  store i64 %v3_5e22, i64* @rbp, align 8
  %v0_5e26 = load i64, i64* @rbx, align 8
  %v1_5e26 = add i64 %v0_5e26, 128
  store i64 %v1_5e26, i64* @rbx, align 8
  %v0_5e2a = load i64, i64* @r12, align 8
  %v2_5e2a = add i64 %v0_5e2a, 1
  %v17_5e2a = and i64 %v2_5e2a, 4294967295
  store i64 %v17_5e2a, i64* @r12, align 8
  %v1_5e2e = load i64, i64* @r14, align 8
  %v12_5e2e = icmp eq i64 %v1_5e26, %v1_5e2e
  %v1_5e31 = icmp eq i1 %v12_5e2e, false
  %v0_5ddb.pre = load i64, i64* @r13, align 8
  br i1 %v1_5e31, label %dec_label_pc_5dd8, label %dec_label_pc_5e33

dec_label_pc_5e33:                                ; preds = %dec_label_pc_5e1a
  %tmp90 = icmp ugt i64 %v0_5ddb.pre, %v3_5e22
  br i1 %tmp90, label %dec_label_pc_5e38, label %dec_label_pc_5e9f

dec_label_pc_5e38:                                ; preds = %dec_label_pc_5e33
  store i64 %v3_5e22, i64* @r13, align 8
  br label %dec_label_pc_5dc1

dec_label_pc_5e40:                                ; preds = %dec_label_pc_5d80
  %v1_5e40 = add i64 %v0_5e40, 2
  %v2_5e40 = inttoptr i64 %v1_5e40 to i8*
  %v3_5e40 = load i8, i8* %v2_5e40, align 1
  %v4_5e40 = zext i8 %v3_5e40 to i64
  store i64 %v4_5e40, i64* @rdx, align 8
  store i64 %v1_5d6b, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5d73

dec_label_pc_5e4d:                                ; preds = %dec_label_pc_5f3b
  %v0_5e4d = load i64, i64* @rsp, align 8
  %v1_5e4d = inttoptr i64 %v0_5e4d to i64*
  %v2_5e4d = load i64, i64* %v1_5e4d, align 8
  %v1_5e51 = add i64 %v2_5e4d, 8
  store i64 %v1_5e51, i64* @r14, align 8
  %v9_5e55 = icmp eq i64 %v2_5e4d, 8
  %v1_5e59 = icmp eq i1 %v9_5e55, false
  br i1 %v1_5e59, label %dec_label_pc_5ea7, label %dec_label_pc_5e5b

dec_label_pc_5e5b:                                ; preds = %dec_label_pc_5e4d
  store i8 1, i8* @global_var_2203c8.243, align 1
  br label %dec_label_pc_5e68

dec_label_pc_5e68:                                ; preds = %dec_label_pc_5dfa, %dec_label_pc_5dd8, %dec_label_pc_5f32, %dec_label_pc_5ef0, %dec_label_pc_5e91, %dec_label_pc_5e5b
  %v0_5e68 = load i64, i64* @rsp, align 8
  %v1_5e68 = add i64 %v0_5e68, ptrtoint (i64* @global_var_648.244 to i64)
  %v2_5e68 = inttoptr i64 %v1_5e68 to i64*
  %v3_5e68 = load i64, i64* %v2_5e68, align 8
  store i64 %v3_5e68, i64* %rax.global-to-local, align 8
  %v1_5e70 = call i64 @__readfsqword(i64 40)
  %v2_5e70 = xor i64 %v1_5e70, %v3_5e68
  %v3_5e70 = icmp eq i64 %v2_5e70, 0
  store i64 %v2_5e70, i64* %rax.global-to-local, align 8
  %v1_5e79 = icmp eq i1 %v3_5e70, false
  br i1 %v1_5e79, label %dec_label_pc_5f6c, label %dec_label_pc_5e7f

dec_label_pc_5e7f:                                ; preds = %dec_label_pc_5e68
  %v0_5e7f = load i64, i64* @rsp, align 8
  %v1_5e7f = add i64 %v0_5e7f, ptrtoint (i64* @global_var_658.241 to i64)
  %v1_5e86 = inttoptr i64 %v1_5e7f to i64*
  %v2_5e86 = load i64, i64* %v1_5e86, align 8
  store i64 %v2_5e86, i64* @rbx, align 8
  %v3_5e86 = add i64 %v0_5e7f, add (i64 ptrtoint (i64* @global_var_658.241 to i64), i64 8)
  %v1_5e87 = inttoptr i64 %v3_5e86 to i64*
  %v2_5e87 = load i64, i64* %v1_5e87, align 8
  store i64 %v2_5e87, i64* @rbp, align 8
  %v3_5e87 = add i64 %v0_5e7f, add (i64 ptrtoint (i64* @global_var_658.241 to i64), i64 16)
  %v1_5e88 = inttoptr i64 %v3_5e87 to i64*
  %v2_5e88 = load i64, i64* %v1_5e88, align 8
  store i64 %v2_5e88, i64* @r12, align 8
  %v3_5e88 = add i64 %v0_5e7f, add (i64 ptrtoint (i64* @global_var_658.241 to i64), i64 24)
  %v1_5e8a = inttoptr i64 %v3_5e88 to i64*
  %v2_5e8a = load i64, i64* %v1_5e8a, align 8
  store i64 %v2_5e8a, i64* %r13.global-to-local, align 8
  %v3_5e8a = add i64 %v0_5e7f, add (i64 ptrtoint (i64* @global_var_658.241 to i64), i64 32)
  %v1_5e8c = inttoptr i64 %v3_5e8a to i64*
  %v2_5e8c = load i64, i64* %v1_5e8c, align 8
  store i64 %v2_5e8c, i64* @r14, align 8
  ret i64 %v2_5e70

dec_label_pc_5e91:                                ; preds = %dec_label_pc_5d9c
  %v10_5e91 = icmp eq i64 %tmp60, 0
  %v1_5e97 = icmp eq i1 %v10_5e91, false
  br i1 %v1_5e97, label %dec_label_pc_5dae, label %dec_label_pc_5e68

dec_label_pc_5e9f:                                ; preds = %dec_label_pc_5e33
  store i64 0, i64* @r14, align 8
  %v1_5eae.pre = load i64, i64* @rsp, align 8
  br label %dec_label_pc_5ea7

dec_label_pc_5ea7:                                ; preds = %dec_label_pc_5e4d, %dec_label_pc_5e9f
  %v1_5eae = phi i64 [ %v0_5e4d, %dec_label_pc_5e4d ], [ %v1_5eae.pre, %dec_label_pc_5e9f ]
  %v0_5eae = phi i64 [ %v1_5e51, %dec_label_pc_5e4d ], [ 0, %dec_label_pc_5e9f ]
  store i64 ptrtoint ([2 x i8*]* @global_var_220040.181 to i64), i64* %rax.global-to-local, align 8
  %v2_5eae = inttoptr i64 %v1_5eae to i64*
  store i64 %v0_5eae, i64* %v2_5eae, align 8
  %v0_5eb2 = load i64, i64* @rsp, align 8
  %v1_5eb2 = add i64 %v0_5eb2, 8
  %v2_5eb2 = inttoptr i64 %v1_5eb2 to i64*
  %v3_5eb2 = load i64, i64* %v2_5eb2, align 8
  store i64 %v3_5eb2, i64* @rbp, align 8
  %v1_5eb7 = load i64, i64* @r14, align 8
  %v3_5eb7 = mul i64 %v1_5eb7, 192
  %v0_5ebe = load i64, i64* %rax.global-to-local, align 8
  %v3_5ebe = add i64 %v0_5ebe, %v1_5eb7
  %v4_5ebe = inttoptr i64 %v3_5ebe to i64*
  %v5_5ebe = load i64, i64* %v4_5ebe, align 8
  store i64 %v5_5ebe, i64* %r13.global-to-local, align 8
  %v1_5ec2 = add i64 %v0_5eb2, 16
  %v2_5ec2 = inttoptr i64 %v1_5ec2 to i64*
  %v3_5ec2 = load i64, i64* %v2_5ec2, align 8
  store i64 %v3_5ec2, i64* %rax.global-to-local, align 8
  %v3_5ec7 = add i64 %v3_5ec2, %v1_5eb7
  %v4_5ec7 = inttoptr i64 %v3_5ec7 to i64*
  %v5_5ec7 = load i64, i64* %v4_5ec7, align 8
  store i64 ptrtoint (i32* @global_var_2203e0.245 to i64), i64* %rax.global-to-local, align 8
  %v3_5ed2 = add i64 %v3_5eb7, ptrtoint (i32* @global_var_2203e0.245 to i64)
  store i64 %v3_5ed2, i64* @rbx, align 8
  store i64 %v5_5ec7, i64* @r14, align 8
  %v1_5edc = add i64 %v0_5eb2, 24
  %v2_5edc = inttoptr i64 %v1_5edc to i64*
  %v3_5edc = load i64, i64* %v2_5edc, align 8
  store i64 %v3_5edc, i64* @r15, align 8
  %v2_5ee1 = sub i64 %v5_5ec7, %v5_5ebe
  store i64 %v2_5ee1, i64* @r12, align 8
  %v1_5f4c = icmp eq i64 %v5_5ec7, 0
  %v1_5efd = add i64 %v5_5ec7, 2
  %v1_5f4f = icmp eq i1 %v1_5f4c, false
  br label %dec_label_pc_5f4c

dec_label_pc_5ef0:                                ; preds = %dec_label_pc_5f4c
  %v0_5ef0 = load i64, i64* @r12, align 8
  %v8_5ef7 = icmp sgt i64 %v0_5ef0, 128
  br i1 %v8_5ef7, label %dec_label_pc_5e68, label %dec_label_pc_5efd

dec_label_pc_5efd:                                ; preds = %dec_label_pc_5ef0
  %v0_5f01 = load i64, i64* @rsp, align 8
  store i64 ptrtoint ([9 x i8]* @global_var_17bf0.246 to i64), i64* @r8, align 8
  store i64 -1, i64* @rcx, align 8
  store i64 1, i64* @rdx, align 8
  %v2_5f1b = add i64 %v0_5f01, -16
  %v3_5f1b = inttoptr i64 %v2_5f1b to i64*
  store i64 %v1_5efd, i64* %v3_5f1b, align 8
  %v0_5f1c = load i64, i64* @rbp, align 8
  %v2_5f1c = add i64 %v0_5f01, -24
  %v3_5f1c = inttoptr i64 %v2_5f1c to i64*
  store i64 %v0_5f1c, i64* %v3_5f1c, align 8
  store i64 128, i64* @rsi, align 8
  %v0_5f22 = load i64, i64* %r13.global-to-local, align 8
  %v2_5f22 = add i64 %v0_5f01, -32
  %v3_5f22 = inttoptr i64 %v2_5f22 to i64*
  store i64 %v0_5f22, i64* %v3_5f22, align 8
  %v0_5f24 = load i64, i64* @rbx, align 8
  %v1_5f24 = inttoptr i64 %v0_5f24 to i8*
  store i64 %v0_5f24, i64* @rdi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v16_5f29 = call i32 (i8*, i32, i32, i32, i8*, ...) @__snprintf_chk(i8* %v1_5f24, i32 128, i32 1, i32 -1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_17bf0.246, i64 0, i64 0), i64 %v0_5ef0)
  br label %dec_label_pc_5f32

dec_label_pc_5f32:                                ; preds = %dec_label_pc_5efd, %dec_label_pc_5f51
  %storemerge.in = phi i32 [ %v12_5f65, %dec_label_pc_5f51 ], [ %v16_5f29, %dec_label_pc_5efd ]
  %v0_5f32 = phi i32 [ %v12_5f65, %dec_label_pc_5f51 ], [ %v16_5f29, %dec_label_pc_5efd ]
  %storemerge = sext i32 %storemerge.in to i64
  store i64 %storemerge, i64* %rax.global-to-local, align 8
  %tmp91 = icmp ult i32 %v0_5f32, 128
  br i1 %tmp91, label %dec_label_pc_5f3b, label %dec_label_pc_5e68

dec_label_pc_5f3b:                                ; preds = %dec_label_pc_5f32
  %v0_5f3b = load i64, i64* @rbp, align 8
  %v1_5f3b = add i64 %v0_5f3b, 128
  store i64 %v1_5f3b, i64* @rbp, align 8
  %v0_5f3f = load i64, i64* @rbx, align 8
  %v1_5f3f = add i64 %v0_5f3f, 128
  store i64 %v1_5f3f, i64* @rbx, align 8
  %v1_5f43 = load i64, i64* @r15, align 8
  %v12_5f43 = icmp eq i64 %v1_5f3b, %v1_5f43
  br i1 %v12_5f43, label %dec_label_pc_5e4d, label %dec_label_pc_5f4c

dec_label_pc_5f4c:                                ; preds = %dec_label_pc_5f3b, %dec_label_pc_5ea7
  %v0_5f60 = phi i64 [ %v1_5f3f, %dec_label_pc_5f3b ], [ %v3_5ed2, %dec_label_pc_5ea7 ]
  br i1 %v1_5f4f, label %dec_label_pc_5ef0, label %dec_label_pc_5f51

dec_label_pc_5f51:                                ; preds = %dec_label_pc_5f4c
  store i64 ptrtoint ([3 x i8]* @global_var_1a2fc.247 to i64), i64* @rdx, align 8
  %v0_5f58 = load i64, i64* %r13.global-to-local, align 8
  %v1_5f58 = inttoptr i64 %v0_5f58 to i8*
  store i64 %v0_5f58, i64* @rcx, align 8
  store i64 128, i64* @rsi, align 8
  %v1_5f60 = inttoptr i64 %v0_5f60 to i8*
  store i64 %v0_5f60, i64* @rdi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v12_5f65 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %v1_5f60, i32 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1a2fc.247, i64 0, i64 0), i8* %v1_5f58)
  br label %dec_label_pc_5f32

dec_label_pc_5f6c:                                ; preds = %dec_label_pc_5e68
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_5f80(i64* %arg1, i32 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_5f80:
  %r13.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  %tmp12 = sext i32 %arg2 to i64
  store i64 %tmp12, i64* @rsi, align 8
  %tmp13 = ptrtoint i64* %arg1 to i64
  store i64 %tmp13, i64* @rdi, align 8
  %stack_var_-32 = alloca i64, align 8
  %v0_5f84 = load i64, i64* @rsi, align 8
  %v1_5f84 = trunc i64 %v0_5f84 to i32
  %v0_5f87 = load i64, i64* @rbp, align 8
  %v0_5f88 = load i64, i64* @rbx, align 8
  store i64 %v0_5f88, i64* %stack_var_-32, align 8
  %v0_5f89 = load i64, i64* @rdi, align 8
  store i64 32, i64* @rdi, align 8
  %v0_5f91 = load i64, i64* @rdx, align 8
  store i64 %v0_5f91, i64* %r13.global-to-local, align 8
  %v1_5f98 = call i64 @function_14480(i64 32)
  store i64 %v1_5f98, i64* @rbx, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v2_5fa2 = icmp eq i32 %v1_5f84, 0
  br i1 %v2_5fa2, label %dec_label_pc_5faf, label %dec_label_pc_5fa7

dec_label_pc_5fa7:                                ; preds = %dec_label_pc_5f80
  %sext = mul i64 %v0_5f84, 4294967296
  %v1_5fa7 = sdiv i64 %sext, 4294967296
  store i64 %v1_5fa7, i64* @rdi, align 8
  %v2_5faa = call i64 @function_146b0(i64 %v1_5fa7)
  store i64 %v2_5faa, i64* %rax.global-to-local, align 8
  %v1_5faf.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_5faf

dec_label_pc_5faf:                                ; preds = %dec_label_pc_5fa7, %dec_label_pc_5f80
  %v1_5faf = phi i64 [ %v1_5faf.pre, %dec_label_pc_5fa7 ], [ %v1_5f98, %dec_label_pc_5f80 ]
  %v0_5faf = phi i64 [ %v2_5faa, %dec_label_pc_5fa7 ], [ 0, %dec_label_pc_5f80 ]
  %v2_5faf = add i64 %v1_5faf, 8
  %v3_5faf = inttoptr i64 %v2_5faf to i64*
  store i64 %v0_5faf, i64* %v3_5faf, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v1_5fb5 = icmp eq i64 %v0_5f89, 0
  br i1 %v1_5fb5, label %dec_label_pc_5fc2, label %dec_label_pc_5fba

dec_label_pc_5fba:                                ; preds = %dec_label_pc_5faf
  store i64 %v0_5f89, i64* @rdi, align 8
  %v1_5fbd = call i64 @function_146b0(i64 %v0_5f89)
  store i64 %v1_5fbd, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_5fc2

dec_label_pc_5fc2:                                ; preds = %dec_label_pc_5fba, %dec_label_pc_5faf
  %v0_5fc2 = phi i64 [ %v1_5fbd, %dec_label_pc_5fba ], [ 0, %dec_label_pc_5faf ]
  %v1_5fc2 = load i64, i64* @rbx, align 8
  %v2_5fc2 = inttoptr i64 %v1_5fc2 to i64*
  store i64 %v0_5fc2, i64* %v2_5fc2, align 8
  %v0_5fc5 = load i64, i64* @global_var_221380.14, align 8
  store i64 %v0_5fc5, i64* %rax.global-to-local, align 8
  %v0_5fcc = load i64, i64* %r13.global-to-local, align 8
  %v1_5fcc = trunc i64 %v0_5fcc to i8
  %v2_5fcc = load i64, i64* @rbx, align 8
  %v3_5fcc = add i64 %v2_5fcc, 16
  %v4_5fcc = inttoptr i64 %v3_5fcc to i8*
  store i8 %v1_5fcc, i8* %v4_5fcc, align 1
  %v0_5fd0 = load i64, i64* @rbx, align 8
  store i64 %v0_5fd0, i64* @global_var_221380.14, align 8
  %v0_5fd7 = load i64, i64* %rax.global-to-local, align 8
  %v2_5fd7 = add i64 %v0_5fd0, 24
  %v3_5fd7 = inttoptr i64 %v2_5fd7 to i64*
  store i64 %v0_5fd7, i64* %v3_5fd7, align 8
  %v2_5fdf = load i64, i64* %stack_var_-32, align 8
  store i64 %v2_5fdf, i64* @rbx, align 8
  store i64 %v0_5f87, i64* @rbp, align 8
  %v0_5fe5 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_5fe5
}

define i64 @function_5ff0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_5ff0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_5ff0 = load i64, i64* @rsi, align 8
  %v1_5ff0 = add i64 %v0_5ff0, 72
  %v2_5ff0 = inttoptr i64 %v1_5ff0 to i64*
  %v3_5ff0 = load i64, i64* %v2_5ff0, align 8
  %v0_5ff4 = load i64, i64* @rdi, align 8
  %v1_5ff4 = add i64 %v0_5ff4, 72
  %v2_5ff4 = inttoptr i64 %v1_5ff4 to i64*
  %v3_5ff4 = load i64, i64* %v2_5ff4, align 8
  %v8_5ff8 = icmp sgt i64 %v3_5ff4, %v3_5ff0
  br i1 %v8_5ff8, label %dec_label_pc_6020, label %dec_label_pc_5ffa

dec_label_pc_5ffa:                                ; preds = %dec_label_pc_5ff0
  %v5_5ffa = icmp slt i64 %v3_5ff4, %v3_5ff0
  br i1 %v5_5ffa, label %dec_label_pc_6010, label %dec_label_pc_5ffc

dec_label_pc_5ffc:                                ; preds = %dec_label_pc_5ffa
  %v1_6002 = inttoptr i64 %v0_5ff4 to i8*
  %v3_6002 = inttoptr i64 %v0_5ff0 to i8*
  %v4_6002 = call i32 @strcmp(i8* %v1_6002, i8* %v3_6002)
  %v6_6002 = sext i32 %v4_6002 to i64
  ret i64 %v6_6002

dec_label_pc_6010:                                ; preds = %dec_label_pc_5ffa
  ret i64 1

dec_label_pc_6020:                                ; preds = %dec_label_pc_5ff0
  ret i64 4294967295
}

define i64 @function_6030(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6030:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6030 = load i64, i64* @rdi, align 8
  %v1_6030 = add i64 %v0_6030, 72
  %v2_6030 = inttoptr i64 %v1_6030 to i64*
  %v3_6030 = load i64, i64* %v2_6030, align 8
  store i64 %v3_6030, i64* @rdx, align 8
  %v0_6034 = load i64, i64* @rsi, align 8
  %v1_6034 = add i64 %v0_6034, 72
  %v2_6034 = inttoptr i64 %v1_6034 to i64*
  %v3_6034 = load i64, i64* %v2_6034, align 8
  %v8_603b = icmp sgt i64 %v3_6034, %v3_6030
  br i1 %v8_603b, label %dec_label_pc_6060, label %dec_label_pc_603d

dec_label_pc_603d:                                ; preds = %dec_label_pc_6030
  %v5_603d = icmp slt i64 %v3_6034, %v3_6030
  br i1 %v5_603d, label %dec_label_pc_6050, label %dec_label_pc_603f

dec_label_pc_603f:                                ; preds = %dec_label_pc_603d
  store i64 %v0_6030, i64* @rsi, align 8
  %v1_6045 = inttoptr i64 %v0_6030 to i8*
  %v4_6045 = call i32 @strcmp(i8* %v1_6045, i8* %v1_6045)
  %v6_6045 = sext i32 %v4_6045 to i64
  ret i64 %v6_6045

dec_label_pc_6050:                                ; preds = %dec_label_pc_603d
  ret i64 1

dec_label_pc_6060:                                ; preds = %dec_label_pc_6030
  ret i64 4294967295
}

define i64 @function_6070(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6070:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_6076 = inttoptr i64 %arg1 to i8*
  %v3_6076 = inttoptr i64 %arg2 to i8*
  %v4_6076 = call i32 @strcmp(i8* %v1_6076, i8* %v3_6076)
  %v6_6076 = sext i32 %v4_6076 to i64
  ret i64 %v6_6076
}

define i64 @function_6080(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6080:
  store i64 %arg1, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_6089 = inttoptr i64 %arg1 to i8*
  %v4_6089 = call i32 @strcmp(i8* %v1_6089, i8* %v1_6089)
  %v6_6089 = sext i32 %v4_6089 to i64
  ret i64 %v6_6089
}

define i64 @function_6090(i64 %arg1) local_unnamed_addr {
dec_label_pc_6090:
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_6090 = load i64, i64* @rbx, align 8
  store i64 %v0_6090, i64* %stack_var_-8, align 8
  %v0_6091 = load i64, i64* @rdi, align 8
  store i64 %v0_6091, i64* %rbx.global-to-local, align 8
  %v1_6097 = inttoptr i64 %v0_6091 to i64*
  call void @free(i64* %v1_6097)
  %v1_609c = add i64 %v0_6091, 8
  %v2_609c = inttoptr i64 %v1_609c to i64*
  %v3_609c = load i64, i64* %v2_609c, align 8
  store i64 %v3_609c, i64* @rdi, align 8
  %v1_60a0 = inttoptr i64 %v3_609c to i64*
  call void @free(i64* %v1_60a0)
  %v0_60a5 = load i64, i64* %rbx.global-to-local, align 8
  %v1_60a5 = add i64 %v0_60a5, 16
  %v2_60a5 = inttoptr i64 %v1_60a5 to i64*
  %v3_60a5 = load i64, i64* %v2_60a5, align 8
  store i64 %v3_60a5, i64* @rdi, align 8
  %v1_60a9 = inttoptr i64 %v3_60a5 to i64*
  call void @free(i64* %v1_60a9)
  %v0_60ae = load i64, i64* %rbx.global-to-local, align 8
  %v1_60ae = add i64 %v0_60ae, 176
  %v2_60ae = inttoptr i64 %v1_60ae to i64*
  %v3_60ae = load i64, i64* %v2_60ae, align 8
  store i64 %v3_60ae, i64* @rdi, align 8
  %v12_60bc = icmp eq i64 %v3_60ae, ptrtoint (i64* @global_var_220022.248 to i64)
  %v2_60d0 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_60d0, i64* @rbx, align 8
  br i1 %v12_60bc, label %dec_label_pc_60d0, label %dec_label_pc_60c1

dec_label_pc_60c1:                                ; preds = %dec_label_pc_6090
  %v1_60c2 = load i64, i64* @rsi, align 8
  %v2_60c2 = call i64 @function_3da0(i64 %v3_60ae, i64 %v1_60c2)
  ret i64 %v2_60c2

dec_label_pc_60d0:                                ; preds = %dec_label_pc_6090
  ret i64 ptrtoint (i64* @global_var_220022.248 to i64)
}

define i64 @function_60e0() local_unnamed_addr {
dec_label_pc_60e0:
  %stack_var_-8 = alloca i64, align 8
  %v0_60e0 = load i128, i128* @global_var_2213b0.142, align 8
  %v1_60e0 = trunc i128 %v0_60e0 to i64
  %v8_60e0 = icmp eq i64 %v1_60e0, 0
  %v0_60e8 = load i64, i64* @rbx, align 8
  store i64 %v0_60e8, i64* %stack_var_-8, align 8
  br i1 %v8_60e0, label %dec_label_pc_60e0.dec_label_pc_610d_crit_edge, label %dec_label_pc_60eb

dec_label_pc_60e0.dec_label_pc_610d_crit_edge:    ; preds = %dec_label_pc_60e0
  %v0_618b.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_610d

dec_label_pc_60eb:                                ; preds = %dec_label_pc_60e0
  br label %dec_label_pc_60f0

dec_label_pc_60f0:                                ; preds = %dec_label_pc_60f0, %dec_label_pc_60eb
  %v1_60f7 = phi i64 [ %v2_6104, %dec_label_pc_60f0 ], [ 0, %dec_label_pc_60eb ]
  %v0_60f0 = load i64, i64* @global_var_2213a0.249, align 8
  %v2_60f7 = mul i64 %v1_60f7, 8
  %v3_60f7 = add i64 %v2_60f7, %v0_60f0
  %v4_60f7 = inttoptr i64 %v3_60f7 to i64*
  %v5_60f7 = load i64, i64* %v4_60f7, align 8
  store i64 %v5_60f7, i64* @rdi, align 8
  %v1_60fb = add i64 %v1_60f7, 1
  store i64 %v1_60fb, i64* @rbx, align 8
  %v1_60ff = call i64 @function_6090(i64 %v5_60f7)
  %v0_6104 = load i128, i128* @global_var_2213b0.142, align 8
  %v1_6104 = trunc i128 %v0_6104 to i64
  %v2_6104 = load i64, i64* @rbx, align 8
  %tmp9 = icmp ugt i64 %v1_6104, %v2_6104
  br i1 %tmp9, label %dec_label_pc_60f0, label %dec_label_pc_610d.loopexit

dec_label_pc_610d.loopexit:                       ; preds = %dec_label_pc_60f0
  %v2_618a.pre = load i64, i64* %stack_var_-8, align 8
  br label %dec_label_pc_610d

dec_label_pc_610d:                                ; preds = %dec_label_pc_60e0.dec_label_pc_610d_crit_edge, %dec_label_pc_610d.loopexit
  %v0_618b = phi i64 [ %v1_60ff, %dec_label_pc_610d.loopexit ], [ %v0_618b.pre, %dec_label_pc_60e0.dec_label_pc_610d_crit_edge ]
  %v2_618a = phi i64 [ %v2_618a.pre, %dec_label_pc_610d.loopexit ], [ %v0_60e8, %dec_label_pc_60e0.dec_label_pc_610d_crit_edge ]
  store i128 0, i128* @global_var_2213b0.142, align 8
  store i8 0, i8* bitcast (i32* @global_var_2213a9.250 to i8*), align 4
  store i8 0, i8* @global_var_221364.251, align 1
  store i32 0, i32* @global_var_221360.252, align 4
  store i32 0, i32* @global_var_22135c.253, align 4
  store i32 0, i32* @global_var_221358.254, align 4
  store i32 0, i32* @global_var_221350.255, align 4
  store i32 0, i32* @global_var_22134c.256, align 4
  store i32 0, i32* @global_var_221348.257, align 4
  store i32 0, i32* @global_var_221354.258, align 4
  store i32 0, i32* @global_var_221344.259, align 4
  store i32 0, i32* bitcast (i8** @global_var_221340.260 to i32*), align 8
  store i32 0, i32* @global_var_22133c.261, align 4
  store i64 %v2_618a, i64* @rbx, align 8
  ret i64 %v0_618b
}

define i64 @function_6190(i64 %arg1) local_unnamed_addr {
dec_label_pc_6190:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-80 = alloca i64, align 8
  %stack_var_-34 = alloca i8, align 1
  %stack_var_-16 = alloca i64, align 8
  %v0_6190 = load i64, i64* @rbp, align 8
  %v0_6191 = load i64, i64* @rbx, align 8
  store i64 %v0_6191, i64* %stack_var_-16, align 8
  %v0_6192 = load i64, i64* @rdi, align 8
  store i64 %v0_6192, i64* @rbx, align 8
  store i64 %v0_6192, i64* @rdx, align 8
  store i64 -1, i64* @rcx, align 8
  store i64 2, i64* @rsi, align 8
  %v0_61a8 = load i32, i32* @global_var_2212d0.129, align 4
  %v1_61a8 = sext i32 %v0_61a8 to i64
  store i64 %v1_61a8, i64* @r8, align 8
  %v2_61af = ptrtoint i8* %stack_var_-34 to i64
  store i64 %v2_61af, i64* @rdi, align 8
  %v0_61b4 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_61c4 = load i64, i64* @rdi, align 8
  %v1_61c4 = inttoptr i64 %v0_61c4 to i64*
  %v8_61c4 = call i64 @function_13660(i64* %v1_61c4, i64 2, i64 %v0_6192, i64 -1, i64 %v1_61a8)
  store i64 %v8_61c4, i64* %rax.global-to-local, align 8
  %v3_61c9 = load i8, i8* %stack_var_-34, align 1
  %v4_61c9 = sext i8 %v3_61c9 to i64
  store i64 %v4_61c9, i64* @rdx, align 8
  %v2_61ce = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v15_61ce = icmp eq i8 %v2_61ce, %v3_61c9
  br i1 %v15_61ce, label %dec_label_pc_61f0, label %dec_label_pc_61d7

dec_label_pc_61d7:                                ; preds = %dec_label_pc_6190, %dec_label_pc_61f0
  %storemerge6 = phi i64 [ %v5_61fe, %dec_label_pc_61f0 ], [ 1, %dec_label_pc_6190 ]
  store i64 %storemerge6, i64* %rax.global-to-local, align 8
  store i64 %v0_61b4, i64* @rcx, align 8
  %v1_61dc = call i64 @__readfsqword(i64 40)
  %v2_61dc = xor i64 %v1_61dc, %v0_61b4
  %v3_61dc = icmp eq i64 %v2_61dc, 0
  store i64 %v2_61dc, i64* @rcx, align 8
  %v1_61e5 = icmp eq i1 %v3_61dc, false
  br i1 %v1_61e5, label %dec_label_pc_6203, label %dec_label_pc_61e7

dec_label_pc_61e7:                                ; preds = %dec_label_pc_61d7
  %v2_61eb = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_61eb, i64* @rbx, align 8
  store i64 %v0_6190, i64* @rbp, align 8
  %v0_61ed = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_61ed

dec_label_pc_61f0:                                ; preds = %dec_label_pc_6190
  store i64 %v8_61c4, i64* @rbp, align 8
  %v0_61f3 = load i64, i64* @rbx, align 8
  store i64 %v0_61f3, i64* @rdi, align 8
  %v1_61f6 = inttoptr i64 %v0_61f3 to i8*
  %v2_61f6 = call i32 @strlen(i8* %v1_61f6)
  %v4_61f6 = sext i32 %v2_61f6 to i64
  store i64 %v4_61f6, i64* %rax.global-to-local, align 8
  %v1_61fb = load i64, i64* @rbp, align 8
  %v12_61fb = icmp eq i64 %v4_61f6, %v1_61fb
  %v1_61fe = icmp eq i1 %v12_61fb, false
  %v2_61fe = zext i1 %v1_61fe to i64
  %v4_61fe = and i64 %v4_61f6, -256
  %v5_61fe = or i64 %v2_61fe, %v4_61fe
  br label %dec_label_pc_61d7

dec_label_pc_6203:                                ; preds = %dec_label_pc_61d7
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_6210 = load i64, i64* @r14, align 8
  %v0_6212 = load i64, i64* @r13, align 8
  %v0_6214 = load i64, i64* @r12, align 8
  %v0_6216 = load i64, i64* @rbp, align 8
  store i64 2, i64* %r12.global-to-local, align 8
  %v0_621a = load i64, i64* @rbx, align 8
  store i64 %v0_621a, i64* %stack_var_-80, align 8
  %v0_621b = load i64, i64* @rdi, align 8
  store i64 %v0_621b, i64* @rbx, align 8
  %v1_621e = inttoptr i64 %v0_621b to i8*
  %v2_621e = call i32 @strlen(i8* %v1_621e)
  %v4_621e = sext i32 %v2_621e to i64
  %v1_6223 = add nsw i64 %v4_621e, 1
  store i64 %v1_6223, i64* @rcx, align 8
  br i1 undef, label %dec_label_pc_6237, label %dec_label_pc_6235

dec_label_pc_6235:                                ; preds = %dec_label_pc_6203
  br label %dec_label_pc_6237

dec_label_pc_6237:                                ; preds = %dec_label_pc_6203, %dec_label_pc_6235
  %v0_6240 = phi i64 [ 0, %dec_label_pc_6235 ], [ 1, %dec_label_pc_6203 ]
  store i64 %v0_6240, i64* @rsi, align 8
  br i1 false, label %dec_label_pc_62dc, label %dec_label_pc_6240

dec_label_pc_6240:                                ; preds = %dec_label_pc_6237
  %v1_6240 = icmp eq i64 %v0_6240, 0
  %v1_6243 = icmp eq i1 %v1_6240, false
  br i1 %v1_6243, label %dec_label_pc_62dc, label %dec_label_pc_6249

dec_label_pc_6249:                                ; preds = %dec_label_pc_6240
  %v3_6249 = mul nsw i64 %v1_6223, 3
  store i64 %v3_6249, i64* @rdi, align 8
  store i64 ptrtoint (i8** @global_var_220fe0.158 to i64), i64* %r14.global-to-local, align 8
  %v1_6254 = call i64 @function_14480(i64 %v3_6249)
  store i64 %v1_6254, i64* %rax.global-to-local, align 8
  store i64 %v1_6254, i64* %r13.global-to-local, align 8
  store i64 %v1_6254, i64* %rbp.global-to-local, align 8
  %v0_625f9 = load i64, i64* @rbx, align 8
  %v1_625f10 = inttoptr i64 %v0_625f9 to i8*
  %v2_625f11 = load i8, i8* %v1_625f10, align 1
  %v3_625f12 = zext i8 %v2_625f11 to i64
  store i64 %v3_625f12, i64* %rax.global-to-local, align 8
  %v5_626213 = icmp eq i8 %v2_625f11, 0
  br i1 %v5_626213, label %dec_label_pc_628e, label %dec_label_pc_6266.preheader

dec_label_pc_6266.preheader:                      ; preds = %dec_label_pc_6249, %dec_label_pc_625f.backedge
  %v0_626a23 = phi i64 [ %v3_625f, %dec_label_pc_625f.backedge ], [ %v3_625f12, %dec_label_pc_6249 ]
  %v0_626621 = phi i64 [ %v0_625f, %dec_label_pc_625f.backedge ], [ %v0_625f9, %dec_label_pc_6249 ]
  br label %dec_label_pc_6266

dec_label_pc_6266:                                ; preds = %dec_label_pc_6266.preheader, %dec_label_pc_6280
  %v0_6280 = phi i64 [ %v0_626a23, %dec_label_pc_6266.preheader ], [ %v3_6283, %dec_label_pc_6280 ]
  %v0_6266 = phi i64 [ %v0_626621, %dec_label_pc_6266.preheader ], [ %v0_6283, %dec_label_pc_6280 ]
  %v1_6266 = add i64 %v0_6266, 1
  store i64 %v1_6266, i64* %rbx.global-to-local, align 8
  %v1_626a = trunc i64 %v0_6280 to i8
  %v11_626a = icmp eq i8 %v1_626a, 47
  %v1_626c = icmp eq i1 %v11_626a, false
  br i1 %v1_626c, label %dec_label_pc_6273, label %dec_label_pc_626e

dec_label_pc_626e:                                ; preds = %dec_label_pc_6266
  %v0_626e = load i64, i64* %r12.global-to-local, align 8
  %v4_626e = trunc i64 %v0_626e to i8
  %v5_626e = icmp eq i8 %v4_626e, 0
  %v1_6271 = icmp eq i1 %v5_626e, false
  br i1 %v1_6271, label %dec_label_pc_62c8, label %dec_label_pc_6273

dec_label_pc_6273:                                ; preds = %dec_label_pc_626e, %dec_label_pc_6266
  store i64 %v0_6280, i64* @rdx, align 8
  %v0_6276 = load i64, i64* %r14.global-to-local, align 8
  %v3_6276 = add i64 %v0_6276, %v0_6280
  %v4_6276 = inttoptr i64 %v3_6276 to i8*
  %v5_6276 = load i8, i8* %v4_6276, align 1
  %v12_6276 = icmp eq i8 %v5_6276, 0
  store i64 %v0_6280, i64* @r8, align 8
  br i1 %v12_6276, label %dec_label_pc_62a0, label %dec_label_pc_6280

dec_label_pc_6280:                                ; preds = %dec_label_pc_6273
  %v2_6280 = load i64, i64* %rbp.global-to-local, align 8
  %v3_6280 = inttoptr i64 %v2_6280 to i8*
  store i8 %v1_626a, i8* %v3_6280, align 1
  %v0_6283 = load i64, i64* %rbx.global-to-local, align 8
  %v1_6283 = inttoptr i64 %v0_6283 to i8*
  %v2_6283 = load i8, i8* %v1_6283, align 1
  %v3_6283 = zext i8 %v2_6283 to i64
  store i64 %v3_6283, i64* %rax.global-to-local, align 8
  %v0_6286 = load i64, i64* %rbp.global-to-local, align 8
  %v1_6286 = add i64 %v0_6286, 1
  store i64 %v1_6286, i64* %rbp.global-to-local, align 8
  %v5_628a = icmp eq i8 %v2_6283, 0
  %v1_628c = icmp eq i1 %v5_628a, false
  br i1 %v1_628c, label %dec_label_pc_6266, label %dec_label_pc_628e

dec_label_pc_625f.dec_label_pc_628e.loopexit7_crit_edge: ; preds = %dec_label_pc_625f.backedge
  %v0_628e.pre.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_628e

dec_label_pc_628e:                                ; preds = %dec_label_pc_6280, %dec_label_pc_6249, %dec_label_pc_625f.dec_label_pc_628e.loopexit7_crit_edge
  %v0_628e = phi i64 [ %v0_628e.pre.pre, %dec_label_pc_625f.dec_label_pc_628e.loopexit7_crit_edge ], [ %v1_6254, %dec_label_pc_6249 ], [ %v1_6286, %dec_label_pc_6280 ]
  %v1_628e = inttoptr i64 %v0_628e to i8*
  store i8 0, i8* %v1_628e, align 1
  %v0_6292 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_6292, i64* %rax.global-to-local, align 8
  %v2_6295 = load i64, i64* %stack_var_-80, align 8
  store i64 %v2_6295, i64* @rbx, align 8
  store i64 %v0_6216, i64* @rbp, align 8
  store i64 %v0_6214, i64* %r12.global-to-local, align 8
  store i64 %v0_6212, i64* @r13, align 8
  store i64 %v0_6210, i64* @r14, align 8
  ret i64 %v0_6292

dec_label_pc_62a0:                                ; preds = %dec_label_pc_6273
  %v1_627b = trunc i64 %v0_6280 to i32
  store i64 ptrtoint ([7 x i8]* @global_var_17bf9.262 to i64), i64* @rcx, align 8
  %v0_62a7 = load i64, i64* %rbp.global-to-local, align 8
  %v1_62a7 = inttoptr i64 %v0_62a7 to i8*
  store i64 %v0_62a7, i64* @rdi, align 8
  store i64 -1, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v1_62b8 = add i64 %v0_62a7, 3
  store i64 %v1_62b8, i64* %rbp.global-to-local, align 8
  %v15_62bc = call i32 (i8*, i32, i32, i8*, ...) @__sprintf_chk(i8* %v1_62a7, i32 1, i32 -1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_17bf9.262, i64 0, i64 0), i32 %v1_627b)
  %v17_62bc = sext i32 %v15_62bc to i64
  store i64 %v17_62bc, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_625f.backedge

dec_label_pc_625f.backedge:                       ; preds = %dec_label_pc_62a0, %dec_label_pc_62c8
  %v0_625f = load i64, i64* %rbx.global-to-local, align 8
  %v1_625f = inttoptr i64 %v0_625f to i8*
  %v2_625f = load i8, i8* %v1_625f, align 1
  %v3_625f = zext i8 %v2_625f to i64
  store i64 %v3_625f, i64* %rax.global-to-local, align 8
  %v5_6262 = icmp eq i8 %v2_625f, 0
  br i1 %v5_6262, label %dec_label_pc_625f.dec_label_pc_628e.loopexit7_crit_edge, label %dec_label_pc_6266.preheader

dec_label_pc_62c8:                                ; preds = %dec_label_pc_626e
  %v0_62c8 = load i64, i64* %rbp.global-to-local, align 8
  %v1_62c8 = inttoptr i64 %v0_62c8 to i8*
  store i8 47, i8* %v1_62c8, align 1
  %v0_62cc = load i64, i64* %rbp.global-to-local, align 8
  %v1_62cc = add i64 %v0_62cc, 1
  store i64 %v1_62cc, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_625f.backedge

dec_label_pc_62dc:                                ; preds = %dec_label_pc_6240, %dec_label_pc_6237
  %v0_62dc = load i64, i64* @rdi, align 8
  %v1_62dc = call i64 @function_146d0(i64 %v0_62dc)
  unreachable
}

define i64 @function_62f0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_62f0:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_62f0 = load i64, i64* @rbx, align 8
  store i64 %v0_62f0, i64* %stack_var_-8, align 8
  %v0_62f1 = load i128, i128* @global_var_2213b0.142, align 8
  %v1_62f1 = trunc i128 %v0_62f1 to i64
  store i64 %v1_62f1, i64* @rbx, align 8
  %v2_62fb = udiv i64 %v1_62f1, 2
  %v2_62fe = add i64 %v2_62fb, %v1_62f1
  store i64 %v2_62fe, i64* %rax.global-to-local, align 8
  %v1_6301 = load i64, i64* @global_var_221398.263, align 8
  %tmp31 = icmp ugt i64 %v2_62fe, %v1_6301
  br i1 %tmp31, label %dec_label_pc_6400, label %dec_label_pc_630e

dec_label_pc_630e:                                ; preds = %dec_label_pc_62f0, %dec_label_pc_642c
  %v0_63fd16 = phi i64 [ %v2_62fe, %dec_label_pc_62f0 ], [ %v3_6447, %dec_label_pc_642c ]
  %v0_6313 = phi i64 [ %v1_62f1, %dec_label_pc_62f0 ], [ %v1_6439, %dec_label_pc_642c ]
  %v1_630e = icmp eq i64 %v0_6313, 0
  br i1 %v1_630e, label %dec_label_pc_6342, label %dec_label_pc_6313

dec_label_pc_6313:                                ; preds = %dec_label_pc_630e
  %v0_6317 = load i64, i64* @global_var_2213c0.143, align 8
  store i64 %v0_6317, i64* %rax.global-to-local, align 8
  %v0_631e = load i64, i64* @global_var_2213a0.249, align 8
  store i64 %v0_631e, i64* @rdx, align 8
  %v2_6329 = mul i64 %v0_6313, 200
  %v3_6329 = add i64 %v0_6317, %v2_6329
  store i64 %v3_6329, i64* @rcx, align 8
  br label %dec_label_pc_6330

dec_label_pc_6330:                                ; preds = %dec_label_pc_6330, %dec_label_pc_6313
  %v1_6330 = phi i64 [ %v1_6339, %dec_label_pc_6330 ], [ %v0_631e, %dec_label_pc_6313 ]
  %v0_6330 = phi i64 [ %v1_6333, %dec_label_pc_6330 ], [ %v0_6317, %dec_label_pc_6313 ]
  %v2_6330 = inttoptr i64 %v1_6330 to i64*
  store i64 %v0_6330, i64* %v2_6330, align 8
  %v0_6333 = load i64, i64* %rax.global-to-local, align 8
  %v1_6333 = add i64 %v0_6333, 200
  store i64 %v1_6333, i64* %rax.global-to-local, align 8
  %v0_6339 = load i64, i64* @rdx, align 8
  %v1_6339 = add i64 %v0_6339, 8
  store i64 %v1_6339, i64* @rdx, align 8
  %v0_633d = load i64, i64* @rcx, align 8
  %v12_633d = icmp eq i64 %v0_633d, %v1_6333
  %v1_6340 = icmp eq i1 %v12_633d, false
  br i1 %v1_6340, label %dec_label_pc_6330, label %dec_label_pc_6342.loopexit

dec_label_pc_6342.loopexit:                       ; preds = %dec_label_pc_6330
  br label %dec_label_pc_6342

dec_label_pc_6342:                                ; preds = %dec_label_pc_6342.loopexit, %dec_label_pc_630e
  %v0_63fd15 = phi i64 [ %v1_6333, %dec_label_pc_6342.loopexit ], [ %v0_63fd16, %dec_label_pc_630e ]
  %v0_6342 = load i32, i32* @global_var_221330.20, align 4
  %v10_6342 = icmp eq i32 %v0_6342, -1
  br i1 %v10_6342, label %dec_label_pc_63fc, label %dec_label_pc_634f

dec_label_pc_634f:                                ; preds = %dec_label_pc_6342
  store i64 ptrtoint (i32* @global_var_220300.264 to i64), i64* @rdi, align 8
  %v5_6356 = call i32 @_setjmp([1 x %__jmp_buf_tag] [%__jmp_buf_tag { [8 x i32] [i32 ptrtoint (i32* @global_var_220300.264 to i32), i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef], i32 undef, %_TYPEDEF___sigset_t undef }])
  %v7_6356 = sext i32 %v5_6356 to i64
  store i64 %v7_6356, i64* %rax.global-to-local, align 8
  %v5_635b = icmp eq i32 %v5_6356, 0
  %v0_635d = load i32, i32* @global_var_221330.20, align 4
  %v1_635d = zext i32 %v0_635d to i64
  store i64 %v1_635d, i64* @rcx, align 8
  br i1 %v5_635b, label %dec_label_pc_63b0, label %dec_label_pc_6365

dec_label_pc_6365:                                ; preds = %dec_label_pc_634f
  %v11_6365 = icmp eq i32 %v0_635d, 3
  br i1 %v11_6365, label %dec_label_pc_6457, label %dec_label_pc_636e

dec_label_pc_636e:                                ; preds = %dec_label_pc_6365
  %v0_636e = load i128, i128* @global_var_2213b0.142, align 8
  %v1_636e = trunc i128 %v0_636e to i64
  store i64 %v1_636e, i64* @rsi, align 8
  %v0_6375 = load i64, i64* @global_var_2213a0.249, align 8
  store i64 %v0_6375, i64* @rdi, align 8
  %v1_637c = icmp eq i64 %v1_636e, 0
  br i1 %v1_637c, label %dec_label_pc_63a3, label %dec_label_pc_6381

dec_label_pc_6381:                                ; preds = %dec_label_pc_636e
  %v0_6381 = load i64, i64* @global_var_2213c0.143, align 8
  store i64 %v0_6381, i64* @rdx, align 8
  %v2_6388 = mul i64 %v1_636e, 8
  %v3_6388 = add i64 %v2_6388, %v0_6375
  store i64 %v3_6388, i64* @r8, align 8
  store i64 %v0_6375, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_6390

dec_label_pc_6390:                                ; preds = %dec_label_pc_6390, %dec_label_pc_6381
  %v1_6390 = phi i64 [ %v1_6393, %dec_label_pc_6390 ], [ %v0_6375, %dec_label_pc_6381 ]
  %v0_6390 = phi i64 [ %v1_6397, %dec_label_pc_6390 ], [ %v0_6381, %dec_label_pc_6381 ]
  %v2_6390 = inttoptr i64 %v1_6390 to i64*
  store i64 %v0_6390, i64* %v2_6390, align 8
  %v0_6393 = load i64, i64* %rax.global-to-local, align 8
  %v1_6393 = add i64 %v0_6393, 8
  store i64 %v1_6393, i64* %rax.global-to-local, align 8
  %v0_6397 = load i64, i64* @rdx, align 8
  %v1_6397 = add i64 %v0_6397, 200
  store i64 %v1_6397, i64* @rdx, align 8
  %v1_639e = load i64, i64* @r8, align 8
  %v12_639e = icmp eq i64 %v1_6393, %v1_639e
  %v1_63a1 = icmp eq i1 %v12_639e, false
  br i1 %v1_63a1, label %dec_label_pc_6390, label %dec_label_pc_63a3.loopexit

dec_label_pc_63a3.loopexit:                       ; preds = %dec_label_pc_6390
  %v0_63be.pre.pre = load i64, i64* @rcx, align 8
  %v0_63f7.pre.pre = load i64, i64* @rdi, align 8
  %v1_63f7.pre.pre = load i64, i64* @rsi, align 8
  br label %dec_label_pc_63a3

dec_label_pc_63a3:                                ; preds = %dec_label_pc_63a3.loopexit, %dec_label_pc_636e
  %v1_63f7.pre = phi i64 [ %v1_63f7.pre.pre, %dec_label_pc_63a3.loopexit ], [ 0, %dec_label_pc_636e ]
  %v0_63f7.pre = phi i64 [ %v0_63f7.pre.pre, %dec_label_pc_63a3.loopexit ], [ %v0_6375, %dec_label_pc_636e ]
  %v0_63be.pre = phi i64 [ %v0_63be.pre.pre, %dec_label_pc_63a3.loopexit ], [ %v1_635d, %dec_label_pc_636e ]
  store i64 1, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_63be

dec_label_pc_63b0:                                ; preds = %dec_label_pc_634f
  %v0_63b0 = load i128, i128* @global_var_2213b0.142, align 8
  %v1_63b0 = trunc i128 %v0_63b0 to i64
  store i64 %v1_63b0, i64* @rsi, align 8
  %v0_63b7 = load i64, i64* @global_var_2213a0.249, align 8
  store i64 %v0_63b7, i64* @rdi, align 8
  br label %dec_label_pc_63be

dec_label_pc_63be:                                ; preds = %dec_label_pc_63b0, %dec_label_pc_63a3
  %v1_63f7 = phi i64 [ %v1_63b0, %dec_label_pc_63b0 ], [ %v1_63f7.pre, %dec_label_pc_63a3 ]
  %v0_63f7 = phi i64 [ %v0_63b7, %dec_label_pc_63b0 ], [ %v0_63f7.pre, %dec_label_pc_63a3 ]
  %v0_63d9 = phi i64 [ %v7_6356, %dec_label_pc_63b0 ], [ 1, %dec_label_pc_63a3 ]
  %v2_63d7 = phi i64 [ %v1_635d, %dec_label_pc_63b0 ], [ %v0_63be.pre, %dec_label_pc_63a3 ]
  %v1_63be = trunc i64 %v2_63d7 to i32
  %v11_63be = icmp eq i32 %v1_63be, 4
  %v3_63c6 = load i32, i32* @global_var_221334.19, align 4
  %v0_63cf = load i8, i8* bitcast (i32* @global_var_2212f4.110 to i8*), align 4
  %v1_63cf = zext i8 %v0_63cf to i64
  store i64 %v1_63cf, i64* @r8, align 8
  %v1_63d7 = select i1 %v11_63be, i32 %v3_63c6, i32 0
  %v4_63d7 = add i32 %v1_63d7, %v1_63be
  %v20_63d7 = zext i32 %v4_63d7 to i64
  %v2_63d9 = mul nuw nsw i64 %v20_63d7, 2
  %v3_63d9 = add nsw i64 %v2_63d9, %v0_63d9
  %v0_63dd = load i8, i8* @global_var_22132f.21, align 1
  %v1_63dd = zext i8 %v0_63dd to i64
  %v2_63e4 = mul nsw i64 %v3_63d9, 2
  %v3_63e4 = add i64 %v1_63dd, %v2_63e4
  %v2_63e8 = mul i64 %v3_63e4, 2
  %v3_63e8 = add i64 %v2_63e8, %v1_63cf
  store i64 %v3_63e8, i64* @rdx, align 8
  store i64 ptrtoint (i64* @global_var_21f000.265 to i64), i64* %rax.global-to-local, align 8
  %v2_63f3 = mul i64 %v3_63e8, 8
  %v3_63f3 = add i64 %v2_63f3, ptrtoint (i64* @global_var_21f000.265 to i64)
  %v4_63f3 = inttoptr i64 %v3_63f3 to i64*
  %v5_63f3 = load i64, i64* %v4_63f3, align 8
  store i64 %v5_63f3, i64* @rdx, align 8
  %v3_63f7 = call i64 @function_105e0(i64 %v0_63f7, i64 %v1_63f7, i64 %v5_63f3)
  store i64 %v3_63f7, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_63fc

dec_label_pc_63fc:                                ; preds = %dec_label_pc_63be, %dec_label_pc_6342
  %v0_63fd = phi i64 [ %v3_63f7, %dec_label_pc_63be ], [ %v0_63fd15, %dec_label_pc_6342 ]
  %v2_63fc = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_63fc, i64* @rbx, align 8
  ret i64 %v0_63fd

dec_label_pc_6400:                                ; preds = %dec_label_pc_62f0
  %v0_6400 = load i64, i64* @global_var_2213a0.249, align 8
  store i64 %v0_6400, i64* @rdi, align 8
  %v1_6407 = inttoptr i64 %v0_6400 to i64*
  call void @free(i64* %v1_6407)
  br i1 undef, label %dec_label_pc_6476, label %dec_label_pc_641b

dec_label_pc_641b:                                ; preds = %dec_label_pc_6476, %dec_label_pc_6400
  %storemerge = phi i64 [ 1, %dec_label_pc_6476 ], [ 0, %dec_label_pc_6400 ]
  %v1_6423 = phi i64 [ 1, %dec_label_pc_6476 ], [ 0, %dec_label_pc_6400 ]
  store i64 %storemerge, i64* @rcx, align 8
  store i64 1, i64* %rax.global-to-local, align 8
  %v3_6423 = select i1 icmp slt (i32* @0, i32* null), i64 1, i64 %v1_6423
  store i64 %v3_6423, i64* @rcx, align 8
  %v1_6427 = icmp eq i64 %v3_6423, 0
  %v1_642a = icmp eq i1 %v1_6427, false
  br i1 %v1_642a, label %dec_label_pc_647d, label %dec_label_pc_642c

dec_label_pc_642c:                                ; preds = %dec_label_pc_641b
  %v0_642c = load i64, i64* @rbx, align 8
  %v2_6430 = mul i64 %v0_642c, 24
  store i64 %v2_6430, i64* @rdi, align 8
  %v1_6434 = call i64 @function_14480(i64 %v2_6430)
  %v0_6439 = load i128, i128* @global_var_2213b0.142, align 8
  %v1_6439 = trunc i128 %v0_6439 to i64
  store i64 %v1_6439, i64* @rbx, align 8
  store i64 %v1_6434, i64* @global_var_2213a0.249, align 8
  %v3_6447 = mul i64 %v1_6439, 3
  store i64 %v3_6447, i64* %rax.global-to-local, align 8
  store i64 %v3_6447, i64* @global_var_221398.263, align 8
  br label %dec_label_pc_630e

dec_label_pc_6457:                                ; preds = %dec_label_pc_6365
  store i64 ptrtoint ([11 x i8]* @global_var_16ac8.266 to i64), i64* @rcx, align 8
  store i64 ptrtoint ([9 x i8]* @global_var_17c00.229 to i64), i64* @rsi, align 8
  store i64 ptrtoint ([26 x i8]* @global_var_17c09.267 to i64), i64* @rdi, align 8
  store i64 ptrtoint (i32* @global_var_ee5.268 to i64), i64* @rdx, align 8
  call void @__assert_fail(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @global_var_17c09.267, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_17c00.229, i64 0, i64 0), i32 ptrtoint (i32* @global_var_ee5.268 to i32), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_16ac8.266, i64 0, i64 0))
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_6476

dec_label_pc_6476:                                ; preds = %dec_label_pc_6457, %dec_label_pc_6400
  br label %dec_label_pc_641b

dec_label_pc_647d:                                ; preds = %dec_label_pc_641b
  %v0_647d = load i64, i64* @rdi, align 8
  %v1_647d = call i64 @function_146d0(i64 %v0_647d)
  unreachable
}

define i64 @function_6490(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6490:
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_6490 = load i64, i64* %rbp.global-to-local, align 8
  %v0_6491 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_6491, i64* %stack_var_-16, align 8
  %v0_6492 = load i64, i64* @rsi, align 8
  store i64 %v0_6492, i64* %rbp.global-to-local, align 8
  %v0_6495 = load i64, i64* @rdi, align 8
  store i64 %v0_6495, i64* %rbx.global-to-local, align 8
  %v0_649c = call i32* @__errno_location()
  store i32 0, i32* %v0_649c, align 4
  store i64 %v0_6492, i64* @rsi, align 8
  store i64 %v0_6495, i64* @rdi, align 8
  %v2_64b1 = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_64b1, i64* %rbx.global-to-local, align 8
  store i64 %v0_6490, i64* %rbp.global-to-local, align 8
  %v1_64b3 = inttoptr i64 %v0_6495 to i8*
  %v3_64b3 = inttoptr i64 %v0_6492 to i8*
  %v4_64b3 = call i32 @strcoll(i8* %v1_64b3, i8* %v3_64b3)
  %v6_64b3 = sext i32 %v4_64b3 to i64
  ret i64 %v6_64b3
}

define i64 @function_64c0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_64c0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_64c0 = load i64, i64* @rsi, align 8
  %v1_64c0 = add i64 %v0_64c0, 72
  %v2_64c0 = inttoptr i64 %v1_64c0 to i64*
  %v3_64c0 = load i64, i64* %v2_64c0, align 8
  %v0_64c4 = load i64, i64* @rdi, align 8
  %v1_64c4 = add i64 %v0_64c4, 72
  %v2_64c4 = inttoptr i64 %v1_64c4 to i64*
  %v3_64c4 = load i64, i64* %v2_64c4, align 8
  %v8_64c8 = icmp sgt i64 %v3_64c4, %v3_64c0
  br i1 %v8_64c8, label %dec_label_pc_64e0, label %dec_label_pc_64ca

dec_label_pc_64ca:                                ; preds = %dec_label_pc_64c0
  ret i64 1

dec_label_pc_64e0:                                ; preds = %dec_label_pc_64c0
  ret i64 4294967295
}

define i64 @function_64f0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_64f0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_64f0 = load i64, i64* @rdi, align 8
  %v1_64f0 = add i64 %v0_64f0, 72
  %v2_64f0 = inttoptr i64 %v1_64f0 to i64*
  %v3_64f0 = load i64, i64* %v2_64f0, align 8
  %v0_64f4 = load i64, i64* @rsi, align 8
  %v1_64f4 = add i64 %v0_64f4, 72
  %v2_64f4 = inttoptr i64 %v1_64f4 to i64*
  %v3_64f4 = load i64, i64* %v2_64f4, align 8
  store i64 %v0_64f4, i64* @rdx, align 8
  %v8_64fb = icmp sgt i64 %v3_64f4, %v3_64f0
  br i1 %v8_64fb, label %dec_label_pc_6520, label %dec_label_pc_64fd

dec_label_pc_64fd:                                ; preds = %dec_label_pc_64f0
  %v5_6502 = icmp slt i64 %v3_64f4, %v3_64f0
  br i1 %v5_6502, label %dec_label_pc_6504, label %dec_label_pc_6510

dec_label_pc_6504:                                ; preds = %dec_label_pc_64fd
  ret i64 1

dec_label_pc_6510:                                ; preds = %dec_label_pc_64fd
  store i64 %v0_64f0, i64* @rsi, align 8
  ret i64 1

dec_label_pc_6520:                                ; preds = %dec_label_pc_64f0
  ret i64 4294967295
}

define i64 @function_6530(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6530:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6536 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_6536
}

define i64 @function_6540(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6540:
  store i64 %arg1, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  ret i64 %arg2
}

define i64 @function_6550(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6550:
  store i64 %arg1, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_6559 = call i64 @function_d3c0(i64 %arg1, i64 %arg1)
  ret i64 %v2_6559
}

define i64 @function_6560(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_6560:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_6566 = call i64 @function_d3c0(i64 %arg1, i64 %arg2)
  ret i64 %v2_6566
}

define i64 @function_6570(i32 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_6570:
  %r15.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  %tmp32 = sext i32 %arg1 to i64
  store i64 %tmp32, i64* @rdi, align 8
  %v0_6570 = load i64, i64* @r15, align 8
  %v0_6572 = load i64, i64* @r14, align 8
  %v0_6577 = load i64, i64* @r13, align 8
  %v0_6579 = load i64, i64* @r12, align 8
  %v0_657b = load i64, i64* @rsi, align 8
  store i64 %v0_657b, i64* @r13, align 8
  %v0_657f = load i64, i64* @rbp, align 8
  %v0_6580 = load i64, i64* @rbx, align 8
  %v2_6585 = icmp eq i32 %arg1, 0
  br i1 %v2_6585, label %dec_label_pc_65a0, label %dec_label_pc_658a

dec_label_pc_658a:                                ; preds = %dec_label_pc_6570
  %v0_658a = load i64, i64* @global_var_2213c8.134, align 8
  %v7_658a = icmp eq i64 %v0_658a, 0
  br i1 %v7_658a, label %dec_label_pc_65a0, label %dec_label_pc_6594

dec_label_pc_6594:                                ; preds = %dec_label_pc_658a
  store i64 %tmp32, i64* @rsi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v5_659b = call i64 @function_5f80(i64* null, i32 %arg1, i64 0)
  store i64 %v5_659b, i64* @rax, align 8
  br label %dec_label_pc_65a0

dec_label_pc_65a0:                                ; preds = %dec_label_pc_6594, %dec_label_pc_658a, %dec_label_pc_6570
  %v0_65a0 = load i128, i128* @global_var_2213b0.142, align 8
  %v1_65a0 = trunc i128 %v0_65a0 to i64
  %v1_65a7 = mul i64 %v1_65a0, 8
  %v2_65a7 = add i64 %v1_65a7, -8
  store i64 %v2_65a7, i64* @r12, align 8
  %v1_65af = add i64 %v1_65a0, -1
  %v5_65af = icmp eq i64 %v1_65a0, 0
  store i64 %v1_65af, i64* @rbx, align 8
  br i1 %v5_65af, label %dec_label_pc_65e9, label %dec_label_pc_65c0

dec_label_pc_65c0:                                ; preds = %dec_label_pc_65a0, %dec_label_pc_65db
  %v1_65c7 = phi i64 [ %v1_65df, %dec_label_pc_65db ], [ %v2_65a7, %dec_label_pc_65a0 ]
  %v0_65c0 = load i64, i64* @global_var_2213a0.249, align 8
  store i64 %v0_65c0, i64* %rax.global-to-local, align 8
  %v3_65c7 = add i64 %v0_65c0, %v1_65c7
  %v4_65c7 = inttoptr i64 %v3_65c7 to i64*
  %v5_65c7 = load i64, i64* %v4_65c7, align 8
  store i64 %v5_65c7, i64* @rbp, align 8
  %v1_65cb = add i64 %v5_65c7, 168
  %v2_65cb = inttoptr i64 %v1_65cb to i32*
  %v3_65cb = load i32, i32* %v2_65cb, align 4
  %v4_65cb = zext i32 %v3_65cb to i64
  store i64 %v4_65cb, i64* @rax, align 8
  %v11_65d1 = icmp eq i32 %v3_65cb, 3
  br i1 %v11_65d1, label %dec_label_pc_6640, label %dec_label_pc_65d6

dec_label_pc_65d6:                                ; preds = %dec_label_pc_65c0
  %v11_65d6 = icmp eq i32 %v3_65cb, 9
  br i1 %v11_65d6, label %dec_label_pc_6640, label %dec_label_pc_65db

dec_label_pc_65db:                                ; preds = %dec_label_pc_66ce, %dec_label_pc_66b8, %dec_label_pc_6690, %dec_label_pc_6683, %dec_label_pc_65d6
  %v0_65db = load i64, i64* @rbx, align 8
  %v1_65db = add i64 %v0_65db, -1
  %v5_65db = icmp eq i64 %v0_65db, 0
  store i64 %v1_65db, i64* @rbx, align 8
  %v0_65df = load i64, i64* @r12, align 8
  %v1_65df = add i64 %v0_65df, -8
  store i64 %v1_65df, i64* @r12, align 8
  %v1_65e7 = icmp eq i1 %v5_65db, false
  br i1 %v1_65e7, label %dec_label_pc_65c0, label %dec_label_pc_65e9.loopexit

dec_label_pc_65e9.loopexit:                       ; preds = %dec_label_pc_65db
  %v0_65e9.pre = load i128, i128* @global_var_2213b0.142, align 8
  %extract.t16 = trunc i128 %v0_65e9.pre to i64
  br label %dec_label_pc_65e9

dec_label_pc_65e9:                                ; preds = %dec_label_pc_65e9.loopexit, %dec_label_pc_65a0
  %v0_65e9.off015 = phi i64 [ %extract.t16, %dec_label_pc_65e9.loopexit ], [ 0, %dec_label_pc_65a0 ]
  store i64 %v0_65e9.off015, i64* @rdx, align 8
  %v1_65f0 = icmp eq i64 %v0_65e9.off015, 0
  br i1 %v1_65f0, label %dec_label_pc_65e9.dec_label_pc_6628_crit_edge, label %dec_label_pc_65f5

dec_label_pc_65e9.dec_label_pc_6628_crit_edge:    ; preds = %dec_label_pc_65e9
  %v0_663d.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_6628

dec_label_pc_65f5:                                ; preds = %dec_label_pc_65e9
  %v0_65f5 = load i64, i64* @global_var_2213a0.249, align 8
  store i64 %v0_65f5, i64* @rsi, align 8
  %v2_65fc = mul i64 %v0_65e9.off015, 8
  %v3_65fc = add i64 %v0_65f5, %v2_65fc
  store i64 %v3_65fc, i64* @rdi, align 8
  store i64 %v0_65f5, i64* %rax.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  br label %dec_label_pc_6608

dec_label_pc_6608:                                ; preds = %dec_label_pc_6608.dec_label_pc_6608_crit_edge, %dec_label_pc_65f5
  %v2_6612 = phi i64 [ %v2_6620, %dec_label_pc_6608.dec_label_pc_6608_crit_edge ], [ 0, %dec_label_pc_65f5 ]
  %v1_6612 = phi i64 [ %v1_6612.pre, %dec_label_pc_6608.dec_label_pc_6608_crit_edge ], [ %v0_65f5, %dec_label_pc_65f5 ]
  %v0_6608 = phi i64 [ %v1_6619, %dec_label_pc_6608.dec_label_pc_6608_crit_edge ], [ %v0_65f5, %dec_label_pc_65f5 ]
  %v1_6608 = inttoptr i64 %v0_6608 to i64*
  %v2_6608 = load i64, i64* %v1_6608, align 8
  store i64 %v2_6608, i64* @rcx, align 8
  %v1_660b = add i64 %v2_6608, 168
  %v2_660b = inttoptr i64 %v1_660b to i32*
  %v3_660b = load i32, i32* %v2_660b, align 4
  %v13_660b = icmp eq i32 %v3_660b, 9
  %v3_6612 = mul i64 %v2_6612, 8
  %v4_6612 = add i64 %v3_6612, %v1_6612
  %v5_6612 = inttoptr i64 %v4_6612 to i64*
  store i64 %v2_6608, i64* %v5_6612, align 8
  %v1_6616 = icmp eq i1 %v13_660b, false
  %v2_6616 = zext i1 %v1_6616 to i64
  %v3_6616 = load i64, i64* @rcx, align 8
  %v4_6616 = and i64 %v3_6616, -256
  %v5_6616 = or i64 %v4_6616, %v2_6616
  store i64 %v5_6616, i64* @rcx, align 8
  %v0_6619 = load i64, i64* %rax.global-to-local, align 8
  %v1_6619 = add i64 %v0_6619, 8
  store i64 %v1_6619, i64* %rax.global-to-local, align 8
  %v0_6620 = load i64, i64* @rdx, align 8
  %v2_6620 = add i64 %v0_6620, %v5_6616
  store i64 %v2_6620, i64* @rdx, align 8
  %v0_6623 = load i64, i64* @rdi, align 8
  %v12_6623 = icmp eq i64 %v0_6623, %v1_6619
  %v1_6626 = icmp eq i1 %v12_6623, false
  br i1 %v1_6626, label %dec_label_pc_6608.dec_label_pc_6608_crit_edge, label %dec_label_pc_6628.loopexit

dec_label_pc_6608.dec_label_pc_6608_crit_edge:    ; preds = %dec_label_pc_6608
  %v1_6612.pre = load i64, i64* @rsi, align 8
  br label %dec_label_pc_6608

dec_label_pc_6628.loopexit:                       ; preds = %dec_label_pc_6608
  %phitmp = sext i64 %v2_6620 to i128
  br label %dec_label_pc_6628

dec_label_pc_6628:                                ; preds = %dec_label_pc_65e9.dec_label_pc_6628_crit_edge, %dec_label_pc_6628.loopexit
  %v0_663d = phi i64 [ %v1_6619, %dec_label_pc_6628.loopexit ], [ %v0_663d.pre, %dec_label_pc_65e9.dec_label_pc_6628_crit_edge ]
  %v0_6628 = phi i128 [ %phitmp, %dec_label_pc_6628.loopexit ], [ 0, %dec_label_pc_65e9.dec_label_pc_6628_crit_edge ]
  store i128 %v0_6628, i128* @global_var_2213b0.142, align 8
  store i64 %v0_6580, i64* @rbx, align 8
  store i64 %v0_657f, i64* @rbp, align 8
  store i64 %v0_6579, i64* @r12, align 8
  store i64 %v0_6577, i64* @r13, align 8
  store i64 %v0_6572, i64* @r14, align 8
  store i64 %v0_6570, i64* @r15, align 8
  ret i64 %v0_663d

dec_label_pc_6640:                                ; preds = %dec_label_pc_65d6, %dec_label_pc_65c0
  %v1_6643 = inttoptr i64 %v5_65c7 to i64*
  %v2_6643 = load i64, i64* %v1_6643, align 8
  store i64 %v2_6643, i64* @r15, align 8
  br i1 %v2_6585, label %dec_label_pc_66a0, label %dec_label_pc_6649

dec_label_pc_6649:                                ; preds = %dec_label_pc_6640
  store i64 %v2_6643, i64* @rdi, align 8
  %v1_664c = load i64, i64* @rsi, align 8
  %v2_664c = call i64 @function_ce10(i64 %v2_6643, i64 %v1_664c)
  store i64 %v2_664c, i64* %rax.global-to-local, align 8
  %v1_6651 = inttoptr i64 %v2_664c to i8*
  %v2_6651 = load i8, i8* %v1_6651, align 1
  %v12_6651 = icmp eq i8 %v2_6651, 46
  br i1 %v12_6651, label %dec_label_pc_66b8, label %dec_label_pc_6656

dec_label_pc_6656:                                ; preds = %dec_label_pc_66ce, %dec_label_pc_6649
  %v0_6656 = load i64, i64* @r15, align 8
  %v1_6656 = inttoptr i64 %v0_6656 to i8*
  %v2_6656 = load i8, i8* %v1_6656, align 1
  %v12_6656 = icmp eq i8 %v2_6656, 47
  br i1 %v12_6656, label %dec_label_pc_6656.dec_label_pc_66a0_crit_edge, label %dec_label_pc_665c

dec_label_pc_6656.dec_label_pc_66a0_crit_edge:    ; preds = %dec_label_pc_6656
  %v0_66a0.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_66a0

dec_label_pc_665c:                                ; preds = %dec_label_pc_6656
  store i64 %v0_6656, i64* @rsi, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %tmp32, i64* @rdi, align 8
  %v6_6664 = call i64 @function_d200(i64 %tmp32, i64 %v0_6656, i32 0)
  store i64 %v6_6664, i64* %rax.global-to-local, align 8
  %v0_6669 = load i64, i64* @rbp, align 8
  %v1_6669 = add i64 %v0_6669, 8
  %v2_6669 = inttoptr i64 %v1_6669 to i64*
  %v3_6669 = load i64, i64* %v2_6669, align 8
  store i64 %v3_6669, i64* @rsi, align 8
  store i64 %v6_6664, i64* %r15.global-to-local, align 8
  store i64 %v6_6664, i64* @rdi, align 8
  %v0_6673 = load i64, i64* @r13, align 8
  store i64 %v0_6673, i64* @rdx, align 8
  %v1_6676 = inttoptr i64 %v6_6664 to i64*
  %v3_6676 = trunc i64 %v3_6669 to i32
  %v5_6676 = call i64 @function_5f80(i64* %v1_6676, i32 %v3_6676, i64 %v0_6673)
  store i64 %v5_6676, i64* %rax.global-to-local, align 8
  %v0_667b = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_667b, i64* @rdi, align 8
  %v1_667e = inttoptr i64 %v0_667b to i64*
  call void @free(i64* %v1_667e)
  br label %dec_label_pc_6683

dec_label_pc_6683:                                ; preds = %dec_label_pc_66a0, %dec_label_pc_665c
  %storemerge = phi i64 [ %v5_66aa, %dec_label_pc_66a0 ], [ ptrtoint (i32* @0 to i64), %dec_label_pc_665c ]
  store i64 %storemerge, i64* @rax, align 8
  %v0_6683 = load i64, i64* @rbp, align 8
  %v1_6683 = add i64 %v0_6683, 168
  %v2_6683 = inttoptr i64 %v1_6683 to i32*
  %v3_6683 = load i32, i32* %v2_6683, align 4
  %v13_6683 = icmp eq i32 %v3_6683, 9
  %v1_668a = icmp eq i1 %v13_6683, false
  br i1 %v1_668a, label %dec_label_pc_65db, label %dec_label_pc_6690

dec_label_pc_6690:                                ; preds = %dec_label_pc_6683
  store i64 %v0_6683, i64* @rdi, align 8
  %v1_6693 = call i64 @function_6090(i64 %v0_6683)
  store i64 %v1_6693, i64* @rax, align 8
  br label %dec_label_pc_65db

dec_label_pc_66a0:                                ; preds = %dec_label_pc_6656.dec_label_pc_66a0_crit_edge, %dec_label_pc_6640
  %v0_66a7 = phi i64 [ %v0_6656, %dec_label_pc_6656.dec_label_pc_66a0_crit_edge ], [ %v2_6643, %dec_label_pc_6640 ]
  %v0_66a0 = phi i64 [ %v0_66a0.pre, %dec_label_pc_6656.dec_label_pc_66a0_crit_edge ], [ %v5_65c7, %dec_label_pc_6640 ]
  %v1_66a0 = add i64 %v0_66a0, 8
  %v2_66a0 = inttoptr i64 %v1_66a0 to i64*
  %v3_66a0 = load i64, i64* %v2_66a0, align 8
  store i64 %v3_66a0, i64* @rsi, align 8
  %v0_66a4 = load i64, i64* @r13, align 8
  store i64 %v0_66a4, i64* @rdx, align 8
  store i64 %v0_66a7, i64* @rdi, align 8
  %v1_66aa = inttoptr i64 %v0_66a7 to i64*
  %v3_66aa = trunc i64 %v3_66a0 to i32
  %v5_66aa = call i64 @function_5f80(i64* %v1_66aa, i32 %v3_66aa, i64 %v0_66a4)
  br label %dec_label_pc_6683

dec_label_pc_66b8:                                ; preds = %dec_label_pc_6649
  store i64 0, i64* @rdx, align 8
  %v1_66ba = add i64 %v2_664c, 1
  %v2_66ba = inttoptr i64 %v1_66ba to i8*
  %v3_66ba = load i8, i8* %v2_66ba, align 1
  %v13_66ba = icmp eq i8 %v3_66ba, 46
  %v1_66be = zext i1 %v13_66ba to i64
  store i64 %v1_66be, i64* @rdx, align 8
  %v4_66c1 = add i64 %v1_66be, %v1_66ba
  %v5_66c1 = inttoptr i64 %v4_66c1 to i8*
  %v6_66c1 = load i8, i8* %v5_66c1, align 1
  %v7_66c1 = zext i8 %v6_66c1 to i64
  store i64 %v7_66c1, i64* @rax, align 8
  %v5_66c6 = icmp eq i8 %v6_66c1, 0
  br i1 %v5_66c6, label %dec_label_pc_65db, label %dec_label_pc_66ce

dec_label_pc_66ce:                                ; preds = %dec_label_pc_66b8
  %v11_66ce = icmp eq i8 %v6_66c1, 47
  br i1 %v11_66ce, label %dec_label_pc_65db, label %dec_label_pc_6656
}

define i64 @function_66e0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_66e0:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_66e0 = load i64, i64* @rdi, align 8
  %v1_66e0 = load i64, i64* @rsi, align 8
  %v7_66e0 = icmp ult i64 %v0_66e0, %v1_66e0
  %v1_66e3 = icmp eq i1 %v7_66e0, false
  br i1 %v1_66e3, label %dec_label_pc_6788, label %dec_label_pc_66e9

dec_label_pc_66e9:                                ; preds = %dec_label_pc_66e0
  %v0_66e9 = load i64, i64* @r12, align 8
  store i64 %v1_66e0, i64* %r12.global-to-local, align 8
  %v0_66ee = load i64, i64* @rbp, align 8
  %v0_66ef = load i64, i64* @rbx, align 8
  store i64 %v0_66ef, i64* %stack_var_-24, align 8
  store i64 %v0_66e0, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_6736

dec_label_pc_66f8:                                ; preds = %dec_label_pc_6736
  %div = udiv i64 %v0_66fa, %v1_6736
  %v2_6708 = zext i64 %v1_6744 to i128
  %v7_6708 = and i128 %v0_6736, 18446744073709551615
  %v8_6708 = udiv i128 %v2_6708, %v7_6708
  %v9_6708 = trunc i128 %v8_6708 to i64
  store i64 %v9_6708, i64* %rax.global-to-local, align 8
  %v10_6708 = urem i128 %v2_6708, %v7_6708
  %v11_6708 = trunc i128 %v10_6708 to i64
  store i64 %v11_6708, i64* @rdx, align 8
  %tmp23 = icmp ugt i64 %div, %v9_6708
  br i1 %tmp23, label %dec_label_pc_6710, label %dec_label_pc_6755

dec_label_pc_6710:                                ; preds = %dec_label_pc_66f8
  %v7_6710 = icmp ult i64 %v4_674b, %v4_674f
  %v1_6713 = icmp eq i1 %v7_6710, false
  br i1 %v1_6713, label %dec_label_pc_6790, label %dec_label_pc_6715

dec_label_pc_6715:                                ; preds = %dec_label_pc_6710
  %v1_6715 = add i64 %v4_674b, 1
  store i64 %v1_6715, i64* %rax.global-to-local, align 8
  store i64 %v1_6715, i64* %v3_674b, align 8
  %v0_671d = load i64, i64* @rsi, align 8
  %v1_671d = inttoptr i64 %v0_671d to i8*
  store i8 9, i8* %v1_671d, align 1
  %v0_6725.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_6720

dec_label_pc_6720:                                ; preds = %dec_label_pc_6790, %dec_label_pc_6715
  %v0_6725 = phi i64 [ %v1_679a, %dec_label_pc_6790 ], [ %v0_6725.pre, %dec_label_pc_6715 ]
  %v0_6720 = load i64, i64* %rbx.global-to-local, align 8
  %div4 = udiv i64 %v0_6720, %v0_6725
  store i64 %div4, i64* %rax.global-to-local, align 8
  %tmp22 = urem i64 %v0_6720, %v0_6725
  store i64 %tmp22, i64* @rdx, align 8
  %v2_6728 = add i64 %v0_6720, %v0_6725
  store i64 %v2_6728, i64* @rcx, align 8
  %v2_672e = sub i64 %v2_6728, %tmp22
  store i64 %v2_672e, i64* %rbx.global-to-local, align 8
  %v1_6731 = load i64, i64* %r12.global-to-local, align 8
  %v7_6731 = icmp ult i64 %v2_672e, %v1_6731
  %v1_6734 = icmp eq i1 %v7_6731, false
  br i1 %v1_6734, label %dec_label_pc_676d, label %dec_label_pc_6736

dec_label_pc_6736:                                ; preds = %dec_label_pc_6720, %dec_label_pc_6765, %dec_label_pc_66e9
  %v0_66fa = phi i64 [ %v1_66e0, %dec_label_pc_66e9 ], [ %v1_6768, %dec_label_pc_6765 ], [ %v1_6731, %dec_label_pc_6720 ]
  %v0_6744 = phi i64 [ %v0_66e0, %dec_label_pc_66e9 ], [ %v0_6765, %dec_label_pc_6765 ], [ %v2_672e, %dec_label_pc_6720 ]
  %v0_6736 = load i128, i128* @global_var_2212c0.48, align 8
  %v1_6736 = trunc i128 %v0_6736 to i64
  store i64 %v1_6736, i64* @rcx, align 8
  %v0_673d = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_673d = ptrtoint %_IO_FILE* %v0_673d to i64
  store i64 %v1_673d, i64* @rdi, align 8
  %v1_6744 = add i64 %v0_6744, 1
  store i64 %v1_6744, i64* %rbp.global-to-local, align 8
  %v1_6748 = icmp eq i64 %v1_6736, 0
  %v2_674b = add i64 %v1_673d, 40
  %v3_674b = inttoptr i64 %v2_674b to i64*
  %v4_674b = load i64, i64* %v3_674b, align 8
  store i64 %v4_674b, i64* @rsi, align 8
  %v2_674f = add i64 %v1_673d, 48
  %v3_674f = inttoptr i64 %v2_674f to i64*
  %v4_674f = load i64, i64* %v3_674f, align 8
  store i64 %v4_674f, i64* @r8, align 8
  %v1_6753 = icmp eq i1 %v1_6748, false
  br i1 %v1_6753, label %dec_label_pc_66f8, label %dec_label_pc_6755

dec_label_pc_6755:                                ; preds = %dec_label_pc_66f8, %dec_label_pc_6736
  %v7_6755 = icmp ult i64 %v4_674b, %v4_674f
  %v1_6758 = icmp eq i1 %v7_6755, false
  br i1 %v1_6758, label %dec_label_pc_6778, label %dec_label_pc_675a

dec_label_pc_675a:                                ; preds = %dec_label_pc_6755
  %v1_675a = add i64 %v4_674b, 1
  store i64 %v1_675a, i64* %rax.global-to-local, align 8
  store i64 %v1_675a, i64* %v3_674b, align 8
  %v0_6762 = load i64, i64* @rsi, align 8
  %v1_6762 = inttoptr i64 %v0_6762 to i8*
  store i8 32, i8* %v1_6762, align 1
  br label %dec_label_pc_6765

dec_label_pc_6765:                                ; preds = %dec_label_pc_6778, %dec_label_pc_675a
  %v0_6765 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_6765, i64* %rbx.global-to-local, align 8
  %v1_6768 = load i64, i64* %r12.global-to-local, align 8
  %v7_6768 = icmp ult i64 %v0_6765, %v1_6768
  br i1 %v7_6768, label %dec_label_pc_6736, label %dec_label_pc_6765.dec_label_pc_676d_crit_edge

dec_label_pc_6765.dec_label_pc_676d_crit_edge:    ; preds = %dec_label_pc_6765
  %v0_6771.pre = load i64, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_676d

dec_label_pc_676d:                                ; preds = %dec_label_pc_6720, %dec_label_pc_6765.dec_label_pc_676d_crit_edge
  %v0_6771 = phi i64 [ %v0_6771.pre, %dec_label_pc_6765.dec_label_pc_676d_crit_edge ], [ %div4, %dec_label_pc_6720 ]
  %v2_676d = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_676d, i64* %rbx.global-to-local, align 8
  store i64 %v0_66ee, i64* %rbp.global-to-local, align 8
  store i64 %v0_66e9, i64* %r12.global-to-local, align 8
  ret i64 %v0_6771

dec_label_pc_6778:                                ; preds = %dec_label_pc_6755
  store i64 32, i64* @rsi, align 8
  %v6_677d = call i32 @__overflow(%_IO_FILE* %v0_673d, i32 32)
  %v8_677d = sext i32 %v6_677d to i64
  store i64 %v8_677d, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_6765

dec_label_pc_6788:                                ; preds = %dec_label_pc_66e0
  %v0_6788 = load i64, i64* @rax, align 8
  ret i64 %v0_6788

dec_label_pc_6790:                                ; preds = %dec_label_pc_6710
  store i64 9, i64* @rsi, align 8
  %v6_6795 = call i32 @__overflow(%_IO_FILE* %v0_673d, i32 9)
  %v8_6795 = sext i32 %v6_6795 to i64
  store i64 %v8_6795, i64* %rax.global-to-local, align 8
  %v0_679a = load i128, i128* @global_var_2212c0.48, align 8
  %v1_679a = trunc i128 %v0_679a to i64
  store i64 %v1_679a, i64* @rcx, align 8
  br label %dec_label_pc_6720
}

define i64 @function_67b0(i8* %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_67b0:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  %tmp23 = ptrtoint i64* %arg2 to i64
  store i64 %tmp23, i64* @rsi, align 8
  %tmp24 = ptrtoint i8* %arg1 to i64
  store i64 %tmp24, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_67b3 = load i64, i64* @rbx, align 8
  store i64 %v0_67b3, i64* %stack_var_-24, align 8
  %v0_67b4 = load i64, i64* @rsi, align 8
  %v1_67b4 = add i64 %v0_67b4, 24
  %v2_67b4 = inttoptr i64 %v1_67b4 to i64*
  %v3_67b4 = load i64, i64* %v2_67b4, align 8
  store i64 %v3_67b4, i64* %rax.global-to-local, align 8
  %v1_67b8 = add i64 %v0_67b4, 16
  %v2_67b8 = inttoptr i64 %v1_67b8 to i64*
  %v3_67b8 = load i64, i64* %v2_67b8, align 8
  store i64 %v3_67b8, i64* %rbx.global-to-local, align 8
  %v2_67bf = sub i64 %v3_67b4, %v3_67b8
  %v2_67c2 = udiv i64 %v2_67bf, 8
  %tmp30 = icmp ult i64 %v2_67bf, 8
  store i64 %v2_67c2, i64* %rbp.global-to-local, align 8
  br i1 %tmp30, label %dec_label_pc_6857, label %dec_label_pc_67cf

dec_label_pc_67cf:                                ; preds = %dec_label_pc_67b0
  br i1 false, label %dec_label_pc_6862, label %dec_label_pc_67d8

dec_label_pc_67d8:                                ; preds = %dec_label_pc_6862, %dec_label_pc_67cf
  %v1_67d8 = add i64 %v0_67b4, 48
  %v2_67d8 = inttoptr i64 %v1_67d8 to i64*
  %v3_67d8 = load i64, i64* %v2_67d8, align 8
  store i64 %v3_67d8, i64* @rdx, align 8
  %v1_67dc = add i64 %v0_67b4, 32
  %v2_67dc = inttoptr i64 %v1_67dc to i64*
  %v3_67dc = load i64, i64* %v2_67dc, align 8
  store i64 %v3_67dc, i64* @rcx, align 8
  %v2_67e0 = add i64 %v3_67d8, %v3_67b4
  %v1_67e3 = sub i64 -1, %v3_67d8
  store i64 %v1_67e3, i64* @rdx, align 8
  store i64 %v3_67dc, i64* @r8, align 8
  %v2_67e9 = and i64 %v2_67e0, %v1_67e3
  store i64 %v2_67e9, i64* %rax.global-to-local, align 8
  %v1_67ec = add i64 %v0_67b4, 8
  %v2_67ec = inttoptr i64 %v1_67ec to i64*
  %v3_67ec = load i64, i64* %v2_67ec, align 8
  store i64 %v3_67ec, i64* @rdx, align 8
  %v2_67f0 = add i64 %v0_67b4, 24
  %v3_67f0 = inttoptr i64 %v2_67f0 to i64*
  store i64 %v2_67e9, i64* %v3_67f0, align 8
  %v0_67f4 = load i64, i64* @r8, align 8
  %v1_67f4 = load i64, i64* @rdx, align 8
  %v2_67f4 = sub i64 %v0_67f4, %v1_67f4
  store i64 %v2_67f4, i64* @r8, align 8
  %v0_67f7 = load i64, i64* %rax.global-to-local, align 8
  %v2_67f7 = sub i64 %v0_67f7, %v1_67f4
  store i64 %v2_67f7, i64* %rax.global-to-local, align 8
  %tmp31 = icmp ugt i64 %v2_67f7, %v2_67f4
  br i1 %tmp31, label %dec_label_pc_685c, label %dec_label_pc_67ff

dec_label_pc_67ff:                                ; preds = %dec_label_pc_67d8, %dec_label_pc_685c
  %v0_67ff = load i64, i64* @rsi, align 8
  %v1_67ff = add i64 %v0_67ff, 24
  %v2_67ff = inttoptr i64 %v1_67ff to i64*
  %v3_67ff = load i64, i64* %v2_67ff, align 8
  store i64 %v3_67ff, i64* %rax.global-to-local, align 8
  %v0_6803 = load i64, i64* %rbx.global-to-local, align 8
  %v2_6803 = mul nuw i64 %v2_67c2, 8
  %v3_6803 = add i64 %v0_6803, %v2_6803
  store i64 %v3_6803, i64* %r12.global-to-local, align 8
  store i64 ptrtoint ([5 x i8]* @global_var_17c23.269 to i64), i64* %rbp.global-to-local, align 8
  %v2_680e = add i64 %v0_67ff, 16
  %v3_680e = inttoptr i64 %v2_680e to i64*
  store i64 %v3_67ff, i64* %v3_680e, align 8
  %v0_6812 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_6812 = ptrtoint %_IO_FILE* %v0_6812 to i64
  store i64 %v1_6812, i64* @rsi, align 8
  %v6_6819 = call i32 @fputs_unlocked(i8* %arg1, %_IO_FILE* %v0_6812)
  %v8_6819 = sext i32 %v6_6819 to i64
  store i64 %v8_6819, i64* %rax.global-to-local, align 8
  %v0_6820.pre = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_6820

dec_label_pc_6820:                                ; preds = %dec_label_pc_6820, %dec_label_pc_67ff
  %v0_682d = phi i64 [ %v1_682d, %dec_label_pc_6820 ], [ %v0_6820.pre, %dec_label_pc_67ff ]
  %v1_6820 = inttoptr i64 %v0_682d to i64*
  %v2_6820 = load i64, i64* %v1_6820, align 8
  %v3_6820 = trunc i64 %v2_6820 to i32
  store i64 %v2_6820, i64* @rdx, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_6825 = load i64, i64* %rbp.global-to-local, align 8
  %v1_6825 = inttoptr i64 %v0_6825 to i8*
  store i64 %v0_6825, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v1_682d = add i64 %v0_682d, 8
  store i64 %v1_682d, i64* %rbx.global-to-local, align 8
  %v9_6831 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %v1_6825, i32 %v3_6820)
  %v11_6831 = sext i32 %v9_6831 to i64
  store i64 %v11_6831, i64* %rax.global-to-local, align 8
  %v1_6836 = load i64, i64* %r12.global-to-local, align 8
  %v12_6836 = icmp eq i64 %v1_682d, %v1_6836
  %v1_6839 = icmp eq i1 %v12_6836, false
  br i1 %v1_6839, label %dec_label_pc_6820, label %dec_label_pc_683b

dec_label_pc_683b:                                ; preds = %dec_label_pc_6820
  %v0_683b = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_683b = ptrtoint %_IO_FILE* %v0_683b to i64
  store i64 %v1_683b, i64* @rdi, align 8
  %v2_6842 = add i64 %v1_683b, 40
  %v3_6842 = inttoptr i64 %v2_6842 to i64*
  %v4_6842 = load i64, i64* %v3_6842, align 8
  store i64 %v4_6842, i64* %rax.global-to-local, align 8
  %v3_6846 = add i64 %v1_683b, 48
  %v4_6846 = inttoptr i64 %v3_6846 to i64*
  %v5_6846 = load i64, i64* %v4_6846, align 8
  %v11_6846 = icmp ult i64 %v4_6842, %v5_6846
  %v1_684a = icmp eq i1 %v11_6846, false
  br i1 %v1_684a, label %dec_label_pc_686b, label %dec_label_pc_684c

dec_label_pc_684c:                                ; preds = %dec_label_pc_683b
  %v1_684c = add i64 %v4_6842, 1
  store i64 %v1_684c, i64* @rdx, align 8
  store i64 %v1_684c, i64* %v3_6842, align 8
  %v0_6854 = load i64, i64* %rax.global-to-local, align 8
  %v1_6854 = inttoptr i64 %v0_6854 to i8*
  store i8 10, i8* %v1_6854, align 1
  %v2_6857.pre = load i64, i64* %stack_var_-24, align 8
  %v0_685b.pre = load i64, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_6857

dec_label_pc_6857:                                ; preds = %dec_label_pc_684c, %dec_label_pc_67b0
  %v0_685b = phi i64 [ %v0_685b.pre, %dec_label_pc_684c ], [ %v3_67b4, %dec_label_pc_67b0 ]
  %v2_6857 = phi i64 [ %v2_6857.pre, %dec_label_pc_684c ], [ %v0_67b3, %dec_label_pc_67b0 ]
  store i64 %v2_6857, i64* @rbx, align 8
  ret i64 %v0_685b

dec_label_pc_685c:                                ; preds = %dec_label_pc_67d8
  %v0_685c = load i64, i64* @rcx, align 8
  %v1_685c = load i64, i64* @rsi, align 8
  %v2_685c = add i64 %v1_685c, 24
  %v3_685c = inttoptr i64 %v2_685c to i64*
  store i64 %v0_685c, i64* %v3_685c, align 8
  br label %dec_label_pc_67ff

dec_label_pc_6862:                                ; preds = %dec_label_pc_67cf
  br label %dec_label_pc_67d8

dec_label_pc_686b:                                ; preds = %dec_label_pc_683b
  %v2_686b = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_686b, i64* @rbx, align 8
  store i64 10, i64* @rsi, align 8
  %v6_6874 = call i32 @__overflow(%_IO_FILE* %v0_683b, i32 10)
  %v8_6874 = sext i32 %v6_6874 to i64
  store i64 %v8_6874, i64* %rax.global-to-local, align 8
  ret i64 %v8_6874
}

define i64 @function_6880(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_6880:
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6880 = load i64, i64* @rbp, align 8
  %v0_6881 = load i64, i64* @rbx, align 8
  store i64 %arg3, i64* @rbx, align 8
  %v1_6888 = icmp eq i64 %arg1, 0
  br i1 %v1_6888, label %dec_label_pc_6920, label %dec_label_pc_6891

dec_label_pc_6891:                                ; preds = %dec_label_pc_6880
  store i64 0, i64* @rsi, align 8
  store i64 %arg1, i64* @rbp, align 8
  %v4_6896 = call i64 @function_10370(i64 %arg1, i32 0)
  %v0_689b = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_689b = ptrtoint %_IO_FILE* %v0_689b to i64
  store i64 %v1_689b, i64* @rsi, align 8
  %v0_68a2 = load i64, i64* @rbx, align 8
  %v1_68a2 = trunc i64 %v0_68a2 to i32
  %v3_68a2 = trunc i64 %v4_6896 to i32
  %v4_68a2 = sub i32 %v1_68a2, %v3_68a2
  %v15_68a2 = icmp slt i32 %v4_68a2, 0
  %v20_68a2 = zext i32 %v4_68a2 to i64
  %v6_68a9 = select i1 %v15_68a2, i64 0, i64 %v20_68a2
  store i64 %v6_68a9, i64* %rbx.global-to-local, align 8
  %v0_68ac = load i64, i64* @rbp, align 8
  store i64 %v0_68ac, i64* @rdi, align 8
  %v1_68af = inttoptr i64 %v0_68ac to i8*
  %v5_68af = call i32 @fputs_unlocked(i8* %v1_68af, %_IO_FILE* %v0_689b)
  %v0_68b4 = load i64, i64* @rbp, align 8
  store i64 %v0_68b4, i64* @rdi, align 8
  %v0_68b7 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_68b7, i64* %rbp.global-to-local, align 8
  %v1_68ba = inttoptr i64 %v0_68b4 to i8*
  %v2_68ba = call i32 @strlen(i8* %v1_68ba)
  %v4_68ba = sext i32 %v2_68ba to i64
  %v2_68bf = add i64 %v0_68b7, %v4_68ba
  store i64 %v2_68bf, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_68c8

dec_label_pc_68c8:                                ; preds = %dec_label_pc_68e4, %dec_label_pc_6891
  %v0_68c8 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_68c8 = ptrtoint %_IO_FILE* %v0_68c8 to i64
  store i64 %v1_68c8, i64* @rdi, align 8
  %v2_68cf = add i64 %v1_68c8, 40
  %v3_68cf = inttoptr i64 %v2_68cf to i64*
  %v4_68cf = load i64, i64* %v3_68cf, align 8
  store i64 %v4_68cf, i64* @rdx, align 8
  %v3_68d3 = add i64 %v1_68c8, 48
  %v4_68d3 = inttoptr i64 %v3_68d3 to i64*
  %v5_68d3 = load i64, i64* %v4_68d3, align 8
  %v11_68d3 = icmp ult i64 %v4_68cf, %v5_68d3
  %v1_68d7 = icmp eq i1 %v11_68d3, false
  br i1 %v1_68d7, label %dec_label_pc_6910, label %dec_label_pc_68d9

dec_label_pc_68d9:                                ; preds = %dec_label_pc_68c8
  %v1_68d9 = add i64 %v4_68cf, 1
  store i64 %v1_68d9, i64* @rcx, align 8
  store i64 %v1_68d9, i64* %v3_68cf, align 8
  %v0_68e1 = load i64, i64* @rdx, align 8
  %v1_68e1 = inttoptr i64 %v0_68e1 to i8*
  store i8 32, i8* %v1_68e1, align 1
  br label %dec_label_pc_68e4

dec_label_pc_68e4:                                ; preds = %dec_label_pc_6910, %dec_label_pc_68d9
  %v0_68e4 = load i64, i64* %rbx.global-to-local, align 8
  %v1_68e4 = trunc i64 %v0_68e4 to i32
  %v2_68e4 = add i64 %v0_68e4, 4294967295
  %v6_68e4 = icmp eq i32 %v1_68e4, 0
  %v17_68e4 = and i64 %v2_68e4, 4294967295
  store i64 %v17_68e4, i64* %rbx.global-to-local, align 8
  %v1_68ea = icmp eq i1 %v6_68e4, false
  br i1 %v1_68ea, label %dec_label_pc_68c8, label %dec_label_pc_68ec

dec_label_pc_68ec:                                ; preds = %dec_label_pc_68e4, %dec_label_pc_6920
  %v0_68ec = load i64, i64* @global_var_2211f8.162, align 8
  %v0_68f3 = load i64, i64* %rbp.global-to-local, align 8
  %v3_68f3 = add i64 %v0_68ec, 1
  %v4_68f3 = add i64 %v3_68f3, %v0_68f3
  store i64 %v4_68f3, i64* @global_var_2211f8.162, align 8
  store i64 %v0_6881, i64* @rbx, align 8
  store i64 %v0_6880, i64* @rbp, align 8
  ret i64 %v4_68f3

dec_label_pc_6910:                                ; preds = %dec_label_pc_68c8
  store i64 32, i64* @rsi, align 8
  %v6_6915 = call i32 @__overflow(%_IO_FILE* %v0_68c8, i32 32)
  br label %dec_label_pc_68e4

dec_label_pc_6920:                                ; preds = %dec_label_pc_6880
  %v0_6920 = load i64, i64* @rsi, align 8
  store i64 %v0_6920, i64* @rcx, align 8
  store i64 ptrtoint ([6 x i8]* @global_var_17c28.270 to i64), i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  store i64 %arg3, i64* %rbp.global-to-local, align 8
  %v8_6934 = trunc i64 %v0_6920 to i32
  %v9_6934 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_17c28.270, i64 0, i64 0), i64 %arg3, i32 %v8_6934)
  br label %dec_label_pc_68ec
}

define i64 @function_6940(i32 %arg1, i32 %arg2, i8 %arg3) local_unnamed_addr {
dec_label_pc_6940:
  %tmp15 = sext i8 %arg3 to i64
  store i64 %tmp15, i64* @rdx, align 8
  %tmp16 = sext i32 %arg2 to i64
  store i64 %tmp16, i64* @rsi, align 8
  %tmp17 = sext i32 %arg1 to i64
  store i64 %tmp17, i64* @rdi, align 8
  %v0_6940 = load i64, i64* @rbx, align 8
  store i64 %tmp17, i64* @rbx, align 8
  %v0_694e = load i64, i64* @rdx, align 8
  %v4_694e = trunc i64 %v0_694e to i8
  %v5_694e = icmp eq i8 %v4_694e, 0
  br i1 %v5_694e, label %dec_label_pc_695d, label %dec_label_pc_6952

dec_label_pc_6952:                                ; preds = %dec_label_pc_6940
  %v0_6954 = load i8, i8* @global_var_22132d.22, align 1
  %v7_6954 = icmp eq i8 %v0_6954, 0
  br i1 %v7_6954, label %dec_label_pc_6970, label %dec_label_pc_695d

dec_label_pc_695d:                                ; preds = %dec_label_pc_6970, %dec_label_pc_6952, %dec_label_pc_6940
  %v0_6967 = phi i64 [ %v2_6974, %dec_label_pc_6970 ], [ 0, %dec_label_pc_6952 ], [ ptrtoint (i8** @global_var_17c2e.271 to i64), %dec_label_pc_6940 ]
  %v0_6963 = phi i64 [ %v0_6963.pre, %dec_label_pc_6970 ], [ %tmp17, %dec_label_pc_6952 ], [ %tmp17, %dec_label_pc_6940 ]
  %v0_6961 = load i64, i64* @rsi, align 8
  store i64 %v0_6961, i64* @rdx, align 8
  store i64 %v0_6963, i64* @rsi, align 8
  store i64 %v0_6940, i64* @rbx, align 8
  store i64 %v0_6967, i64* @rdi, align 8
  %sext = mul i64 %v0_6963, 4294967296
  %v3_696a = sdiv i64 %sext, 4294967296
  %sext3 = mul i64 %v0_6961, 4294967296
  %v5_696a = sdiv i64 %sext3, 4294967296
  %v6_696a = call i64 @function_6880(i64 %v0_6967, i64 %v3_696a, i64 %v5_696a)
  ret i64 %v6_696a

dec_label_pc_6970:                                ; preds = %dec_label_pc_6952
  %v0_6970 = load i64, i64* @rsi, align 8
  %v2_6974 = call i64 @function_f910(i64 %tmp17)
  %v4_6979 = and i64 %v0_6970, 4294967295
  store i64 %v4_6979, i64* @rsi, align 8
  %v0_6963.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_695d
}

define i64 @function_6980() local_unnamed_addr {
dec_label_pc_6980:
  %v0_6980 = load i32, i32* @global_var_221218.155, align 4
  %v1_6980 = zext i32 %v0_6980 to i64
  %v5_6986 = icmp eq i32 %v0_6980, 0
  %v1_6988 = icmp eq i1 %v5_6986, false
  br i1 %v1_6988, label %dec_label_pc_6999, label %dec_label_pc_698a

dec_label_pc_698a:                                ; preds = %dec_label_pc_6980
  store i32 ptrtoint (i32* @global_var_221215.272 to i32), i32* @global_var_221214.154, align 4
  br label %dec_label_pc_6999

dec_label_pc_6999:                                ; preds = %dec_label_pc_698a, %dec_label_pc_6980
  %v0_6999 = phi i64 [ ptrtoint (i32* @global_var_221215.272 to i64), %dec_label_pc_698a ], [ %v1_6980, %dec_label_pc_6980 ]
  ret i64 %v0_6999
}

define i64 @function_69a0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_69a0:
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_69a3 = load i64, i64* @rsi, align 8
  store i64 %v0_69a3, i64* %rbp.global-to-local, align 8
  %v0_69a6 = load i64, i64* @rbx, align 8
  store i64 %v0_69a6, i64* %stack_var_-24, align 8
  %v0_69a7 = load i64, i64* @rdx, align 8
  store i64 %v0_69a7, i64* @rsi, align 8
  %v0_69aa = load i64, i64* @rdi, align 8
  store i64 %v0_69aa, i64* %rbx.global-to-local, align 8
  store i64 4, i64* @rdi, align 8
  %v3_69b1 = call i64 @function_13a10(i64 4, i64 %v0_69a7)
  %v0_69b9 = call i32* @__errno_location()
  %v2_69be = load i32, i32* %v0_69b9, align 4
  %v3_69be = zext i32 %v2_69be to i64
  store i64 %v3_69be, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 %v3_69b1, i64* @rcx, align 8
  %v0_69c7 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_69c7, i64* @rdx, align 8
  %v7_69ca = inttoptr i64 %v0_69c7 to i8*
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %v2_69be, i8* %v7_69ca)
  %v0_69cf = load i64, i64* %rbx.global-to-local, align 8
  %v4_69cf = trunc i64 %v0_69cf to i8
  %v5_69cf = icmp eq i8 %v4_69cf, 0
  br i1 %v5_69cf, label %dec_label_pc_69e8, label %dec_label_pc_69d3

dec_label_pc_69d3:                                ; preds = %dec_label_pc_69a0
  store i32 2, i32* @global_var_221210.10, align 4
  br label %dec_label_pc_69dd

dec_label_pc_69dd:                                ; preds = %dec_label_pc_69e8, %dec_label_pc_69d3
  %v0_69e1 = phi i64 [ %v1_69e8, %dec_label_pc_69e8 ], [ ptrtoint (i32* @0 to i64), %dec_label_pc_69d3 ]
  %v2_69dd = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_69dd, i64* @rbx, align 8
  ret i64 %v0_69e1

dec_label_pc_69e8:                                ; preds = %dec_label_pc_69a0
  %v0_69e8 = load i32, i32* @global_var_221210.10, align 4
  %v1_69e8 = zext i32 %v0_69e8 to i64
  %v5_69ee = icmp eq i32 %v0_69e8, 0
  %v1_69f0 = icmp eq i1 %v5_69ee, false
  br i1 %v1_69f0, label %dec_label_pc_69dd, label %dec_label_pc_69f2

dec_label_pc_69f2:                                ; preds = %dec_label_pc_69e8
  %v2_69f2 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_69f2, i64* @rbx, align 8
  store i32 1, i32* @global_var_221210.10, align 4
  ret i64 %v1_69e8
}

define i64 @function_6a10(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6a10:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6a10 = load i64, i64* @rdi, align 8
  %v1_6a10 = add i64 %v0_6a10, 168
  %v2_6a10 = inttoptr i64 %v1_6a10 to i32*
  %v3_6a10 = load i32, i32* %v2_6a10, align 4
  %v4_6a10 = zext i32 %v3_6a10 to i64
  %v0_6a16 = load i64, i64* @rsi, align 8
  %v1_6a16 = add i64 %v0_6a16, 168
  %v2_6a16 = inttoptr i64 %v1_6a16 to i32*
  %v3_6a16 = load i32, i32* %v2_6a16, align 4
  %v4_6a16 = zext i32 %v3_6a16 to i64
  %v11_6a1c = icmp eq i32 %v3_6a10, 3
  %v1_6a1f = zext i1 %v11_6a1c to i64
  %v2_6a1f = load i64, i64* @rcx, align 8
  %v11_6a22 = icmp eq i32 %v3_6a10, 9
  %v1_6a25 = zext i1 %v11_6a22 to i64
  %v3_6a25 = and i64 %v4_6a10, 4294967040
  %v4_6a1f = or i64 %v3_6a25, %v1_6a25
  %v4_6a25 = or i64 %v4_6a1f, %v1_6a1f
  %v3_6a1f.masked = and i64 %v2_6a1f, 4294967040
  %v11_6a28 = or i64 %v4_6a25, %v3_6a1f.masked
  store i64 %v11_6a28, i64* @rcx, align 8
  %v11_6a2a = icmp eq i32 %v3_6a16, 3
  %v11_6a30 = icmp eq i32 %v3_6a16, 9
  %v1_6a36 = zext i1 %v11_6a30 to i8
  %v3_6a36 = zext i1 %v11_6a2a to i8
  %v4_6a36 = or i8 %v3_6a36, %v1_6a36
  %v5_6a36 = icmp eq i8 %v4_6a36, 0
  %v10_6a36 = zext i8 %v4_6a36 to i64
  %v12_6a36 = and i64 %v4_6a16, 4294967040
  %v13_6a36 = or i64 %v10_6a36, %v12_6a36
  store i64 %v13_6a36, i64* @rdx, align 8
  %v1_6a38 = icmp eq i1 %v5_6a36, false
  %.pre = trunc i64 %v4_6a25 to i8
  br i1 %v1_6a38, label %dec_label_pc_6a3e, label %dec_label_pc_6a3a

dec_label_pc_6a3a:                                ; preds = %dec_label_pc_6a10
  %v5_6a3a = icmp eq i8 %.pre, 0
  %v1_6a3c = icmp eq i1 %v5_6a3a, false
  br i1 %v1_6a3c, label %dec_label_pc_6a80, label %dec_label_pc_6a3e

dec_label_pc_6a3e:                                ; preds = %dec_label_pc_6a10, %dec_label_pc_6a3a
  %v5_6a3e = icmp eq i8 %.pre, 0
  %v1_6a40 = icmp eq i1 %v5_6a3e, false
  br i1 %v1_6a40, label %dec_label_pc_6a50, label %dec_label_pc_6a42

dec_label_pc_6a42:                                ; preds = %dec_label_pc_6a3e
  br i1 %v5_6a36, label %dec_label_pc_6a50, label %dec_label_pc_6a4b

dec_label_pc_6a4b:                                ; preds = %dec_label_pc_6a5c, %dec_label_pc_6a42
  %v0_6a4b = phi i64 [ %v22_6a60, %dec_label_pc_6a5c ], [ 1, %dec_label_pc_6a42 ]
  ret i64 %v0_6a4b

dec_label_pc_6a50:                                ; preds = %dec_label_pc_6a42, %dec_label_pc_6a3e
  %v1_6a50 = add i64 %v0_6a16, 112
  %v2_6a50 = inttoptr i64 %v1_6a50 to i64*
  %v3_6a50 = load i64, i64* %v2_6a50, align 8
  %v1_6a54 = add i64 %v0_6a10, 112
  %v2_6a54 = inttoptr i64 %v1_6a54 to i64*
  %v3_6a54 = load i64, i64* %v2_6a54, align 8
  %v8_6a58 = icmp sgt i64 %v3_6a54, %v3_6a50
  br i1 %v8_6a58, label %dec_label_pc_6a80, label %dec_label_pc_6a5a

dec_label_pc_6a5a:                                ; preds = %dec_label_pc_6a50
  %v5_6a5a = icmp slt i64 %v3_6a54, %v3_6a50
  br i1 %v5_6a5a, label %dec_label_pc_6a70, label %dec_label_pc_6a5c

dec_label_pc_6a5c:                                ; preds = %dec_label_pc_6a5a
  %v1_6a5c = add i64 %v0_6a16, 120
  %v2_6a5c = inttoptr i64 %v1_6a5c to i64*
  %v3_6a5c = load i64, i64* %v2_6a5c, align 8
  %v1_6a60 = trunc i64 %v3_6a5c to i32
  %v3_6a60 = add i64 %v0_6a10, 120
  %v4_6a60 = inttoptr i64 %v3_6a60 to i32*
  %v5_6a60 = load i32, i32* %v4_6a60, align 4
  %v6_6a60 = sub i32 %v1_6a60, %v5_6a60
  %v16_6a60 = icmp eq i32 %v6_6a60, 0
  %v22_6a60 = zext i32 %v6_6a60 to i64
  %v1_6a63 = icmp eq i1 %v16_6a60, false
  br i1 %v1_6a63, label %dec_label_pc_6a4b, label %dec_label_pc_6a65

dec_label_pc_6a65:                                ; preds = %dec_label_pc_6a5c
  %v1_6a6b = inttoptr i64 %v0_6a10 to i8*
  %v3_6a6b = inttoptr i64 %v0_6a16 to i8*
  %v4_6a6b = call i32 @strcmp(i8* %v1_6a6b, i8* %v3_6a6b)
  %v6_6a6b = sext i32 %v4_6a6b to i64
  ret i64 %v6_6a6b

dec_label_pc_6a70:                                ; preds = %dec_label_pc_6a5a
  ret i64 1

dec_label_pc_6a80:                                ; preds = %dec_label_pc_6a50, %dec_label_pc_6a3a
  ret i64 4294967295
}

define i64 @function_6a90(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6a90:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6a90 = load i64, i64* @rdi, align 8
  %v1_6a90 = add i64 %v0_6a90, 168
  %v2_6a90 = inttoptr i64 %v1_6a90 to i32*
  %v3_6a90 = load i32, i32* %v2_6a90, align 4
  %v4_6a90 = zext i32 %v3_6a90 to i64
  %v0_6a96 = load i64, i64* @rsi, align 8
  %v1_6a96 = add i64 %v0_6a96, 168
  %v2_6a96 = inttoptr i64 %v1_6a96 to i32*
  %v3_6a96 = load i32, i32* %v2_6a96, align 4
  %v4_6a96 = zext i32 %v3_6a96 to i64
  %v11_6a9c = icmp eq i32 %v3_6a90, 3
  %v1_6a9f = zext i1 %v11_6a9c to i64
  %v2_6a9f = load i64, i64* @rcx, align 8
  %v11_6aa2 = icmp eq i32 %v3_6a90, 9
  %v1_6aa5 = zext i1 %v11_6aa2 to i64
  %v3_6aa5 = and i64 %v4_6a90, 4294967040
  %v4_6a9f = or i64 %v3_6aa5, %v1_6aa5
  %v4_6aa5 = or i64 %v4_6a9f, %v1_6a9f
  %v3_6a9f.masked = and i64 %v2_6a9f, 4294967040
  %v11_6aa8 = or i64 %v4_6aa5, %v3_6a9f.masked
  store i64 %v11_6aa8, i64* @rcx, align 8
  %v11_6aaa = icmp eq i32 %v3_6a96, 3
  %v11_6ab0 = icmp eq i32 %v3_6a96, 9
  %v1_6ab6 = zext i1 %v11_6ab0 to i8
  %v3_6ab6 = zext i1 %v11_6aaa to i8
  %v4_6ab6 = or i8 %v3_6ab6, %v1_6ab6
  %v5_6ab6 = icmp eq i8 %v4_6ab6, 0
  %v10_6ab6 = zext i8 %v4_6ab6 to i64
  %v12_6ab6 = and i64 %v4_6a96, 4294967040
  %v13_6ab6 = or i64 %v10_6ab6, %v12_6ab6
  store i64 %v13_6ab6, i64* @rdx, align 8
  %v1_6ab8 = icmp eq i1 %v5_6ab6, false
  %.pre = trunc i64 %v4_6aa5 to i8
  br i1 %v1_6ab8, label %dec_label_pc_6abe, label %dec_label_pc_6aba

dec_label_pc_6aba:                                ; preds = %dec_label_pc_6a90
  %v5_6aba = icmp eq i8 %.pre, 0
  %v1_6abc = icmp eq i1 %v5_6aba, false
  br i1 %v1_6abc, label %dec_label_pc_6af0, label %dec_label_pc_6abe

dec_label_pc_6abe:                                ; preds = %dec_label_pc_6a90, %dec_label_pc_6aba
  %v5_6abe = icmp eq i8 %.pre, 0
  %v1_6ac0 = icmp eq i1 %v5_6abe, false
  br i1 %v1_6ac0, label %dec_label_pc_6ad0, label %dec_label_pc_6ac2

dec_label_pc_6ac2:                                ; preds = %dec_label_pc_6abe
  br i1 %v5_6ab6, label %dec_label_pc_6ad0, label %dec_label_pc_6acb

dec_label_pc_6acb:                                ; preds = %dec_label_pc_6ac2
  ret i64 1

dec_label_pc_6ad0:                                ; preds = %dec_label_pc_6ac2, %dec_label_pc_6abe
  %v1_6ad0 = add i64 %v0_6a96, 72
  %v2_6ad0 = inttoptr i64 %v1_6ad0 to i64*
  %v3_6ad0 = load i64, i64* %v2_6ad0, align 8
  %v1_6ad4 = add i64 %v0_6a90, 72
  %v2_6ad4 = inttoptr i64 %v1_6ad4 to i64*
  %v3_6ad4 = load i64, i64* %v2_6ad4, align 8
  %v8_6ad8 = icmp sgt i64 %v3_6ad4, %v3_6ad0
  br i1 %v8_6ad8, label %dec_label_pc_6af0, label %dec_label_pc_6ada

dec_label_pc_6ada:                                ; preds = %dec_label_pc_6ad0
  ret i64 1

dec_label_pc_6af0:                                ; preds = %dec_label_pc_6ad0, %dec_label_pc_6aba
  ret i64 4294967295
}

define i64 @function_6b00(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6b00:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6b00 = load i64, i64* @rdi, align 8
  %v1_6b00 = add i64 %v0_6b00, 168
  %v2_6b00 = inttoptr i64 %v1_6b00 to i32*
  %v3_6b00 = load i32, i32* %v2_6b00, align 4
  %v4_6b00 = zext i32 %v3_6b00 to i64
  %v0_6b06 = load i64, i64* @rsi, align 8
  %v1_6b06 = add i64 %v0_6b06, 168
  %v2_6b06 = inttoptr i64 %v1_6b06 to i32*
  %v3_6b06 = load i32, i32* %v2_6b06, align 4
  %v4_6b06 = zext i32 %v3_6b06 to i64
  %v11_6b0c = icmp eq i32 %v3_6b00, 3
  %v1_6b0f = zext i1 %v11_6b0c to i64
  %v2_6b0f = load i64, i64* @rcx, align 8
  %v11_6b12 = icmp eq i32 %v3_6b00, 9
  %v1_6b15 = zext i1 %v11_6b12 to i64
  %v3_6b15 = and i64 %v4_6b00, 4294967040
  %v4_6b0f = or i64 %v3_6b15, %v1_6b15
  %v4_6b15 = or i64 %v4_6b0f, %v1_6b0f
  %v3_6b0f.masked = and i64 %v2_6b0f, 4294967040
  %v11_6b18 = or i64 %v4_6b15, %v3_6b0f.masked
  store i64 %v11_6b18, i64* @rcx, align 8
  %v11_6b1a = icmp eq i32 %v3_6b06, 3
  %v11_6b20 = icmp eq i32 %v3_6b06, 9
  %v1_6b26 = zext i1 %v11_6b20 to i8
  %v3_6b26 = zext i1 %v11_6b1a to i8
  %v4_6b26 = or i8 %v3_6b26, %v1_6b26
  %v5_6b26 = icmp eq i8 %v4_6b26, 0
  %v10_6b26 = zext i8 %v4_6b26 to i64
  %v12_6b26 = and i64 %v4_6b06, 4294967040
  %v13_6b26 = or i64 %v10_6b26, %v12_6b26
  store i64 %v13_6b26, i64* @rdx, align 8
  %v1_6b28 = icmp eq i1 %v5_6b26, false
  %.pre = trunc i64 %v4_6b15 to i8
  br i1 %v1_6b28, label %dec_label_pc_6b2e, label %dec_label_pc_6b2a

dec_label_pc_6b2a:                                ; preds = %dec_label_pc_6b00
  %v5_6b2a = icmp eq i8 %.pre, 0
  %v1_6b2c = icmp eq i1 %v5_6b2a, false
  br i1 %v1_6b2c, label %dec_label_pc_6b70, label %dec_label_pc_6b2e

dec_label_pc_6b2e:                                ; preds = %dec_label_pc_6b00, %dec_label_pc_6b2a
  %v5_6b2e = icmp eq i8 %.pre, 0
  %v1_6b30 = icmp eq i1 %v5_6b2e, false
  br i1 %v1_6b30, label %dec_label_pc_6b40, label %dec_label_pc_6b32

dec_label_pc_6b32:                                ; preds = %dec_label_pc_6b2e
  br i1 %v5_6b26, label %dec_label_pc_6b40, label %dec_label_pc_6b3b

dec_label_pc_6b3b:                                ; preds = %dec_label_pc_6b32
  ret i64 1

dec_label_pc_6b40:                                ; preds = %dec_label_pc_6b32, %dec_label_pc_6b2e
  %v1_6b40 = add i64 %v0_6b06, 72
  %v2_6b40 = inttoptr i64 %v1_6b40 to i64*
  %v3_6b40 = load i64, i64* %v2_6b40, align 8
  %v1_6b44 = add i64 %v0_6b00, 72
  %v2_6b44 = inttoptr i64 %v1_6b44 to i64*
  %v3_6b44 = load i64, i64* %v2_6b44, align 8
  %v8_6b48 = icmp sgt i64 %v3_6b44, %v3_6b40
  br i1 %v8_6b48, label %dec_label_pc_6b70, label %dec_label_pc_6b4a

dec_label_pc_6b4a:                                ; preds = %dec_label_pc_6b40
  %v5_6b4a = icmp slt i64 %v3_6b44, %v3_6b40
  br i1 %v5_6b4a, label %dec_label_pc_6b60, label %dec_label_pc_6b4c

dec_label_pc_6b4c:                                ; preds = %dec_label_pc_6b4a
  %v1_6b52 = inttoptr i64 %v0_6b00 to i8*
  %v3_6b52 = inttoptr i64 %v0_6b06 to i8*
  %v4_6b52 = call i32 @strcmp(i8* %v1_6b52, i8* %v3_6b52)
  %v6_6b52 = sext i32 %v4_6b52 to i64
  ret i64 %v6_6b52

dec_label_pc_6b60:                                ; preds = %dec_label_pc_6b4a
  ret i64 1

dec_label_pc_6b70:                                ; preds = %dec_label_pc_6b40, %dec_label_pc_6b2a
  ret i64 4294967295
}

define i64 @function_6b80(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6b80:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6b80 = load i64, i64* @rdi, align 8
  %v1_6b80 = add i64 %v0_6b80, 168
  %v2_6b80 = inttoptr i64 %v1_6b80 to i32*
  %v3_6b80 = load i32, i32* %v2_6b80, align 4
  %v4_6b80 = zext i32 %v3_6b80 to i64
  %v0_6b86 = load i64, i64* @rsi, align 8
  %v1_6b86 = add i64 %v0_6b86, 168
  %v2_6b86 = inttoptr i64 %v1_6b86 to i32*
  %v3_6b86 = load i32, i32* %v2_6b86, align 4
  %v4_6b86 = zext i32 %v3_6b86 to i64
  store i64 %v0_6b86, i64* @r8, align 8
  %v11_6b8f = icmp eq i32 %v3_6b80, 3
  %v1_6b92 = zext i1 %v11_6b8f to i64
  %v2_6b92 = load i64, i64* @rcx, align 8
  %v11_6b95 = icmp eq i32 %v3_6b80, 9
  %v1_6b98 = zext i1 %v11_6b95 to i64
  %v3_6b98 = and i64 %v4_6b80, 4294967040
  %v4_6b92 = or i64 %v3_6b98, %v1_6b98
  %v4_6b98 = or i64 %v4_6b92, %v1_6b92
  %v3_6b92.masked = and i64 %v2_6b92, 4294967040
  %v11_6b9b = or i64 %v4_6b98, %v3_6b92.masked
  store i64 %v11_6b9b, i64* @rcx, align 8
  %v11_6b9d = icmp eq i32 %v3_6b86, 3
  %v11_6ba3 = icmp eq i32 %v3_6b86, 9
  %v1_6ba9 = zext i1 %v11_6ba3 to i8
  %v3_6ba9 = zext i1 %v11_6b9d to i8
  %v4_6ba9 = or i8 %v3_6ba9, %v1_6ba9
  %v5_6ba9 = icmp eq i8 %v4_6ba9, 0
  %v10_6ba9 = zext i8 %v4_6ba9 to i64
  %v12_6ba9 = and i64 %v4_6b86, 4294967040
  %v13_6ba9 = or i64 %v10_6ba9, %v12_6ba9
  store i64 %v13_6ba9, i64* @rdx, align 8
  %v1_6bab = icmp eq i1 %v5_6ba9, false
  %.pre = trunc i64 %v4_6b98 to i8
  br i1 %v1_6bab, label %dec_label_pc_6bb1, label %dec_label_pc_6bad

dec_label_pc_6bad:                                ; preds = %dec_label_pc_6b80
  %v5_6bad = icmp eq i8 %.pre, 0
  %v1_6baf = icmp eq i1 %v5_6bad, false
  br i1 %v1_6baf, label %dec_label_pc_6be0, label %dec_label_pc_6bb1

dec_label_pc_6bb1:                                ; preds = %dec_label_pc_6b80, %dec_label_pc_6bad
  %v5_6bb1 = icmp eq i8 %.pre, 0
  %v1_6bb3 = icmp eq i1 %v5_6bb1, false
  br i1 %v1_6bb3, label %dec_label_pc_6bc0, label %dec_label_pc_6bb5

dec_label_pc_6bb5:                                ; preds = %dec_label_pc_6bb1
  br i1 %v5_6ba9, label %dec_label_pc_6bc0, label %dec_label_pc_6bbe

dec_label_pc_6bbe:                                ; preds = %dec_label_pc_6bca, %dec_label_pc_6bb5
  ret i64 1

dec_label_pc_6bc0:                                ; preds = %dec_label_pc_6bb5, %dec_label_pc_6bb1
  %v1_6bc0 = add i64 %v0_6b80, 72
  %v2_6bc0 = inttoptr i64 %v1_6bc0 to i64*
  %v3_6bc0 = load i64, i64* %v2_6bc0, align 8
  %v1_6bc4 = add i64 %v0_6b86, 72
  %v2_6bc4 = inttoptr i64 %v1_6bc4 to i64*
  %v3_6bc4 = load i64, i64* %v2_6bc4, align 8
  %v8_6bc8 = icmp sgt i64 %v3_6bc4, %v3_6bc0
  br i1 %v8_6bc8, label %dec_label_pc_6be0, label %dec_label_pc_6bca

dec_label_pc_6bca:                                ; preds = %dec_label_pc_6bc0
  %v5_6bcf = icmp slt i64 %v3_6bc4, %v3_6bc0
  br i1 %v5_6bcf, label %dec_label_pc_6bbe, label %dec_label_pc_6bd1

dec_label_pc_6bd1:                                ; preds = %dec_label_pc_6bca
  store i64 %v0_6b80, i64* @rsi, align 8
  ret i64 1

dec_label_pc_6be0:                                ; preds = %dec_label_pc_6bc0, %dec_label_pc_6bad
  ret i64 4294967295
}

define i64 @function_6bf0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6bf0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_6bf0 = load i64, i64* @rdi, align 8
  %v1_6bf0 = add i64 %v0_6bf0, 168
  %v2_6bf0 = inttoptr i64 %v1_6bf0 to i32*
  %v3_6bf0 = load i32, i32* %v2_6bf0, align 4
  %v4_6bf0 = zext i32 %v3_6bf0 to i64
  %v0_6bf6 = load i64, i64* @rsi, align 8
  %v1_6bf6 = add i64 %v0_6bf6, 168
  %v2_6bf6 = inttoptr i64 %v1_6bf6 to i32*
  %v3_6bf6 = load i32, i32* %v2_6bf6, align 4
  %v4_6bf6 = zext i32 %v3_6bf6 to i64
  store i64 %v0_6bf6, i64* @r8, align 8
  %v11_6bff = icmp eq i32 %v3_6bf0, 3
  %v1_6c02 = zext i1 %v11_6bff to i64
  %v2_6c02 = load i64, i64* @rcx, align 8
  %v11_6c05 = icmp eq i32 %v3_6bf0, 9
  %v1_6c08 = zext i1 %v11_6c05 to i64
  %v3_6c08 = and i64 %v4_6bf0, 4294967040
  %v4_6c02 = or i64 %v3_6c08, %v1_6c08
  %v4_6c08 = or i64 %v4_6c02, %v1_6c02
  %v3_6c02.masked = and i64 %v2_6c02, 4294967040
  %v11_6c0b = or i64 %v4_6c08, %v3_6c02.masked
  store i64 %v11_6c0b, i64* @rcx, align 8
  %v11_6c0d = icmp eq i32 %v3_6bf6, 3
  %v11_6c13 = icmp eq i32 %v3_6bf6, 9
  %v1_6c19 = zext i1 %v11_6c13 to i8
  %v3_6c19 = zext i1 %v11_6c0d to i8
  %v4_6c19 = or i8 %v3_6c19, %v1_6c19
  %v5_6c19 = icmp eq i8 %v4_6c19, 0
  %v10_6c19 = zext i8 %v4_6c19 to i64
  %v12_6c19 = and i64 %v4_6bf6, 4294967040
  %v13_6c19 = or i64 %v10_6c19, %v12_6c19
  store i64 %v13_6c19, i64* @rdx, align 8
  %v1_6c1b = icmp eq i1 %v5_6c19, false
  %.pre = trunc i64 %v4_6c08 to i8
  br i1 %v1_6c1b, label %dec_label_pc_6c21, label %dec_label_pc_6c1d

dec_label_pc_6c1d:                                ; preds = %dec_label_pc_6bf0
  %v5_6c1d = icmp eq i8 %.pre, 0
  %v1_6c1f = icmp eq i1 %v5_6c1d, false
  br i1 %v1_6c1f, label %dec_label_pc_6c60, label %dec_label_pc_6c21

dec_label_pc_6c21:                                ; preds = %dec_label_pc_6bf0, %dec_label_pc_6c1d
  %v5_6c21 = icmp eq i8 %.pre, 0
  %v1_6c23 = icmp eq i1 %v5_6c21, false
  br i1 %v1_6c23, label %dec_label_pc_6c30, label %dec_label_pc_6c25

dec_label_pc_6c25:                                ; preds = %dec_label_pc_6c21
  br i1 %v5_6c19, label %dec_label_pc_6c30, label %dec_label_pc_6c2e

dec_label_pc_6c2e:                                ; preds = %dec_label_pc_6c25
  ret i64 1

dec_label_pc_6c30:                                ; preds = %dec_label_pc_6c25, %dec_label_pc_6c21
  %v1_6c30 = add i64 %v0_6bf0, 72
  %v2_6c30 = inttoptr i64 %v1_6c30 to i64*
  %v3_6c30 = load i64, i64* %v2_6c30, align 8
  %v1_6c34 = add i64 %v0_6bf6, 72
  %v2_6c34 = inttoptr i64 %v1_6c34 to i64*
  %v3_6c34 = load i64, i64* %v2_6c34, align 8
  %v8_6c38 = icmp sgt i64 %v3_6c34, %v3_6c30
  br i1 %v8_6c38, label %dec_label_pc_6c60, label %dec_label_pc_6c3a

dec_label_pc_6c3a:                                ; preds = %dec_label_pc_6c30
  %v5_6c3a = icmp slt i64 %v3_6c34, %v3_6c30
  br i1 %v5_6c3a, label %dec_label_pc_6c50, label %dec_label_pc_6c3c

dec_label_pc_6c3c:                                ; preds = %dec_label_pc_6c3a
  store i64 %v0_6bf0, i64* @rsi, align 8
  %v1_6c42 = inttoptr i64 %v0_6bf0 to i8*
  %v4_6c42 = call i32 @strcmp(i8* %v1_6c42, i8* %v1_6c42)
  %v6_6c42 = sext i32 %v4_6c42 to i64
  ret i64 %v6_6c42

dec_label_pc_6c50:                                ; preds = %dec_label_pc_6c3a
  ret i64 1

dec_label_pc_6c60:                                ; preds = %dec_label_pc_6c30, %dec_label_pc_6c1d
  ret i64 4294967295
}

define i64 @function_6c70(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6c70:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_6c70 = add i64 %arg1, 168
  %v2_6c70 = inttoptr i64 %v1_6c70 to i32*
  %v3_6c70 = load i32, i32* %v2_6c70, align 4
  %v4_6c70 = zext i32 %v3_6c70 to i64
  %v1_6c76 = add i64 %arg2, 168
  %v2_6c76 = inttoptr i64 %v1_6c76 to i32*
  %v3_6c76 = load i32, i32* %v2_6c76, align 4
  %v4_6c76 = zext i32 %v3_6c76 to i64
  %v11_6c7c = icmp eq i32 %v3_6c70, 3
  %v1_6c7f = zext i1 %v11_6c7c to i64
  %v3_6c7f = and i64 %arg4, -256
  %v11_6c82 = icmp eq i32 %v3_6c70, 9
  %v1_6c85 = zext i1 %v11_6c82 to i64
  %v3_6c85 = and i64 %v4_6c70, 4294967040
  %v4_6c85 = or i64 %v1_6c7f, %v3_6c7f
  %v4_6c7f = or i64 %v4_6c85, %v1_6c85
  %v4_6c7f.masked = and i64 %v4_6c7f, 4294967041
  %v11_6c88 = or i64 %v4_6c7f.masked, %v3_6c85
  store i64 %v11_6c88, i64* @rcx, align 8
  %v11_6c8a = icmp eq i32 %v3_6c76, 3
  %v1_6c8d = zext i1 %v11_6c8a to i64
  %v4_6c8d = or i64 %v1_6c8d, %v3_6c85
  %v11_6c90 = icmp eq i32 %v3_6c76, 9
  %v1_6c96 = zext i1 %v11_6c90 to i8
  %v3_6c96 = zext i1 %v11_6c8a to i8
  %v4_6c96 = or i8 %v3_6c96, %v1_6c96
  %v5_6c96 = icmp eq i8 %v4_6c96, 0
  %v10_6c96 = zext i8 %v4_6c96 to i64
  %v12_6c96 = and i64 %v4_6c76, 4294967040
  %v13_6c96 = or i64 %v10_6c96, %v12_6c96
  store i64 %v13_6c96, i64* @rdx, align 8
  %v1_6c98 = icmp eq i1 %v5_6c96, false
  %.pre = trunc i64 %v4_6c7f to i8
  br i1 %v1_6c98, label %dec_label_pc_6c9e, label %dec_label_pc_6c9a

dec_label_pc_6c9a:                                ; preds = %dec_label_pc_6c70
  %v5_6c9a = icmp eq i8 %.pre, 0
  %v1_6c9c = icmp eq i1 %v5_6c9a, false
  br i1 %v1_6c9c, label %dec_label_pc_6cc0, label %dec_label_pc_6c9e

dec_label_pc_6c9e:                                ; preds = %dec_label_pc_6c70, %dec_label_pc_6c9a
  %v5_6c9e = icmp eq i8 %.pre, 0
  %v1_6ca0 = icmp eq i1 %v5_6c9e, false
  br i1 %v1_6ca0, label %dec_label_pc_6cab, label %dec_label_pc_6ca2

dec_label_pc_6ca2:                                ; preds = %dec_label_pc_6c9e
  br label %dec_label_pc_6cab

dec_label_pc_6cab:                                ; preds = %dec_label_pc_6ca2, %dec_label_pc_6c9e
  %merge = phi i64 [ 1, %dec_label_pc_6ca2 ], [ %v4_6c8d, %dec_label_pc_6c9e ]
  ret i64 %merge

dec_label_pc_6cc0:                                ; preds = %dec_label_pc_6c9a
  ret i64 4294967295
}

define i64 @function_6cd0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6cd0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_6cd0 = add i64 %arg1, 168
  %v2_6cd0 = inttoptr i64 %v1_6cd0 to i32*
  %v3_6cd0 = load i32, i32* %v2_6cd0, align 4
  %v4_6cd0 = zext i32 %v3_6cd0 to i64
  %v1_6cd6 = add i64 %arg2, 168
  %v2_6cd6 = inttoptr i64 %v1_6cd6 to i32*
  %v3_6cd6 = load i32, i32* %v2_6cd6, align 4
  %v4_6cd6 = zext i32 %v3_6cd6 to i64
  %v11_6cdc = icmp eq i32 %v3_6cd0, 3
  %v1_6cdf = zext i1 %v11_6cdc to i64
  %v3_6cdf = and i64 %arg4, -256
  %v11_6ce2 = icmp eq i32 %v3_6cd0, 9
  %v1_6ce5 = zext i1 %v11_6ce2 to i64
  %v3_6ce5 = and i64 %v4_6cd0, 4294967040
  %v4_6ce5 = or i64 %v1_6cdf, %v3_6cdf
  %v4_6cdf = or i64 %v4_6ce5, %v1_6ce5
  %v4_6cdf.masked = and i64 %v4_6cdf, 4294967041
  %v11_6ce8 = or i64 %v4_6cdf.masked, %v3_6ce5
  store i64 %v11_6ce8, i64* @rcx, align 8
  %v11_6cea = icmp eq i32 %v3_6cd6, 3
  %v11_6cf0 = icmp eq i32 %v3_6cd6, 9
  %v1_6cf6 = zext i1 %v11_6cf0 to i8
  %v3_6cf6 = zext i1 %v11_6cea to i8
  %v4_6cf6 = or i8 %v3_6cf6, %v1_6cf6
  %v5_6cf6 = icmp eq i8 %v4_6cf6, 0
  %v10_6cf6 = zext i8 %v4_6cf6 to i64
  %v12_6cf6 = and i64 %v4_6cd6, 4294967040
  %v13_6cf6 = or i64 %v10_6cf6, %v12_6cf6
  store i64 %v13_6cf6, i64* @rdx, align 8
  %v1_6cf8 = icmp eq i1 %v5_6cf6, false
  %.pre = trunc i64 %v4_6cdf to i8
  br i1 %v1_6cf8, label %dec_label_pc_6cfe, label %dec_label_pc_6cfa

dec_label_pc_6cfa:                                ; preds = %dec_label_pc_6cd0
  %v5_6cfa = icmp eq i8 %.pre, 0
  %v1_6cfc = icmp eq i1 %v5_6cfa, false
  br i1 %v1_6cfc, label %dec_label_pc_6d20, label %dec_label_pc_6cfe

dec_label_pc_6cfe:                                ; preds = %dec_label_pc_6cd0, %dec_label_pc_6cfa
  %v5_6cfe = icmp eq i8 %.pre, 0
  %v1_6d00 = icmp eq i1 %v5_6cfe, false
  br i1 %v1_6d00, label %dec_label_pc_6d10, label %dec_label_pc_6d02

dec_label_pc_6d02:                                ; preds = %dec_label_pc_6cfe
  br i1 %v5_6cf6, label %dec_label_pc_6d10, label %dec_label_pc_6d0b

dec_label_pc_6d0b:                                ; preds = %dec_label_pc_6d02
  ret i64 1

dec_label_pc_6d10:                                ; preds = %dec_label_pc_6d02, %dec_label_pc_6cfe
  %v1_6d16 = inttoptr i64 %arg1 to i8*
  %v3_6d16 = inttoptr i64 %arg2 to i8*
  %v4_6d16 = call i32 @strcmp(i8* %v1_6d16, i8* %v3_6d16)
  %v6_6d16 = sext i32 %v4_6d16 to i64
  ret i64 %v6_6d16

dec_label_pc_6d20:                                ; preds = %dec_label_pc_6cfa
  ret i64 4294967295
}

define i64 @function_6d30(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6d30:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_6d30 = add i64 %arg1, 168
  %v2_6d30 = inttoptr i64 %v1_6d30 to i32*
  %v3_6d30 = load i32, i32* %v2_6d30, align 4
  %v4_6d30 = zext i32 %v3_6d30 to i64
  %v1_6d36 = add i64 %arg2, 168
  %v2_6d36 = inttoptr i64 %v1_6d36 to i32*
  %v3_6d36 = load i32, i32* %v2_6d36, align 4
  %v4_6d36 = zext i32 %v3_6d36 to i64
  store i64 %arg2, i64* @r8, align 8
  %v11_6d3f = icmp eq i32 %v3_6d30, 3
  %v1_6d42 = zext i1 %v11_6d3f to i64
  %v3_6d42 = and i64 %arg4, -256
  %v11_6d45 = icmp eq i32 %v3_6d30, 9
  %v1_6d48 = zext i1 %v11_6d45 to i64
  %v3_6d48 = and i64 %v4_6d30, 4294967040
  %v4_6d48 = or i64 %v1_6d42, %v3_6d42
  %v4_6d42 = or i64 %v4_6d48, %v1_6d48
  %v4_6d42.masked = and i64 %v4_6d42, 4294967041
  %v11_6d4b = or i64 %v4_6d42.masked, %v3_6d48
  store i64 %v11_6d4b, i64* @rcx, align 8
  %v11_6d4d = icmp eq i32 %v3_6d36, 3
  %v1_6d50 = zext i1 %v11_6d4d to i64
  %v4_6d50 = or i64 %v1_6d50, %v3_6d48
  %v11_6d53 = icmp eq i32 %v3_6d36, 9
  %v1_6d59 = zext i1 %v11_6d53 to i8
  %v3_6d59 = zext i1 %v11_6d4d to i8
  %v4_6d59 = or i8 %v3_6d59, %v1_6d59
  %v5_6d59 = icmp eq i8 %v4_6d59, 0
  %v10_6d59 = zext i8 %v4_6d59 to i64
  %v12_6d59 = and i64 %v4_6d36, 4294967040
  %v13_6d59 = or i64 %v10_6d59, %v12_6d59
  store i64 %v13_6d59, i64* @rdx, align 8
  %v1_6d5b = icmp eq i1 %v5_6d59, false
  %.pre = trunc i64 %v4_6d42 to i8
  br i1 %v1_6d5b, label %dec_label_pc_6d61, label %dec_label_pc_6d5d

dec_label_pc_6d5d:                                ; preds = %dec_label_pc_6d30
  %v5_6d5d = icmp eq i8 %.pre, 0
  %v1_6d5f = icmp eq i1 %v5_6d5d, false
  br i1 %v1_6d5f, label %dec_label_pc_6d80, label %dec_label_pc_6d61

dec_label_pc_6d61:                                ; preds = %dec_label_pc_6d30, %dec_label_pc_6d5d
  %v5_6d61 = icmp eq i8 %.pre, 0
  %v1_6d63 = icmp eq i1 %v5_6d61, false
  br i1 %v1_6d63, label %dec_label_pc_6d70, label %dec_label_pc_6d65

dec_label_pc_6d65:                                ; preds = %dec_label_pc_6d61
  br i1 %v5_6d59, label %dec_label_pc_6d70, label %dec_label_pc_6d6e

dec_label_pc_6d6e:                                ; preds = %dec_label_pc_6d65
  ret i64 1

dec_label_pc_6d70:                                ; preds = %dec_label_pc_6d65, %dec_label_pc_6d61
  %v0_6d76 = phi i64 [ 1, %dec_label_pc_6d65 ], [ %v4_6d50, %dec_label_pc_6d61 ]
  store i64 %arg1, i64* @rsi, align 8
  ret i64 %v0_6d76

dec_label_pc_6d80:                                ; preds = %dec_label_pc_6d5d
  ret i64 4294967295
}

define i64 @function_6d90(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6d90:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_6d90 = add i64 %arg1, 168
  %v2_6d90 = inttoptr i64 %v1_6d90 to i32*
  %v3_6d90 = load i32, i32* %v2_6d90, align 4
  %v4_6d90 = zext i32 %v3_6d90 to i64
  %v1_6d96 = add i64 %arg2, 168
  %v2_6d96 = inttoptr i64 %v1_6d96 to i32*
  %v3_6d96 = load i32, i32* %v2_6d96, align 4
  %v4_6d96 = zext i32 %v3_6d96 to i64
  store i64 %arg2, i64* @r8, align 8
  %v11_6d9f = icmp eq i32 %v3_6d90, 3
  %v1_6da2 = zext i1 %v11_6d9f to i64
  %v3_6da2 = and i64 %arg4, -256
  %v11_6da5 = icmp eq i32 %v3_6d90, 9
  %v1_6da8 = zext i1 %v11_6da5 to i64
  %v3_6da8 = and i64 %v4_6d90, 4294967040
  %v4_6da8 = or i64 %v1_6da2, %v3_6da2
  %v4_6da2 = or i64 %v4_6da8, %v1_6da8
  %v4_6da2.masked = and i64 %v4_6da2, 4294967041
  %v11_6dab = or i64 %v4_6da2.masked, %v3_6da8
  store i64 %v11_6dab, i64* @rcx, align 8
  %v11_6dad = icmp eq i32 %v3_6d96, 3
  %v11_6db3 = icmp eq i32 %v3_6d96, 9
  %v1_6db9 = zext i1 %v11_6db3 to i8
  %v3_6db9 = zext i1 %v11_6dad to i8
  %v4_6db9 = or i8 %v3_6db9, %v1_6db9
  %v5_6db9 = icmp eq i8 %v4_6db9, 0
  %v10_6db9 = zext i8 %v4_6db9 to i64
  %v12_6db9 = and i64 %v4_6d96, 4294967040
  %v13_6db9 = or i64 %v10_6db9, %v12_6db9
  store i64 %v13_6db9, i64* @rdx, align 8
  %v1_6dbb = icmp eq i1 %v5_6db9, false
  %.pre = trunc i64 %v4_6da2 to i8
  br i1 %v1_6dbb, label %dec_label_pc_6dc1, label %dec_label_pc_6dbd

dec_label_pc_6dbd:                                ; preds = %dec_label_pc_6d90
  %v5_6dbd = icmp eq i8 %.pre, 0
  %v1_6dbf = icmp eq i1 %v5_6dbd, false
  br i1 %v1_6dbf, label %dec_label_pc_6de0, label %dec_label_pc_6dc1

dec_label_pc_6dc1:                                ; preds = %dec_label_pc_6d90, %dec_label_pc_6dbd
  %v5_6dc1 = icmp eq i8 %.pre, 0
  %v1_6dc3 = icmp eq i1 %v5_6dc1, false
  br i1 %v1_6dc3, label %dec_label_pc_6dd0, label %dec_label_pc_6dc5

dec_label_pc_6dc5:                                ; preds = %dec_label_pc_6dc1
  br i1 %v5_6db9, label %dec_label_pc_6dd0, label %dec_label_pc_6dce

dec_label_pc_6dce:                                ; preds = %dec_label_pc_6dc5
  ret i64 1

dec_label_pc_6dd0:                                ; preds = %dec_label_pc_6dc5, %dec_label_pc_6dc1
  store i64 %arg1, i64* @rsi, align 8
  %v1_6dd6 = inttoptr i64 %arg1 to i8*
  %v4_6dd6 = call i32 @strcmp(i8* %v1_6dd6, i8* %v1_6dd6)
  %v6_6dd6 = sext i32 %v4_6dd6 to i64
  ret i64 %v6_6dd6

dec_label_pc_6de0:                                ; preds = %dec_label_pc_6dbd
  ret i64 4294967295
}

define i64 @function_6df0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6df0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v4_6df0 = trunc i64 %arg1 to i8
  %v5_6df0 = icmp eq i8 %v4_6df0, 0
  br i1 %v5_6df0, label %dec_label_pc_6e18, label %dec_label_pc_6df5

dec_label_pc_6df5:                                ; preds = %dec_label_pc_6df0
  %v1_6df7 = trunc i64 %arg2 to i32
  %v2_6df7 = and i32 %v1_6df7, 61440
  %v10_6dfc = icmp eq i32 %v2_6df7, 32768
  %v1_6e01 = icmp eq i1 %v10_6dfc, false
  br i1 %v1_6e01, label %dec_label_pc_6e70, label %dec_label_pc_6e03

dec_label_pc_6e03:                                ; preds = %dec_label_pc_6df5
  %v0_6e05 = load i32, i32* @global_var_221314.24, align 4
  %v10_6e05 = icmp eq i32 %v0_6e05, 3
  br i1 %v10_6e05, label %dec_label_pc_6eb8, label %dec_label_pc_6e12

dec_label_pc_6e12:                                ; preds = %dec_label_pc_6e88, %dec_label_pc_6e46, %dec_label_pc_6e9b, %dec_label_pc_6e54, %dec_label_pc_6e18, %dec_label_pc_6e36, %dec_label_pc_6e2d, %dec_label_pc_6e03
  %v0_6e12 = phi i64 [ 0, %dec_label_pc_6e36 ], [ 47, %dec_label_pc_6e2d ], [ 0, %dec_label_pc_6e03 ], [ 0, %dec_label_pc_6e18 ], [ 64, %dec_label_pc_6e46 ], [ 124, %dec_label_pc_6e9b ], [ 124, %dec_label_pc_6e54 ], [ 64, %dec_label_pc_6e88 ]
  ret i64 %v0_6e12

dec_label_pc_6e18:                                ; preds = %dec_label_pc_6df0
  %v1_6e1a = trunc i64 %arg3 to i32
  %v11_6e1a = icmp eq i32 %v1_6e1a, 5
  br i1 %v11_6e1a, label %dec_label_pc_6e12, label %dec_label_pc_6e1f

dec_label_pc_6e1f:                                ; preds = %dec_label_pc_6e18
  %v11_6e1f = icmp eq i32 %v1_6e1a, 3
  %v1_6e22 = zext i1 %v11_6e1f to i64
  %v3_6e22 = and i64 %arg4, -256
  %v4_6e22 = or i64 %v1_6e22, %v3_6e22
  store i64 %v4_6e22, i64* @rcx, align 8
  %v11_6e25 = icmp eq i32 %v1_6e1a, 9
  %v1_6e28 = zext i1 %v11_6e25 to i64
  %v4_6e22.masked = and i64 %v4_6e22, 4294967041
  %v11_6e2b = or i64 %v4_6e22.masked, %v1_6e28
  br label %dec_label_pc_6e2d

dec_label_pc_6e2d:                                ; preds = %dec_label_pc_6e70, %dec_label_pc_6e1f
  %storemerge8 = phi i64 [ %v11_6e2b, %dec_label_pc_6e1f ], [ %v4_6e75, %dec_label_pc_6e70 ]
  store i64 %storemerge8, i64* @rcx, align 8
  %v4_6e2d = trunc i64 %storemerge8 to i8
  %v5_6e2d = icmp eq i8 %v4_6e2d, 0
  %v1_6e34 = icmp eq i1 %v5_6e2d, false
  br i1 %v1_6e34, label %dec_label_pc_6e12, label %dec_label_pc_6e36

dec_label_pc_6e36:                                ; preds = %dec_label_pc_6e2d
  %v0_6e38 = load i32, i32* @global_var_221314.24, align 4
  %v10_6e38 = icmp eq i32 %v0_6e38, 1
  br i1 %v10_6e38, label %dec_label_pc_6e12, label %dec_label_pc_6e41

dec_label_pc_6e41:                                ; preds = %dec_label_pc_6e36
  %v1_6e44 = icmp eq i1 %v5_6df0, false
  br i1 %v1_6e44, label %dec_label_pc_6e88, label %dec_label_pc_6e46

dec_label_pc_6e46:                                ; preds = %dec_label_pc_6e41
  %v1_6e46 = trunc i64 %arg3 to i32
  %v11_6e46 = icmp eq i32 %v1_6e46, 6
  br i1 %v11_6e46, label %dec_label_pc_6e12, label %dec_label_pc_6e54

dec_label_pc_6e54:                                ; preds = %dec_label_pc_6e46
  %v11_6e54 = icmp eq i32 %v1_6e46, 1
  br i1 %v11_6e54, label %dec_label_pc_6e12, label %dec_label_pc_6e62

dec_label_pc_6e62:                                ; preds = %dec_label_pc_6e54
  %v11_6e62 = icmp eq i32 %v1_6e46, 7
  br label %dec_label_pc_6e68

dec_label_pc_6e68:                                ; preds = %dec_label_pc_6ea8, %dec_label_pc_6e62
  %v11_6e62.sink = phi i1 [ %v11_6e62, %dec_label_pc_6e62 ], [ %v10_6ea8, %dec_label_pc_6ea8 ]
  %v9_6e6a = select i1 %v11_6e62.sink, i64 61, i64 0
  ret i64 %v9_6e6a

dec_label_pc_6e70:                                ; preds = %dec_label_pc_6df5
  %v10_6e70 = icmp eq i32 %v2_6df7, 16384
  %v1_6e75 = zext i1 %v10_6e70 to i64
  %v3_6e75 = and i64 %arg4, -256
  %v4_6e75 = or i64 %v1_6e75, %v3_6e75
  br label %dec_label_pc_6e2d

dec_label_pc_6e88:                                ; preds = %dec_label_pc_6e41
  %v1_6e88 = trunc i64 %arg2 to i32
  %v2_6e88 = and i32 %v1_6e88, 61440
  %v9_6e88 = zext i32 %v2_6e88 to i64
  store i64 %v9_6e88, i64* @rsi, align 8
  %v10_6e93 = icmp eq i32 %v2_6e88, 40960
  br i1 %v10_6e93, label %dec_label_pc_6e12, label %dec_label_pc_6e9b

dec_label_pc_6e9b:                                ; preds = %dec_label_pc_6e88
  %v10_6e9b = icmp eq i32 %v2_6e88, 4096
  br i1 %v10_6e9b, label %dec_label_pc_6e12, label %dec_label_pc_6ea8

dec_label_pc_6ea8:                                ; preds = %dec_label_pc_6e9b
  %v10_6ea8 = icmp eq i32 %v2_6e88, 49152
  br label %dec_label_pc_6e68

dec_label_pc_6eb8:                                ; preds = %dec_label_pc_6e03
  %v2_6eb8 = and i32 %v1_6df7, 73
  %v3_6eb8 = icmp eq i32 %v2_6eb8, 0
  %v9_6eb8 = zext i32 %v2_6eb8 to i64
  store i64 %v9_6eb8, i64* @rsi, align 8
  %v9_6ec2 = select i1 %v3_6eb8, i64 0, i64 42
  ret i64 %v9_6ec2
}

define i64 @function_6ef0(i8 %arg1) local_unnamed_addr {
dec_label_pc_6ef0:
  %rax.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  %tmp11 = sext i8 %arg1 to i64
  store i64 %tmp11, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_6ef0 = load i64, i64* @rbx, align 8
  store i64 %v0_6ef0, i64* %stack_var_-8, align 8
  %v0_6ef1 = load i64, i64* @rdi, align 8
  %sext = mul i64 %v0_6ef1, 72057594037927936
  %v1_6ef5 = sdiv i64 %sext, 72057594037927936
  %v2_6ef5 = load i64, i64* @rsi, align 8
  %v3_6ef5 = load i64, i64* @rdx, align 8
  %v4_6ef5 = load i64, i64* @rcx, align 8
  %v5_6ef5 = call i64 @function_6df0(i64 %v1_6ef5, i64 %v2_6ef5, i64 %v3_6ef5, i64 %v4_6ef5)
  store i64 %v5_6ef5, i64* %rax.global-to-local, align 8
  %v4_6efa = trunc i64 %v5_6ef5 to i8
  %v5_6efa = icmp eq i8 %v4_6efa, 0
  store i64 %v5_6ef5, i64* %rbx.global-to-local, align 8
  br i1 %v5_6efa, label %dec_label_pc_6f23, label %dec_label_pc_6f00

dec_label_pc_6f00:                                ; preds = %dec_label_pc_6ef0
  %v0_6f00 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_6f00 = ptrtoint %_IO_FILE* %v0_6f00 to i64
  store i64 %v1_6f00, i64* @rdi, align 8
  %v2_6f07 = add i64 %v1_6f00, 40
  %v3_6f07 = inttoptr i64 %v2_6f07 to i64*
  %v4_6f07 = load i64, i64* %v3_6f07, align 8
  store i64 %v4_6f07, i64* %rax.global-to-local, align 8
  %v3_6f0b = add i64 %v1_6f00, 48
  %v4_6f0b = inttoptr i64 %v3_6f0b to i64*
  %v5_6f0b = load i64, i64* %v4_6f0b, align 8
  %v11_6f0b = icmp ult i64 %v4_6f07, %v5_6f0b
  %v1_6f0f = icmp eq i1 %v11_6f0b, false
  br i1 %v1_6f0f, label %dec_label_pc_6f30, label %dec_label_pc_6f11

dec_label_pc_6f11:                                ; preds = %dec_label_pc_6f00
  %v1_6f11 = add i64 %v4_6f07, 1
  store i64 %v1_6f11, i64* @rdx, align 8
  store i64 %v1_6f11, i64* %v3_6f07, align 8
  %v0_6f19 = load i64, i64* %rbx.global-to-local, align 8
  %v1_6f19 = trunc i64 %v0_6f19 to i8
  %v2_6f19 = load i64, i64* %rax.global-to-local, align 8
  %v3_6f19 = inttoptr i64 %v2_6f19 to i8*
  store i8 %v1_6f19, i8* %v3_6f19, align 1
  %v3_6f25.pre.pre = load i64, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_6f1b

dec_label_pc_6f1b:                                ; preds = %dec_label_pc_6f30, %dec_label_pc_6f11
  %v3_6f25.pre = phi i64 [ %v8_6f33, %dec_label_pc_6f30 ], [ %v3_6f25.pre.pre, %dec_label_pc_6f11 ]
  %v0_6f1b = load i64, i64* @global_var_2211f8.162, align 8
  %v1_6f1b = add i64 %v0_6f1b, 1
  store i64 %v1_6f1b, i64* @global_var_2211f8.162, align 8
  %v0_6f23.pre = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_6f23

dec_label_pc_6f23:                                ; preds = %dec_label_pc_6f1b, %dec_label_pc_6ef0
  %v3_6f25 = phi i64 [ %v3_6f25.pre, %dec_label_pc_6f1b ], [ %v5_6ef5, %dec_label_pc_6ef0 ]
  %v0_6f23 = phi i64 [ %v0_6f23.pre, %dec_label_pc_6f1b ], [ %v5_6ef5, %dec_label_pc_6ef0 ]
  %v4_6f23 = trunc i64 %v0_6f23 to i8
  %v5_6f23 = icmp eq i8 %v4_6f23, 0
  %v1_6f25 = icmp eq i1 %v5_6f23, false
  %v2_6f25 = zext i1 %v1_6f25 to i64
  %v4_6f25 = and i64 %v3_6f25, -256
  %v5_6f25 = or i64 %v2_6f25, %v4_6f25
  store i64 %v5_6f25, i64* %rax.global-to-local, align 8
  %v2_6f28 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_6f28, i64* %rbx.global-to-local, align 8
  ret i64 %v5_6f25

dec_label_pc_6f30:                                ; preds = %dec_label_pc_6f00
  %v1_6f30 = trunc i64 %v5_6ef5 to i32
  store i64 %v5_6ef5, i64* @rsi, align 8
  %v6_6f33 = call i32 @__overflow(%_IO_FILE* %v0_6f00, i32 %v1_6f30)
  %v8_6f33 = sext i32 %v6_6f33 to i64
  store i64 %v8_6f33, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_6f1b
}

define i64 @function_6f40(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6f40:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_6f40 = add i64 %arg1, 168
  %v2_6f40 = inttoptr i64 %v1_6f40 to i32*
  %v3_6f40 = load i32, i32* %v2_6f40, align 4
  %v4_6f40 = zext i32 %v3_6f40 to i64
  %v1_6f46 = add i64 %arg2, 168
  %v2_6f46 = inttoptr i64 %v1_6f46 to i32*
  %v3_6f46 = load i32, i32* %v2_6f46, align 4
  %v4_6f46 = zext i32 %v3_6f46 to i64
  store i64 %arg2, i64* @r8, align 8
  %v11_6f4f = icmp eq i32 %v3_6f40, 3
  %v1_6f52 = zext i1 %v11_6f4f to i64
  %v3_6f52 = and i64 %arg4, -256
  %v11_6f55 = icmp eq i32 %v3_6f40, 9
  %v1_6f58 = zext i1 %v11_6f55 to i64
  %v3_6f58 = and i64 %v4_6f40, 4294967040
  %v4_6f58 = or i64 %v1_6f52, %v3_6f52
  %v4_6f52 = or i64 %v4_6f58, %v1_6f58
  %v4_6f52.masked = and i64 %v4_6f52, 4294967041
  %v11_6f5b = or i64 %v4_6f52.masked, %v3_6f58
  store i64 %v11_6f5b, i64* @rcx, align 8
  %v11_6f5d = icmp eq i32 %v3_6f46, 9
  %v11_6f63 = icmp eq i32 %v3_6f46, 3
  %v1_6f69 = zext i1 %v11_6f63 to i8
  %v3_6f69 = zext i1 %v11_6f5d to i8
  %v4_6f69 = or i8 %v3_6f69, %v1_6f69
  %v5_6f69 = icmp eq i8 %v4_6f69, 0
  %v10_6f69 = zext i8 %v4_6f69 to i64
  %v12_6f69 = and i64 %v4_6f46, 4294967040
  %v13_6f69 = or i64 %v10_6f69, %v12_6f69
  store i64 %v13_6f69, i64* @rdx, align 8
  %v1_6f6b = icmp eq i1 %v5_6f69, false
  %.pre = trunc i64 %v4_6f52 to i8
  br i1 %v1_6f6b, label %dec_label_pc_6f71, label %dec_label_pc_6f6d

dec_label_pc_6f6d:                                ; preds = %dec_label_pc_6f40
  %v5_6f6d = icmp eq i8 %.pre, 0
  %v1_6f6f = icmp eq i1 %v5_6f6d, false
  br i1 %v1_6f6f, label %dec_label_pc_6f90, label %dec_label_pc_6f71

dec_label_pc_6f71:                                ; preds = %dec_label_pc_6f40, %dec_label_pc_6f6d
  %v5_6f71 = icmp eq i8 %.pre, 0
  %v1_6f73 = icmp eq i1 %v5_6f71, false
  br i1 %v1_6f73, label %dec_label_pc_6f80, label %dec_label_pc_6f75

dec_label_pc_6f75:                                ; preds = %dec_label_pc_6f71
  br i1 %v5_6f69, label %dec_label_pc_6f80, label %dec_label_pc_6f7e

dec_label_pc_6f7e:                                ; preds = %dec_label_pc_6f75
  ret i64 1

dec_label_pc_6f80:                                ; preds = %dec_label_pc_6f75, %dec_label_pc_6f71
  store i64 %arg1, i64* @rsi, align 8
  %v2_6f86 = call i64 @function_d3c0(i64 %arg1, i64 %arg1)
  ret i64 %v2_6f86

dec_label_pc_6f90:                                ; preds = %dec_label_pc_6f6d
  ret i64 4294967295
}

define i64 @function_6fa0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_6fa0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_6fa0 = add i64 %arg1, 168
  %v2_6fa0 = inttoptr i64 %v1_6fa0 to i32*
  %v3_6fa0 = load i32, i32* %v2_6fa0, align 4
  %v4_6fa0 = zext i32 %v3_6fa0 to i64
  %v1_6fa6 = add i64 %arg2, 168
  %v2_6fa6 = inttoptr i64 %v1_6fa6 to i32*
  %v3_6fa6 = load i32, i32* %v2_6fa6, align 4
  %v4_6fa6 = zext i32 %v3_6fa6 to i64
  %v11_6fac = icmp eq i32 %v3_6fa0, 3
  %v1_6faf = zext i1 %v11_6fac to i64
  %v3_6faf = and i64 %arg4, -256
  %v11_6fb2 = icmp eq i32 %v3_6fa0, 9
  %v1_6fb5 = zext i1 %v11_6fb2 to i64
  %v3_6fb5 = and i64 %v4_6fa0, 4294967040
  %v4_6fb5 = or i64 %v1_6faf, %v3_6faf
  %v4_6faf = or i64 %v4_6fb5, %v1_6fb5
  %v4_6faf.masked = and i64 %v4_6faf, 4294967041
  %v11_6fb8 = or i64 %v4_6faf.masked, %v3_6fb5
  store i64 %v11_6fb8, i64* @rcx, align 8
  %v11_6fba = icmp eq i32 %v3_6fa6, 9
  %v11_6fc0 = icmp eq i32 %v3_6fa6, 3
  %v1_6fc6 = zext i1 %v11_6fc0 to i8
  %v3_6fc6 = zext i1 %v11_6fba to i8
  %v4_6fc6 = or i8 %v3_6fc6, %v1_6fc6
  %v5_6fc6 = icmp eq i8 %v4_6fc6, 0
  %v10_6fc6 = zext i8 %v4_6fc6 to i64
  %v12_6fc6 = and i64 %v4_6fa6, 4294967040
  %v13_6fc6 = or i64 %v10_6fc6, %v12_6fc6
  store i64 %v13_6fc6, i64* @rdx, align 8
  %v1_6fc8 = icmp eq i1 %v5_6fc6, false
  %.pre = trunc i64 %v4_6faf to i8
  br i1 %v1_6fc8, label %dec_label_pc_6fce, label %dec_label_pc_6fca

dec_label_pc_6fca:                                ; preds = %dec_label_pc_6fa0
  %v5_6fca = icmp eq i8 %.pre, 0
  %v1_6fcc = icmp eq i1 %v5_6fca, false
  br i1 %v1_6fcc, label %dec_label_pc_6ff0, label %dec_label_pc_6fce

dec_label_pc_6fce:                                ; preds = %dec_label_pc_6fa0, %dec_label_pc_6fca
  %v5_6fce = icmp eq i8 %.pre, 0
  %v1_6fd0 = icmp eq i1 %v5_6fce, false
  br i1 %v1_6fd0, label %dec_label_pc_6fe0, label %dec_label_pc_6fd2

dec_label_pc_6fd2:                                ; preds = %dec_label_pc_6fce
  br i1 %v5_6fc6, label %dec_label_pc_6fe0, label %dec_label_pc_6fdb

dec_label_pc_6fdb:                                ; preds = %dec_label_pc_6fd2
  ret i64 1

dec_label_pc_6fe0:                                ; preds = %dec_label_pc_6fd2, %dec_label_pc_6fce
  %v2_6fe6 = call i64 @function_d3c0(i64 %arg1, i64 %arg2)
  ret i64 %v2_6fe6

dec_label_pc_6ff0:                                ; preds = %dec_label_pc_6fca
  ret i64 4294967295
}

define i64 @function_7000(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_7000:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_7000 = load i64, i64* @rdi, align 8
  %v1_7000 = add i64 %v0_7000, 168
  %v2_7000 = inttoptr i64 %v1_7000 to i32*
  %v3_7000 = load i32, i32* %v2_7000, align 4
  %v4_7000 = zext i32 %v3_7000 to i64
  %v0_7006 = load i64, i64* @rsi, align 8
  %v1_7006 = add i64 %v0_7006, 168
  %v2_7006 = inttoptr i64 %v1_7006 to i32*
  %v3_7006 = load i32, i32* %v2_7006, align 4
  %v4_7006 = zext i32 %v3_7006 to i64
  %v11_700c = icmp eq i32 %v3_7000, 3
  %v1_700f = zext i1 %v11_700c to i64
  %v2_700f = load i64, i64* @rcx, align 8
  %v11_7012 = icmp eq i32 %v3_7000, 9
  %v1_7015 = zext i1 %v11_7012 to i64
  %v3_7015 = and i64 %v4_7000, 4294967040
  %v4_700f = or i64 %v3_7015, %v1_7015
  %v4_7015 = or i64 %v4_700f, %v1_700f
  %v3_700f.masked = and i64 %v2_700f, 4294967040
  %v11_7018 = or i64 %v4_7015, %v3_700f.masked
  store i64 %v11_7018, i64* @rcx, align 8
  %v11_701a = icmp eq i32 %v3_7006, 3
  %v11_7020 = icmp eq i32 %v3_7006, 9
  %v1_7026 = zext i1 %v11_7020 to i8
  %v3_7026 = zext i1 %v11_701a to i8
  %v4_7026 = or i8 %v3_7026, %v1_7026
  %v5_7026 = icmp eq i8 %v4_7026, 0
  %v10_7026 = zext i8 %v4_7026 to i64
  %v12_7026 = and i64 %v4_7006, 4294967040
  %v13_7026 = or i64 %v10_7026, %v12_7026
  store i64 %v13_7026, i64* @rdx, align 8
  %v1_7028 = icmp eq i1 %v5_7026, false
  %.pre = trunc i64 %v4_7015 to i8
  br i1 %v1_7028, label %dec_label_pc_7032, label %dec_label_pc_702a

dec_label_pc_702a:                                ; preds = %dec_label_pc_7000
  %v5_702a = icmp eq i8 %.pre, 0
  %v1_702c = icmp eq i1 %v5_702a, false
  br i1 %v1_702c, label %dec_label_pc_70c0, label %dec_label_pc_7032

dec_label_pc_7032:                                ; preds = %dec_label_pc_7000, %dec_label_pc_702a
  %v5_7032 = icmp eq i8 %.pre, 0
  %v1_7034 = icmp eq i1 %v5_7032, false
  br i1 %v1_7034, label %dec_label_pc_7048, label %dec_label_pc_7036

dec_label_pc_7036:                                ; preds = %dec_label_pc_7032
  br i1 %v5_7026, label %dec_label_pc_7048, label %dec_label_pc_703f

dec_label_pc_703f:                                ; preds = %dec_label_pc_7036
  ret i64 1

dec_label_pc_7048:                                ; preds = %dec_label_pc_7036, %dec_label_pc_7032
  %v0_7048 = load i64, i64* %r12.global-to-local, align 8
  %v0_704a = load i64, i64* %rbp.global-to-local, align 8
  %v0_704b = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_704b, i64* %stack_var_-24, align 8
  store i64 %v0_7006, i64* %r12.global-to-local, align 8
  store i64 %v0_7000, i64* %rbx.global-to-local, align 8
  store i64 46, i64* @rsi, align 8
  store i64 %v0_7006, i64* @rdi, align 8
  %v1_705a = inttoptr i64 %v0_7006 to i8*
  %v5_705a = call i8* @strrchr(i8* %v1_705a, i32 46)
  %v7_705a = ptrtoint i8* %v5_705a to i64
  store i64 %v0_7006, i64* %rbx.global-to-local, align 8
  store i64 46, i64* @rsi, align 8
  store i64 %v7_705a, i64* %rbp.global-to-local, align 8
  store i64 %v0_7006, i64* @rdi, align 8
  %v5_706d = call i8* @strrchr(i8* %v1_705a, i32 46)
  %v1_7072 = icmp eq i8* %v5_706d, null
  br i1 %v1_7072, label %dec_label_pc_70b0, label %dec_label_pc_7077

dec_label_pc_7077:                                ; preds = %dec_label_pc_7048
  %v7_706d = ptrtoint i8* %v5_706d to i64
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @rdx, align 8
  %v0_707e = load i64, i64* %rbp.global-to-local, align 8
  %v1_707e = icmp eq i64 %v0_707e, 0
  %v3_7081 = select i1 %v1_707e, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v0_707e
  store i64 %v3_7081, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_7085

dec_label_pc_7085:                                ; preds = %dec_label_pc_70b0, %dec_label_pc_7077
  %v0_7088 = phi i64 [ %v0_70b0, %dec_label_pc_70b0 ], [ %v3_7081, %dec_label_pc_7077 ]
  %v0_7085 = phi i64 [ ptrtoint (i8** @global_var_17c4a.6 to i64), %dec_label_pc_70b0 ], [ %v7_706d, %dec_label_pc_7077 ]
  %v1_7085 = inttoptr i64 %v0_7085 to i8*
  store i64 %v0_7085, i64* @rsi, align 8
  %v1_7088 = inttoptr i64 %v0_7088 to i8*
  store i64 %v0_7088, i64* @rdi, align 8
  %v6_708b = call i32 @strcmp(i8* %v1_7088, i8* %v1_7085)
  %v5_7090 = icmp eq i32 %v6_708b, 0
  %v1_7092 = icmp eq i1 %v5_7090, false
  br i1 %v1_7092, label %dec_label_pc_70a8, label %dec_label_pc_7094

dec_label_pc_7094:                                ; preds = %dec_label_pc_70b0, %dec_label_pc_7085
  %v0_7094 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_7094, i64* @rsi, align 8
  %v0_7097 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_7097, i64* @rdi, align 8
  %v2_709a = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_709a, i64* %rbx.global-to-local, align 8
  store i64 %v0_704a, i64* %rbp.global-to-local, align 8
  store i64 %v0_7048, i64* %r12.global-to-local, align 8
  %v1_709e = inttoptr i64 %v0_7097 to i8*
  %v3_709e = inttoptr i64 %v0_7094 to i8*
  %v4_709e = call i32 @strcmp(i8* %v1_709e, i8* %v3_709e)
  %v6_709e = sext i32 %v4_709e to i64
  ret i64 %v6_709e

dec_label_pc_70a8:                                ; preds = %dec_label_pc_7085
  %v8_708b = sext i32 %v6_708b to i64
  %v2_70a8 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_70a8, i64* %rbx.global-to-local, align 8
  store i64 %v0_704a, i64* %rbp.global-to-local, align 8
  store i64 %v0_7048, i64* %r12.global-to-local, align 8
  ret i64 %v8_708b

dec_label_pc_70b0:                                ; preds = %dec_label_pc_7048
  %v0_70b0 = load i64, i64* %rbp.global-to-local, align 8
  %v1_70b0 = icmp eq i64 %v0_70b0, 0
  %v1_70ba = icmp eq i1 %v1_70b0, false
  br i1 %v1_70ba, label %dec_label_pc_7085, label %dec_label_pc_7094

dec_label_pc_70c0:                                ; preds = %dec_label_pc_702a
  ret i64 4294967295
}

define i64 @function_70d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_70d0:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %tmp44 = sext i32 %arg1 to i64
  store i64 %tmp44, i64* @rdi, align 8
  %tmp46 = call i128 @__decompiler_undefined_function_12()
  %tmp47 = call i128 @__decompiler_undefined_function_12()
  %tmp48 = call i128 @__decompiler_undefined_function_12()
  %tmp49 = call i128 @__decompiler_undefined_function_12()
  %tmp50 = call i128 @__decompiler_undefined_function_12()
  %tmp51 = call i128 @__decompiler_undefined_function_12()
  %tmp52 = call i128 @__decompiler_undefined_function_12()
  %tmp53 = call i128 @__decompiler_undefined_function_12()
  %stack_var_-216 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_70d0 = load i64, i64* @r15, align 8
  %v0_70d2 = load i64, i64* @r14, align 8
  %v0_70d4 = load i64, i64* @r13, align 8
  %v0_70d6 = load i64, i64* @r12, align 8
  %v0_70d8 = load i64, i64* @rbp, align 8
  %v0_70d9 = load i64, i64* @rbx, align 8
  store i64 %v0_70d9, i64* %stack_var_-48, align 8
  %v16_70da = ptrtoint i64* %stack_var_-216 to i64
  %v0_70e1 = call i64 @__readfsqword(i64 40)
  %v0_70f4 = load i64, i64* @rdi, align 8
  %v4_70f4 = trunc i64 %v0_70f4 to i8
  %v5_70f4 = icmp eq i8 %v4_70f4, 0
  %v1_70f7 = icmp eq i1 %v5_70f4, false
  br i1 %v1_70f7, label %dec_label_pc_7170, label %dec_label_pc_70f9

dec_label_pc_70f9:                                ; preds = %dec_label_pc_70d0
  store i64 ptrtoint (i32** @global_var_16a64.273 to i64), i64* @rbx, align 8
  store i64 20, i64* @rbp, align 8
  store i64 ptrtoint (%_TYPEDEF_sigset_t** @global_var_221220.274 to i64), i64* @r12, align 8
  store i64 ptrtoint (i64* @global_var_16a90.275 to i64), i64* @r13, align 8
  br label %dec_label_pc_7123

dec_label_pc_7118:                                ; preds = %dec_label_pc_7123
  %v0_7118 = load i64, i64* @rbx, align 8
  %v1_7118 = load i64, i64* @r13, align 8
  %v12_7118 = icmp eq i64 %v0_7118, %v1_7118
  br i1 %v12_7118, label %dec_label_pc_713f, label %dec_label_pc_711d

dec_label_pc_711d:                                ; preds = %dec_label_pc_7118, %dec_label_pc_7131
  %v0_711d = phi i64 [ %v0_7118, %dec_label_pc_7118 ], [ %v0_713a, %dec_label_pc_7131 ]
  %v1_711d = inttoptr i64 %v0_711d to i32*
  %v2_711d = load i32, i32* %v1_711d, align 4
  %v3_711d = zext i32 %v2_711d to i64
  store i64 %v3_711d, i64* @rbp, align 8
  %v1_711f = add i64 %v0_711d, 4
  store i64 %v1_711f, i64* @rbx, align 8
  %v0_7125.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_7123

dec_label_pc_7123:                                ; preds = %dec_label_pc_711d, %dec_label_pc_70f9
  %v0_7125 = phi i64 [ %v0_7125.pre, %dec_label_pc_711d ], [ ptrtoint (%_TYPEDEF_sigset_t** @global_var_221220.274 to i64), %dec_label_pc_70f9 ]
  %v0_7123 = phi i64 [ %v3_711d, %dec_label_pc_711d ], [ 20, %dec_label_pc_70f9 ]
  %v1_7123 = trunc i64 %v0_7123 to i32
  store i64 %v0_7123, i64* @rsi, align 8
  %v1_7125 = inttoptr i64 %v0_7125 to %_TYPEDEF_sigset_t*
  store i64 %v0_7125, i64* @rdi, align 8
  %v6_7128 = call i32 @sigismember(%_TYPEDEF_sigset_t* %v1_7125, i32 %v1_7123)
  %v5_712d = icmp eq i32 %v6_7128, 0
  br i1 %v5_712d, label %dec_label_pc_7118, label %dec_label_pc_7131

dec_label_pc_7131:                                ; preds = %dec_label_pc_7123
  store i64 0, i64* @rsi, align 8
  %v0_7133 = load i64, i64* @rbp, align 8
  %v1_7133 = trunc i64 %v0_7133 to i32
  store i64 %v0_7133, i64* @rdi, align 8
  %v6_7135 = call void (i32)* @signal(i32 %v1_7133, void (i32)* null)
  %v0_713a = load i64, i64* @rbx, align 8
  %v1_713a = load i64, i64* @r13, align 8
  %v12_713a = icmp eq i64 %v0_713a, %v1_713a
  %v1_713d = icmp eq i1 %v12_713a, false
  br i1 %v1_713d, label %dec_label_pc_711d, label %dec_label_pc_713f

dec_label_pc_713f:                                ; preds = %dec_label_pc_7118, %dec_label_pc_7131, %dec_label_pc_728f
  %v1_7147 = call i64 @__readfsqword(i64 40)
  %v2_7147 = xor i64 %v1_7147, %v0_70e1
  %v3_7147 = icmp eq i64 %v2_7147, 0
  %v1_7150 = icmp eq i1 %v3_7147, false
  br i1 %v1_7150, label %dec_label_pc_7299, label %dec_label_pc_7156

dec_label_pc_7156:                                ; preds = %dec_label_pc_713f
  %v2_715d = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_715d, i64* @rbx, align 8
  store i64 %v0_70d8, i64* @rbp, align 8
  store i64 %v0_70d6, i64* @r12, align 8
  store i64 %v0_70d4, i64* @r13, align 8
  store i64 %v0_70d2, i64* @r14, align 8
  store i64 %v0_70d0, i64* @r15, align 8
  ret i64 %v2_7147

dec_label_pc_7170:                                ; preds = %dec_label_pc_70d0
  store i64 ptrtoint (i32** @global_var_16a64.273 to i64), i64* @rbp, align 8
  store i64 ptrtoint (%_TYPEDEF_sigset_t** @global_var_221220.274 to i64), i64* @rdi, align 8
  store i64 20, i64* %r13.global-to-local, align 8
  store i64 %v16_70da, i64* @r12, align 8
  store i64 ptrtoint (%_TYPEDEF_sigset_t** @global_var_221220.274 to i64), i64* %r15.global-to-local, align 8
  %v3_718e = call i32 @sigemptyset(%_TYPEDEF_sigset_t* bitcast (%_TYPEDEF_sigset_t** @global_var_221220.274 to %_TYPEDEF_sigset_t*))
  store i64 ptrtoint (i64* @global_var_16a90.275 to i64), i64* %r14.global-to-local, align 8
  %v0_7197 = load i64, i64* @rbp, align 8
  %v6_71af = bitcast i64* %stack_var_-216 to %sigaction*
  %v0_71ac.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_71a7

dec_label_pc_71a0:                                ; preds = %dec_label_pc_71c6
  %v1_71a0 = inttoptr i64 %v0_71c6 to i32*
  %v2_71a0 = load i32, i32* %v1_71a0, align 4
  %v3_71a0 = zext i32 %v2_71a0 to i64
  store i64 %v3_71a0, i64* %r13.global-to-local, align 8
  %v1_71a3 = add i64 %v0_71c6, 4
  br label %dec_label_pc_71a7

dec_label_pc_71a7:                                ; preds = %dec_label_pc_71a0, %dec_label_pc_7170
  %v0_71ac = phi i64 [ %v3_71a0, %dec_label_pc_71a0 ], [ %v0_71ac.pre, %dec_label_pc_7170 ]
  %storemerge = phi i64 [ %v1_71a3, %dec_label_pc_71a0 ], [ %v0_7197, %dec_label_pc_7170 ]
  store i64 %storemerge, i64* @rbx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 %v16_70da, i64* @rdx, align 8
  %v1_71ac = trunc i64 %v0_71ac to i32
  store i64 %v0_71ac, i64* @rdi, align 8
  %v7_71af = call i32 @sigaction(i32 %v1_71ac, %sigaction* null, %sigaction* %v6_71af)
  %v2_71b4 = load i64, i64* %stack_var_-216, align 8
  %v12_71b4 = icmp eq i64 %v2_71b4, 1
  br i1 %v12_71b4, label %dec_label_pc_71c6, label %dec_label_pc_71bb

dec_label_pc_71bb:                                ; preds = %dec_label_pc_71a7
  %v0_71bb = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_71bb, i64* @rsi, align 8
  %v0_71be = load i64, i64* %r15.global-to-local, align 8
  %v1_71be = inttoptr i64 %v0_71be to %_TYPEDEF_sigset_t*
  store i64 %v0_71be, i64* @rdi, align 8
  %v4_71c1 = trunc i64 %v0_71bb to i32
  %v5_71c1 = call i32 @sigaddset(%_TYPEDEF_sigset_t* %v1_71be, i32 %v4_71c1)
  br label %dec_label_pc_71c6

dec_label_pc_71c6:                                ; preds = %dec_label_pc_71bb, %dec_label_pc_71a7
  %v0_71c6 = load i64, i64* @rbx, align 8
  %v1_71c6 = load i64, i64* %r14.global-to-local, align 8
  %v12_71c6 = icmp eq i64 %v0_71c6, %v1_71c6
  %v1_71c9 = icmp eq i1 %v12_71c6, false
  br i1 %v1_71c9, label %dec_label_pc_71a0, label %dec_label_pc_71cb

dec_label_pc_71cb:                                ; preds = %dec_label_pc_71c6
  %v0_71cb = load i128, i128* bitcast (%_TYPEDEF_sigset_t** @global_var_221220.274 to i128*), align 8
  %v1_71cb = call i128 @__asm_movdqa(i128 %v0_71cb)
  store i64 20, i64* @r14, align 8
  store i64 ptrtoint (%_TYPEDEF_sigset_t** @global_var_221220.274 to i64), i64* @r13, align 8
  store i64 22928, i64* @r15, align 8
  call void @__asm_movups(i128 %tmp53, i128 %v1_71cb)
  %v0_71f7 = load i128, i128* @global_var_221230.276, align 8
  %v1_71f7 = call i128 @__asm_movdqa(i128 %v0_71f7)
  call void @__asm_movups(i128 %tmp52, i128 %v1_71f7)
  %v0_7204 = load i128, i128* @global_var_221240.277, align 8
  %v1_7204 = call i128 @__asm_movdqa(i128 %v0_7204)
  call void @__asm_movups(i128 %tmp51, i128 %v1_7204)
  %v0_7211 = load i128, i128* @global_var_221250.278, align 8
  %v1_7211 = call i128 @__asm_movdqa(i128 %v0_7211)
  call void @__asm_movups(i128 %tmp50, i128 %v1_7211)
  %v0_721e = load i128, i128* @global_var_221260.279, align 8
  %v1_721e = call i128 @__asm_movdqa(i128 %v0_721e)
  call void @__asm_movups(i128 %tmp49, i128 %v1_721e)
  %v0_722b = load i128, i128* @global_var_221270.280, align 8
  %v1_722b = call i128 @__asm_movdqa(i128 %v0_722b)
  call void @__asm_movups(i128 %tmp48, i128 %v1_722b)
  %v0_7238 = load i128, i128* @global_var_221280.281, align 8
  %v1_7238 = call i128 @__asm_movdqa(i128 %v0_7238)
  call void @__asm_movups(i128 %tmp47, i128 %v1_7238)
  %v0_7245 = load i128, i128* @global_var_221290.282, align 8
  %v1_7245 = call i128 @__asm_movdqa(i128 %v0_7245)
  store i128 %v1_7245, i128* @xmm0, align 8
  call void @__asm_movups(i128 %tmp46, i128 %v1_7245)
  %v0_7260.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_7260

dec_label_pc_7258:                                ; preds = %dec_label_pc_728f
  %v1_7258 = inttoptr i64 %v0_728f to i32*
  %v2_7258 = load i32, i32* %v1_7258, align 4
  %v3_7258 = zext i32 %v2_7258 to i64
  store i64 %v3_7258, i64* @r14, align 8
  %v1_725c = add i64 %v0_728f, 4
  store i64 %v1_725c, i64* @rbp, align 8
  br label %dec_label_pc_7260

dec_label_pc_7260:                                ; preds = %dec_label_pc_7258, %dec_label_pc_71cb
  %v0_7260 = phi i64 [ %v3_7258, %dec_label_pc_7258 ], [ %v0_7260.pre, %dec_label_pc_71cb ]
  %v1_7260 = trunc i64 %v0_7260 to i32
  store i64 %v0_7260, i64* @rsi, align 8
  %v0_7263 = load i64, i64* @r13, align 8
  %v1_7263 = inttoptr i64 %v0_7263 to %_TYPEDEF_sigset_t*
  store i64 %v0_7263, i64* @rdi, align 8
  %v6_7266 = call i32 @sigismember(%_TYPEDEF_sigset_t* %v1_7263, i32 %v1_7260)
  %v5_726b = icmp eq i32 %v6_7266, 0
  br i1 %v5_726b, label %dec_label_pc_728f, label %dec_label_pc_726f

dec_label_pc_726f:                                ; preds = %dec_label_pc_7260
  %v0_7276 = load i64, i64* @r14, align 8
  %v1_7276 = trunc i64 %v0_7276 to i32
  %v11_7276 = icmp eq i32 %v1_7276, 20
  store i64 %v16_70da, i64* @rsi, align 8
  store i64 %v0_7276, i64* @rdi, align 8
  %v1_7280 = icmp eq i1 %v11_7276, false
  %v3_7280 = load i64, i64* @r15, align 8
  %v4_7280 = select i1 %v1_7280, i64 %v3_7280, i64 27008
  store i64 0, i64* @rdx, align 8
  store i64 %v4_7280, i64* %stack_var_-216, align 8
  %v8_728a = call i32 @sigaction(i32 %v1_7276, %sigaction* %v6_71af, %sigaction* null)
  br label %dec_label_pc_728f

dec_label_pc_728f:                                ; preds = %dec_label_pc_726f, %dec_label_pc_7260
  %v0_728f = load i64, i64* @rbp, align 8
  %v1_728f = load i64, i64* @rbx, align 8
  %v12_728f = icmp eq i64 %v0_728f, %v1_728f
  %v1_7292 = icmp eq i1 %v12_728f, false
  br i1 %v1_7292, label %dec_label_pc_7258, label %dec_label_pc_713f

dec_label_pc_7299:                                ; preds = %dec_label_pc_713f
  call void @__stack_chk_fail()
  %v0_72a0 = load i64, i64* @global_var_220088.283, align 8
  %v7_72a0 = icmp eq i64 %v0_72a0, 0
  br i1 %v7_72a0, label %dec_label_pc_72b8, label %dec_label_pc_72aa

dec_label_pc_72aa:                                ; preds = %dec_label_pc_7299
  store i64 ptrtoint (i64* @global_var_220080.284 to i64), i64* @rdi, align 8
  %v2_72b1 = call i64 @function_72f0(i64* nonnull @global_var_220080.284)
  ret i64 %v2_72b1

dec_label_pc_72b8:                                ; preds = %dec_label_pc_7299
  store i64 ptrtoint (i64* @global_var_220060.150 to i64), i64* @rdi, align 8
  %v2_72c3 = call i64 @function_72f0(i64* nonnull @global_var_220060.150)
  store i64 ptrtoint (i64* @global_var_220090.285 to i64), i64* @rdi, align 8
  %v2_72cf = call i64 @function_72f0(i64* nonnull @global_var_220090.285)
  store i64 ptrtoint (i64* @global_var_220070.153 to i64), i64* @rdi, align 8
  %v2_72df = call i64 @function_72f0(i64* nonnull @global_var_220070.153)
  ret i64 %v2_72df
}

define i64 @function_72f0(i64* %arg1) local_unnamed_addr {
dec_label_pc_72f0:
  %tmp11 = ptrtoint i64* %arg1 to i64
  store i64 %tmp11, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_72f0 = load i8, i8* @global_var_221310.146, align 1
  %v7_72f0 = icmp eq i8 %v0_72f0, 0
  %v0_72f7 = load i64, i64* @rbx, align 8
  store i64 %v0_72f7, i64* %stack_var_-8, align 8
  %v0_72f8 = load i64, i64* @rdi, align 8
  store i64 %v0_72f8, i64* @rbx, align 8
  br i1 %v7_72f0, label %dec_label_pc_7320, label %dec_label_pc_72fd

dec_label_pc_72fd:                                ; preds = %dec_label_pc_7320, %dec_label_pc_7340, %dec_label_pc_72f0
  %v0_72fd = load i64, i64* @rbx, align 8
  %v1_72fd = add i64 %v0_72fd, 8
  %v2_72fd = inttoptr i64 %v1_72fd to i64*
  %v3_72fd = load i64, i64* %v2_72fd, align 8
  store i64 %v3_72fd, i64* @rdi, align 8
  %v3_7301 = trunc i64 %v3_72fd to i32
  store i64 %v3_72fd, i64* @rsi, align 8
  store i64 1, i64* @rdx, align 8
  %v2_7309 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_7309, i64* @rbx, align 8
  %v0_730a = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_730a = ptrtoint %_IO_FILE* %v0_730a to i64
  store i64 %v1_730a, i64* @rcx, align 8
  %v1_7311 = inttoptr i64 %v3_72fd to i64*
  %v11_7311 = call i32 @fwrite_unlocked(i64* %v1_7311, i32 %v3_7301, i32 1, %_IO_FILE* %v0_730a)
  %v13_7311 = sext i32 %v11_7311 to i64
  ret i64 %v13_7311

dec_label_pc_7320:                                ; preds = %dec_label_pc_72f0
  store i64 1, i64* @rdi, align 8
  store i8 1, i8* @global_var_221310.146, align 1
  %v3_732c = call i32 @tcgetpgrp(i32 1)
  %v6_7331 = icmp slt i32 %v3_732c, 0
  %v1_7333 = icmp eq i1 %v6_7331, false
  br i1 %v1_7333, label %dec_label_pc_7340, label %dec_label_pc_72fd

dec_label_pc_7340:                                ; preds = %dec_label_pc_7320
  store i64 1, i64* @rdi, align 8
  %v3_7345 = call i64 @function_70d0(i32 1)
  br label %dec_label_pc_72fd
}

define i64 @function_7360() local_unnamed_addr {
dec_label_pc_7360:
  %stack_var_-168 = alloca i64, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_7360 = load i64, i64* @rbp, align 8
  %v0_7361 = load i64, i64* @rbx, align 8
  store i64 %v0_7361, i64* %stack_var_-16, align 8
  %v16_7362 = ptrtoint i64* %stack_var_-168 to i64
  %v0_7369 = call i64 @__readfsqword(i64 40)
  store i64 %v16_7362, i64* @rbp, align 8
  %tmp39 = bitcast i64* %stack_var_-168 to %_TYPEDEF_sigset_t*
  br label %dec_label_pc_73d9

dec_label_pc_7388:                                ; preds = %dec_label_pc_73f6, %dec_label_pc_73ed
  %v0_7388 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_7388 = ptrtoint %_IO_FILE* %v0_7388 to i64
  store i64 %v1_7388, i64* @rdi, align 8
  %v3_738f = call i32 @fflush_unlocked(%_IO_FILE* %v0_7388)
  store i64 ptrtoint (%_TYPEDEF_sigset_t** @global_var_221220.274 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 %v16_7362, i64* @rdx, align 8
  %v9_73a0 = call i32 @sigprocmask(i32 0, %_TYPEDEF_sigset_t* bitcast (%_TYPEDEF_sigset_t** @global_var_221220.274 to %_TYPEDEF_sigset_t*), %_TYPEDEF_sigset_t* %tmp39)
  %v0_73a5 = load i32, i32* @global_var_221218.155, align 4
  %v1_73a5 = zext i32 %v0_73a5 to i64
  store i64 %v1_73a5, i64* @rbx, align 8
  %v0_73ab = load i32, i32* @global_var_221214.154, align 4
  %v5_73b1 = icmp eq i32 %v0_73ab, 0
  br i1 %v5_73b1, label %dec_label_pc_7418, label %dec_label_pc_73b5

dec_label_pc_73b5:                                ; preds = %dec_label_pc_7388
  %v2_73b5 = add i32 %v0_73ab, -1
  store i64 19, i64* @rbx, align 8
  store i32 %v2_73b5, i32* @global_var_221214.154, align 4
  br label %dec_label_pc_73c3

dec_label_pc_73c3:                                ; preds = %dec_label_pc_7418, %dec_label_pc_73b5
  %v0_73c3 = phi i64 [ %v0_73c3.pre, %dec_label_pc_7418 ], [ 19, %dec_label_pc_73b5 ]
  %v1_73c3 = trunc i64 %v0_73c3 to i32
  store i64 %v0_73c3, i64* @rdi, align 8
  %v3_73c5 = call i32 @raise(i32 %v1_73c3)
  store i64 0, i64* @rdx, align 8
  store i64 %v16_7362, i64* @rsi, align 8
  store i64 2, i64* @rdi, align 8
  %v9_73d4 = call i32 @sigprocmask(i32 2, %_TYPEDEF_sigset_t* %tmp39, %_TYPEDEF_sigset_t* null)
  br label %dec_label_pc_73d9

dec_label_pc_73d9:                                ; preds = %dec_label_pc_73c3, %dec_label_pc_7360
  %v0_73d9 = load i32, i32* @global_var_221218.155, align 4
  %v5_73df = icmp eq i32 %v0_73d9, 0
  %v1_73e1 = icmp eq i1 %v5_73df, false
  br i1 %v1_73e1, label %dec_label_pc_73ed, label %dec_label_pc_73e3

dec_label_pc_73e3:                                ; preds = %dec_label_pc_73d9
  %v0_73e3 = load i32, i32* @global_var_221214.154, align 4
  %v5_73e9 = icmp eq i32 %v0_73e3, 0
  br i1 %v5_73e9, label %dec_label_pc_7428, label %dec_label_pc_73ed

dec_label_pc_73ed:                                ; preds = %dec_label_pc_73e3, %dec_label_pc_73d9
  %v0_73ed = load i8, i8* @global_var_221310.146, align 1
  %v7_73ed = icmp eq i8 %v0_73ed, 0
  br i1 %v7_73ed, label %dec_label_pc_7388, label %dec_label_pc_73f6

dec_label_pc_73f6:                                ; preds = %dec_label_pc_73ed
  store i64 ptrtoint (i64* @global_var_220060.150 to i64), i64* @rdi, align 8
  %v2_73fd = call i64 @function_72f0(i64* nonnull @global_var_220060.150)
  store i64 ptrtoint (i64* @global_var_220070.153 to i64), i64* @rdi, align 8
  %v2_7409 = call i64 @function_72f0(i64* nonnull @global_var_220070.153)
  br label %dec_label_pc_7388

dec_label_pc_7418:                                ; preds = %dec_label_pc_7388
  store i64 0, i64* @rsi, align 8
  store i64 %v1_73a5, i64* @rdi, align 8
  %v6_741c = call void (i32)* @signal(i32 %v0_73a5, void (i32)* null)
  %v0_73c3.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_73c3

dec_label_pc_7428:                                ; preds = %dec_label_pc_73e3
  %v1_7430 = call i64 @__readfsqword(i64 40)
  %v2_7430 = xor i64 %v1_7430, %v0_7369
  %v3_7430 = icmp eq i64 %v2_7430, 0
  %v1_7439 = icmp eq i1 %v3_7430, false
  br i1 %v1_7439, label %dec_label_pc_7445, label %dec_label_pc_743b

dec_label_pc_743b:                                ; preds = %dec_label_pc_7428
  %v2_7442 = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_7442, i64* @rbx, align 8
  store i64 %v0_7360, i64* @rbp, align 8
  ret i64 %v2_7430

dec_label_pc_7445:                                ; preds = %dec_label_pc_7428
  call void @__stack_chk_fail()
  %v0_7450 = load i8, i8* @global_var_221312.58, align 1
  %v7_7450 = icmp eq i8 %v0_7450, 0
  br i1 %v7_7450, label %dec_label_pc_7470, label %dec_label_pc_7459

dec_label_pc_7459:                                ; preds = %dec_label_pc_7445
  store i64 4, i64* @rdi, align 8
  %v1_7462 = call i64 @function_5c50(i64 4)
  %v4_7467 = trunc i64 %v1_7462 to i8
  %v5_7467 = icmp eq i8 %v4_7467, 0
  %v1_7469 = icmp eq i1 %v5_7467, false
  br i1 %v1_7469, label %dec_label_pc_7478, label %dec_label_pc_746b

dec_label_pc_746b:                                ; preds = %dec_label_pc_7459
  ret i64 %v1_7462

dec_label_pc_7470:                                ; preds = %dec_label_pc_7445
  ret i64 ptrtoint (i32* @0 to i64)

dec_label_pc_7478:                                ; preds = %dec_label_pc_7459
  store i64 ptrtoint (i64* @global_var_220060.150 to i64), i64* @rdi, align 8
  %v2_747f = call i64 @function_72f0(i64* nonnull @global_var_220060.150)
  store i64 ptrtoint (i64* @global_var_2200a0.286 to i64), i64* @rdi, align 8
  %v2_748b = call i64 @function_72f0(i64* nonnull @global_var_2200a0.286)
  store i64 ptrtoint (i64* @global_var_220070.153 to i64), i64* @rdi, align 8
  %v2_749b = call i64 @function_72f0(i64* nonnull @global_var_220070.153)
  ret i64 %v2_749b
}

define i64 @function_74a0(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i32 %arg5, i64* %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_74a0:
  %r9.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %tmp73 = ptrtoint i64* %arg6 to i64
  store i64 %tmp73, i64* %r9.global-to-local, align 8
  %tmp74 = sext i32 %arg5 to i64
  store i64 %tmp74, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  %tmp75 = ptrtoint i64* %arg1 to i64
  store i64 %tmp75, i64* @rdi, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-76 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_74a0 = load i64, i64* @r15, align 8
  %v0_74a2 = load i64, i64* @r14, align 8
  %v0_74a4 = load i64, i64* @rdx, align 8
  store i64 %v0_74a4, i64* @r14, align 8
  %v0_74a7 = load i64, i64* @r13, align 8
  %v0_74a9 = load i64, i64* @r12, align 8
  %v0_74ab = load i64, i64* @rsi, align 8
  store i64 %v0_74ab, i64* @r12, align 8
  %v0_74ae = load i64, i64* @rbp, align 8
  %v0_74af = load i64, i64* @rbx, align 8
  store i64 %v0_74af, i64* %stack_var_-48, align 8
  %v0_74b0 = load i64, i64* @rcx, align 8
  store i64 %v0_74b0, i64* @rbx, align 8
  %v2_74b6 = load i64, i64* @rdi, align 8
  store i64 %v2_74b6, i64* @r13, align 8
  store i64 %v0_74a4, i64* @rdi, align 8
  %v0_74c1 = load i64, i64* @r8, align 8
  %v4_74c1 = trunc i64 %v0_74c1 to i32
  %v0_74c6 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* @rcx, align 8
  %v0_74d6 = load i64, i64* %r9.global-to-local, align 8
  %v1_74db = trunc i64 %v0_74a4 to i32
  %v2_74db = call i64 @function_13590(i32 %v1_74db)
  %v1_74e0 = trunc i64 %v2_74db to i32
  %tmp108 = icmp ult i32 %v1_74e0, 3
  %v1_74e6 = zext i1 %tmp108 to i8
  %v2_74e6 = load i8, i8* @global_var_2212d8.16, align 1
  %v3_74e6 = and i8 %v1_74e6, %v2_74e6
  %v4_74e6 = icmp eq i8 %v3_74e6, 0
  %v9_74e6 = zext i8 %v3_74e6 to i64
  %v11_74e6 = and i64 %v2_74db, -256
  %v12_74e6 = or i64 %v9_74e6, %v11_74e6
  store i64 %v12_74e6, i64* %rax.global-to-local, align 8
  %v1_74f0 = icmp eq i1 %v4_74e6, false
  br i1 %v1_74f0, label %dec_label_pc_7650, label %dec_label_pc_74f6

dec_label_pc_74f6:                                ; preds = %dec_label_pc_74a0
  store i64 0, i64* %r9.global-to-local, align 8
  %v0_74f9 = load i64, i64* @rbx, align 8
  %v4_74f9 = trunc i64 %v0_74f9 to i32
  %v5_74f9 = icmp eq i32 %v4_74f9, 0
  br i1 %v5_74f9, label %dec_label_pc_7570, label %dec_label_pc_74fd

dec_label_pc_74fd:                                ; preds = %dec_label_pc_78fe, %dec_label_pc_74f6
  %v0_7512 = phi i64 [ 1, %dec_label_pc_78fe ], [ 0, %dec_label_pc_74f6 ]
  %v0_74fd = load i64, i64* @r14, align 8
  store i64 %v0_74fd, i64* @r8, align 8
  store i64 -1, i64* @rcx, align 8
  %v0_7507 = load i64, i64* @r12, align 8
  store i64 %v0_7507, i64* @rdx, align 8
  store i64 ptrtoint ([5 x i8*]** @global_var_2000.287 to i64), i64* @rsi, align 8
  %v0_750f = load i64, i64* @r13, align 8
  store i64 %v0_750f, i64* @rdi, align 8
  %v1_7517 = inttoptr i64 %v0_750f to i64*
  %v7_7517 = call i64 @function_13660(i64* %v1_7517, i64 ptrtoint ([5 x i8*]** @global_var_2000.287 to i64), i64 %v0_7507, i64 -1, i64 %v0_74fd)
  store i64 %v7_7517, i64* %rax.global-to-local, align 8
  store i64 %v7_7517, i64* @rbx, align 8
  store i64 %v0_7512, i64* %r9.global-to-local, align 8
  %tmp129 = icmp ugt i64 %v7_7517, ptrtoint (i1* @global_var_1fff.288 to i64)
  br i1 %tmp129, label %dec_label_pc_78b8, label %dec_label_pc_7530

dec_label_pc_7530:                                ; preds = %dec_label_pc_74fd, %dec_label_pc_78b8
  %v0_7530 = load i64, i64* @r13, align 8
  %v1_7530 = inttoptr i64 %v0_7530 to i8*
  %v2_7530 = load i8, i8* %v1_7530, align 1
  %v3_7530 = zext i8 %v2_7530 to i64
  store i64 %v3_7530, i64* %rax.global-to-local, align 8
  %v0_753a = load i64, i64* @r12, align 8
  %v1_753a = inttoptr i64 %v0_753a to i8*
  %v2_753a = load i8, i8* %v1_753a, align 1
  %v15_753a = icmp eq i8 %v2_753a, %v2_7530
  %v1_753e = icmp eq i1 %v15_753a, false
  br i1 %v1_753e, label %dec_label_pc_755a, label %dec_label_pc_7540

dec_label_pc_7540:                                ; preds = %dec_label_pc_7530
  store i64 %v0_753a, i64* @rdi, align 8
  %v2_7548 = call i32 @strlen(i8* %v1_753a)
  %v4_7548 = sext i32 %v2_7548 to i64
  store i64 %v4_7548, i64* %rax.global-to-local, align 8
  store i64 %v0_7512, i64* %r9.global-to-local, align 8
  %v0_7552 = load i64, i64* @rbx, align 8
  %v12_7552 = icmp eq i64 %v0_7552, %v4_7548
  %v1_7555 = icmp eq i1 %v12_7552, false
  %v2_7555 = zext i1 %v1_7555 to i8
  br label %dec_label_pc_755a

dec_label_pc_755a:                                ; preds = %dec_label_pc_7540, %dec_label_pc_7530
  %stack_var_-105.0 = phi i8 [ 1, %dec_label_pc_7530 ], [ %v2_7555, %dec_label_pc_7540 ]
  %v5_755a = icmp eq i64 %v0_7512, 0
  br i1 %v5_755a, label %dec_label_pc_757e, label %dec_label_pc_755f

dec_label_pc_755f:                                ; preds = %dec_label_pc_755a
  %v0_755f = load i64, i64* @rbx, align 8
  store i64 %v0_755f, i64* @rbp, align 8
  br label %dec_label_pc_7683

dec_label_pc_7570:                                ; preds = %dec_label_pc_74f6
  %v0_7570 = load i64, i64* @r12, align 8
  store i64 %v0_7570, i64* @rdi, align 8
  store i64 %v0_7570, i64* @r13, align 8
  %v1_7576 = inttoptr i64 %v0_7570 to i8*
  %v2_7576 = call i32 @strlen(i8* %v1_7576)
  %v4_7576 = sext i32 %v2_7576 to i64
  store i64 %v4_7576, i64* %rax.global-to-local, align 8
  store i64 %v4_7576, i64* @rbx, align 8
  br label %dec_label_pc_757e

dec_label_pc_757e:                                ; preds = %dec_label_pc_7570, %dec_label_pc_755a
  %stack_var_-105.1 = phi i8 [ %stack_var_-105.0, %dec_label_pc_755a ], [ %v3_74e6, %dec_label_pc_7570 ]
  %v11_757e = icmp eq i32 %v4_74c1, 0
  br i1 %v11_757e, label %dec_label_pc_7638, label %dec_label_pc_758a

dec_label_pc_758a:                                ; preds = %dec_label_pc_757e
  %v0_758a = call i32 @__ctype_get_mb_cur_max()
  %v2_758a = sext i32 %v0_758a to i64
  store i64 %v2_758a, i64* %rax.global-to-local, align 8
  %tmp125 = or i32 %v0_758a, 1
  %tmp126 = icmp eq i32 %tmp125, 1
  br i1 %tmp126, label %dec_label_pc_7599, label %dec_label_pc_7798

dec_label_pc_7599:                                ; preds = %dec_label_pc_758a
  %v0_7599 = load i64, i64* @r13, align 8
  %v1_7599 = load i64, i64* @rbx, align 8
  %v3_7599 = add i64 %v1_7599, %v0_7599
  store i64 %v3_7599, i64* @r12, align 8
  %v7_759e = icmp ult i64 %v0_7599, %v3_7599
  %v1_75a1 = icmp eq i1 %v7_759e, false
  br i1 %v1_75a1, label %dec_label_pc_78f2, label %dec_label_pc_75a7

dec_label_pc_75a7:                                ; preds = %dec_label_pc_7599
  %v0_75a7 = call i16** @__ctype_b_loc()
  %v2_75a7 = ptrtoint i16** %v0_75a7 to i64
  store i64 %v2_75a7, i64* %rax.global-to-local, align 8
  %v1_75ae = bitcast i16** %v0_75a7 to i64*
  %v2_75ae = load i64, i64* %v1_75ae, align 8
  store i64 %v2_75ae, i64* @rcx, align 8
  %v0_75b1 = load i64, i64* @r13, align 8
  store i64 %v0_75b1, i64* %rax.global-to-local, align 8
  %v0_75d0.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_75b8

dec_label_pc_75b8:                                ; preds = %dec_label_pc_75b8, %dec_label_pc_75a7
  %v0_75c8 = phi i64 [ %v4_75c8, %dec_label_pc_75b8 ], [ 0, %dec_label_pc_75a7 ]
  %v0_75cc = phi i64 [ %v1_75cc, %dec_label_pc_75b8 ], [ %v0_75b1, %dec_label_pc_75a7 ]
  %v1_75b8 = inttoptr i64 %v0_75cc to i8*
  %v2_75b8 = load i8, i8* %v1_75b8, align 1
  %v3_75b8 = zext i8 %v2_75b8 to i64
  store i64 %v3_75b8, i64* @rdx, align 8
  %v2_75bb = mul nuw nsw i64 %v3_75b8, 2
  %v3_75bb = add i64 %v2_75bb, %v2_75ae
  %v4_75bb = inttoptr i64 %v3_75bb to i16*
  %v5_75bb = load i16, i16* %v4_75bb, align 2
  %v2_75bf = and i16 %v5_75bb, 16384
  %v9_75bf = zext i16 %v2_75bf to i64
  store i64 %v9_75bf, i64* @rdx, align 8
  %not.v1_75c8 = icmp ne i16 %v2_75bf, 0
  %v3_75c8 = sext i1 %not.v1_75c8 to i64
  %v4_75c8 = sub i64 %v0_75c8, %v3_75c8
  store i64 %v4_75c8, i64* @rbp, align 8
  %v1_75cc = add i64 %v0_75cc, 1
  store i64 %v1_75cc, i64* %rax.global-to-local, align 8
  %v12_75d0 = icmp eq i64 %v0_75d0.pre, %v1_75cc
  %v1_75d3 = icmp eq i1 %v12_75d0, false
  br i1 %v1_75d3, label %dec_label_pc_75b8, label %dec_label_pc_75d5

dec_label_pc_75d5:                                ; preds = %dec_label_pc_75b8, %dec_label_pc_78f2, %dec_label_pc_78e9
  %stack_var_-105.2 = phi i8 [ %stack_var_-105.1, %dec_label_pc_78f2 ], [ %stack_var_-105.4, %dec_label_pc_78e9 ], [ %stack_var_-105.1, %dec_label_pc_75b8 ]
  %v0_75d5 = load i8, i8* @global_var_2213a8.128, align 1
  %v1_75d5 = zext i8 %v0_75d5 to i64
  store i64 %v1_75d5, i64* %rax.global-to-local, align 8
  %v5_75dc = icmp eq i8 %v0_75d5, 0
  br i1 %v5_75dc, label %dec_label_pc_75f1, label %dec_label_pc_75e0

dec_label_pc_75e0:                                ; preds = %dec_label_pc_787b, %dec_label_pc_7798, %dec_label_pc_777b, %dec_label_pc_7638, %dec_label_pc_75d5
  %stack_var_-105.3 = phi i8 [ %stack_var_-105.1, %dec_label_pc_7638 ], [ %stack_var_-105.2, %dec_label_pc_75d5 ], [ %stack_var_-105.1, %dec_label_pc_7798 ], [ %stack_var_-105.4, %dec_label_pc_787b ], [ %stack_var_-105.4, %dec_label_pc_777b ]
  %v0_75e0 = load i8, i8* bitcast (i32* @global_var_2213a9.250 to i8*), align 4
  %v2_75e7 = xor i8 %v0_75e0, 1
  %v6_75ea = or i8 %v2_75e7, %stack_var_-105.3
  %v1_75ee = zext i8 %v6_75ea to i64
  %v2_75ee = xor i64 %v1_75ee, 1
  store i64 %v2_75ee, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_75f1

dec_label_pc_75f1:                                ; preds = %dec_label_pc_787b, %dec_label_pc_7798, %dec_label_pc_777b, %dec_label_pc_75e0, %dec_label_pc_75d5
  %v0_75f6 = phi i64 [ %v1_787b, %dec_label_pc_787b ], [ %v1_77a8, %dec_label_pc_7798 ], [ %v1_777b, %dec_label_pc_777b ], [ %v2_75ee, %dec_label_pc_75e0 ], [ %v1_75d5, %dec_label_pc_75d5 ]
  store i64 %v0_74d6, i64* @rcx, align 8
  %v1_75f6 = trunc i64 %v0_75f6 to i8
  %v3_75f6 = inttoptr i64 %v0_74d6 to i8*
  store i8 %v1_75f6, i8* %v3_75f6, align 1
  %sext16 = mul i64 %v0_74c1, 4294967296
  %v4_75f8 = sdiv i64 %sext16, 4294967296
  store i64 %v4_75f8, i64* %rax.global-to-local, align 8
  %v2_75fd = icmp eq i32 %v4_74c1, 0
  br i1 %v2_75fd, label %dec_label_pc_7605, label %dec_label_pc_7602

dec_label_pc_7602:                                ; preds = %dec_label_pc_75f1
  %v0_7602 = load i64, i64* @rbp, align 8
  %v3_7602 = inttoptr i64 %v4_75f8 to i64*
  store i64 %v0_7602, i64* %v3_7602, align 8
  br label %dec_label_pc_7605

dec_label_pc_7605:                                ; preds = %dec_label_pc_7641, %dec_label_pc_7602, %dec_label_pc_75f1
  %v0_760a = load i64, i64* @r13, align 8
  %v2_760a = inttoptr i64 %v2_74b6 to i64*
  store i64 %v0_760a, i64* %v2_760a, align 8
  %v0_760d = load i64, i64* @rbx, align 8
  store i64 %v0_760d, i64* %rax.global-to-local, align 8
  %v1_7615 = call i64 @__readfsqword(i64 40)
  %v2_7615 = xor i64 %v1_7615, %v0_74c6
  %v3_7615 = icmp eq i64 %v2_7615, 0
  store i64 %v2_7615, i64* @rbx, align 8
  %v1_761e = icmp eq i1 %v3_7615, false
  br i1 %v1_761e, label %dec_label_pc_78f9, label %dec_label_pc_7624

dec_label_pc_7624:                                ; preds = %dec_label_pc_7605
  %v2_7628 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_7628, i64* @rbx, align 8
  store i64 %v0_74ae, i64* @rbp, align 8
  store i64 %v0_74a9, i64* @r12, align 8
  store i64 %v0_74a7, i64* @r13, align 8
  store i64 %v0_74a2, i64* @r14, align 8
  store i64 %v0_74a0, i64* @r15, align 8
  %v0_7632 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_7632

dec_label_pc_7638:                                ; preds = %dec_label_pc_757e
  %v0_7638 = load i8, i8* @global_var_2213a8.128, align 1
  %v7_7638 = icmp eq i8 %v0_7638, 0
  %v1_763f = icmp eq i1 %v7_7638, false
  br i1 %v1_763f, label %dec_label_pc_75e0, label %dec_label_pc_7641

dec_label_pc_7641:                                ; preds = %dec_label_pc_7638
  store i64 %v0_74d6, i64* %rax.global-to-local, align 8
  %v1_7646 = inttoptr i64 %v0_74d6 to i8*
  store i8 0, i8* %v1_7646, align 1
  br label %dec_label_pc_7605

dec_label_pc_7650:                                ; preds = %dec_label_pc_74a0
  %v0_7650 = load i64, i64* @rbx, align 8
  %v4_7650 = trunc i64 %v0_7650 to i32
  %v5_7650 = icmp eq i32 %v4_7650, 0
  %v1_7652 = icmp eq i1 %v5_7650, false
  br i1 %v1_7652, label %dec_label_pc_78fe, label %dec_label_pc_7658

dec_label_pc_7658:                                ; preds = %dec_label_pc_7650
  %v0_7658 = load i64, i64* @r12, align 8
  store i64 %v0_7658, i64* @rdi, align 8
  %v1_765b = inttoptr i64 %v0_7658 to i8*
  %v2_765b = call i32 @strlen(i8* %v1_765b)
  %v4_765b = sext i32 %v2_765b to i64
  store i64 %v4_765b, i64* %rax.global-to-local, align 8
  store i64 %v4_765b, i64* @rbp, align 8
  %v1_7669 = add nsw i64 %v4_765b, 1
  store i64 %v1_7669, i64* @rdx, align 8
  %tmp130 = icmp ugt i64 %v4_765b, ptrtoint (i1* @global_var_1fff.288 to i64)
  br i1 %tmp130, label %dec_label_pc_7898, label %dec_label_pc_7658.dec_label_pc_7673_crit_edge

dec_label_pc_7658.dec_label_pc_7673_crit_edge:    ; preds = %dec_label_pc_7658
  %v0_7676.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_7673

dec_label_pc_7673:                                ; preds = %dec_label_pc_7658.dec_label_pc_7673_crit_edge, %dec_label_pc_7898
  %v4_7679 = phi i64 [ %v1_7669, %dec_label_pc_7658.dec_label_pc_7673_crit_edge ], [ %v4_78a5, %dec_label_pc_7898 ]
  %v0_7676 = phi i64 [ %v0_7676.pre, %dec_label_pc_7658.dec_label_pc_7673_crit_edge ], [ %v1_78a0, %dec_label_pc_7898 ]
  %v0_7673 = load i64, i64* @r12, align 8
  store i64 %v0_7673, i64* @rsi, align 8
  store i64 %v0_7676, i64* @rdi, align 8
  %v1_7679 = inttoptr i64 %v0_7676 to i64*
  %v3_7679 = inttoptr i64 %v0_7673 to i64*
  %v5_7679 = trunc i64 %v4_7679 to i32
  %v6_7679 = call i64* @memcpy(i64* %v1_7679, i64* %v3_7679, i32 %v5_7679)
  %v8_7679 = ptrtoint i64* %v6_7679 to i64
  store i64 %v8_7679, i64* %rax.global-to-local, align 8
  %v1_7683.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_7683

dec_label_pc_7683:                                ; preds = %dec_label_pc_7673, %dec_label_pc_755f
  %v1_7683 = phi i64 [ %v0_755f, %dec_label_pc_755f ], [ %v1_7683.pre, %dec_label_pc_7673 ]
  %stack_var_-105.4 = phi i8 [ %stack_var_-105.0, %dec_label_pc_755f ], [ 0, %dec_label_pc_7673 ]
  %v0_7683 = load i64, i64* @r13, align 8
  %v3_7683 = add i64 %v0_7683, %v1_7683
  %v0_7688 = call i32 @__ctype_get_mb_cur_max()
  %v2_7688 = sext i32 %v0_7688 to i64
  store i64 %v2_7688, i64* %rax.global-to-local, align 8
  %tmp127 = or i32 %v0_7688, 1
  %tmp128 = icmp eq i32 %tmp127, 1
  %v0_7850 = load i64, i64* @r13, align 8
  br i1 %tmp128, label %dec_label_pc_7850, label %dec_label_pc_769c

dec_label_pc_769c:                                ; preds = %dec_label_pc_7683
  %v7_769c = icmp ult i64 %v0_7850, %v3_7683
  %v1_769f = icmp eq i1 %v7_769c, false
  br i1 %v1_769f, label %dec_label_pc_78e9, label %dec_label_pc_76a5

dec_label_pc_76a5:                                ; preds = %dec_label_pc_769c
  %v2_76a5 = ptrtoint i64* %stack_var_-76 to i64
  store i64 %v2_76a5, i64* %rax.global-to-local, align 8
  %v2_76aa = ptrtoint i64* %stack_var_-72 to i64
  store i64 %v2_76aa, i64* @r12, align 8
  store i64 %v0_7850, i64* @rbx, align 8
  store i64 %v0_7850, i64* @r15, align 8
  store i64 0, i64* @rbp, align 8
  %sext18 = mul i64 %v3_7683, 4294967296
  %v4_76f0 = sdiv i64 %sext18, 4294967296
  %tmp114 = bitcast i64* %stack_var_-72 to %_TYPEDEF___mbstate_t*
  br label %dec_label_pc_76c0

dec_label_pc_76c0:                                ; preds = %dec_label_pc_7770, %dec_label_pc_76a5
  %v0_76c0 = phi i64 [ %v0_7770, %dec_label_pc_7770 ], [ %v0_7850, %dec_label_pc_76a5 ]
  %v1_76c0 = inttoptr i64 %v0_76c0 to i8*
  %v2_76c0 = load i8, i8* %v1_76c0, align 1
  %v3_76c0 = zext i8 %v2_76c0 to i64
  store i64 %v3_76c0, i64* %rax.global-to-local, align 8
  %v10_76c6 = icmp sgt i8 %v2_76c0, 63
  br i1 %v10_76c6, label %dec_label_pc_77f0, label %dec_label_pc_76cc

dec_label_pc_76cc:                                ; preds = %dec_label_pc_76c0
  %v7_76ce = icmp slt i8 %v2_76c0, 37
  br i1 %v7_76ce, label %dec_label_pc_76d4, label %dec_label_pc_7808

dec_label_pc_76d4:                                ; preds = %dec_label_pc_76cc
  %v1_76d4 = add nsw i64 %v3_76c0, -32
  store i64 %v1_76d4, i64* @rdx, align 8
  %v1_76d7 = trunc i64 %v1_76d4 to i8
  %tmp131 = icmp ult i8 %v1_76d7, 4
  br i1 %tmp131, label %dec_label_pc_7808, label %dec_label_pc_76e0

dec_label_pc_76e0:                                ; preds = %dec_label_pc_77fc, %dec_label_pc_77f0, %dec_label_pc_76d4
  store i64 0, i64* %stack_var_-72, align 8
  br label %dec_label_pc_76f0

dec_label_pc_76f0:                                ; preds = %dec_label_pc_7764.dec_label_pc_76f0_crit_edge, %dec_label_pc_76e0
  %v0_76fd = phi i64 [ %v0_76fd.pre, %dec_label_pc_7764.dec_label_pc_76f0_crit_edge ], [ %v0_76c0, %dec_label_pc_76e0 ]
  store i64 %v2_76a5, i64* @rdi, align 8
  store i64 %v2_76aa, i64* @rcx, align 8
  store i64 %v0_76fd, i64* @rsi, align 8
  %v0_7700 = load i64, i64* @rbx, align 8
  %v1_7700 = add i64 %v0_7700, 1
  store i64 %v1_7700, i64* @r14, align 8
  %v2_7704 = sub i64 %v4_76f0, %v0_76fd
  store i64 %v2_7704, i64* @rdx, align 8
  %v3_7707 = call i64 @function_15310(i64 %v2_76a5, i64 %v0_76fd, i64 %v2_7704)
  store i64 %v3_7707, i64* %rax.global-to-local, align 8
  %v10_770c = icmp eq i64 %v3_7707, -1
  br i1 %v10_770c, label %dec_label_pc_7820, label %dec_label_pc_7716

dec_label_pc_7716:                                ; preds = %dec_label_pc_76f0
  %v10_7716 = icmp eq i64 %v3_7707, -2
  br i1 %v10_7716, label %dec_label_pc_7838, label %dec_label_pc_7720

dec_label_pc_7720:                                ; preds = %dec_label_pc_7716
  %v1_7720 = icmp eq i64 %v3_7707, 0
  %v3_7723 = load i64, i64* %stack_var_-76, align 8
  %v4_7723 = trunc i64 %v3_7723 to i32
  store i64 %v3_7723, i64* @rdi, align 8
  %v3_77d0 = call i32 @wcwidth(i32 %v4_7723)
  %v5_77d0 = sext i32 %v3_77d0 to i64
  store i64 %v5_77d0, i64* %rax.global-to-local, align 8
  br i1 %v1_7720, label %dec_label_pc_77d0, label %dec_label_pc_7732

dec_label_pc_7732:                                ; preds = %dec_label_pc_7720
  store i64 %v3_7707, i64* @rdx, align 8
  %v6_773c = icmp slt i32 %v3_77d0, 0
  %v0_773e = load i64, i64* @r15, align 8
  %v3_773e = add i64 %v0_773e, %v3_7707
  store i64 %v3_773e, i64* @rcx, align 8
  br i1 %v6_773c, label %dec_label_pc_77c0, label %dec_label_pc_7744

dec_label_pc_7744:                                ; preds = %dec_label_pc_7732
  %v0_7744 = load i64, i64* @rbx, align 8
  store i64 %v0_7744, i64* @rdi, align 8
  br label %dec_label_pc_7750

dec_label_pc_7750:                                ; preds = %dec_label_pc_7750, %dec_label_pc_7744
  %v3_7753 = phi i64 [ %v9_7753, %dec_label_pc_7750 ], [ %v0_7744, %dec_label_pc_7744 ]
  %v0_7750 = phi i64 [ %v10_7753, %dec_label_pc_7750 ], [ %v0_773e, %dec_label_pc_7744 ]
  store i64 %v0_7750, i64* @rsi, align 8
  %v1_7753 = inttoptr i64 %v0_7750 to i8*
  %v2_7753 = load i8, i8* %v1_7753, align 1
  %v4_7753 = inttoptr i64 %v3_7753 to i8*
  store i8 %v2_7753, i8* %v4_7753, align 1
  %v5_7753 = load i64, i64* @rdi, align 8
  %v6_7753 = load i64, i64* @rsi, align 8
  %v7_7753 = load i1, i1* @df, align 1
  %v8_7753 = select i1 %v7_7753, i64 -1, i64 1
  %v9_7753 = add i64 %v8_7753, %v5_7753
  %v10_7753 = add i64 %v8_7753, %v6_7753
  store i64 %v9_7753, i64* @rdi, align 8
  store i64 %v10_7753, i64* @rsi, align 8
  %v1_7754 = load i64, i64* @rcx, align 8
  %v12_7754 = icmp eq i64 %v10_7753, %v1_7754
  store i64 %v10_7753, i64* @r15, align 8
  %v1_775a = icmp eq i1 %v12_7754, false
  br i1 %v1_775a, label %dec_label_pc_7750, label %dec_label_pc_775c

dec_label_pc_775c:                                ; preds = %dec_label_pc_7750
  %v0_775c = load i64, i64* @rbx, align 8
  %v1_775c = load i64, i64* @rdx, align 8
  %v2_775c = add i64 %v1_775c, %v0_775c
  br label %dec_label_pc_775f

dec_label_pc_775f:                                ; preds = %dec_label_pc_77dd, %dec_label_pc_775c
  %storemerge = phi i64 [ %v0_77e6, %dec_label_pc_77dd ], [ %v2_775c, %dec_label_pc_775c ]
  store i64 %storemerge, i64* @rbx, align 8
  %v0_7761 = load i64, i64* @rbp, align 8
  %v1_7761 = load i64, i64* %rax.global-to-local, align 8
  %v2_7761 = add i64 %v1_7761, %v0_7761
  store i64 %v2_7761, i64* @rbp, align 8
  br label %dec_label_pc_7764

dec_label_pc_7764:                                ; preds = %dec_label_pc_77c0, %dec_label_pc_775f
  store i64 %v2_76aa, i64* @rdi, align 8
  %v3_7767 = call i32 @mbsinit(%_TYPEDEF___mbstate_t* %tmp114)
  %v5_7767 = sext i32 %v3_7767 to i64
  store i64 %v5_7767, i64* %rax.global-to-local, align 8
  %v5_776c = icmp eq i32 %v3_7767, 0
  br i1 %v5_776c, label %dec_label_pc_7764.dec_label_pc_76f0_crit_edge, label %dec_label_pc_7770

dec_label_pc_7764.dec_label_pc_76f0_crit_edge:    ; preds = %dec_label_pc_7764
  %v0_76fd.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_76f0

dec_label_pc_7770:                                ; preds = %dec_label_pc_7764, %dec_label_pc_782b, %dec_label_pc_7808
  %v0_7770 = load i64, i64* @r15, align 8
  %v11_7770 = icmp ult i64 %v0_7770, %v4_76f0
  br i1 %v11_7770, label %dec_label_pc_76c0, label %dec_label_pc_777b

dec_label_pc_777b:                                ; preds = %dec_label_pc_7770
  %v0_777b = load i8, i8* @global_var_2213a8.128, align 1
  %v1_777b = zext i8 %v0_777b to i64
  store i64 %v1_777b, i64* %rax.global-to-local, align 8
  %v0_7782 = load i64, i64* @rbx, align 8
  %v1_7782 = load i64, i64* @r13, align 8
  %v2_7782 = sub i64 %v0_7782, %v1_7782
  store i64 %v2_7782, i64* @rbx, align 8
  %v5_7785 = icmp eq i8 %v0_777b, 0
  br i1 %v5_7785, label %dec_label_pc_75f1, label %dec_label_pc_75e0

dec_label_pc_7798:                                ; preds = %dec_label_pc_758a
  store i64 0, i64* @rdx, align 8
  %v0_779a = load i64, i64* @rbx, align 8
  store i64 %v0_779a, i64* @rsi, align 8
  %v0_779d = load i64, i64* @r13, align 8
  store i64 %v0_779d, i64* @rdi, align 8
  %v5_77a0 = call i64 @function_101b0(i64 %v0_779d, i64 %v0_779a, i32 0)
  store i64 %v5_77a0, i64* @rbp, align 8
  %v0_77a8 = load i8, i8* @global_var_2213a8.128, align 1
  %v1_77a8 = zext i8 %v0_77a8 to i64
  store i64 %v1_77a8, i64* %rax.global-to-local, align 8
  %v5_77af = icmp eq i8 %v0_77a8, 0
  br i1 %v5_77af, label %dec_label_pc_75f1, label %dec_label_pc_75e0

dec_label_pc_77c0:                                ; preds = %dec_label_pc_77d0, %dec_label_pc_7732
  %v0_77c0 = load i64, i64* @rbx, align 8
  %v1_77c0 = inttoptr i64 %v0_77c0 to i8*
  store i8 63, i8* %v1_77c0, align 1
  %v0_77c3 = load i64, i64* @rbp, align 8
  %v1_77c3 = add i64 %v0_77c3, 1
  store i64 %v1_77c3, i64* @rbp, align 8
  %v0_77c7 = load i64, i64* @r14, align 8
  store i64 %v0_77c7, i64* @rbx, align 8
  %v0_77ca = load i64, i64* @rcx, align 8
  store i64 %v0_77ca, i64* @r15, align 8
  br label %dec_label_pc_7764

dec_label_pc_77d0:                                ; preds = %dec_label_pc_7720
  %v6_77d5 = icmp slt i32 %v3_77d0, 0
  %v0_77d7 = load i64, i64* @r15, align 8
  %v1_77d7 = add i64 %v0_77d7, 1
  store i64 %v1_77d7, i64* @rcx, align 8
  br i1 %v6_77d5, label %dec_label_pc_77c0, label %dec_label_pc_77dd

dec_label_pc_77dd:                                ; preds = %dec_label_pc_77d0
  %v1_77dd = inttoptr i64 %v0_77d7 to i8*
  %v2_77dd = load i8, i8* %v1_77dd, align 1
  %v3_77dd = zext i8 %v2_77dd to i64
  store i64 %v3_77dd, i64* @rdx, align 8
  store i64 %v1_77d7, i64* @r15, align 8
  %v2_77e4 = load i64, i64* @rbx, align 8
  %v3_77e4 = inttoptr i64 %v2_77e4 to i8*
  store i8 %v2_77dd, i8* %v3_77e4, align 1
  %v0_77e6 = load i64, i64* @r14, align 8
  br label %dec_label_pc_775f

dec_label_pc_77f0:                                ; preds = %dec_label_pc_76c0
  %v7_77f0 = icmp eq i8 %v2_76c0, 64
  br i1 %v7_77f0, label %dec_label_pc_76e0, label %dec_label_pc_77f8

dec_label_pc_77f8:                                ; preds = %dec_label_pc_77f0
  %v9_77fa = icmp sgt i8 %v2_76c0, 95
  br i1 %v9_77fa, label %dec_label_pc_77fc, label %dec_label_pc_7808

dec_label_pc_77fc:                                ; preds = %dec_label_pc_77f8
  %v1_77fc = add nsw i64 %v3_76c0, -97
  store i64 %v1_77fc, i64* @rdx, align 8
  %v1_77ff = trunc i64 %v1_77fc to i8
  %tmp132 = icmp ult i8 %v1_77ff, 30
  br i1 %tmp132, label %dec_label_pc_7808, label %dec_label_pc_76e0

dec_label_pc_7808:                                ; preds = %dec_label_pc_77fc, %dec_label_pc_77f8, %dec_label_pc_76cc, %dec_label_pc_76d4
  %v2_7808 = load i64, i64* @rbx, align 8
  %v3_7808 = inttoptr i64 %v2_7808 to i8*
  store i8 %v2_76c0, i8* %v3_7808, align 1
  %v0_780a = load i64, i64* @r15, align 8
  %v1_780a = add i64 %v0_780a, 1
  store i64 %v1_780a, i64* @r15, align 8
  %v0_780e = load i64, i64* @rbp, align 8
  %v1_780e = add i64 %v0_780e, 1
  store i64 %v1_780e, i64* @rbp, align 8
  %v0_7812 = load i64, i64* @rbx, align 8
  %v1_7812 = add i64 %v0_7812, 1
  store i64 %v1_7812, i64* @rbx, align 8
  br label %dec_label_pc_7770

dec_label_pc_7820:                                ; preds = %dec_label_pc_76f0
  %v0_7820 = load i64, i64* @r15, align 8
  %v1_7820 = add i64 %v0_7820, 1
  store i64 %v1_7820, i64* @r15, align 8
  %v0_7824 = load i64, i64* @rbx, align 8
  %v1_7824 = inttoptr i64 %v0_7824 to i8*
  store i8 63, i8* %v1_7824, align 1
  %v0_7827 = load i64, i64* @rbp, align 8
  %v1_7827 = add i64 %v0_7827, 1
  store i64 %v1_7827, i64* @rbp, align 8
  br label %dec_label_pc_782b

dec_label_pc_782b:                                ; preds = %dec_label_pc_7838, %dec_label_pc_7820
  %v0_782b = load i64, i64* @r14, align 8
  store i64 %v0_782b, i64* @rbx, align 8
  br label %dec_label_pc_7770

dec_label_pc_7838:                                ; preds = %dec_label_pc_7716
  %v0_7838 = load i64, i64* @rbx, align 8
  %v1_7838 = inttoptr i64 %v0_7838 to i8*
  store i8 63, i8* %v1_7838, align 1
  %v0_783b = load i64, i64* @rbp, align 8
  %v1_783b = add i64 %v0_783b, 1
  store i64 %v1_783b, i64* @rbp, align 8
  store i64 %v4_76f0, i64* @r15, align 8
  br label %dec_label_pc_782b

dec_label_pc_7850:                                ; preds = %dec_label_pc_7683
  %sext20 = mul i64 %v3_7683, 4294967296
  %v5_7850 = sdiv i64 %sext20, 4294967296
  %v11_7850 = icmp ult i64 %v0_7850, %v5_7850
  %v1_7855 = icmp eq i1 %v11_7850, false
  br i1 %v1_7855, label %dec_label_pc_787b, label %dec_label_pc_7857

dec_label_pc_7857:                                ; preds = %dec_label_pc_7850
  %v0_7857 = call i16** @__ctype_b_loc()
  %v2_7857 = ptrtoint i16** %v0_7857 to i64
  store i64 %v2_7857, i64* %rax.global-to-local, align 8
  %v0_785c = load i64, i64* @r13, align 8
  store i64 %v0_785c, i64* @rdx, align 8
  br label %dec_label_pc_7860

dec_label_pc_7860:                                ; preds = %dec_label_pc_7870.dec_label_pc_7860_crit_edge, %dec_label_pc_7857
  %v0_7863 = phi i64 [ %v0_7863.pre, %dec_label_pc_7870.dec_label_pc_7860_crit_edge ], [ %v2_7857, %dec_label_pc_7857 ]
  %v0_786d = phi i64 [ %v1_7870, %dec_label_pc_7870.dec_label_pc_7860_crit_edge ], [ %v0_785c, %dec_label_pc_7857 ]
  %v1_7860 = inttoptr i64 %v0_786d to i8*
  %v2_7860 = load i8, i8* %v1_7860, align 1
  %v3_7860 = zext i8 %v2_7860 to i64
  store i64 %v3_7860, i64* @rsi, align 8
  %v1_7863 = inttoptr i64 %v0_7863 to i64*
  %v2_7863 = load i64, i64* %v1_7863, align 8
  store i64 %v2_7863, i64* @rcx, align 8
  %v2_7866 = mul nuw nsw i64 %v3_7860, 2
  %v3_7866 = or i64 %v2_7866, 1
  %v4_7866 = add i64 %v3_7866, %v2_7863
  %v5_7866 = inttoptr i64 %v4_7866 to i8*
  %v6_7866 = load i8, i8* %v5_7866, align 1
  %v7_7866 = and i8 %v6_7866, 64
  %v8_7866 = icmp eq i8 %v7_7866, 0
  %v1_786b = icmp eq i1 %v8_7866, false
  br i1 %v1_786b, label %dec_label_pc_7870, label %dec_label_pc_786d

dec_label_pc_786d:                                ; preds = %dec_label_pc_7860
  store i8 63, i8* %v1_7860, align 1
  %v0_7870.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_7870

dec_label_pc_7870:                                ; preds = %dec_label_pc_786d, %dec_label_pc_7860
  %v0_7870 = phi i64 [ %v0_7870.pre, %dec_label_pc_786d ], [ %v0_786d, %dec_label_pc_7860 ]
  %v1_7870 = add i64 %v0_7870, 1
  store i64 %v1_7870, i64* @rdx, align 8
  %v16_7874 = icmp eq i64 %v1_7870, %v5_7850
  %v1_7879 = icmp eq i1 %v16_7874, false
  br i1 %v1_7879, label %dec_label_pc_7870.dec_label_pc_7860_crit_edge, label %dec_label_pc_787b

dec_label_pc_7870.dec_label_pc_7860_crit_edge:    ; preds = %dec_label_pc_7870
  %v0_7863.pre = load i64, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_7860

dec_label_pc_787b:                                ; preds = %dec_label_pc_7870, %dec_label_pc_7850
  %v0_787b = load i8, i8* @global_var_2213a8.128, align 1
  %v1_787b = zext i8 %v0_787b to i64
  store i64 %v1_787b, i64* %rax.global-to-local, align 8
  %v0_7882 = load i64, i64* @rbp, align 8
  store i64 %v0_7882, i64* @rbx, align 8
  %v5_7885 = icmp eq i8 %v0_787b, 0
  br i1 %v5_7885, label %dec_label_pc_75f1, label %dec_label_pc_75e0

dec_label_pc_7898:                                ; preds = %dec_label_pc_7658
  store i64 %v1_7669, i64* @rdi, align 8
  %v1_78a0 = call i64 @function_14480(i64 %v1_7669)
  store i64 %v1_78a0, i64* %rax.global-to-local, align 8
  %sext = mul i64 %v1_7669, 4294967296
  %v4_78a5 = sdiv i64 %sext, 4294967296
  store i64 %v4_78a5, i64* @rdx, align 8
  store i64 %v1_78a0, i64* @r13, align 8
  br label %dec_label_pc_7673

dec_label_pc_78b8:                                ; preds = %dec_label_pc_74fd
  %v1_78b8 = add i64 %v7_7517, 1
  store i64 %v1_78b8, i64* @r15, align 8
  store i64 %v1_78b8, i64* @rdi, align 8
  %v1_78bf = call i64 @function_14480(i64 %v1_78b8)
  store i64 %v1_78bf, i64* %rax.global-to-local, align 8
  %v0_78c4 = load i64, i64* @r14, align 8
  store i64 %v0_78c4, i64* @r8, align 8
  store i64 -1, i64* @rcx, align 8
  %v0_78ce = load i64, i64* @r12, align 8
  store i64 %v0_78ce, i64* @rdx, align 8
  %v0_78d1 = load i64, i64* @r15, align 8
  store i64 %v0_78d1, i64* @rsi, align 8
  store i64 %v1_78bf, i64* @rdi, align 8
  %v1_78da = inttoptr i64 %v1_78bf to i64*
  %v6_78da = call i64 @function_13660(i64* %v1_78da, i64 %v0_78d1, i64 %v0_78ce, i64 -1, i64 %v0_78c4)
  store i64 %v6_78da, i64* %rax.global-to-local, align 8
  store i64 %v0_7512, i64* %r9.global-to-local, align 8
  br label %dec_label_pc_7530

dec_label_pc_78e9:                                ; preds = %dec_label_pc_769c
  store i64 0, i64* @rbx, align 8
  store i64 0, i64* @rbp, align 8
  br label %dec_label_pc_75d5

dec_label_pc_78f2:                                ; preds = %dec_label_pc_7599
  store i64 0, i64* @rbp, align 8
  br label %dec_label_pc_75d5

dec_label_pc_78f9:                                ; preds = %dec_label_pc_7605
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_78fe

dec_label_pc_78fe:                                ; preds = %dec_label_pc_78f9, %dec_label_pc_7650
  store i64 1, i64* %r9.global-to-local, align 8
  br label %dec_label_pc_74fd
}

define i64 @function_7910(i64 %arg1, i64 %arg2, i32 %arg3, i32 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_7910:
  %r10.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %r9.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg6, i64* %r9.global-to-local, align 8
  store i64 %arg5, i64* @r8, align 8
  %tmp160 = sext i32 %arg4 to i64
  store i64 %tmp160, i64* @rcx, align 8
  %tmp161 = sext i32 %arg3 to i64
  store i64 %tmp161, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8400 = alloca i64, align 8
  %stack_var_-8392 = alloca i64, align 8
  %stack_var_-8384 = alloca i64, align 8
  %stack_var_-8273 = alloca i8, align 1
  %stack_var_-8272 = alloca i8*, align 8
  %stack_var_-8264 = alloca i64, align 8
  %stack_var_-8312 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_7910 = load i64, i64* @r15, align 8
  %v0_7912 = load i64, i64* @r14, align 8
  %v0_7914 = load i64, i64* @rdi, align 8
  store i64 %v0_7914, i64* %rax.global-to-local, align 8
  %v0_7917 = load i64, i64* @r13, align 8
  %v0_7919 = load i64, i64* @r12, align 8
  %v0_791b = load i64, i64* @rcx, align 8
  %v1_791b = trunc i64 %v0_791b to i32
  store i64 %v0_791b, i64* @r14, align 8
  %v0_791e = load i64, i64* @rbp, align 8
  %v0_791f = load i64, i64* @rbx, align 8
  store i64 %v0_791f, i64* %stack_var_-48, align 8
  %v0_7920 = load i64, i64* %r9.global-to-local, align 8
  store i64 %v0_7920, i64* @rbx, align 8
  %v0_7923 = load i64, i64* @r8, align 8
  store i64 %v0_7923, i64* @r15, align 8
  store i64 0, i64* @r8, align 8
  store i64 %v0_7914, i64* %stack_var_-8312, align 8
  %v2_7934 = ptrtoint i64* %stack_var_-8264 to i64
  store i64 %v2_7934, i64* @r13, align 8
  %v2_7939 = ptrtoint i8** %stack_var_-8272 to i64
  store i64 %v2_7939, i64* @rdi, align 8
  %v2_793e = ptrtoint i8* %stack_var_-8273 to i64
  store i64 %v2_793e, i64* %r9.global-to-local, align 8
  store i64 %arg7, i64* @r12, align 8
  %v0_794b = call i64 @__readfsqword(i64 40)
  %v0_795e = load i64, i64* @rdx, align 8
  store i64 %v0_795e, i64* @rcx, align 8
  %v0_7960 = load i64, i64* @rsi, align 8
  store i64 %v0_7960, i64* @rdx, align 8
  %v0_7963 = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_7963, i64* @rsi, align 8
  %tmp194 = bitcast i64* %stack_var_-8264 to i8*
  store i8* %tmp194, i8** %stack_var_-8272, align 8
  %v1_796b = bitcast i8** %stack_var_-8272 to i64*
  %sext = mul i64 %v0_795e, 4294967296
  %v5_796b = sdiv i64 %sext, 4294967296
  %v10_796b = bitcast i8* %stack_var_-8273 to i64*
  %v11_796b = load i64, i64* %stack_var_-8312, align 8
  %v12_796b = call i64 @function_74a0(i64* %v1_796b, i64 %v0_7963, i64 %v0_7960, i64 %v5_796b, i32 0, i64* %v10_796b, i64 %v11_796b)
  store i64 %v12_796b, i64* %rax.global-to-local, align 8
  %v3_7970 = load i8, i8* %stack_var_-8273, align 1
  %v12_7970 = icmp eq i8 %v3_7970, 0
  store i64 %v12_796b, i64* @rbp, align 8
  br i1 %v12_7970, label %dec_label_pc_7983, label %dec_label_pc_797a

dec_label_pc_797a:                                ; preds = %dec_label_pc_7910
  %v0_797a = load i64, i64* @r15, align 8
  %v4_797a = trunc i64 %v0_797a to i8
  %v5_797a = icmp eq i8 %v4_797a, 0
  %v1_797d = icmp eq i1 %v5_797a, false
  br i1 %v1_797d, label %dec_label_pc_7bd8, label %dec_label_pc_7983

dec_label_pc_7983:                                ; preds = %dec_label_pc_7bf8, %dec_label_pc_797a, %dec_label_pc_7910
  %v2_7983 = icmp eq i32 %v1_791b, 0
  br i1 %v2_7983, label %dec_label_pc_79ba, label %dec_label_pc_7988

dec_label_pc_7988:                                ; preds = %dec_label_pc_7983
  store i64 4, i64* @rdi, align 8
  %v1_798d = call i64 @function_5c50(i64 4)
  store i64 %v1_798d, i64* %rax.global-to-local, align 8
  %v4_7992 = trunc i64 %v1_798d to i8
  %v5_7992 = icmp eq i8 %v4_7992, 0
  %v1_7994 = icmp eq i1 %v5_7992, false
  br i1 %v1_7994, label %dec_label_pc_7c48, label %dec_label_pc_799a

dec_label_pc_799a:                                ; preds = %dec_label_pc_7c48, %dec_label_pc_7988
  store i64 ptrtoint (i64* @global_var_220060.150 to i64), i64* @rdi, align 8
  %v2_79a1 = call i64 @function_72f0(i64* nonnull @global_var_220060.150)
  store i64 %v2_79a1, i64* %rax.global-to-local, align 8
  %sext39 = mul i64 %v0_791b, 4294967296
  %v1_79a6 = sdiv i64 %sext39, 4294967296
  store i64 %v1_79a6, i64* @rdi, align 8
  %v2_79a9 = inttoptr i64 %v1_79a6 to i64*
  %v3_79a9 = call i64 @function_72f0(i64* %v2_79a9)
  store i64 %v3_79a9, i64* %rax.global-to-local, align 8
  store i64 ptrtoint (i64* @global_var_220070.153 to i64), i64* @rdi, align 8
  %v2_79b5 = call i64 @function_72f0(i64* nonnull @global_var_220070.153)
  store i64 %v2_79b5, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_79ba

dec_label_pc_79ba:                                ; preds = %dec_label_pc_799a, %dec_label_pc_7983
  %v1_79ba = icmp eq i64 %arg7, 0
  br i1 %v1_79ba, label %dec_label_pc_7c08, label %dec_label_pc_79c3

dec_label_pc_79c3:                                ; preds = %dec_label_pc_79ba
  %v0_79c3 = load i8, i8* @global_var_2213a8.128, align 1
  %v1_79c3 = zext i8 %v0_79c3 to i64
  store i64 %v1_79c3, i64* @r14, align 8
  %v5_79cb = icmp eq i8 %v0_79c3, 0
  %v1_79ce = icmp eq i1 %v5_79cb, false
  br i1 %v1_79ce, label %dec_label_pc_7b80, label %dec_label_pc_79d4

dec_label_pc_79d4:                                ; preds = %dec_label_pc_7b80, %dec_label_pc_79c3
  %v0_79d4 = load i64, i64* @rbp, align 8
  store i64 %v0_79d4, i64* %r10.global-to-local, align 8
  store i64 0, i64* %r9.global-to-local, align 8
  br label %dec_label_pc_79da

dec_label_pc_79da:                                ; preds = %dec_label_pc_7cef, %dec_label_pc_7cb8, %dec_label_pc_7bbd, %dec_label_pc_79d4
  %v0_79e8 = phi i64 [ 1, %dec_label_pc_7cef ], [ 0, %dec_label_pc_7cb8 ], [ %v0_79e8.pre, %dec_label_pc_7bbd ], [ 0, %dec_label_pc_79d4 ]
  %v0_79e3 = phi i64 [ %v4_7d02, %dec_label_pc_7cef ], [ %v0_7cb8, %dec_label_pc_7cb8 ], [ %v0_79e3.pre, %dec_label_pc_7bbd ], [ %v0_79d4, %dec_label_pc_79d4 ]
  store i64 1, i64* @rsi, align 8
  store i64 %arg7, i64* @rdi, align 8
  %v0_79fa = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_79fa, i64* %r15.global-to-local, align 8
  %v1_7a02 = inttoptr i64 %v0_79fa to i8*
  %v2_7a02 = load i8, i8* %v1_7a02, align 1
  %v12_7a02 = icmp eq i8 %v2_7a02, 47
  store i64 ptrtoint (i8** @global_var_17c30.292 to i64), i64* @rsi, align 8
  store i64 %v0_79fa, i64* @r8, align 8
  store i64 %v0_79fa, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  %v3_7a2d = select i1 %v12_7a02, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 ptrtoint ([2 x i8]* @global_var_17f4d.291 to i64)
  store i64 %v3_7a2d, i64* @rcx, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v6_7a33 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* bitcast (i8** @global_var_17c30.292 to i8*))
  %v8_7a33 = sext i32 %v6_7a33 to i64
  store i64 %v8_7a33, i64* %rax.global-to-local, align 8
  %v0_7a38 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_7a38, i64* @rdi, align 8
  %v1_7a3b = inttoptr i64 %v0_7a38 to i64*
  call void @free(i64* %v1_7a3b)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %sext40 = mul i64 %v0_79fa, 4294967296
  %v4_7a40 = sdiv i64 %sext40, 4294967296
  store i64 %v4_7a40, i64* @rdi, align 8
  %v1_7a48 = inttoptr i64 %v4_7a40 to i64*
  call void @free(i64* %v1_7a48)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v1_7a4d = icmp eq i64 %v0_7920, 0
  %sext41 = mul i64 %v0_79e8, 4294967296
  %v4_7a50 = sdiv i64 %sext41, 4294967296
  store i64 %v4_7a50, i64* %r9.global-to-local, align 8
  %sext42 = mul i64 %v0_79e3, 4294967296
  %v4_7a55 = sdiv i64 %sext42, 4294967296
  store i64 %v4_7a55, i64* %r10.global-to-local, align 8
  br i1 %v1_7a4d, label %dec_label_pc_7c1a, label %dec_label_pc_7a60

dec_label_pc_7a60:                                ; preds = %dec_label_pc_7c08, %dec_label_pc_79da
  %v0_7c75 = phi i64 [ 0, %dec_label_pc_7c08 ], [ %v4_7a50, %dec_label_pc_79da ]
  %v0_7c70 = phi i64 [ %v0_7c11, %dec_label_pc_7c08 ], [ %v4_7a55, %dec_label_pc_79da ]
  %v0_7a60 = load i8, i8* @global_var_221318.63, align 1
  %v7_7a60 = icmp eq i8 %v0_7a60, 0
  br i1 %v7_7a60, label %dec_label_pc_7a8d, label %dec_label_pc_7a69

dec_label_pc_7a69:                                ; preds = %dec_label_pc_7a60
  %v1_7a69 = add i64 %v0_7920, 24
  %v2_7a69 = inttoptr i64 %v1_7a69 to i64*
  %v3_7a69 = load i64, i64* %v2_7a69, align 8
  store i64 %v3_7a69, i64* @rdx, align 8
  %v1_7a6d = add i64 %v0_7920, 32
  %v2_7a6d = inttoptr i64 %v1_7a6d to i64*
  %v3_7a6d = load i64, i64* %v2_7a6d, align 8
  %v2_7a71 = sub i64 %v3_7a6d, %v3_7a69
  store i64 %v2_7a71, i64* @rax, align 8
  %tmp206 = icmp ult i64 %v2_7a71, 8
  br i1 %tmp206, label %dec_label_pc_7c68, label %dec_label_pc_7a7e

dec_label_pc_7a7e:                                ; preds = %dec_label_pc_7c68, %dec_label_pc_7a69
  %v1_7a85 = phi i64 [ %v3_7c7f, %dec_label_pc_7c68 ], [ %v3_7a69, %dec_label_pc_7a69 ]
  %v0_7a7e = load i64, i64* @global_var_2211f8.162, align 8
  store i64 %v0_7a7e, i64* %rax.global-to-local, align 8
  %v2_7a85 = inttoptr i64 %v1_7a85 to i64*
  store i64 %v0_7a7e, i64* %v2_7a85, align 8
  %v3_7a88 = load i64, i64* %v2_7a69, align 8
  %v4_7a88 = add i64 %v3_7a88, 8
  store i64 %v4_7a88, i64* %v2_7a69, align 8
  %v0_7a99.pre = load i64, i64* %r10.global-to-local, align 8
  %v1_7aa1.pre = load i64, i64* %r9.global-to-local, align 8
  br label %dec_label_pc_7a8d

dec_label_pc_7a8d:                                ; preds = %dec_label_pc_7a7e, %dec_label_pc_7a60
  %v1_7aa1 = phi i64 [ %v1_7aa1.pre, %dec_label_pc_7a7e ], [ %v0_7c75, %dec_label_pc_7a60 ]
  %v0_7a99 = phi i64 [ %v0_7a99.pre, %dec_label_pc_7a7e ], [ %v0_7c70, %dec_label_pc_7a60 ]
  %v3_7a8d = load i8*, i8** %stack_var_-8272, align 8
  %v4_7a8d = ptrtoint i8* %v3_7a8d to i64
  %v0_7a92 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_7a92 = ptrtoint %_IO_FILE* %v0_7a92 to i64
  store i64 %v1_7a92, i64* @rcx, align 8
  store i64 %v0_7a99, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %v2_7aa1 = add i64 %v4_7a8d, %v1_7aa1
  store i64 %v2_7aa1, i64* @rdi, align 8
  %v1_7aa4 = inttoptr i64 %v2_7aa1 to i64*
  %v5_7aa4 = trunc i64 %v0_7a99 to i32
  %v8_7aa4 = call i32 @fwrite_unlocked(i64* %v1_7aa4, i32 1, i32 %v5_7aa4, %_IO_FILE* %v0_7a92)
  %v0_7aa9 = load i64, i64* @global_var_2211f8.162, align 8
  %v1_7ab0 = load i64, i64* @rbp, align 8
  %v2_7ab0 = add i64 %v1_7ab0, %v0_7aa9
  store i64 %v2_7ab0, i64* @rax, align 8
  %v0_7ab3 = load i8, i8* @global_var_221318.63, align 1
  %v7_7ab3 = icmp eq i8 %v0_7ab3, 0
  store i64 %v2_7ab0, i64* @global_var_2211f8.162, align 8
  br i1 %v7_7ab3, label %dec_label_pc_7ae0, label %dec_label_pc_7ac3

dec_label_pc_7ac3:                                ; preds = %dec_label_pc_7a8d
  %v1_7ac3 = add i64 %v0_7920, 24
  %v2_7ac3 = inttoptr i64 %v1_7ac3 to i64*
  %v3_7ac3 = load i64, i64* %v2_7ac3, align 8
  store i64 %v3_7ac3, i64* @rcx, align 8
  %v1_7ac7 = add i64 %v0_7920, 32
  %v2_7ac7 = inttoptr i64 %v1_7ac7 to i64*
  %v3_7ac7 = load i64, i64* %v2_7ac7, align 8
  %v2_7acb = sub i64 %v3_7ac7, %v3_7ac3
  store i64 %v2_7acb, i64* @rdx, align 8
  %tmp207 = icmp ult i64 %v2_7acb, 8
  br i1 %tmp207, label %dec_label_pc_7c98, label %dec_label_pc_7ad8

dec_label_pc_7ad8:                                ; preds = %dec_label_pc_7c98, %dec_label_pc_7ac3
  %v1_7ad8 = phi i64 [ %v3_7ca5, %dec_label_pc_7c98 ], [ %v3_7ac3, %dec_label_pc_7ac3 ]
  %v0_7ad8 = phi i64 [ %v0_7ca9, %dec_label_pc_7c98 ], [ %v2_7ab0, %dec_label_pc_7ac3 ]
  %v2_7ad8 = inttoptr i64 %v1_7ad8 to i64*
  store i64 %v0_7ad8, i64* %v2_7ad8, align 8
  %v3_7adb = load i64, i64* %v2_7ac3, align 8
  %v4_7adb = add i64 %v3_7adb, 8
  store i64 %v4_7adb, i64* %v2_7ac3, align 8
  br label %dec_label_pc_7ae0

dec_label_pc_7ae0:                                ; preds = %dec_label_pc_7c1a, %dec_label_pc_7ad8, %dec_label_pc_7a8d
  br i1 %v1_79ba, label %dec_label_pc_7b30, label %dec_label_pc_7ae5

dec_label_pc_7ae5:                                ; preds = %dec_label_pc_7ae0
  %v0_7ae5 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_7ae5 = ptrtoint %_IO_FILE* %v0_7ae5 to i64
  store i64 %v1_7ae5, i64* @rcx, align 8
  store i64 ptrtoint (i64* @global_var_17c44.293 to i64), i64* @rdi, align 8
  store i64 6, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %v8_7afd = call i32 @fwrite_unlocked(i64* nonnull @global_var_17c44.293, i32 1, i32 6, %_IO_FILE* %v0_7ae5)
  %v10_7afd = sext i32 %v8_7afd to i64
  store i64 %v10_7afd, i64* %rax.global-to-local, align 8
  %v0_7b02 = load i64, i64* @r14, align 8
  %v4_7b02 = trunc i64 %v0_7b02 to i8
  %v5_7b02 = icmp eq i8 %v4_7b02, 0
  br i1 %v5_7b02, label %dec_label_pc_7b30, label %dec_label_pc_7b07

dec_label_pc_7b07:                                ; preds = %dec_label_pc_7ae5
  %v3_7b07 = load i8*, i8** %stack_var_-8272, align 8
  %v4_7b07 = ptrtoint i8* %v3_7b07 to i64
  store i64 %v4_7b07, i64* %rax.global-to-local, align 8
  %v0_7b0c = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_7b0c = ptrtoint %_IO_FILE* %v0_7b0c to i64
  store i64 %v1_7b0c, i64* @rdi, align 8
  %v1_7b13 = load i64, i64* @rbp, align 8
  %v3_7b13 = add i64 %v4_7b07, -1
  %v4_7b13 = add i64 %v3_7b13, %v1_7b13
  %v5_7b13 = inttoptr i64 %v4_7b13 to i8*
  %v6_7b13 = load i8, i8* %v5_7b13, align 1
  %v7_7b13 = zext i8 %v6_7b13 to i64
  store i64 %v7_7b13, i64* @rdx, align 8
  %v2_7b18 = add i64 %v1_7b0c, 40
  %v3_7b18 = inttoptr i64 %v2_7b18 to i64*
  %v4_7b18 = load i64, i64* %v3_7b18, align 8
  store i64 %v4_7b18, i64* %rax.global-to-local, align 8
  %v3_7b1c = add i64 %v1_7b0c, 48
  %v4_7b1c = inttoptr i64 %v3_7b1c to i64*
  %v5_7b1c = load i64, i64* %v4_7b1c, align 8
  %v11_7b1c = icmp ult i64 %v4_7b18, %v5_7b1c
  %v1_7b20 = icmp eq i1 %v11_7b1c, false
  br i1 %v1_7b20, label %dec_label_pc_7cd0, label %dec_label_pc_7b26

dec_label_pc_7b26:                                ; preds = %dec_label_pc_7b07
  %v1_7b26 = add i64 %v4_7b18, 1
  store i64 %v1_7b26, i64* @rcx, align 8
  store i64 %v1_7b26, i64* %v3_7b18, align 8
  %v0_7b2e = load i64, i64* @rdx, align 8
  %v1_7b2e = trunc i64 %v0_7b2e to i8
  %v2_7b2e = load i64, i64* %rax.global-to-local, align 8
  %v3_7b2e = inttoptr i64 %v2_7b2e to i8*
  store i8 %v1_7b2e, i8* %v3_7b2e, align 1
  br label %dec_label_pc_7b30

dec_label_pc_7b30:                                ; preds = %dec_label_pc_7cd0, %dec_label_pc_7b26, %dec_label_pc_7ae5, %dec_label_pc_7ae0
  %v3_7b30 = load i8*, i8** %stack_var_-8272, align 8
  %v4_7b30 = ptrtoint i8* %v3_7b30 to i64
  store i64 %v4_7b30, i64* @rdi, align 8
  %v3_7b35 = load i64, i64* %stack_var_-8312, align 8
  %v14_7b35 = icmp eq i64 %v4_7b30, %v3_7b35
  br i1 %v14_7b35, label %dec_label_pc_7b45, label %dec_label_pc_7b3b

dec_label_pc_7b3b:                                ; preds = %dec_label_pc_7b30
  %v1_7b3b = load i64, i64* @r13, align 8
  %v12_7b3b = icmp eq i64 %v4_7b30, %v1_7b3b
  br i1 %v12_7b3b, label %dec_label_pc_7b45, label %dec_label_pc_7b40

dec_label_pc_7b40:                                ; preds = %dec_label_pc_7b3b
  %v1_7b40 = bitcast i8* %v3_7b30 to i64*
  call void @free(i64* %v1_7b40)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_7b45

dec_label_pc_7b45:                                ; preds = %dec_label_pc_7b40, %dec_label_pc_7b3b, %dec_label_pc_7b30
  %v3_7b45 = load i8, i8* %stack_var_-8273, align 1
  %v4_7b45 = sext i8 %v3_7b45 to i64
  %v1_7b4a = load i64, i64* @rbp, align 8
  %v2_7b4a = add i64 %v1_7b4a, %v4_7b45
  store i64 %v2_7b4a, i64* %rax.global-to-local, align 8
  %v1_7b55 = call i64 @__readfsqword(i64 40)
  %v2_7b55 = xor i64 %v1_7b55, %v0_794b
  %v3_7b55 = icmp eq i64 %v2_7b55, 0
  store i64 %v2_7b55, i64* @rbx, align 8
  %v1_7b5e = icmp eq i1 %v3_7b55, false
  br i1 %v1_7b5e, label %dec_label_pc_7d0c, label %dec_label_pc_7b64

dec_label_pc_7b64:                                ; preds = %dec_label_pc_7b45
  %v2_7b6b = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_7b6b, i64* @rbx, align 8
  store i64 %v0_791e, i64* @rbp, align 8
  store i64 %v0_7919, i64* @r12, align 8
  store i64 %v0_7917, i64* @r13, align 8
  store i64 %v0_7912, i64* @r14, align 8
  store i64 %v0_7910, i64* @r15, align 8
  %v0_7b75 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_7b75

dec_label_pc_7b80:                                ; preds = %dec_label_pc_79c3
  %v0_7b80 = load i8, i8* bitcast (i32* @global_var_2213a9.250 to i8*), align 4
  %v1_7b80 = zext i8 %v0_7b80 to i64
  store i64 %v1_7b80, i64* @r14, align 8
  %v5_7b88 = icmp eq i8 %v0_7b80, 0
  br i1 %v5_7b88, label %dec_label_pc_79d4, label %dec_label_pc_7b91

dec_label_pc_7b91:                                ; preds = %dec_label_pc_7b80
  %v3_7b91 = load i8, i8* %stack_var_-8273, align 1
  %v12_7b91 = icmp eq i8 %v3_7b91, 0
  %v1_7b96 = icmp eq i1 %v12_7b91, false
  br i1 %v1_7b96, label %dec_label_pc_7cb8, label %dec_label_pc_7b9c

dec_label_pc_7b9c:                                ; preds = %dec_label_pc_7b91
  %v3_7b9c = load i8*, i8** %stack_var_-8272, align 8
  %v4_7b9c = ptrtoint i8* %v3_7b9c to i64
  store i64 %v4_7b9c, i64* %rax.global-to-local, align 8
  %v0_7ba1 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_7ba1 = ptrtoint %_IO_FILE* %v0_7ba1 to i64
  store i64 %v1_7ba1, i64* @rdi, align 8
  %v0_7ba8 = load i64, i64* @rbp, align 8
  %v1_7ba8 = add i64 %v0_7ba8, -2
  store i64 %v1_7ba8, i64* %r10.global-to-local, align 8
  %v2_7bac = load i8, i8* %v3_7b9c, align 1
  %v3_7bac = zext i8 %v2_7bac to i64
  store i64 %v3_7bac, i64* @rdx, align 8
  %v2_7baf = add i64 %v1_7ba1, 40
  %v3_7baf = inttoptr i64 %v2_7baf to i64*
  %v4_7baf = load i64, i64* %v3_7baf, align 8
  store i64 %v4_7baf, i64* %rax.global-to-local, align 8
  %v3_7bb3 = add i64 %v1_7ba1, 48
  %v4_7bb3 = inttoptr i64 %v3_7bb3 to i64*
  %v5_7bb3 = load i64, i64* %v4_7bb3, align 8
  %v11_7bb3 = icmp ult i64 %v4_7baf, %v5_7bb3
  %v1_7bb7 = icmp eq i1 %v11_7bb3, false
  br i1 %v1_7bb7, label %dec_label_pc_7cef, label %dec_label_pc_7bbd

dec_label_pc_7bbd:                                ; preds = %dec_label_pc_7b9c
  %v1_7bbd = add i64 %v4_7baf, 1
  store i64 %v1_7bbd, i64* @rcx, align 8
  store i64 1, i64* %r9.global-to-local, align 8
  store i64 %v1_7bbd, i64* %v3_7baf, align 8
  %v0_7bcb = load i64, i64* @rdx, align 8
  %v1_7bcb = trunc i64 %v0_7bcb to i8
  %v2_7bcb = load i64, i64* %rax.global-to-local, align 8
  %v3_7bcb = inttoptr i64 %v2_7bcb to i8*
  store i8 %v1_7bcb, i8* %v3_7bcb, align 1
  %v0_79e3.pre = load i64, i64* %r10.global-to-local, align 8
  %v0_79e8.pre = load i64, i64* %r9.global-to-local, align 8
  br label %dec_label_pc_79da

dec_label_pc_7bd8:                                ; preds = %dec_label_pc_797a
  %v0_7bd8 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_7bd8 = ptrtoint %_IO_FILE* %v0_7bd8 to i64
  store i64 %v1_7bd8, i64* @rdi, align 8
  %v2_7bdf = add i64 %v1_7bd8, 40
  %v3_7bdf = inttoptr i64 %v2_7bdf to i64*
  %v4_7bdf = load i64, i64* %v3_7bdf, align 8
  store i64 %v4_7bdf, i64* %rax.global-to-local, align 8
  %v3_7be3 = add i64 %v1_7bd8, 48
  %v4_7be3 = inttoptr i64 %v3_7be3 to i64*
  %v5_7be3 = load i64, i64* %v4_7be3, align 8
  %v11_7be3 = icmp ult i64 %v4_7bdf, %v5_7be3
  %v1_7be7 = icmp eq i1 %v11_7be3, false
  br i1 %v1_7be7, label %dec_label_pc_7ce0, label %dec_label_pc_7bed

dec_label_pc_7bed:                                ; preds = %dec_label_pc_7bd8
  %v1_7bed = add i64 %v4_7bdf, 1
  store i64 %v1_7bed, i64* @rdx, align 8
  store i64 %v1_7bed, i64* %v3_7bdf, align 8
  %v0_7bf5 = load i64, i64* %rax.global-to-local, align 8
  %v1_7bf5 = inttoptr i64 %v0_7bf5 to i8*
  store i8 32, i8* %v1_7bf5, align 1
  br label %dec_label_pc_7bf8

dec_label_pc_7bf8:                                ; preds = %dec_label_pc_7ce0, %dec_label_pc_7bed
  %v0_7bf8 = load i64, i64* @global_var_2211f8.162, align 8
  %v1_7bf8 = add i64 %v0_7bf8, 1
  store i64 %v1_7bf8, i64* @global_var_2211f8.162, align 8
  br label %dec_label_pc_7983

dec_label_pc_7c08:                                ; preds = %dec_label_pc_79ba
  store i64 0, i64* %r9.global-to-local, align 8
  store i64 0, i64* @r14, align 8
  %v1_7c0e = icmp eq i64 %v0_7920, 0
  %v0_7c11 = load i64, i64* @rbp, align 8
  store i64 %v0_7c11, i64* %r10.global-to-local, align 8
  %v1_7c14 = icmp eq i1 %v1_7c0e, false
  br i1 %v1_7c14, label %dec_label_pc_7a60, label %dec_label_pc_7c1a

dec_label_pc_7c1a:                                ; preds = %dec_label_pc_7c08, %dec_label_pc_79da
  %v1_7c2e = phi i64 [ 0, %dec_label_pc_7c08 ], [ %v4_7a50, %dec_label_pc_79da ]
  %v0_7c26 = phi i64 [ %v0_7c11, %dec_label_pc_7c08 ], [ %v4_7a55, %dec_label_pc_79da ]
  %v3_7c1a = load i8*, i8** %stack_var_-8272, align 8
  %v4_7c1a = ptrtoint i8* %v3_7c1a to i64
  %v0_7c1f = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_7c1f = ptrtoint %_IO_FILE* %v0_7c1f to i64
  store i64 %v1_7c1f, i64* @rcx, align 8
  store i64 %v0_7c26, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %v2_7c2e = add i64 %v4_7c1a, %v1_7c2e
  store i64 %v2_7c2e, i64* @rdi, align 8
  %v1_7c31 = inttoptr i64 %v2_7c2e to i64*
  %v5_7c31 = trunc i64 %v0_7c26 to i32
  %v8_7c31 = call i32 @fwrite_unlocked(i64* %v1_7c31, i32 1, i32 %v5_7c31, %_IO_FILE* %v0_7c1f)
  %v10_7c31 = sext i32 %v8_7c31 to i64
  store i64 %v10_7c31, i64* %rax.global-to-local, align 8
  %v0_7c36 = load i64, i64* @global_var_2211f8.162, align 8
  %v1_7c36 = load i64, i64* @rbp, align 8
  %v2_7c36 = add i64 %v1_7c36, %v0_7c36
  store i64 %v2_7c36, i64* @global_var_2211f8.162, align 8
  br label %dec_label_pc_7ae0

dec_label_pc_7c48:                                ; preds = %dec_label_pc_7988
  store i64 ptrtoint (i64* @global_var_220060.150 to i64), i64* @rdi, align 8
  %v2_7c4f = call i64 @function_72f0(i64* nonnull @global_var_220060.150)
  store i64 %v2_7c4f, i64* %rax.global-to-local, align 8
  store i64 ptrtoint (i64* @global_var_220070.153 to i64), i64* @rdi, align 8
  %v2_7c5b = call i64 @function_72f0(i64* nonnull @global_var_220070.153)
  store i64 %v2_7c5b, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_799a

dec_label_pc_7c68:                                ; preds = %dec_label_pc_7a69
  store i64 8, i64* @rsi, align 8
  store i64 %v0_7920, i64* @rdi, align 8
  %v3_7c7a = call i64 @_obstack_newchunk(i64 %v0_7920, i64 8, i64 %v3_7a69)
  store i64 %v3_7c7a, i64* %rax.global-to-local, align 8
  %v3_7c7f = load i64, i64* %v2_7a69, align 8
  store i64 %v3_7c7f, i64* @rdx, align 8
  %sext43 = mul i64 %v0_7c70, 4294967296
  %v4_7c83 = sdiv i64 %sext43, 4294967296
  store i64 %v4_7c83, i64* %r10.global-to-local, align 8
  store i64 %v0_7c75, i64* %r9.global-to-local, align 8
  br label %dec_label_pc_7a7e

dec_label_pc_7c98:                                ; preds = %dec_label_pc_7ac3
  store i64 8, i64* @rsi, align 8
  store i64 %v0_7920, i64* @rdi, align 8
  %v3_7ca0 = call i64 @_obstack_newchunk(i64 %v0_7920, i64 8, i64 %v2_7acb)
  store i64 %v3_7ca0, i64* %rax.global-to-local, align 8
  %v3_7ca5 = load i64, i64* %v2_7ac3, align 8
  store i64 %v3_7ca5, i64* @rcx, align 8
  %v0_7ca9 = load i64, i64* @global_var_2211f8.162, align 8
  store i64 %v0_7ca9, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_7ad8

dec_label_pc_7cb8:                                ; preds = %dec_label_pc_7b91
  %v0_7cb8 = load i64, i64* @rbp, align 8
  store i64 %v0_7cb8, i64* %r10.global-to-local, align 8
  store i64 0, i64* %r9.global-to-local, align 8
  store i64 0, i64* @r14, align 8
  br label %dec_label_pc_79da

dec_label_pc_7cd0:                                ; preds = %dec_label_pc_7b07
  store i64 %v7_7b13, i64* @rsi, align 8
  %v4_7cd3 = zext i8 %v6_7b13 to i32
  %v5_7cd3 = call i32 @__overflow(%_IO_FILE* %v0_7b0c, i32 %v4_7cd3)
  %v7_7cd3 = sext i32 %v5_7cd3 to i64
  store i64 %v7_7cd3, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_7b30

dec_label_pc_7ce0:                                ; preds = %dec_label_pc_7bd8
  store i64 32, i64* @rsi, align 8
  %v5_7ce5 = call i32 @__overflow(%_IO_FILE* %v0_7bd8, i32 32)
  %v7_7ce5 = sext i32 %v5_7ce5 to i64
  store i64 %v7_7ce5, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_7bf8

dec_label_pc_7cef:                                ; preds = %dec_label_pc_7b9c
  store i64 %v3_7bac, i64* @rsi, align 8
  %v4_7cf7 = zext i8 %v2_7bac to i32
  %v5_7cf7 = call i32 @__overflow(%_IO_FILE* %v0_7ba1, i32 %v4_7cf7)
  %v7_7cf7 = sext i32 %v5_7cf7 to i64
  store i64 %v7_7cf7, i64* %rax.global-to-local, align 8
  store i64 1, i64* %r9.global-to-local, align 8
  %sext45 = mul i64 %v1_7ba8, 4294967296
  %v4_7d02 = sdiv i64 %sext45, 4294967296
  store i64 %v4_7d02, i64* %r10.global-to-local, align 8
  br label %dec_label_pc_79da

dec_label_pc_7d0c:                                ; preds = %dec_label_pc_7b45
  call void @__stack_chk_fail()
  %v0_7d24 = load i64, i64* @rsi, align 8
  store i64 %v0_7d24, i64* %r15.global-to-local, align 8
  store i64 %v4_7b30, i64* @r14, align 8
  %v0_7d30 = load i64, i64* @rdx, align 8
  store i64 %v0_7d30, i64* @r13, align 8
  %v0_7d33 = load i64, i64* @rcx, align 8
  store i64 %v0_7d33, i64* @r12, align 8
  %v16_7d36 = ptrtoint i64* %stack_var_-8384 to i64
  %v4_7d3a = trunc i64 %v0_7d24 to i8
  %v5_7d3a = icmp eq i8 %v4_7d3a, 0
  %v0_7d3d = load i8, i8* @global_var_221312.58, align 1
  %v1_7d3d = zext i8 %v0_7d3d to i64
  store i64 %v1_7d3d, i64* %rax.global-to-local, align 8
  %v5_7da0 = icmp eq i8 %v0_7d3d, 0
  br i1 %v5_7d3a, label %dec_label_pc_7da0, label %dec_label_pc_7d46

dec_label_pc_7d46:                                ; preds = %dec_label_pc_7d0c
  %v1_7d48 = add i64 %v4_7b30, 8
  %v2_7d48 = inttoptr i64 %v1_7d48 to i64*
  %v3_7d48 = load i64, i64* %v2_7d48, align 8
  store i64 %v3_7d48, i64* @rbp, align 8
  %v1_7d4c = icmp eq i1 %v5_7da0, false
  br i1 %v1_7d4c, label %dec_label_pc_7ec8, label %dec_label_pc_7d52

dec_label_pc_7d52:                                ; preds = %dec_label_pc_7e38.dec_label_pc_7d52_crit_edge, %dec_label_pc_7da0, %dec_label_pc_7d46
  %v0_7d75 = phi i64 [ %v0_7d75.pre, %dec_label_pc_7e38.dec_label_pc_7d52_crit_edge ], [ %v2_7da2, %dec_label_pc_7da0 ], [ %v3_7d48, %dec_label_pc_7d46 ]
  %v0_7d6c = phi i64 [ %v0_7d6c.pre, %dec_label_pc_7e38.dec_label_pc_7d52_crit_edge ], [ %v0_7d30, %dec_label_pc_7da0 ], [ %v0_7d30, %dec_label_pc_7d46 ]
  %v0_7d64 = phi i64 [ %v0_7d64.pre, %dec_label_pc_7e38.dec_label_pc_7d52_crit_edge ], [ %v0_7d24, %dec_label_pc_7da0 ], [ %v0_7d24, %dec_label_pc_7d46 ]
  %v0_7d68 = phi i64 [ %v0_7d52.pre, %dec_label_pc_7e38.dec_label_pc_7d52_crit_edge ], [ %v4_7b30, %dec_label_pc_7da0 ], [ %v4_7b30, %dec_label_pc_7d46 ]
  %v1_7d52 = add i64 %v0_7d68, 196
  %v2_7d52 = inttoptr i64 %v1_7d52 to i32*
  %v3_7d52 = load i32, i32* %v2_7d52, align 4
  %v4_7d52 = zext i32 %v3_7d52 to i64
  store i64 %v4_7d52, i64* @rdx, align 8
  %v0_7d59 = load i32, i32* @global_var_2212d0.129, align 4
  %v1_7d59 = sext i32 %v0_7d59 to i64
  store i64 %v1_7d59, i64* @rsi, align 8
  %v2_7d64 = and i64 %v0_7d64, 4294967295
  %v9_7d64 = xor i64 %v2_7d64, 1
  store i64 %v9_7d64, i64* @r15, align 8
  %v1_7d68 = add i64 %v0_7d68, 16
  %v2_7d68 = inttoptr i64 %v1_7d68 to i64*
  %v3_7d68 = load i64, i64* %v2_7d68, align 8
  store i64 %v3_7d68, i64* %stack_var_-8400, align 8
  store i64 %v0_7d6c, i64* %r9.global-to-local, align 8
  store i64 %v9_7d64, i64* @r8, align 8
  store i64 0, i64* @rcx, align 8
  store i64 %v0_7d75, i64* @rdi, align 8
  %v12_7d78 = call i64 @function_7910(i64 %v0_7d75, i64 %v1_7d59, i32 %v3_7d52, i32 0, i64 %v9_7d64, i64 %v0_7d6c, i64 %v3_7d68)
  store i64 %v12_7d78, i64* %rax.global-to-local, align 8
  store i64 %v12_7d78, i64* @rbx, align 8
  %v0_7d80 = call i64 @function_7360()
  %v2_7d85 = load i64, i64* %stack_var_-8400, align 8
  store i64 %v2_7d85, i64* %rax.global-to-local, align 8
  %v2_7d86 = load i64, i64* %stack_var_-8392, align 8
  store i64 %v2_7d86, i64* @rdx, align 8
  br label %dec_label_pc_7d87

dec_label_pc_7d87:                                ; preds = %dec_label_pc_7eb2, %dec_label_pc_7e94, %dec_label_pc_7e4c, %dec_label_pc_7d52
  %v0_7d87 = phi i64 [ %v0_7d87.pre, %dec_label_pc_7eb2 ], [ %v16_7d36, %dec_label_pc_7e94 ], [ %v16_7d36, %dec_label_pc_7e4c ], [ %v16_7d36, %dec_label_pc_7d52 ]
  %v1_7d87 = add i64 %v0_7d87, 24
  %v0_7d8b = load i64, i64* @rbx, align 8
  store i64 %v0_7d8b, i64* %rax.global-to-local, align 8
  %v1_7d8e = inttoptr i64 %v1_7d87 to i64*
  %v2_7d8e = load i64, i64* %v1_7d8e, align 8
  store i64 %v2_7d8e, i64* @rbx, align 8
  %v3_7d8e = add i64 %v0_7d87, 32
  %v1_7d8f = inttoptr i64 %v3_7d8e to i64*
  %v2_7d8f = load i64, i64* %v1_7d8f, align 8
  store i64 %v2_7d8f, i64* @rbp, align 8
  %v3_7d8f = add i64 %v0_7d87, 40
  %v1_7d90 = inttoptr i64 %v3_7d8f to i64*
  %v2_7d90 = load i64, i64* %v1_7d90, align 8
  store i64 %v2_7d90, i64* @r12, align 8
  %v3_7d90 = add i64 %v0_7d87, 48
  %v1_7d92 = inttoptr i64 %v3_7d90 to i64*
  %v2_7d92 = load i64, i64* %v1_7d92, align 8
  store i64 %v2_7d92, i64* @r13, align 8
  %v3_7d92 = add i64 %v0_7d87, 56
  %v1_7d94 = inttoptr i64 %v3_7d92 to i64*
  %v2_7d94 = load i64, i64* %v1_7d94, align 8
  store i64 %v2_7d94, i64* @r14, align 8
  %v3_7d94 = add i64 %v0_7d87, 64
  %v1_7d96 = inttoptr i64 %v3_7d94 to i64*
  %v2_7d96 = load i64, i64* %v1_7d96, align 8
  store i64 %v2_7d96, i64* @r15, align 8
  ret i64 %v0_7d8b

dec_label_pc_7da0:                                ; preds = %dec_label_pc_7d0c
  %v1_7da2 = bitcast i8* %v3_7b30 to i64*
  %v2_7da2 = load i64, i64* %v1_7da2, align 8
  store i64 %v2_7da2, i64* @rbp, align 8
  br i1 %v5_7da0, label %dec_label_pc_7d52, label %dec_label_pc_7da7

dec_label_pc_7da7:                                ; preds = %dec_label_pc_7da0
  %v0_7da7 = load i8, i8* @global_var_221390.172, align 1
  %v7_7da7 = icmp eq i8 %v0_7da7, 0
  %v1_7dae = add i64 %v4_7b30, 185
  %v2_7dae = inttoptr i64 %v1_7dae to i8*
  %v3_7dae = load i8, i8* %v2_7dae, align 1
  %v4_7dae = zext i8 %v3_7dae to i64
  store i64 %v4_7dae, i64* @rdx, align 8
  %v1_7db5 = icmp eq i1 %v7_7da7, false
  br i1 %v1_7db5, label %dec_label_pc_7f88, label %dec_label_pc_7dbb

dec_label_pc_7dbb:                                ; preds = %dec_label_pc_7f88, %dec_label_pc_7da7
  %v1_7dbb = add i64 %v4_7b30, 48
  %v2_7dbb = inttoptr i64 %v1_7dbb to i32*
  %v3_7dbb = load i32, i32* %v2_7dbb, align 4
  %v4_7dbb = zext i32 %v3_7dbb to i64
  store i64 %v4_7dbb, i64* @r8, align 8
  br label %dec_label_pc_7dbf

dec_label_pc_7dbf:                                ; preds = %dec_label_pc_7ed8.dec_label_pc_7dbf_crit_edge, %dec_label_pc_7f90, %dec_label_pc_7dbb
  %v0_7def63 = phi i64 [ 4294967295, %dec_label_pc_7ed8.dec_label_pc_7dbf_crit_edge ], [ %v4_7dae, %dec_label_pc_7f90 ], [ %v4_7dae, %dec_label_pc_7dbb ]
  %v0_7dbf = phi i64 [ %v0_7dbf.pre, %dec_label_pc_7ed8.dec_label_pc_7dbf_crit_edge ], [ %v4_7b30, %dec_label_pc_7f90 ], [ %v4_7b30, %dec_label_pc_7dbb ]
  %v1_7dbf = add i64 %v0_7dbf, 184
  %v2_7dbf = inttoptr i64 %v1_7dbf to i8*
  %v3_7dbf = load i8, i8* %v2_7dbf, align 1
  %v4_7dbf = zext i8 %v3_7dbf to i64
  store i64 %v4_7dbf, i64* @rcx, align 8
  %v5_7dc7 = icmp eq i8 %v3_7dbf, 0
  %v1_7dc9 = icmp eq i1 %v5_7dc7, false
  br i1 %v1_7dc9, label %dec_label_pc_7dbf.dec_label_pc_7f12_crit_edge, label %dec_label_pc_7dcf

dec_label_pc_7dbf.dec_label_pc_7f12_crit_edge:    ; preds = %dec_label_pc_7dbf
  %v0_7f12.pre = load i64, i64* @r8, align 8
  br label %dec_label_pc_7f12

dec_label_pc_7dcf:                                ; preds = %dec_label_pc_7f00, %dec_label_pc_7dbf
  %v0_7def62 = phi i64 [ 0, %dec_label_pc_7f00 ], [ %v0_7def63, %dec_label_pc_7dbf ]
  %v0_7dcf = phi i64 [ %v4_7b30, %dec_label_pc_7f00 ], [ %v0_7dbf, %dec_label_pc_7dbf ]
  %v1_7dcf = add i64 %v0_7dcf, 168
  %v2_7dcf = inttoptr i64 %v1_7dcf to i32*
  %v3_7dcf = load i32, i32* %v2_7dcf, align 4
  %v4_7dcf = zext i32 %v3_7dcf to i64
  store i64 %v4_7dcf, i64* @rcx, align 8
  store i64 ptrtoint (i64* @global_var_16aa0.294 to i64), i64* %rax.global-to-local, align 8
  %v2_7ddd = mul nuw nsw i64 %v4_7dcf, 4
  %v3_7ddd = add i64 %v2_7ddd, ptrtoint (i64* @global_var_16aa0.294 to i64)
  %v4_7ddd = inttoptr i64 %v3_7ddd to i32*
  %v5_7ddd = load i32, i32* %v4_7ddd, align 4
  %v6_7ddd = zext i32 %v5_7ddd to i64
  store i64 %v6_7ddd, i64* %rax.global-to-local, align 8
  %v11_7de0 = icmp eq i32 %v5_7ddd, 7
  %v1_7de3 = zext i1 %v11_7de0 to i64
  %v3_7de3 = and i64 %v4_7dcf, 4294967040
  %v4_7de3 = or i64 %v1_7de3, %v3_7de3
  store i64 %v4_7de3, i64* @rcx, align 8
  %v11_7de6 = icmp eq i32 %v5_7ddd, 5
  br i1 %v11_7de6, label %dec_label_pc_7fa0, label %dec_label_pc_7def

dec_label_pc_7def:                                ; preds = %dec_label_pc_80f0, %dec_label_pc_7dcf
  %v0_816c = phi i64 [ 7, %dec_label_pc_80f0 ], [ %v6_7ddd, %dec_label_pc_7dcf ]
  %v0_7df7 = phi i64 [ %v0_7df765, %dec_label_pc_80f0 ], [ %v4_7de3, %dec_label_pc_7dcf ]
  %v0_7def = phi i64 [ %v0_7def61, %dec_label_pc_80f0 ], [ %v0_7def62, %dec_label_pc_7dcf ]
  %v4_7def = trunc i64 %v0_7def to i32
  %v5_7def = icmp eq i32 %v4_7def, 0
  %v1_7df1 = icmp eq i1 %v5_7def, false
  br i1 %v1_7df1, label %dec_label_pc_816c, label %dec_label_pc_7df7

dec_label_pc_7df7:                                ; preds = %dec_label_pc_7def
  %v4_7df7 = trunc i64 %v0_7df7 to i8
  %v5_7df7 = icmp eq i8 %v4_7df7, 0
  br i1 %v5_7df7, label %dec_label_pc_816c, label %dec_label_pc_7dff

dec_label_pc_7dff:                                ; preds = %dec_label_pc_7df7
  %v0_7dff = load i8, i8* @global_var_221390.172, align 1
  %v7_7dff = icmp eq i8 %v0_7dff, 0
  store i64 208, i64* @rcx, align 8
  %v1_7e0b = icmp eq i1 %v7_7dff, false
  br i1 %v1_7e0b, label %dec_label_pc_7e27, label %dec_label_pc_7e0d

dec_label_pc_7e0d:                                ; preds = %dec_label_pc_7dff
  store i64 13, i64* @rdi, align 8
  %v1_7e12 = call i64 @function_5c50(i64 13)
  store i64 %v1_7e12, i64* %rax.global-to-local, align 8
  %v1_7e17 = trunc i64 %v1_7e12 to i8
  %v6_7e17 = icmp eq i8 %v1_7e17, 0
  %v1_7e20 = select i1 %v6_7e17, i64 112, i64 208
  store i64 %v1_7e20, i64* @rcx, align 8
  br label %dec_label_pc_7e27

dec_label_pc_7e27:                                ; preds = %dec_label_pc_816c, %dec_label_pc_8150, %dec_label_pc_813d, %dec_label_pc_8114, %dec_label_pc_80d2, %dec_label_pc_80c0, %dec_label_pc_80a9, %dec_label_pc_807e, %dec_label_pc_8061, %dec_label_pc_8027, %dec_label_pc_7ff1, %dec_label_pc_7f6b, %dec_label_pc_7f5b, %dec_label_pc_7f4b, %dec_label_pc_7f3b, %dec_label_pc_7eef, %dec_label_pc_7e0d, %dec_label_pc_7dff
  %v0_7e2e = phi i64 [ %v2_816c, %dec_label_pc_816c ], [ 320, %dec_label_pc_8150 ], [ 352, %dec_label_pc_813d ], [ 224, %dec_label_pc_8114 ], [ %v1_80e4, %dec_label_pc_80d2 ], [ 96, %dec_label_pc_80c0 ], [ 304, %dec_label_pc_80a9 ], [ 272, %dec_label_pc_807e ], [ 336, %dec_label_pc_8061 ], [ 256, %dec_label_pc_8027 ], [ 80, %dec_label_pc_7ff1 ], [ %v3_7f7a, %dec_label_pc_7f6b ], [ 160, %dec_label_pc_7f5b ], [ 144, %dec_label_pc_7f4b ], [ 128, %dec_label_pc_7f3b ], [ 192, %dec_label_pc_7eef ], [ %v1_7e20, %dec_label_pc_7e0d ], [ 208, %dec_label_pc_7dff ]
  store i64 ptrtoint (i64* @global_var_220060.150 to i64), i64* @rbx, align 8
  %v2_7e2e = add i64 %v0_7e2e, ptrtoint (i64* @global_var_220060.150 to i64)
  br label %dec_label_pc_7e31

dec_label_pc_7e31:                                ; preds = %dec_label_pc_8000, %dec_label_pc_7e27
  %storemerge = phi i64 [ %v1_8000, %dec_label_pc_8000 ], [ %v2_7e2e, %dec_label_pc_7e27 ]
  store i64 %storemerge, i64* @rcx, align 8
  %v1_7e31 = add i64 %storemerge, 8
  %v2_7e31 = inttoptr i64 %v1_7e31 to i64*
  %v3_7e31 = load i64, i64* %v2_7e31, align 8
  %v10_7e31 = icmp eq i64 %v3_7e31, 0
  %v1_7e36 = icmp eq i1 %v10_7e31, false
  br i1 %v1_7e36, label %dec_label_pc_7e4c, label %dec_label_pc_7e38

dec_label_pc_7e38:                                ; preds = %dec_label_pc_7e31
  store i64 4, i64* @rdi, align 8
  %v1_7e3d = call i64 @function_5c50(i64 4)
  store i64 %v1_7e3d, i64* %rax.global-to-local, align 8
  %v4_7e42 = trunc i64 %v1_7e3d to i8
  %v5_7e42 = icmp eq i8 %v4_7e42, 0
  br i1 %v5_7e42, label %dec_label_pc_7e38.dec_label_pc_7d52_crit_edge, label %dec_label_pc_7e4a

dec_label_pc_7e38.dec_label_pc_7d52_crit_edge:    ; preds = %dec_label_pc_7e38
  %v0_7d52.pre = load i64, i64* @r14, align 8
  %v0_7d64.pre = load i64, i64* %r15.global-to-local, align 8
  %v0_7d6c.pre = load i64, i64* @r13, align 8
  %v0_7d75.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_7d52

dec_label_pc_7e4a:                                ; preds = %dec_label_pc_7e38
  store i64 0, i64* @rcx, align 8
  br label %dec_label_pc_7e4c

dec_label_pc_7e4c:                                ; preds = %dec_label_pc_7e4a, %dec_label_pc_7e31
  %v6_7e70 = phi i64 [ 0, %dec_label_pc_7e4a ], [ %storemerge, %dec_label_pc_7e31 ]
  %v0_7e4c = load i32, i32* @global_var_2212d0.129, align 4
  %v1_7e4c = sext i32 %v0_7e4c to i64
  store i64 %v1_7e4c, i64* @rsi, align 8
  %v0_7e53 = load i64, i64* @r14, align 8
  %v1_7e53 = add i64 %v0_7e53, 196
  %v2_7e53 = inttoptr i64 %v1_7e53 to i32*
  %v3_7e53 = load i32, i32* %v2_7e53, align 4
  %v4_7e53 = zext i32 %v3_7e53 to i64
  store i64 %v4_7e53, i64* @rdx, align 8
  %v0_7e5e = load i64, i64* %r15.global-to-local, align 8
  %v2_7e5e = and i64 %v0_7e5e, 4294967295
  %v9_7e5e = xor i64 %v2_7e5e, 1
  store i64 %v9_7e5e, i64* @r15, align 8
  %v1_7e62 = add i64 %v0_7e53, 16
  %v2_7e62 = inttoptr i64 %v1_7e62 to i64*
  %v3_7e62 = load i64, i64* %v2_7e62, align 8
  store i64 %v3_7e62, i64* %stack_var_-8400, align 8
  %v0_7e66 = load i64, i64* @rbp, align 8
  store i64 %v0_7e66, i64* @rdi, align 8
  %v0_7e69 = load i64, i64* @r13, align 8
  store i64 %v0_7e69, i64* %r9.global-to-local, align 8
  store i64 %v9_7e5e, i64* @r8, align 8
  %v7_7e70 = trunc i64 %v6_7e70 to i32
  %v11_7e70 = call i64 @function_7910(i64 %v0_7e66, i64 %v1_7e4c, i32 %v3_7e53, i32 %v7_7e70, i64 %v9_7e5e, i64 %v0_7e69, i64 %v3_7e62)
  store i64 %v11_7e70, i64* %rax.global-to-local, align 8
  store i64 %v11_7e70, i64* @rbx, align 8
  %v0_7e78 = call i64 @function_7360()
  store i64 %v0_7e78, i64* %rax.global-to-local, align 8
  %v0_7e82 = load i128, i128* @global_var_2212b0.46, align 8
  %v1_7e82 = trunc i128 %v0_7e82 to i64
  store i64 %v1_7e82, i64* @rcx, align 8
  %v2_7e89 = load i64, i64* %stack_var_-8400, align 8
  store i64 %v2_7e89, i64* @rsi, align 8
  %v2_7e8a = load i64, i64* %stack_var_-8392, align 8
  store i64 %v2_7e8a, i64* @rdi, align 8
  %v2_7e8b = icmp eq i64 %v1_7e82, 0
  br i1 %v2_7e8b, label %dec_label_pc_7d87, label %dec_label_pc_7e94

dec_label_pc_7e94:                                ; preds = %dec_label_pc_7e4c
  %v0_7e96 = load i64, i64* @r12, align 8
  %v3_7e99 = zext i64 %v0_7e96 to i128
  %v9_7e99 = udiv i128 %v3_7e99, %v0_7e82
  %v10_7e99 = trunc i128 %v9_7e99 to i64
  store i64 %v10_7e99, i64* @rsi, align 8
  %v0_7ea1 = load i64, i64* @rbx, align 8
  %v3_7ea1 = add i64 %v0_7e96, -1
  %v4_7ea1 = add i64 %v3_7ea1, %v0_7ea1
  %v3_7ea6 = zext i64 %v4_7ea1 to i128
  %v9_7ea6 = udiv i128 %v3_7ea6, %v0_7e82
  %v10_7ea6 = trunc i128 %v9_7ea6 to i64
  store i64 %v10_7ea6, i64* %rax.global-to-local, align 8
  %v11_7ea6 = urem i128 %v3_7ea6, %v0_7e82
  %v12_7ea6 = trunc i128 %v11_7ea6 to i64
  store i64 %v12_7ea6, i64* @rdx, align 8
  %v12_7ea9 = icmp eq i64 %v10_7e99, %v10_7ea6
  br i1 %v12_7ea9, label %dec_label_pc_7d87, label %dec_label_pc_7eb2

dec_label_pc_7eb2:                                ; preds = %dec_label_pc_7e94
  store i64 ptrtoint (i64* @global_var_2201d0.295 to i64), i64* @rdi, align 8
  %v2_7eb9 = call i64 @function_72f0(i64* nonnull @global_var_2201d0.295)
  store i64 %v2_7eb9, i64* %rax.global-to-local, align 8
  %v0_7d87.pre = load i64, i64* @rsp, align 8
  br label %dec_label_pc_7d87

dec_label_pc_7ec8:                                ; preds = %dec_label_pc_7d46
  %v1_7ec8 = add i64 %v4_7b30, 185
  %v2_7ec8 = inttoptr i64 %v1_7ec8 to i8*
  %v3_7ec8 = load i8, i8* %v2_7ec8, align 1
  %v10_7ec8 = icmp eq i8 %v3_7ec8, 0
  %v1_7ecf = add i64 %v4_7b30, 172
  %v2_7ecf = inttoptr i64 %v1_7ecf to i32*
  %v3_7ecf = load i32, i32* %v2_7ecf, align 4
  %v4_7ecf = zext i32 %v3_7ecf to i64
  store i64 %v4_7ecf, i64* @r8, align 8
  %v1_7ed6 = icmp eq i1 %v10_7ec8, false
  br i1 %v1_7ed6, label %dec_label_pc_7f00, label %dec_label_pc_7ed8

dec_label_pc_7ed8:                                ; preds = %dec_label_pc_7ec8
  store i64 12, i64* @rdi, align 8
  %v1_7edd = call i64 @function_5c50(i64 12)
  store i64 %v1_7edd, i64* %rax.global-to-local, align 8
  %v4_7ee2 = trunc i64 %v1_7edd to i8
  %v5_7ee2 = icmp eq i8 %v4_7ee2, 0
  store i64 4294967295, i64* @rdx, align 8
  br i1 %v5_7ee2, label %dec_label_pc_7ed8.dec_label_pc_7dbf_crit_edge, label %dec_label_pc_7eef

dec_label_pc_7ed8.dec_label_pc_7dbf_crit_edge:    ; preds = %dec_label_pc_7ed8
  %v0_7dbf.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_7dbf

dec_label_pc_7eef:                                ; preds = %dec_label_pc_7ed8
  store i64 192, i64* @rcx, align 8
  br label %dec_label_pc_7e27

dec_label_pc_7f00:                                ; preds = %dec_label_pc_7ec8
  %v1_7f00 = add i64 %v4_7b30, 184
  %v2_7f00 = inttoptr i64 %v1_7f00 to i8*
  %v3_7f00 = load i8, i8* %v2_7f00, align 1
  %v4_7f00 = zext i8 %v3_7f00 to i64
  store i64 %v4_7f00, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  %v5_7f0a = icmp eq i8 %v3_7f00, 0
  br i1 %v5_7f0a, label %dec_label_pc_7dcf, label %dec_label_pc_7f12

dec_label_pc_7f12:                                ; preds = %dec_label_pc_7dbf.dec_label_pc_7f12_crit_edge, %dec_label_pc_7f00
  %v0_7df765 = phi i64 [ %v4_7dbf, %dec_label_pc_7dbf.dec_label_pc_7f12_crit_edge ], [ %v4_7f00, %dec_label_pc_7f00 ]
  %v0_7def61 = phi i64 [ %v0_7def63, %dec_label_pc_7dbf.dec_label_pc_7f12_crit_edge ], [ 0, %dec_label_pc_7f00 ]
  %v0_8010 = phi i64 [ %v0_7f12.pre, %dec_label_pc_7dbf.dec_label_pc_7f12_crit_edge ], [ %v4_7ecf, %dec_label_pc_7f00 ]
  %v1_7f15 = trunc i64 %v0_8010 to i32
  %v2_7f15 = and i32 %v1_7f15, 61440
  %v9_7f15 = zext i32 %v2_7f15 to i64
  store i64 %v9_7f15, i64* %rax.global-to-local, align 8
  %v10_7f1a = icmp eq i32 %v2_7f15, 32768
  br i1 %v10_7f1a, label %dec_label_pc_8010, label %dec_label_pc_7f25

dec_label_pc_7f25:                                ; preds = %dec_label_pc_7f12
  %v10_7f25 = icmp eq i32 %v2_7f15, 16384
  br i1 %v10_7f25, label %dec_label_pc_8090, label %dec_label_pc_7f30

dec_label_pc_7f30:                                ; preds = %dec_label_pc_7f25
  %v10_7f30 = icmp eq i32 %v2_7f15, 40960
  br i1 %v10_7f30, label %dec_label_pc_80f0, label %dec_label_pc_7f3b

dec_label_pc_7f3b:                                ; preds = %dec_label_pc_7f30
  %v10_7f3b = icmp eq i32 %v2_7f15, 4096
  store i64 128, i64* @rcx, align 8
  br i1 %v10_7f3b, label %dec_label_pc_7e27, label %dec_label_pc_7f4b

dec_label_pc_7f4b:                                ; preds = %dec_label_pc_7f3b
  %v10_7f4b = icmp eq i32 %v2_7f15, 49152
  store i64 144, i64* @rcx, align 8
  br i1 %v10_7f4b, label %dec_label_pc_7e27, label %dec_label_pc_7f5b

dec_label_pc_7f5b:                                ; preds = %dec_label_pc_7f4b
  %v10_7f5b = icmp eq i32 %v2_7f15, 24576
  store i64 160, i64* @rcx, align 8
  br i1 %v10_7f5b, label %dec_label_pc_7e27, label %dec_label_pc_7f6b

dec_label_pc_7f6b:                                ; preds = %dec_label_pc_7f5b
  %v10_7f6b = icmp eq i32 %v2_7f15, 8192
  %v3_7f7a = select i1 %v10_7f6b, i64 176, i64 208
  store i64 %v3_7f7a, i64* @rcx, align 8
  br label %dec_label_pc_7e27

dec_label_pc_7f88:                                ; preds = %dec_label_pc_7da7
  %v5_7f88 = icmp eq i8 %v3_7dae, 0
  br i1 %v5_7f88, label %dec_label_pc_7dbb, label %dec_label_pc_7f90

dec_label_pc_7f90:                                ; preds = %dec_label_pc_7f88
  %v1_7f90 = add i64 %v4_7b30, 172
  %v2_7f90 = inttoptr i64 %v1_7f90 to i32*
  %v3_7f90 = load i32, i32* %v2_7f90, align 4
  %v4_7f90 = zext i32 %v3_7f90 to i64
  store i64 %v4_7f90, i64* @r8, align 8
  br label %dec_label_pc_7dbf

dec_label_pc_7fa0:                                ; preds = %dec_label_pc_812b, %dec_label_pc_8120, %dec_label_pc_7dcf
  %v0_7fa0 = load i64, i64* @rbp, align 8
  %v1_7fa0 = inttoptr i64 %v0_7fa0 to i8*
  store i64 %v0_7fa0, i64* @rdi, align 8
  %v3_7fa3 = call i32 @strlen(i8* %v1_7fa0)
  %v5_7fa3 = sext i32 %v3_7fa3 to i64
  store i64 %v5_7fa3, i64* %rax.global-to-local, align 8
  %v0_7fa8 = load i64, i64* @global_var_221308.211, align 8
  store i64 %v0_7fa8, i64* @rbx, align 8
  store i64 %v5_7fa3, i64* @rcx, align 8
  %v1_7fb2 = icmp eq i64 %v0_7fa8, 0
  br i1 %v1_7fb2, label %dec_label_pc_7ff1, label %dec_label_pc_7fc0

dec_label_pc_7fc0:                                ; preds = %dec_label_pc_7fa0, %dec_label_pc_7fe8
  %v0_7fcb = phi i64 [ %v3_7fe8, %dec_label_pc_7fe8 ], [ %v0_7fa8, %dec_label_pc_7fa0 ]
  %v1_7fc0 = inttoptr i64 %v0_7fcb to i64*
  %v2_7fc0 = load i64, i64* %v1_7fc0, align 8
  store i64 %v2_7fc0, i64* @rdx, align 8
  %v8_7fc3 = icmp ult i64 %v5_7fa3, %v2_7fc0
  br i1 %v8_7fc3, label %dec_label_pc_7fe8, label %dec_label_pc_7fc8

dec_label_pc_7fc8:                                ; preds = %dec_label_pc_7fc0
  %v3_7fc3 = sub i64 %v5_7fa3, %v2_7fc0
  store i64 %v5_7fa3, i64* @rdi, align 8
  %v1_7fcb = add i64 %v0_7fcb, 8
  %v2_7fcb = inttoptr i64 %v1_7fcb to i64*
  %v3_7fcb = load i64, i64* %v2_7fcb, align 8
  %v4_7fcb = inttoptr i64 %v3_7fcb to i8*
  store i64 %v3_7fcb, i64* @rsi, align 8
  %v1_7fd7 = load i64, i64* @rbp, align 8
  %v2_7fd7 = add i64 %v1_7fd7, %v3_7fc3
  %v18_7fd7 = inttoptr i64 %v2_7fd7 to i8*
  store i64 %v2_7fd7, i64* @rdi, align 8
  %v8_7fda = trunc i64 %v2_7fc0 to i32
  %v9_7fda = call i32 @strncmp(i8* %v18_7fd7, i8* %v4_7fcb, i32 %v8_7fda)
  %v11_7fda = sext i32 %v9_7fda to i64
  store i64 %v11_7fda, i64* %rax.global-to-local, align 8
  %v5_7fdf = icmp eq i32 %v9_7fda, 0
  store i64 %v5_7fa3, i64* @rcx, align 8
  %v0_8000 = load i64, i64* @rbx, align 8
  br i1 %v5_7fdf, label %dec_label_pc_8000, label %dec_label_pc_7fe8

dec_label_pc_7fe8:                                ; preds = %dec_label_pc_7fc8, %dec_label_pc_7fc0
  %v0_7fe8 = phi i64 [ %v0_7fcb, %dec_label_pc_7fc0 ], [ %v0_8000, %dec_label_pc_7fc8 ]
  %v1_7fe8 = add i64 %v0_7fe8, 32
  %v2_7fe8 = inttoptr i64 %v1_7fe8 to i64*
  %v3_7fe8 = load i64, i64* %v2_7fe8, align 8
  store i64 %v3_7fe8, i64* @rbx, align 8
  %v1_7fec = icmp eq i64 %v3_7fe8, 0
  %v1_7fef = icmp eq i1 %v1_7fec, false
  br i1 %v1_7fef, label %dec_label_pc_7fc0, label %dec_label_pc_7ff1

dec_label_pc_7ff1:                                ; preds = %dec_label_pc_7fe8, %dec_label_pc_7fa0
  store i64 80, i64* @rcx, align 8
  br label %dec_label_pc_7e27

dec_label_pc_8000:                                ; preds = %dec_label_pc_7fc8
  %v1_8000 = add i64 %v0_8000, 16
  br label %dec_label_pc_7e31

dec_label_pc_8010:                                ; preds = %dec_label_pc_7f12
  %v2_8010 = and i32 %v1_7f15, ptrtoint (i32* @global_var_800.296 to i32)
  %v3_8010 = icmp eq i32 %v2_8010, 0
  br i1 %v3_8010, label %dec_label_pc_8038, label %dec_label_pc_8019

dec_label_pc_8019:                                ; preds = %dec_label_pc_8010
  store i64 16, i64* @rdi, align 8
  %v1_801e = call i64 @function_5c50(i64 16)
  store i64 %v1_801e, i64* %rax.global-to-local, align 8
  %v4_8023 = trunc i64 %v1_801e to i8
  %v5_8023 = icmp eq i8 %v4_8023, 0
  br i1 %v5_8023, label %dec_label_pc_8019.dec_label_pc_8038_crit_edge, label %dec_label_pc_8027

dec_label_pc_8019.dec_label_pc_8038_crit_edge:    ; preds = %dec_label_pc_8019
  %v0_8038.pre = load i64, i64* @r8, align 8
  br label %dec_label_pc_8038

dec_label_pc_8027:                                ; preds = %dec_label_pc_8019
  store i64 256, i64* @rcx, align 8
  br label %dec_label_pc_7e27

dec_label_pc_8038:                                ; preds = %dec_label_pc_8019.dec_label_pc_8038_crit_edge, %dec_label_pc_8010
  %v0_8038 = phi i64 [ %v0_8038.pre, %dec_label_pc_8019.dec_label_pc_8038_crit_edge ], [ %v0_8010, %dec_label_pc_8010 ]
  %v1_8038 = trunc i64 %v0_8038 to i32
  %v2_8038 = and i32 %v1_8038, ptrtoint (i32* @global_var_400.157 to i32)
  %v3_8038 = icmp eq i32 %v2_8038, 0
  %v1_803f = icmp eq i1 %v3_8038, false
  br i1 %v1_803f, label %dec_label_pc_8070, label %dec_label_pc_8041

dec_label_pc_8041:                                ; preds = %dec_label_pc_8070, %dec_label_pc_8038
  store i64 21, i64* @rdi, align 8
  %v1_8046 = call i64 @function_5c50(i64 21)
  store i64 %v1_8046, i64* %rax.global-to-local, align 8
  %v4_804b = trunc i64 %v1_8046 to i8
  %v5_804b = icmp eq i8 %v4_804b, 0
  br i1 %v5_804b, label %dec_label_pc_8100, label %dec_label_pc_8053

dec_label_pc_8053:                                ; preds = %dec_label_pc_8041
  %v0_8053 = load i64, i64* @r14, align 8
  %v1_8053 = add i64 %v0_8053, 192
  %v2_8053 = inttoptr i64 %v1_8053 to i8*
  %v3_8053 = load i8, i8* %v2_8053, align 1
  %v10_8053 = icmp eq i8 %v3_8053, 0
  br i1 %v10_8053, label %dec_label_pc_8100, label %dec_label_pc_8061

dec_label_pc_8061:                                ; preds = %dec_label_pc_8053
  store i64 336, i64* @rcx, align 8
  br label %dec_label_pc_7e27

dec_label_pc_8070:                                ; preds = %dec_label_pc_8038
  store i64 17, i64* @rdi, align 8
  %v1_8075 = call i64 @function_5c50(i64 17)
  store i64 %v1_8075, i64* %rax.global-to-local, align 8
  %v4_807a = trunc i64 %v1_8075 to i8
  %v5_807a = icmp eq i8 %v4_807a, 0
  br i1 %v5_807a, label %dec_label_pc_8041, label %dec_label_pc_807e

dec_label_pc_807e:                                ; preds = %dec_label_pc_8070
  store i64 272, i64* @rcx, align 8
  br label %dec_label_pc_7e27

dec_label_pc_8090:                                ; preds = %dec_label_pc_7f25
  %v2_8093 = and i32 %v1_7f15, 514
  %v9_8093 = zext i32 %v2_8093 to i64
  store i64 %v9_8093, i64* %rax.global-to-local, align 8
  %v11_8098 = icmp eq i32 %v2_8093, 514
  br i1 %v11_8098, label %dec_label_pc_8150, label %dec_label_pc_80a3

dec_label_pc_80a3:                                ; preds = %dec_label_pc_8150.dec_label_pc_80a3_crit_edge, %dec_label_pc_8090
  %v0_80a3 = phi i64 [ %v0_80a3.pre, %dec_label_pc_8150.dec_label_pc_80a3_crit_edge ], [ %v0_8010, %dec_label_pc_8090 ]
  %v2_80a3 = and i64 %v0_80a3, 2
  %v3_80a3 = icmp eq i64 %v2_80a3, 0
  br i1 %v3_80a3, label %dec_label_pc_80c0, label %dec_label_pc_80a9

dec_label_pc_80a9:                                ; preds = %dec_label_pc_80a3
  store i64 19, i64* @rdi, align 8
  %v1_80ae = call i64 @function_5c50(i64 19)
  store i64 %v1_80ae, i64* %rax.global-to-local, align 8
  %v4_80b3 = trunc i64 %v1_80ae to i8
  %v5_80b3 = icmp eq i8 %v4_80b3, 0
  store i64 304, i64* @rcx, align 8
  %v1_80ba = icmp eq i1 %v5_80b3, false
  br i1 %v1_80ba, label %dec_label_pc_7e27, label %dec_label_pc_80a9.dec_label_pc_80c0_crit_edge

dec_label_pc_80a9.dec_label_pc_80c0_crit_edge:    ; preds = %dec_label_pc_80a9
  %v0_80c0.pre = load i64, i64* @r8, align 8
  br label %dec_label_pc_80c0

dec_label_pc_80c0:                                ; preds = %dec_label_pc_80a9.dec_label_pc_80c0_crit_edge, %dec_label_pc_80a3
  %v0_80c0 = phi i64 [ %v0_80c0.pre, %dec_label_pc_80a9.dec_label_pc_80c0_crit_edge ], [ %v0_80a3, %dec_label_pc_80a3 ]
  %v1_80c0 = trunc i64 %v0_80c0 to i32
  %v2_80c0 = and i32 %v1_80c0, 512
  %v3_80c0 = icmp eq i32 %v2_80c0, 0
  %v9_80c0 = zext i32 %v2_80c0 to i64
  store i64 %v9_80c0, i64* @r8, align 8
  store i64 96, i64* @rcx, align 8
  br i1 %v3_80c0, label %dec_label_pc_7e27, label %dec_label_pc_80d2

dec_label_pc_80d2:                                ; preds = %dec_label_pc_80c0
  store i64 18, i64* @rdi, align 8
  %v1_80d7 = call i64 @function_5c50(i64 18)
  store i64 %v1_80d7, i64* %rax.global-to-local, align 8
  %v1_80dc = trunc i64 %v1_80d7 to i8
  %v6_80dc = icmp eq i8 %v1_80dc, 0
  %v1_80e4 = select i1 %v6_80dc, i64 96, i64 288
  store i64 %v1_80e4, i64* @rcx, align 8
  br label %dec_label_pc_7e27

dec_label_pc_80f0:                                ; preds = %dec_label_pc_7f30
  store i64 7, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_7def

dec_label_pc_8100:                                ; preds = %dec_label_pc_8053, %dec_label_pc_8041
  %v0_8100 = load i64, i64* @r8, align 8
  %v1_8100 = trunc i64 %v0_8100 to i32
  %v2_8100 = and i32 %v1_8100, 73
  %v3_8100 = icmp eq i32 %v2_8100, 0
  %v9_8100 = zext i32 %v2_8100 to i64
  store i64 %v9_8100, i64* @r8, align 8
  br i1 %v3_8100, label %dec_label_pc_8120, label %dec_label_pc_8106

dec_label_pc_8106:                                ; preds = %dec_label_pc_8100
  store i64 14, i64* @rdi, align 8
  %v1_810b = call i64 @function_5c50(i64 14)
  store i64 %v1_810b, i64* %rax.global-to-local, align 8
  %v4_8110 = trunc i64 %v1_810b to i8
  %v5_8110 = icmp eq i8 %v4_8110, 0
  br i1 %v5_8110, label %dec_label_pc_8120, label %dec_label_pc_8114

dec_label_pc_8114:                                ; preds = %dec_label_pc_8106
  store i64 224, i64* @rcx, align 8
  br label %dec_label_pc_7e27

dec_label_pc_8120:                                ; preds = %dec_label_pc_8106, %dec_label_pc_8100
  %v0_8120 = load i64, i64* @r14, align 8
  %v1_8120 = add i64 %v0_8120, 40
  %v2_8120 = inttoptr i64 %v1_8120 to i64*
  %v3_8120 = load i64, i64* %v2_8120, align 8
  %tmp208 = or i64 %v3_8120, 1
  %tmp209 = icmp eq i64 %tmp208, 1
  br i1 %tmp209, label %dec_label_pc_7fa0, label %dec_label_pc_812b

dec_label_pc_812b:                                ; preds = %dec_label_pc_8120
  store i64 22, i64* @rdi, align 8
  %v1_8130 = call i64 @function_5c50(i64 22)
  store i64 %v1_8130, i64* %rax.global-to-local, align 8
  %v4_8135 = trunc i64 %v1_8130 to i8
  %v5_8135 = icmp eq i8 %v4_8135, 0
  br i1 %v5_8135, label %dec_label_pc_7fa0, label %dec_label_pc_813d

dec_label_pc_813d:                                ; preds = %dec_label_pc_812b
  store i64 352, i64* @rcx, align 8
  br label %dec_label_pc_7e27

dec_label_pc_8150:                                ; preds = %dec_label_pc_8090
  store i64 20, i64* @rdi, align 8
  %v1_8155 = call i64 @function_5c50(i64 20)
  store i64 %v1_8155, i64* %rax.global-to-local, align 8
  %v4_815a = trunc i64 %v1_8155 to i8
  %v5_815a = icmp eq i8 %v4_815a, 0
  store i64 320, i64* @rcx, align 8
  %v1_8161 = icmp eq i1 %v5_815a, false
  br i1 %v1_8161, label %dec_label_pc_7e27, label %dec_label_pc_8150.dec_label_pc_80a3_crit_edge

dec_label_pc_8150.dec_label_pc_80a3_crit_edge:    ; preds = %dec_label_pc_8150
  %v0_80a3.pre = load i64, i64* @r8, align 8
  br label %dec_label_pc_80a3

dec_label_pc_816c:                                ; preds = %dec_label_pc_7df7, %dec_label_pc_7def
  %v2_816c = mul nuw nsw i64 %v0_816c, 16
  store i64 %v2_816c, i64* %rax.global-to-local, align 8
  store i64 %v2_816c, i64* @rcx, align 8
  br label %dec_label_pc_7e27
}

define i64 @function_8180(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_8180:
  %r13.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %tmp240 = call i32 @__decompiler_undefined_function_2()
  %stack_var_-5624 = alloca i64, align 8
  %stack_var_-5536 = alloca i64, align 8
  %stack_var_-5456 = alloca i64, align 8
  %stack_var_-5424 = alloca i64, align 8
  %stack_var_-5664 = alloca i8*, align 8
  %tmp252 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-4416 = alloca i64, align 8
  %stack_var_-5468 = alloca i64, align 8
  %stack_var_-696 = alloca i64, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_8180 = load i64, i64* @rbp, align 8
  %v0_8181 = load i64, i64* @rbx, align 8
  store i64 %v0_8181, i64* %stack_var_-16, align 8
  %v0_8182 = load i64, i64* @rsi, align 8
  store i64 %v0_8182, i64* @rbp, align 8
  %v0_8185 = load i64, i64* @rdi, align 8
  store i64 %v0_8185, i64* @rbx, align 8
  store i1 false, i1* %zf.global-to-local, align 1
  %v16_8188 = ptrtoint i64* %stack_var_-696 to i64
  %v0_818f = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_81a7 = load i8, i8* @global_var_2212fc.25, align 1
  %v7_81a7 = icmp eq i8 %v0_81a7, 0
  store i1 %v7_81a7, i1* %zf.global-to-local, align 1
  br i1 %v7_81a7, label %dec_label_pc_81f1, label %dec_label_pc_81b0

dec_label_pc_81b0:                                ; preds = %dec_label_pc_8180
  %v0_81b0 = load i64, i64* @rbx, align 8
  %v1_81b0 = add i64 %v0_81b0, 184
  %v2_81b0 = inttoptr i64 %v1_81b0 to i8*
  %v3_81b0 = load i8, i8* %v2_81b0, align 1
  %v10_81b0 = icmp eq i8 %v3_81b0, 0
  store i1 %v10_81b0, i1* %zf.global-to-local, align 1
  store i64 ptrtoint (i8** @global_var_17c2e.271 to i64), i64* @rcx, align 8
  br i1 %v10_81b0, label %dec_label_pc_81cd, label %dec_label_pc_81c0

dec_label_pc_81c0:                                ; preds = %dec_label_pc_81b0
  %v1_81c0 = add i64 %v0_81b0, 32
  %v2_81c0 = inttoptr i64 %v1_81c0 to i64*
  %v3_81c0 = load i64, i64* %v2_81c0, align 8
  store i64 %v3_81c0, i64* @rdi, align 8
  %v1_81c4 = icmp eq i64 %v3_81c0, 0
  store i1 %v1_81c4, i1* %zf.global-to-local, align 1
  %v1_81c7 = icmp eq i1 %v1_81c4, false
  br i1 %v1_81c7, label %dec_label_pc_82f8, label %dec_label_pc_81cd

dec_label_pc_81cd:                                ; preds = %dec_label_pc_82f8, %dec_label_pc_81c0, %dec_label_pc_81b0
  %v6_81ec = phi i64 [ %v3_82fb, %dec_label_pc_82f8 ], [ ptrtoint (i8** @global_var_17c2e.271 to i64), %dec_label_pc_81c0 ], [ ptrtoint (i8** @global_var_17c2e.271 to i64), %dec_label_pc_81b0 ]
  store i64 0, i64* @rdx, align 8
  %v0_81cf = load i32, i32* @global_var_221338.17, align 4
  %v10_81cf = icmp eq i32 %v0_81cf, 4
  store i1 %v10_81cf, i1* %zf.global-to-local, align 1
  br i1 %v10_81cf, label %dec_label_pc_81de, label %dec_label_pc_81d8

dec_label_pc_81d8:                                ; preds = %dec_label_pc_81cd
  %v0_81d8 = load i32, i32* @global_var_221360.252, align 4
  %v1_81d8 = zext i32 %v0_81d8 to i64
  store i64 %v1_81d8, i64* @rdx, align 8
  br label %dec_label_pc_81de

dec_label_pc_81de:                                ; preds = %dec_label_pc_81d8, %dec_label_pc_81cd
  %v5_81ec = phi i64 [ %v1_81d8, %dec_label_pc_81d8 ], [ 0, %dec_label_pc_81cd ]
  store i64 ptrtoint ([5 x i8]* @global_var_17c5b.298 to i64), i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  %v7_81ec = inttoptr i64 %v6_81ec to i8*
  %v8_81ec = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_17c5b.298, i64 0, i64 0), i64 %v5_81ec, i8* %v7_81ec)
  %v10_81ec = sext i32 %v8_81ec to i64
  store i64 %v10_81ec, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_81f1

dec_label_pc_81f1:                                ; preds = %dec_label_pc_81de, %dec_label_pc_8180
  %v0_827555 = phi i64 [ %v10_81ec, %dec_label_pc_81de ], [ 0, %dec_label_pc_8180 ]
  %v0_81f1 = load i8, i8* @global_var_22132c.23, align 1
  %v7_81f1 = icmp eq i8 %v0_81f1, 0
  store i1 %v7_81f1, i1* %zf.global-to-local, align 1
  br i1 %v7_81f1, label %dec_label_pc_8232, label %dec_label_pc_81fa

dec_label_pc_81fa:                                ; preds = %dec_label_pc_81f1
  %v0_81fa = load i64, i64* @rbx, align 8
  %v1_81fa = add i64 %v0_81fa, 184
  %v2_81fa = inttoptr i64 %v1_81fa to i8*
  %v3_81fa = load i8, i8* %v2_81fa, align 1
  %v10_81fa = icmp eq i8 %v3_81fa, 0
  store i1 %v10_81fa, i1* %zf.global-to-local, align 1
  store i64 ptrtoint (i8** @global_var_17c2e.271 to i64), i64* @rcx, align 8
  %v1_8208 = icmp eq i1 %v10_81fa, false
  br i1 %v1_8208, label %dec_label_pc_82c0, label %dec_label_pc_820e

dec_label_pc_820e:                                ; preds = %dec_label_pc_81fa
  store i64 0, i64* @rdx, align 8
  %v0_8210 = load i32, i32* @global_var_221338.17, align 4
  %v10_8210 = icmp eq i32 %v0_8210, 4
  store i1 %v10_8210, i1* %zf.global-to-local, align 1
  br i1 %v10_8210, label %dec_label_pc_821f, label %dec_label_pc_8219

dec_label_pc_8219:                                ; preds = %dec_label_pc_82c0, %dec_label_pc_820e
  %v6_822d51 = phi i64 [ %v8_82d9, %dec_label_pc_82c0 ], [ ptrtoint (i8** @global_var_17c2e.271 to i64), %dec_label_pc_820e ]
  %v0_8219 = load i32, i32* @global_var_22135c.253, align 4
  %v1_8219 = zext i32 %v0_8219 to i64
  store i64 %v1_8219, i64* @rdx, align 8
  br label %dec_label_pc_821f

dec_label_pc_821f:                                ; preds = %dec_label_pc_82c0, %dec_label_pc_8219, %dec_label_pc_820e
  %v6_822d = phi i64 [ %v8_82d9, %dec_label_pc_82c0 ], [ %v6_822d51, %dec_label_pc_8219 ], [ ptrtoint (i8** @global_var_17c2e.271 to i64), %dec_label_pc_820e ]
  %v5_822d = phi i64 [ 0, %dec_label_pc_82c0 ], [ %v1_8219, %dec_label_pc_8219 ], [ 0, %dec_label_pc_820e ]
  store i64 ptrtoint ([5 x i8]* @global_var_17c5b.298 to i64), i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  %v7_822d = inttoptr i64 %v6_822d to i8*
  %v8_822d = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_17c5b.298, i64 0, i64 0), i64 %v5_822d, i8* %v7_822d)
  %v10_822d = sext i32 %v8_822d to i64
  store i64 %v10_822d, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_8232

dec_label_pc_8232:                                ; preds = %dec_label_pc_821f, %dec_label_pc_81f1
  %v0_827554 = phi i64 [ %v10_822d, %dec_label_pc_821f ], [ %v0_827555, %dec_label_pc_81f1 ]
  %v0_8232 = load i8, i8* @global_var_221365.32, align 1
  %v7_8232 = icmp eq i8 %v0_8232, 0
  store i1 %v7_8232, i1* %zf.global-to-local, align 1
  br i1 %v7_8232, label %dec_label_pc_8266, label %dec_label_pc_823b

dec_label_pc_823b:                                ; preds = %dec_label_pc_8232
  store i64 0, i64* @rdx, align 8
  %v0_823d = load i32, i32* @global_var_221338.17, align 4
  %v10_823d = icmp eq i32 %v0_823d, 4
  store i1 %v10_823d, i1* %zf.global-to-local, align 1
  %v0_8244 = load i64, i64* @rbx, align 8
  %v1_8244 = add i64 %v0_8244, 176
  %v2_8244 = inttoptr i64 %v1_8244 to i64*
  %v3_8244 = load i64, i64* %v2_8244, align 8
  %v4_8244 = inttoptr i64 %v3_8244 to i8*
  store i64 %v3_8244, i64* @rcx, align 8
  br i1 %v10_823d, label %dec_label_pc_8253, label %dec_label_pc_824d

dec_label_pc_824d:                                ; preds = %dec_label_pc_823b
  %v0_824d = load i32, i32* @global_var_221354.258, align 4
  %v1_824d = zext i32 %v0_824d to i64
  store i64 %v1_824d, i64* @rdx, align 8
  br label %dec_label_pc_8253

dec_label_pc_8253:                                ; preds = %dec_label_pc_824d, %dec_label_pc_823b
  %v5_8261 = phi i64 [ %v1_824d, %dec_label_pc_824d ], [ 0, %dec_label_pc_823b ]
  store i64 ptrtoint ([5 x i8]* @global_var_17c5b.298 to i64), i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  %v9_8261 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_17c5b.298, i64 0, i64 0), i64 %v5_8261, i8* %v4_8244)
  %v11_8261 = sext i32 %v9_8261 to i64
  store i64 %v11_8261, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_8266

dec_label_pc_8266:                                ; preds = %dec_label_pc_8253, %dec_label_pc_8232
  %v0_8275 = phi i64 [ %v11_8261, %dec_label_pc_8253 ], [ %v0_827554, %dec_label_pc_8232 ]
  %v0_8266 = load i64, i64* @rbp, align 8
  store i64 %v0_8266, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  %v0_826d = load i64, i64* @rbx, align 8
  store i64 %v0_826d, i64* @rdi, align 8
  store i64 %v0_8275, i64* %rbp.global-to-local, align 8
  %v0_8278 = load i32, i32* @global_var_221314.24, align 4
  %v1_8278 = zext i32 %v0_8278 to i64
  store i64 %v1_8278, i64* %rax.global-to-local, align 8
  %v5_827e = icmp eq i32 %v0_8278, 0
  store i1 %v5_827e, i1* %zf.global-to-local, align 1
  br i1 %v5_827e, label %dec_label_pc_829d, label %dec_label_pc_8282

dec_label_pc_8282:                                ; preds = %dec_label_pc_8266
  %v1_8282 = add i64 %v0_826d, 184
  %v2_8282 = inttoptr i64 %v1_8282 to i8*
  %v3_8282 = load i8, i8* %v2_8282, align 1
  %v4_8282 = zext i8 %v3_8282 to i64
  store i64 %v4_8282, i64* @rdi, align 8
  %v1_8289 = add i64 %v0_826d, 168
  %v2_8289 = inttoptr i64 %v1_8289 to i32*
  %v3_8289 = load i32, i32* %v2_8289, align 4
  %v4_8289 = zext i32 %v3_8289 to i64
  store i64 %v4_8289, i64* @rdx, align 8
  %v1_828f = add i64 %v0_826d, 48
  %v2_828f = inttoptr i64 %v1_828f to i32*
  %v3_828f = load i32, i32* %v2_828f, align 4
  %v4_828f = zext i32 %v3_828f to i64
  store i64 %v4_828f, i64* @rsi, align 8
  %v2_8292 = call i64 @function_6ef0(i8 %v3_8282)
  store i64 %v2_8292, i64* %rax.global-to-local, align 8
  %v0_829a = load i64, i64* %rbp.global-to-local, align 8
  %v2_829a = add i64 %v0_829a, %v2_8292
  %v12_829a = icmp eq i64 %v2_829a, 0
  store i1 %v12_829a, i1* %zf.global-to-local, align 1
  store i64 %v2_829a, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_829d

dec_label_pc_829d:                                ; preds = %dec_label_pc_8282, %dec_label_pc_8266
  store i64 %v0_818f, i64* %rbx.global-to-local, align 8
  %v1_82a5 = call i64 @__readfsqword(i64 40)
  %v2_82a5 = xor i64 %v1_82a5, %v0_818f
  %v3_82a5 = icmp eq i64 %v2_82a5, 0
  store i1 %v3_82a5, i1* %zf.global-to-local, align 1
  store i64 %v2_82a5, i64* @rbx, align 8
  %v0_82ae = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_82ae, i64* %rax.global-to-local, align 8
  %v1_82b1 = icmp eq i1 %v3_82a5, false
  br i1 %v1_82b1, label %dec_label_pc_8308, label %dec_label_pc_82b3

dec_label_pc_82b3:                                ; preds = %dec_label_pc_829d
  %v0_82b3 = load i64, i64* @rsp, align 8
  %v10_82b3 = icmp eq i64 %v0_82b3, sub (i64 0, i64 ptrtoint (i1* @global_var_2a8.297 to i64))
  store i1 %v10_82b3, i1* %zf.global-to-local, align 1
  %v2_82ba = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_82ba, i64* @rbx, align 8
  store i64 %v0_8180, i64* %rbp.global-to-local, align 8
  ret i64 %v0_82ae

dec_label_pc_82c0:                                ; preds = %dec_label_pc_81fa
  %v0_82c0 = load i32, i32* bitcast (i64* @global_var_221328.53 to i32*), align 8
  %v1_82c0 = zext i32 %v0_82c0 to i64
  store i64 %v1_82c0, i64* @rdx, align 8
  %v1_82c6 = add i64 %v0_81fa, 88
  %v2_82c6 = inttoptr i64 %v1_82c6 to i64*
  %v3_82c6 = load i64, i64* %v2_82c6, align 8
  store i64 %v3_82c6, i64* @rdi, align 8
  store i64 512, i64* @rcx, align 8
  %v0_82cf = load i64, i64* @global_var_221320.55, align 8
  store i64 %v0_82cf, i64* @r8, align 8
  store i64 %v16_8188, i64* @rsi, align 8
  %v7_82d9 = load i64, i64* @r9, align 8
  %v8_82d9 = call i64 @function_ed10(i64 %v3_82c6, i64* nonnull %stack_var_-696, i32 %v0_82c0, i64 512, i64 %v0_82cf, i64 %v7_82d9)
  store i64 %v8_82d9, i64* %rax.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  %v0_82e0 = load i32, i32* @global_var_221338.17, align 4
  %v10_82e0 = icmp eq i32 %v0_82e0, 4
  store i1 %v10_82e0, i1* %zf.global-to-local, align 1
  store i64 %v8_82d9, i64* @rcx, align 8
  %v1_82ea = icmp eq i1 %v10_82e0, false
  br i1 %v1_82ea, label %dec_label_pc_8219, label %dec_label_pc_821f

dec_label_pc_82f8:                                ; preds = %dec_label_pc_81c0
  store i64 %v16_8188, i64* @rsi, align 8
  %v3_82fb = call i64 @function_fcf0(i64 %v3_81c0, i64* nonnull %stack_var_-696)
  store i64 %v3_82fb, i64* %rax.global-to-local, align 8
  store i64 %v3_82fb, i64* @rcx, align 8
  br label %dec_label_pc_81cd

dec_label_pc_8308:                                ; preds = %dec_label_pc_829d
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_831a = load i64, i64* @rdi, align 8
  store i64 %v0_831a, i64* @rbp, align 8
  store i1 false, i1* %zf.global-to-local, align 1
  %v0_8324 = call i64 @__readfsqword(i64 40)
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rax, align 8
  %v0_8337 = load i64, i64* @rdi, align 8
  %v1_8337 = add i64 %v0_8337, 184
  %v2_8337 = inttoptr i64 %v1_8337 to i8*
  %v3_8337 = load i8, i8* %v2_8337, align 1
  %v10_8337 = icmp eq i8 %v3_8337, 0
  store i1 %v10_8337, i1* %zf.global-to-local, align 1
  br i1 %v10_8337, label %dec_label_pc_8700, label %dec_label_pc_8344

dec_label_pc_8344:                                ; preds = %dec_label_pc_8308
  %v2_8344 = ptrtoint i64* %stack_var_-5468 to i64
  store i64 %v2_8344, i64* @r13, align 8
  %v1_834c = add i64 %v0_8337, 24
  store i64 %v1_834c, i64* @rdi, align 8
  store i64 %v2_8344, i64* @rsi, align 8
  %v1_8353 = call i64 @function_d1f0(i64 %v1_834c)
  store i64 %v1_8353, i64* %rax.global-to-local, align 8
  %v0_8358 = load i8, i8* @global_var_221364.251, align 1
  %v7_8358 = icmp eq i8 %v0_8358, 0
  store i1 %v7_8358, i1* %zf.global-to-local, align 1
  %v1_835f = icmp eq i1 %v7_8358, false
  br i1 %v1_835f, label %dec_label_pc_8752, label %dec_label_pc_836d

dec_label_pc_836d:                                ; preds = %dec_label_pc_8752, %dec_label_pc_8344, %dec_label_pc_8700, %dec_label_pc_8761
  %v0_836d = load i32, i32* @global_var_221334.19, align 4
  %v1_836d = zext i32 %v0_836d to i64
  store i64 %v1_836d, i64* %rax.global-to-local, align 8
  %v11_8373 = icmp eq i32 %v0_836d, 1
  store i1 %v11_8373, i1* %zf.global-to-local, align 1
  br i1 %v11_8373, label %dec_label_pc_836d.dec_label_pc_8788_crit_edge, label %dec_label_pc_837c

dec_label_pc_836d.dec_label_pc_8788_crit_edge:    ; preds = %dec_label_pc_836d
  %v0_878f.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_8788

dec_label_pc_837c:                                ; preds = %dec_label_pc_876a, %dec_label_pc_836d
  %v0_837c.in = phi i32 [ %v0_876a, %dec_label_pc_876a ], [ %v0_836d, %dec_label_pc_836d ]
  %v0_8382 = phi i32 [ %v0_876a, %dec_label_pc_876a ], [ %v0_836d, %dec_label_pc_836d ]
  %v0_837c = icmp eq i32 %v0_837c.in, 0
  br i1 %v0_837c, label %dec_label_pc_87c8, label %dec_label_pc_8382

dec_label_pc_8382:                                ; preds = %dec_label_pc_837c
  %v11_8382 = icmp eq i32 %v0_8382, 2
  store i1 %v11_8382, i1* %zf.global-to-local, align 1
  %v1_8385 = icmp eq i1 %v11_8382, false
  br i1 %v1_8385, label %dec_label_pc_8ce1, label %dec_label_pc_838b

dec_label_pc_838b:                                ; preds = %dec_label_pc_8382
  %v0_838b = load i64, i64* @rbp, align 8
  %v1_838b = add i64 %v0_838b, 104
  %v2_838b = inttoptr i64 %v1_838b to i64*
  %v3_838b = load i64, i64* %v2_838b, align 8
  store i64 %v3_838b, i64* %rax.global-to-local, align 8
  %v1_838f = add i64 %v0_838b, 96
  br label %dec_label_pc_839d

dec_label_pc_839d:                                ; preds = %dec_label_pc_87c8, %dec_label_pc_838b
  %v0_83a4 = phi i64 [ %v0_838b, %dec_label_pc_838b ], [ %v0_87c8, %dec_label_pc_87c8 ]
  %storemerge46.in.in = phi i64 [ %v1_838f, %dec_label_pc_838b ], [ %v1_87cc, %dec_label_pc_87c8 ]
  %storemerge46.in = inttoptr i64 %storemerge46.in.in to i64*
  %storemerge46 = load i64, i64* %storemerge46.in, align 8
  store i64 %storemerge46, i64* @rdx, align 8
  %v0_839d = load i8, i8* @global_var_2212fc.25, align 1
  %v7_839d = icmp eq i8 %v0_839d, 0
  store i1 %v7_839d, i1* %zf.global-to-local, align 1
  %v1_83a4 = add i64 %v0_83a4, 184
  %v2_83a4 = inttoptr i64 %v1_83a4 to i8*
  %v3_83a4 = load i8, i8* %v2_83a4, align 1
  %v4_83a4 = zext i8 %v3_83a4 to i64
  store i64 %v4_83a4, i64* @rdx, align 8
  br i1 %v7_839d, label %dec_label_pc_87b4, label %dec_label_pc_83b1

dec_label_pc_83b1:                                ; preds = %dec_label_pc_8788, %dec_label_pc_839d
  %v0_83bc = phi i64 [ %v0_87a2, %dec_label_pc_8788 ], [ %v0_83a4, %dec_label_pc_839d ]
  %v0_83b1 = phi i8 [ %v3_87a2, %dec_label_pc_8788 ], [ %v3_83a4, %dec_label_pc_839d ]
  %stack_var_-5616.0 = phi i64 [ %v3_878f, %dec_label_pc_8788 ], [ %storemerge46, %dec_label_pc_839d ]
  %v5_83b1 = icmp eq i8 %v0_83b1, 0
  store i1 %v5_83b1, i1* %zf.global-to-local, align 1
  store i64 ptrtoint (i8** @global_var_17c2e.271 to i64), i64* @r9, align 8
  br i1 %v5_83b1, label %dec_label_pc_83c9, label %dec_label_pc_83bc

dec_label_pc_83bc:                                ; preds = %dec_label_pc_83b1
  %v1_83bc = add i64 %v0_83bc, 32
  %v2_83bc = inttoptr i64 %v1_83bc to i64*
  %v3_83bc = load i64, i64* %v2_83bc, align 8
  store i64 %v3_83bc, i64* @rdi, align 8
  %v1_83c0 = icmp eq i64 %v3_83bc, 0
  store i1 %v1_83c0, i1* %zf.global-to-local, align 1
  %v1_83c3 = icmp eq i1 %v1_83c0, false
  br i1 %v1_83c3, label %dec_label_pc_8a88, label %dec_label_pc_83c9

dec_label_pc_83c9:                                ; preds = %dec_label_pc_8a88, %dec_label_pc_83bc, %dec_label_pc_83b1
  %v13_83f1 = phi i64 [ %v3_8a90, %dec_label_pc_8a88 ], [ ptrtoint (i8** @global_var_17c2e.271 to i64), %dec_label_pc_83bc ], [ ptrtoint (i8** @global_var_17c2e.271 to i64), %dec_label_pc_83b1 ]
  %v2_83c9 = ptrtoint i64* %stack_var_-4416 to i64
  store i64 %v2_83c9, i64* @r12, align 8
  %v0_83d1 = load i32, i32* @global_var_221360.252, align 4
  %v1_83d1 = zext i32 %v0_83d1 to i64
  store i64 %v1_83d1, i64* @r8, align 8
  store i64 ptrtoint ([5 x i8]* @global_var_17c5b.298 to i64), i64* @rcx, align 8
  store i64 ptrtoint (i32* @global_var_e3b.301 to i64), i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  %tmp294 = bitcast i64* %stack_var_-4416 to i8*
  store i64 %v2_83c9, i64* @rdi, align 8
  store i64 %v2_83c9, i64* %rbx.global-to-local, align 8
  %v12_83f1 = sext i32 %v0_83d1 to i64
  %v14_83f1 = inttoptr i64 %v13_83f1 to i8*
  %v15_83f1 = call i32 (i8*, i32, i32, i8*, ...) @__sprintf_chk(i8* %tmp294, i32 1, i32 ptrtoint (i32* @global_var_e3b.301 to i32), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_17c5b.298, i64 0, i64 0), i64 %v12_83f1, i8* %v14_83f1)
  %v17_83f1 = sext i32 %v15_83f1 to i64
  store i64 %v17_83f1, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_83f6

dec_label_pc_83f6:                                ; preds = %dec_label_pc_83f6, %dec_label_pc_83c9
  %v0_83f6 = phi i64 [ %v1_83f8, %dec_label_pc_83f6 ], [ %v2_83c9, %dec_label_pc_83c9 ]
  %v1_83f6 = inttoptr i64 %v0_83f6 to i32*
  %v2_83f6 = load i32, i32* %v1_83f6, align 4
  %v3_83f6 = zext i32 %v2_83f6 to i64
  %v1_83f8 = add i64 %v0_83f6, 4
  store i64 %v1_83f8, i64* %rbx.global-to-local, align 8
  %v1_83fc = add nuw nsw i64 %v3_83f6, 4278124287
  %v3_8402 = xor i64 %v3_83f6, 4294967295
  store i64 %v3_8402, i64* %rax.global-to-local, align 8
  %v4_840415 = and i64 %v3_8402, %v1_83fc
  %v4_8404 = trunc i64 %v4_840415 to i32
  %v2_8406 = and i32 %v4_8404, -2139062144
  %v3_8406 = icmp eq i32 %v2_8406, 0
  %v9_8406 = zext i32 %v2_8406 to i64
  store i64 %v9_8406, i64* @rdx, align 8
  br i1 %v3_8406, label %dec_label_pc_83f6, label %dec_label_pc_840e

dec_label_pc_840e:                                ; preds = %dec_label_pc_83f6
  %v3_8410 = udiv i32 %v2_8406, 65536
  %v10_8410 = zext i32 %v3_8410 to i64
  %v2_8413 = and i32 %v4_8404, 32896
  %v3_8413 = icmp eq i32 %v2_8413, 0
  %v5_8419.v = select i1 %v3_8413, i64 %v10_8410, i64 %v9_8406
  store i64 %v5_8419.v, i64* @rdx, align 8
  %v1_841c = add i64 %v0_83f6, 6
  %v3_8420 = select i1 %v3_8413, i64 %v1_841c, i64 %v1_83f8
  store i64 %v3_8420, i64* %rbx.global-to-local, align 8
  %v1_8426 = trunc i64 %v5_8419.v to i8
  %v9_8426 = icmp ne i8 %v1_8426, 0
  store i1 true, i1* %zf.global-to-local, align 1
  %v21_8426 = and i64 %v5_8419.v, 2155905024
  store i64 %v21_8426, i64* %rax.global-to-local, align 8
  %v0_8428 = load i64, i64* @rbp, align 8
  %v1_8428 = add i64 %v0_8428, 184
  %v2_8428 = inttoptr i64 %v1_8428 to i8*
  %v3_8428 = load i8, i8* %v2_8428, align 1
  %v4_8428 = zext i8 %v3_8428 to i64
  store i64 %v4_8428, i64* @rdx, align 8
  %v3_842f = select i1 %v9_8426, i64 4, i64 3
  %v4_842f = sub i64 %v3_8420, %v3_842f
  %v27_842f = icmp eq i64 %v4_842f, 0
  store i1 %v27_842f, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8433

dec_label_pc_8433:                                ; preds = %dec_label_pc_87b4, %dec_label_pc_840e
  %v0_8bc0 = phi i64 [ %v0_8428, %dec_label_pc_840e ], [ %v0_8bc067, %dec_label_pc_87b4 ]
  %v0_843c = phi i64 [ %v4_8428, %dec_label_pc_840e ], [ %v0_843c65, %dec_label_pc_87b4 ]
  %stack_var_-5616.1 = phi i64 [ %stack_var_-5616.0, %dec_label_pc_840e ], [ %stack_var_-5616.2, %dec_label_pc_87b4 ]
  %storemerge43 = phi i64 [ %v4_842f, %dec_label_pc_840e ], [ %v2_87b4, %dec_label_pc_87b4 ]
  store i64 %storemerge43, i64* @rbx, align 8
  %v0_8433 = load i8, i8* @global_var_22132c.23, align 1
  %v7_8433 = icmp eq i8 %v0_8433, 0
  store i1 %v7_8433, i1* %zf.global-to-local, align 1
  br i1 %v7_8433, label %dec_label_pc_84b7, label %dec_label_pc_843c

dec_label_pc_843c:                                ; preds = %dec_label_pc_8433
  %v4_843c = trunc i64 %v0_843c to i8
  %v5_843c = icmp eq i8 %v4_843c, 0
  store i1 %v5_843c, i1* %zf.global-to-local, align 1
  store i64 ptrtoint (i8** @global_var_17c2e.271 to i64), i64* @r15, align 8
  %v1_8445 = icmp eq i1 %v5_843c, false
  br i1 %v1_8445, label %dec_label_pc_8bc0, label %dec_label_pc_844b

dec_label_pc_844b:                                ; preds = %dec_label_pc_8bc0, %dec_label_pc_843c
  %v0_8454 = phi i64 [ %v8_8bde, %dec_label_pc_8bc0 ], [ ptrtoint (i8** @global_var_17c2e.271 to i64), %dec_label_pc_843c ]
  %v0_844b = load i32, i32* @global_var_22135c.253, align 4
  %v1_844b = zext i32 %v0_844b to i64
  store i64 %v1_844b, i64* @r14, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rsi, align 8
  store i64 %v0_8454, i64* @rdi, align 8
  %v5_8457 = call i64 @function_10370(i64 %v0_8454, i32 0)
  %v0_845c = load i64, i64* @r14, align 8
  %v1_845c = trunc i64 %v0_845c to i32
  %v3_845c = trunc i64 %v5_8457 to i32
  %v4_845c = sub i32 %v1_845c, %v3_845c
  %v14_845c = icmp eq i32 %v4_845c, 0
  %v20_845c = zext i32 %v4_845c to i64
  store i64 %v20_845c, i64* @r14, align 8
  store i1 %v14_845c, i1* %zf.global-to-local, align 1
  store i64 %v20_845c, i64* %rax.global-to-local, align 8
  %tmp296 = icmp slt i32 %v4_845c, 1
  br i1 %tmp296, label %dec_label_pc_8980, label %dec_label_pc_846b

dec_label_pc_846b:                                ; preds = %dec_label_pc_844b
  %v2_846b = add i32 %v4_845c, -1
  %v11_846b = icmp eq i32 %v2_846b, 0
  store i1 %v11_846b, i1* %zf.global-to-local, align 1
  %v17_846b = zext i32 %v2_846b to i64
  store i64 %v17_846b, i64* @rdx, align 8
  %v0_8471 = load i64, i64* @rbx, align 8
  %v3_8471 = add nuw nsw i64 %v17_846b, 1
  %v4_8471 = add i64 %v3_8471, %v0_8471
  store i64 %v4_8471, i64* @rcx, align 8
  store i64 %v0_8471, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_8480

dec_label_pc_8480:                                ; preds = %dec_label_pc_8480, %dec_label_pc_846b
  %v0_8480 = phi i64 [ %v0_8488, %dec_label_pc_8480 ], [ %v0_8471, %dec_label_pc_846b ]
  %v1_8480 = add i64 %v0_8480, 1
  store i64 %v1_8480, i64* %rax.global-to-local, align 8
  %v2_8484 = inttoptr i64 %v0_8480 to i8*
  store i8 32, i8* %v2_8484, align 1
  %v0_8488 = load i64, i64* %rax.global-to-local, align 8
  %v1_8488 = load i64, i64* @rcx, align 8
  %v12_8488 = icmp eq i64 %v0_8488, %v1_8488
  store i1 %v12_8488, i1* %zf.global-to-local, align 1
  %v1_848b = icmp eq i1 %v12_8488, false
  br i1 %v1_848b, label %dec_label_pc_8480, label %dec_label_pc_848d

dec_label_pc_848d:                                ; preds = %dec_label_pc_8480
  %v0_848d = load i64, i64* @rdx, align 8
  store i64 %v0_848d, i64* %rax.global-to-local, align 8
  %v0_8490 = load i64, i64* @rbx, align 8
  %v3_8490 = add i64 %v0_848d, 1
  %v4_8490 = add i64 %v3_8490, %v0_8490
  br label %dec_label_pc_8495

dec_label_pc_8495:                                ; preds = %dec_label_pc_8980, %dec_label_pc_848d
  %storemerge42 = phi i64 [ %v0_8980, %dec_label_pc_8980 ], [ %v4_8490, %dec_label_pc_848d ]
  store i64 %storemerge42, i64* @rdx, align 8
  %v0_8495 = load i64, i64* @r15, align 8
  %v1_8495 = add i64 %v0_8495, 1
  %v10_8495 = icmp eq i64 %v1_8495, 0
  store i1 %v10_8495, i1* %zf.global-to-local, align 1
  store i64 %v1_8495, i64* @r15, align 8
  %v2_8499 = inttoptr i64 %v0_8495 to i8*
  %v3_8499 = load i8, i8* %v2_8499, align 1
  %v4_8499 = zext i8 %v3_8499 to i64
  store i64 %v4_8499, i64* %rax.global-to-local, align 8
  %v1_849e = add i64 %storemerge42, 1
  store i64 %v1_849e, i64* @rbx, align 8
  %v5_84a2 = icmp eq i8 %v3_8499, 0
  store i1 %v5_84a2, i1* %zf.global-to-local, align 1
  %v4_84a4 = inttoptr i64 %storemerge42 to i8*
  store i8 %v3_8499, i8* %v4_84a4, align 1
  %v0_84a7 = load i1, i1* %zf.global-to-local, align 1
  %v1_84a7 = icmp eq i1 %v0_84a7, false
  br i1 %v1_84a7, label %dec_label_pc_8980, label %dec_label_pc_84ad

dec_label_pc_84ad:                                ; preds = %dec_label_pc_8495
  %v0_84ad = load i64, i64* @rdx, align 8
  %v1_84ad = inttoptr i64 %v0_84ad to i8*
  store i8 32, i8* %v1_84ad, align 1
  %v0_84b0 = load i64, i64* @rbp, align 8
  %v1_84b0 = add i64 %v0_84b0, 184
  %v2_84b0 = inttoptr i64 %v1_84b0 to i8*
  %v3_84b0 = load i8, i8* %v2_84b0, align 1
  %v4_84b0 = zext i8 %v3_84b0 to i64
  store i64 %v4_84b0, i64* @rdx, align 8
  br label %dec_label_pc_84b7

dec_label_pc_84b7:                                ; preds = %dec_label_pc_84ad, %dec_label_pc_8433
  %v0_8968 = phi i64 [ %v0_84b0, %dec_label_pc_84ad ], [ %v0_8bc0, %dec_label_pc_8433 ]
  %v0_84b7 = phi i64 [ %v4_84b0, %dec_label_pc_84ad ], [ %v0_843c, %dec_label_pc_8433 ]
  %v4_84b7 = trunc i64 %v0_84b7 to i8
  %v5_84b7 = icmp eq i8 %v4_84b7, 0
  store i1 %v5_84b7, i1* %zf.global-to-local, align 1
  store i64 ptrtoint (i8** @global_var_17c2e.271 to i64), i64* %rax.global-to-local, align 8
  %v1_84c0 = icmp eq i1 %v5_84b7, false
  br i1 %v1_84c0, label %dec_label_pc_8968, label %dec_label_pc_84c6

dec_label_pc_84c6:                                ; preds = %dec_label_pc_8968, %dec_label_pc_84b7
  %v0_84d8 = phi i64 [ %v3_8974, %dec_label_pc_8968 ], [ ptrtoint (i8** @global_var_17c2e.271 to i64), %dec_label_pc_84b7 ]
  %v0_84ca = load i32, i32* @global_var_221358.254, align 4
  store i64 ptrtoint ([8 x i8]* @global_var_17c4b.302 to i64), i64* @rcx, align 8
  %v4_84d8 = inttoptr i64 %v0_84d8 to i8*
  store i8* %v4_84d8, i8** %stack_var_-5664, align 8
  %v1_84d9 = ptrtoint i64* %stack_var_-5468 to i64
  store i64 %v1_84d9, i64* @r8, align 8
  %v0_84dc = load i64, i64* @rbx, align 8
  %v1_84dc = inttoptr i64 %v0_84dc to i8*
  store i64 %v0_84dc, i64* @rdi, align 8
  store i64 -1, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  %v15_84ed = sext i32 %v0_84ca to i64
  %v19_84ed = call i32 (i8*, i32, i32, i8*, ...) @__sprintf_chk(i8* %v1_84dc, i32 1, i32 -1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_17c4b.302, i64 0, i64 0), i64* nonnull %stack_var_-5468, i64 %v15_84ed, i8* %v4_84d8)
  %v21_84ed = sext i32 %v19_84ed to i64
  store i64 %v21_84ed, i64* %rax.global-to-local, align 8
  %v0_84f2 = load i64, i64* @rbx, align 8
  %v1_84f2 = inttoptr i64 %v0_84f2 to i8*
  store i64 %v0_84f2, i64* @rdi, align 8
  %v3_84f5 = call i32 @strlen(i8* %v1_84f2)
  %v5_84f5 = sext i32 %v3_84f5 to i64
  store i64 %v5_84f5, i64* %rax.global-to-local, align 8
  %v0_84fa = load i64, i64* @rbx, align 8
  %v2_84fa = add i64 %v0_84fa, %v5_84f5
  store i64 %v2_84fa, i64* @rbx, align 8
  %v0_84fd = load i8, i8* @global_var_221318.63, align 1
  %v7_84fd = icmp eq i8 %v0_84fd, 0
  store i1 %v7_84fd, i1* %zf.global-to-local, align 1
  %v2_8504 = load i8*, i8** %stack_var_-5664, align 8
  %v3_8504 = ptrtoint i8* %v2_8504 to i64
  store i64 %v3_8504, i64* @r8, align 8
  %v3_8506 = ptrtoint i8* %tmp252 to i64
  store i64 %v3_8506, i64* @r9, align 8
  %v1_8508 = icmp eq i1 %v7_84fd, false
  br i1 %v1_8508, label %dec_label_pc_8938, label %dec_label_pc_850e

dec_label_pc_850e:                                ; preds = %dec_label_pc_8938, %dec_label_pc_84c6
  %v0_850e = load i8, i8* @global_var_220021.57, align 1
  %v7_850e = icmp eq i8 %v0_850e, 0
  store i1 %v7_850e, i1* %zf.global-to-local, align 1
  %v1_8515 = icmp eq i1 %v7_850e, false
  br i1 %v1_8515, label %dec_label_pc_8530, label %dec_label_pc_8517

dec_label_pc_8517:                                ; preds = %dec_label_pc_850e
  %v0_8517 = load i8, i8* @global_var_220020.62, align 1
  %v7_8517 = icmp eq i8 %v0_8517, 0
  store i1 %v7_8517, i1* %zf.global-to-local, align 1
  %v1_851e = icmp eq i1 %v7_8517, false
  br i1 %v1_851e, label %dec_label_pc_8530, label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8517
  %v0_8520 = load i8, i8* @global_var_22132e.125, align 1
  %v7_8520 = icmp eq i8 %v0_8520, 0
  store i1 %v7_8520, i1* %zf.global-to-local, align 1
  br i1 %v7_8520, label %dec_label_pc_8a70, label %dec_label_pc_8530

dec_label_pc_8530:                                ; preds = %dec_label_pc_8a70, %dec_label_pc_8520, %dec_label_pc_8517, %dec_label_pc_850e
  %v0_8530 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_8530 = ptrtoint %_IO_FILE* %v0_8530 to i64
  store i64 %v1_8530, i64* @rsi, align 8
  %v1_8537 = ptrtoint i64* %stack_var_-4416 to i64
  %tmp299 = bitcast i64* %stack_var_-4416 to i8*
  store i64 %v1_8537, i64* @rdi, align 8
  %v0_853a = load i64, i64* @rbx, align 8
  %v1_853a = load i64, i64* @r12, align 8
  %v2_853a = sub i64 %v0_853a, %v1_853a
  %v12_853a = icmp eq i64 %v2_853a, 0
  store i1 %v12_853a, i1* %zf.global-to-local, align 1
  store i64 %v2_853a, i64* @rbx, align 8
  %v5_853d = call i32 @fputs_unlocked(i8* %tmp299, %_IO_FILE* %v0_8530)
  %v7_853d = sext i32 %v5_853d to i64
  store i64 %v7_853d, i64* %rax.global-to-local, align 8
  %v0_8542 = load i64, i64* @global_var_2211f8.162, align 8
  %v1_8542 = load i64, i64* @rbx, align 8
  %v2_8542 = add i64 %v1_8542, %v0_8542
  store i64 %v2_8542, i64* @global_var_2211f8.162, align 8
  %v0_8549 = load i8, i8* @global_var_220021.57, align 1
  %v7_8549 = icmp eq i8 %v0_8549, 0
  store i1 %v7_8549, i1* %zf.global-to-local, align 1
  %v1_8550 = icmp eq i1 %v7_8549, false
  br i1 %v1_8550, label %dec_label_pc_8a20, label %dec_label_pc_8556

dec_label_pc_8556:                                ; preds = %dec_label_pc_8a20, %dec_label_pc_8530
  %v0_8556 = load i8, i8* @global_var_220020.62, align 1
  %v7_8556 = icmp eq i8 %v0_8556, 0
  store i1 %v7_8556, i1* %zf.global-to-local, align 1
  %v1_855d = icmp eq i1 %v7_8556, false
  br i1 %v1_855d, label %dec_label_pc_89d0, label %dec_label_pc_8563

dec_label_pc_8563:                                ; preds = %dec_label_pc_8a10, %dec_label_pc_8556
  %v0_8563 = load i8, i8* @global_var_22132e.125, align 1
  %v7_8563 = icmp eq i8 %v0_8563, 0
  store i1 %v7_8563, i1* %zf.global-to-local, align 1
  %v1_856a = icmp eq i1 %v7_8563, false
  br i1 %v1_856a, label %dec_label_pc_89b0, label %dec_label_pc_8570

dec_label_pc_8570:                                ; preds = %dec_label_pc_89b0, %dec_label_pc_8563
  %v0_8570 = load i8, i8* @global_var_221365.32, align 1
  %v7_8570 = icmp eq i8 %v0_8570, 0
  store i1 %v7_8570, i1* %zf.global-to-local, align 1
  store i64 %v1_8537, i64* @rbx, align 8
  %v1_857a = icmp eq i1 %v7_8570, false
  br i1 %v1_857a, label %dec_label_pc_8990, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8a70, %dec_label_pc_8990, %dec_label_pc_8570
  %v0_8580 = load i64, i64* @rbp, align 8
  %v1_8580 = add i64 %v0_8580, 184
  %v2_8580 = inttoptr i64 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v10_8580 = icmp eq i8 %v3_8580, 0
  store i1 %v10_8580, i1* %zf.global-to-local, align 1
  br i1 %v10_8580, label %dec_label_pc_85c6, label %dec_label_pc_858d

dec_label_pc_858d:                                ; preds = %dec_label_pc_8580
  %v1_858d = add i64 %v0_8580, 48
  %v2_858d = inttoptr i64 %v1_858d to i32*
  %v3_858d = load i32, i32* %v2_858d, align 4
  %v2_8590 = and i32 %v3_858d, 45056
  %v9_8590 = zext i32 %v2_8590 to i64
  store i64 %v9_8590, i64* %rax.global-to-local, align 8
  %v10_8595 = icmp eq i32 %v2_8590, 8192
  store i1 %v10_8595, i1* %zf.global-to-local, align 1
  br i1 %v10_8595, label %dec_label_pc_8b00, label %dec_label_pc_85a0

dec_label_pc_85a0:                                ; preds = %dec_label_pc_858d
  %v1_85a0 = add i64 %v0_8580, 72
  %v2_85a0 = inttoptr i64 %v1_85a0 to i64*
  %v3_85a0 = load i64, i64* %v2_85a0, align 8
  store i64 %v3_85a0, i64* @rdi, align 8
  %v0_85a4 = load i64, i64* @global_var_220018.56, align 8
  store i64 %v0_85a4, i64* @r8, align 8
  %v2_85ab = ptrtoint i64* %stack_var_-5424 to i64
  store i64 %v2_85ab, i64* @rsi, align 8
  %v0_85b3 = load i32, i32* @global_var_22131c.54, align 4
  %v1_85b3 = zext i32 %v0_85b3 to i64
  store i64 %v1_85b3, i64* @rdx, align 8
  store i64 1, i64* @rcx, align 8
  %v8_85be = load i64, i64* @r9, align 8
  %v9_85be = call i64 @function_ed10(i64 %v3_85a0, i64* nonnull %stack_var_-5424, i32 %v0_85b3, i64 1, i64 %v0_85a4, i64 %v8_85be)
  store i64 %v9_85be, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_85c6

dec_label_pc_85c6:                                ; preds = %dec_label_pc_8580, %dec_label_pc_85a0
  %storemerge39 = phi i64 [ %v9_85be, %dec_label_pc_85a0 ], [ ptrtoint (i8** @global_var_17c2e.271 to i64), %dec_label_pc_8580 ]
  store i64 %storemerge39, i64* @r14, align 8
  %v0_85c6 = load i32, i32* @global_var_22133c.261, align 4
  %v1_85c6 = zext i32 %v0_85c6 to i64
  store i64 %v1_85c6, i64* @r13, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rsi, align 8
  store i64 %storemerge39, i64* @rdi, align 8
  %v5_85d2 = call i64 @function_10370(i64 %storemerge39, i32 0)
  %v0_85d7 = load i64, i64* @r13, align 8
  %v1_85d7 = trunc i64 %v0_85d7 to i32
  %v3_85d7 = trunc i64 %v5_85d2 to i32
  %v4_85d7 = sub i32 %v1_85d7, %v3_85d7
  %v14_85d7 = icmp eq i32 %v4_85d7, 0
  %v20_85d7 = zext i32 %v4_85d7 to i64
  store i64 %v20_85d7, i64* %r13.global-to-local, align 8
  store i1 %v14_85d7, i1* %zf.global-to-local, align 1
  store i64 %v20_85d7, i64* %rax.global-to-local, align 8
  %tmp300 = icmp slt i32 %v4_85d7, 1
  br i1 %tmp300, label %dec_label_pc_85c6.dec_label_pc_8605.preheader_crit_edge, label %dec_label_pc_85e2

dec_label_pc_85c6.dec_label_pc_8605.preheader_crit_edge: ; preds = %dec_label_pc_85c6
  %v0_860e.pre.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_8605

dec_label_pc_85e2:                                ; preds = %dec_label_pc_85c6
  %v2_85e2 = add i32 %v4_85d7, -1
  %v11_85e2 = icmp eq i32 %v2_85e2, 0
  store i1 %v11_85e2, i1* %zf.global-to-local, align 1
  %v17_85e2 = zext i32 %v2_85e2 to i64
  store i64 %v17_85e2, i64* @rdx, align 8
  %v0_85e8 = load i64, i64* @rbx, align 8
  %v3_85e8 = add nuw nsw i64 %v17_85e2, 1
  %v4_85e8 = add i64 %v3_85e8, %v0_85e8
  store i64 %v4_85e8, i64* @rcx, align 8
  store i64 %v0_85e8, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_85f0

dec_label_pc_85f0:                                ; preds = %dec_label_pc_85f0, %dec_label_pc_85e2
  %v0_85f0 = phi i64 [ %v0_85f8, %dec_label_pc_85f0 ], [ %v0_85e8, %dec_label_pc_85e2 ]
  %v1_85f0 = add i64 %v0_85f0, 1
  store i64 %v1_85f0, i64* %rax.global-to-local, align 8
  %v2_85f4 = inttoptr i64 %v0_85f0 to i8*
  store i8 32, i8* %v2_85f4, align 1
  %v0_85f8 = load i64, i64* %rax.global-to-local, align 8
  %v1_85f8 = load i64, i64* @rcx, align 8
  %v12_85f8 = icmp eq i64 %v0_85f8, %v1_85f8
  store i1 %v12_85f8, i1* %zf.global-to-local, align 1
  %v1_85fb = icmp eq i1 %v12_85f8, false
  br i1 %v1_85fb, label %dec_label_pc_85f0, label %dec_label_pc_85fd

dec_label_pc_85fd:                                ; preds = %dec_label_pc_85f0
  %v0_85fd = load i64, i64* @rdx, align 8
  store i64 %v0_85fd, i64* %rax.global-to-local, align 8
  %v0_8600 = load i64, i64* @rbx, align 8
  %v3_8600 = add i64 %v0_85fd, 1
  %v4_8600 = add i64 %v3_8600, %v0_8600
  store i64 %v4_8600, i64* @rbx, align 8
  br label %dec_label_pc_8605

dec_label_pc_8605:                                ; preds = %dec_label_pc_85fd, %dec_label_pc_85c6.dec_label_pc_8605.preheader_crit_edge, %dec_label_pc_87f0
  %v0_860e = phi i64 [ %v0_87f0, %dec_label_pc_87f0 ], [ %v4_8600, %dec_label_pc_85fd ], [ %v0_860e.pre.pre, %dec_label_pc_85c6.dec_label_pc_8605.preheader_crit_edge ]
  %v0_8605 = load i64, i64* @r14, align 8
  %v1_8605 = add i64 %v0_8605, 1
  %v10_8605 = icmp eq i64 %v1_8605, 0
  store i1 %v10_8605, i1* %zf.global-to-local, align 1
  store i64 %v1_8605, i64* @r14, align 8
  %v2_8609 = inttoptr i64 %v0_8605 to i8*
  %v3_8609 = load i8, i8* %v2_8609, align 1
  %v4_8609 = zext i8 %v3_8609 to i64
  store i64 %v4_8609, i64* %rax.global-to-local, align 8
  %v1_860e = add i64 %v0_860e, 1
  store i64 %v1_860e, i64* @r13, align 8
  %v5_8612 = icmp eq i8 %v3_8609, 0
  store i1 %v5_8612, i1* %zf.global-to-local, align 1
  %v4_8614 = inttoptr i64 %v0_860e to i8*
  store i8 %v3_8609, i8* %v4_8614, align 1
  %v0_8618 = load i1, i1* %zf.global-to-local, align 1
  %v1_8618 = icmp eq i1 %v0_8618, false
  br i1 %v1_8618, label %dec_label_pc_87f0, label %dec_label_pc_861e

dec_label_pc_861e:                                ; preds = %dec_label_pc_8605
  %v0_861e = load i64, i64* @rbx, align 8
  %v1_861e = inttoptr i64 %v0_861e to i8*
  store i8 32, i8* %v1_861e, align 1
  %v0_8621.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_8621

dec_label_pc_8621:                                ; preds = %dec_label_pc_8b00, %dec_label_pc_861e
  %v0_8621 = phi i64 [ %v4_8bb4, %dec_label_pc_8b00 ], [ %v0_8621.pre, %dec_label_pc_861e ]
  %v1_8621 = inttoptr i64 %v0_8621 to i8*
  store i8 1, i8* %v1_8621, align 1
  %v0_8626 = load i64, i64* @rbp, align 8
  %v1_8626 = add i64 %v0_8626, 184
  %v2_8626 = inttoptr i64 %v1_8626 to i8*
  %v3_8626 = load i8, i8* %v2_8626, align 1
  %v10_8626 = icmp eq i8 %v3_8626, 0
  store i1 %v10_8626, i1* %zf.global-to-local, align 1
  store i64 ptrtoint (i8** @global_var_17c2e.271 to i64), i64* @rbx, align 8
  %v1_8634 = icmp eq i1 %v10_8626, false
  br i1 %v1_8634, label %dec_label_pc_8870, label %dec_label_pc_863a

dec_label_pc_863a:                                ; preds = %dec_label_pc_8cff, %dec_label_pc_8ceb, %dec_label_pc_8621
  %v0_863a = load i32, i32* @global_var_220014.303, align 4
  %v1_863a = zext i32 %v0_863a to i64
  store i64 %v1_863a, i64* @r8, align 8
  %v5_8641 = icmp eq i32 %v0_863a, 0
  store i1 %v5_8641, i1* %zf.global-to-local, align 1
  %v6_8641 = icmp slt i32 %v0_863a, 0
  br i1 %v6_8641, label %dec_label_pc_8c00, label %dec_label_pc_864a

dec_label_pc_864a:                                ; preds = %dec_label_pc_8c6e, %dec_label_pc_8c65, %dec_label_pc_863a
  %v12_8665 = phi i64 [ 0, %dec_label_pc_8c6e ], [ %v0_8c65, %dec_label_pc_8c65 ], [ %v1_863a, %dec_label_pc_863a ]
  store i64 ptrtoint ([5 x i8]* @global_var_17c5b.298 to i64), i64* @rcx, align 8
  %v0_8651 = load i64, i64* @rbx, align 8
  store i64 %v0_8651, i64* @r9, align 8
  store i64 -1, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %v0_8660 = load i64, i64* @r13, align 8
  %v1_8660 = inttoptr i64 %v0_8660 to i8*
  store i64 %v0_8660, i64* @rdi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  %v14_8665 = inttoptr i64 %v0_8651 to i8*
  %v15_8665 = call i32 (i8*, i32, i32, i8*, ...) @__sprintf_chk(i8* %v1_8660, i32 1, i32 -1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_17c5b.298, i64 0, i64 0), i64 %v12_8665, i8* %v14_8665)
  %v17_8665 = sext i32 %v15_8665 to i64
  store i64 %v17_8665, i64* %rax.global-to-local, align 8
  %v0_866a = load i64, i64* @r13, align 8
  %v1_866a = inttoptr i64 %v0_866a to i8*
  store i64 %v0_866a, i64* @rdi, align 8
  %v3_866d = call i32 @strlen(i8* %v1_866a)
  %v5_866d = sext i32 %v3_866d to i64
  store i64 %v5_866d, i64* %rax.global-to-local, align 8
  %v0_8672 = load i64, i64* @r13, align 8
  %v3_8672 = add i64 %v0_8672, %v5_866d
  store i64 %v3_8672, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_8677

dec_label_pc_8677:                                ; preds = %dec_label_pc_8a4b, %dec_label_pc_864a
  %v0_8681 = phi i64 [ %v0_8681.pre, %dec_label_pc_8a4b ], [ %v3_8672, %dec_label_pc_864a ]
  %v0_8677 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_8677 = ptrtoint %_IO_FILE* %v0_8677 to i64
  store i64 %v1_8677, i64* @rsi, align 8
  %v0_867e = load i64, i64* @r12, align 8
  %v1_867e = inttoptr i64 %v0_867e to i8*
  store i64 %v0_867e, i64* @rdi, align 8
  %v2_8681 = sub i64 %v0_8681, %v0_867e
  %v12_8681 = icmp eq i64 %v2_8681, 0
  store i1 %v12_8681, i1* %zf.global-to-local, align 1
  store i64 %v2_8681, i64* @rbx, align 8
  %v6_8684 = call i32 @fputs_unlocked(i8* %v1_867e, %_IO_FILE* %v0_8677)
  %v8_8684 = sext i32 %v6_8684 to i64
  store i64 %v8_8684, i64* %rax.global-to-local, align 8
  store i64 ptrtoint (i64* @global_var_2211a0.160 to i64), i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  %v0_8692 = load i64, i64* @rbx, align 8
  store i64 %v0_8692, i64* @rcx, align 8
  %v0_8695 = load i64, i64* @rbp, align 8
  store i64 %v0_8695, i64* @rdi, align 8
  %v0_8698 = load i64, i64* @global_var_2211f8.162, align 8
  %v2_8698 = add i64 %v0_8698, %v0_8692
  store i64 %v2_8698, i64* @global_var_2211f8.162, align 8
  %v1_86a4 = add i64 %v0_8695, 168
  %v2_86a4 = inttoptr i64 %v1_86a4 to i32*
  %v3_86a4 = load i32, i32* %v2_86a4, align 4
  %v4_86a4 = zext i32 %v3_86a4 to i64
  store i64 %v4_86a4, i64* @rdx, align 8
  store i64 %v8_8684, i64* @r12, align 8
  %v11_86ad = icmp eq i32 %v3_86a4, 6
  store i1 %v11_86ad, i1* %zf.global-to-local, align 1
  br i1 %v11_86ad, label %dec_label_pc_8800, label %dec_label_pc_86b6

dec_label_pc_86b6:                                ; preds = %dec_label_pc_8677
  %v0_86b6 = load i32, i32* @global_var_221314.24, align 4
  %v1_86b6 = zext i32 %v0_86b6 to i64
  store i64 %v1_86b6, i64* %rax.global-to-local, align 8
  %v5_86bc = icmp eq i32 %v0_86b6, 0
  store i1 %v5_86bc, i1* %zf.global-to-local, align 1
  br i1 %v5_86bc, label %dec_label_pc_86cf, label %dec_label_pc_86c0

dec_label_pc_86c0:                                ; preds = %dec_label_pc_86b6
  %v1_86c0 = add i64 %v0_8695, 184
  %v2_86c0 = inttoptr i64 %v1_86c0 to i8*
  %v3_86c0 = load i8, i8* %v2_86c0, align 1
  %v4_86c0 = zext i8 %v3_86c0 to i64
  store i64 %v4_86c0, i64* @rdi, align 8
  %v1_86c7 = add i64 %v0_8695, 48
  %v2_86c7 = inttoptr i64 %v1_86c7 to i32*
  %v3_86c7 = load i32, i32* %v2_86c7, align 4
  %v4_86c7 = zext i32 %v3_86c7 to i64
  store i64 %v4_86c7, i64* @rsi, align 8
  %v3_86ca = call i64 @function_6ef0(i8 %v3_86c0)
  store i64 %v3_86ca, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_86cf

dec_label_pc_86cf:                                ; preds = %dec_label_pc_8852, %dec_label_pc_880b, %dec_label_pc_8800, %dec_label_pc_86c0, %dec_label_pc_86b6
  %v0_86cf = load i64, i64* @rsp, align 8
  %v1_86cf = add i64 %v0_86cf, ptrtoint ([6 x i8]* @global_var_1318.304 to i64)
  %v2_86cf = inttoptr i64 %v1_86cf to i64*
  %v3_86cf = load i64, i64* %v2_86cf, align 8
  store i64 %v3_86cf, i64* %rax.global-to-local, align 8
  %v1_86d7 = call i64 @__readfsqword(i64 40)
  %v2_86d7 = xor i64 %v1_86d7, %v3_86cf
  %v3_86d7 = icmp eq i64 %v2_86d7, 0
  store i1 %v3_86d7, i1* %zf.global-to-local, align 1
  store i64 %v2_86d7, i64* %rax.global-to-local, align 8
  %v1_86e0 = icmp eq i1 %v3_86d7, false
  br i1 %v1_86e0, label %dec_label_pc_8ce6, label %dec_label_pc_86e6

dec_label_pc_86e6:                                ; preds = %dec_label_pc_86cf
  %v0_86e6 = load i64, i64* @rsp, align 8
  %v1_86e6 = add i64 %v0_86e6, ptrtoint ([13 x i8]* @global_var_1328.299 to i64)
  %v10_86e6 = icmp eq i64 %v1_86e6, 0
  store i1 %v10_86e6, i1* %zf.global-to-local, align 1
  %v1_86ed = inttoptr i64 %v1_86e6 to i64*
  %v2_86ed = load i64, i64* %v1_86ed, align 8
  store i64 %v2_86ed, i64* @rbx, align 8
  %v3_86ed = add i64 %v0_86e6, add (i64 ptrtoint ([13 x i8]* @global_var_1328.299 to i64), i64 8)
  %v1_86ee = inttoptr i64 %v3_86ed to i64*
  %v2_86ee = load i64, i64* %v1_86ee, align 8
  store i64 %v2_86ee, i64* %rbp.global-to-local, align 8
  %v3_86ef = add i64 %v0_86e6, add (i64 ptrtoint ([13 x i8]* @global_var_1328.299 to i64), i64 24)
  %v1_86f1 = inttoptr i64 %v3_86ef to i64*
  %v2_86f1 = load i64, i64* %v1_86f1, align 8
  store i64 %v2_86f1, i64* @r13, align 8
  %v3_86f1 = add i64 %v0_86e6, add (i64 ptrtoint ([13 x i8]* @global_var_1328.299 to i64), i64 32)
  %v1_86f3 = inttoptr i64 %v3_86f1 to i64*
  %v2_86f3 = load i64, i64* %v1_86f3, align 8
  store i64 %v2_86f3, i64* @r14, align 8
  %v3_86f3 = add i64 %v0_86e6, add (i64 ptrtoint ([13 x i8]* @global_var_1328.299 to i64), i64 40)
  %v1_86f5 = inttoptr i64 %v3_86f3 to i64*
  %v2_86f5 = load i64, i64* %v1_86f5, align 8
  store i64 %v2_86f5, i64* @r15, align 8
  ret i64 %v2_86d7

dec_label_pc_8700:                                ; preds = %dec_label_pc_8308
  %v1_8700 = add i64 %v0_8337, 168
  %v2_8700 = inttoptr i64 %v1_8700 to i32*
  %v3_8700 = load i32, i32* %v2_8700, align 4
  %v4_8700 = zext i32 %v3_8700 to i64
  store i64 %v4_8700, i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([11 x i8]* @global_var_16b90.305 to i64), i64* @rdx, align 8
  %v0_870d = load i8, i8* @global_var_221364.251, align 1
  %v7_870d = icmp eq i8 %v0_870d, 0
  store i1 %v7_870d, i1* %zf.global-to-local, align 1
  %v2_8714 = ptrtoint i64* %stack_var_-5468 to i64
  store i64 %v2_8714, i64* @r13, align 8
  %v3_8722 = add i64 %v4_8700, ptrtoint ([11 x i8]* @global_var_16b90.305 to i64)
  %v4_8722 = inttoptr i64 %v3_8722 to i8*
  %v5_8722 = load i8, i8* %v4_8722, align 1
  %v6_8722 = zext i8 %v5_8722 to i64
  store i64 %v6_8722, i64* %stack_var_-5468, align 8
  store i64 4557430888798830399, i64* %rax.global-to-local, align 8
  br i1 %v7_870d, label %dec_label_pc_836d, label %dec_label_pc_8752

dec_label_pc_8752:                                ; preds = %dec_label_pc_8700, %dec_label_pc_8344
  %v0_8752 = load i64, i64* @rbp, align 8
  %v1_8752 = add i64 %v0_8752, 188
  %v2_8752 = inttoptr i64 %v1_8752 to i32*
  %v3_8752 = load i32, i32* %v2_8752, align 4
  %v4_8752 = zext i32 %v3_8752 to i64
  store i64 %v4_8752, i64* %rax.global-to-local, align 8
  %v11_8758 = icmp eq i32 %v3_8752, 1
  store i1 %v11_8758, i1* %zf.global-to-local, align 1
  br i1 %v11_8758, label %dec_label_pc_836d, label %dec_label_pc_8761

dec_label_pc_8761:                                ; preds = %dec_label_pc_8752
  %v11_8761 = icmp eq i32 %v3_8752, 2
  store i1 %v11_8761, i1* %zf.global-to-local, align 1
  %v1_8764 = icmp eq i1 %v11_8761, false
  br i1 %v1_8764, label %dec_label_pc_836d, label %dec_label_pc_876a

dec_label_pc_876a:                                ; preds = %dec_label_pc_8761
  %v0_876a = load i32, i32* @global_var_221334.19, align 4
  %v1_876a = zext i32 %v0_876a to i64
  store i64 %v1_876a, i64* %rax.global-to-local, align 8
  %v11_8778 = icmp eq i32 %v0_876a, 1
  store i1 %v11_8778, i1* %zf.global-to-local, align 1
  %v1_877b = icmp eq i1 %v11_8778, false
  br i1 %v1_877b, label %dec_label_pc_837c, label %dec_label_pc_8788

dec_label_pc_8788:                                ; preds = %dec_label_pc_836d.dec_label_pc_8788_crit_edge, %dec_label_pc_876a
  %v0_87a2 = phi i64 [ %v0_878f.pre, %dec_label_pc_836d.dec_label_pc_8788_crit_edge ], [ %v0_8752, %dec_label_pc_876a ]
  %v0_8788 = load i8, i8* @global_var_2212fc.25, align 1
  %v7_8788 = icmp eq i8 %v0_8788, 0
  store i1 %v7_8788, i1* %zf.global-to-local, align 1
  %v1_878f = add i64 %v0_87a2, 128
  %v2_878f = inttoptr i64 %v1_878f to i64*
  %v3_878f = load i64, i64* %v2_878f, align 8
  store i64 %v3_878f, i64* @rdx, align 8
  %v1_8796 = add i64 %v0_87a2, 136
  %v2_8796 = inttoptr i64 %v1_8796 to i64*
  %v3_8796 = load i64, i64* %v2_8796, align 8
  store i64 %v3_8796, i64* %rax.global-to-local, align 8
  %v1_87a2 = add i64 %v0_87a2, 184
  %v2_87a2 = inttoptr i64 %v1_87a2 to i8*
  %v3_87a2 = load i8, i8* %v2_87a2, align 1
  %v4_87a2 = zext i8 %v3_87a2 to i64
  store i64 %v4_87a2, i64* @rdx, align 8
  %v1_87ae = icmp eq i1 %v7_8788, false
  br i1 %v1_87ae, label %dec_label_pc_83b1, label %dec_label_pc_87b4

dec_label_pc_87b4:                                ; preds = %dec_label_pc_8788, %dec_label_pc_839d
  %v0_8bc067 = phi i64 [ %v0_87a2, %dec_label_pc_8788 ], [ %v0_83a4, %dec_label_pc_839d ]
  %v0_843c65 = phi i64 [ %v4_87a2, %dec_label_pc_8788 ], [ %v4_83a4, %dec_label_pc_839d ]
  %stack_var_-5616.2 = phi i64 [ %v3_878f, %dec_label_pc_8788 ], [ %storemerge46, %dec_label_pc_839d ]
  %v2_87b4 = ptrtoint i64* %stack_var_-4416 to i64
  store i64 %v2_87b4, i64* @r12, align 8
  br label %dec_label_pc_8433

dec_label_pc_87c8:                                ; preds = %dec_label_pc_837c
  %v0_87c8 = load i64, i64* @rbp, align 8
  %v1_87c8 = add i64 %v0_87c8, 120
  %v2_87c8 = inttoptr i64 %v1_87c8 to i64*
  %v3_87c8 = load i64, i64* %v2_87c8, align 8
  store i64 %v3_87c8, i64* %rax.global-to-local, align 8
  %v1_87cc = add i64 %v0_87c8, 112
  br label %dec_label_pc_839d

dec_label_pc_87f0:                                ; preds = %dec_label_pc_8605
  %v0_87f0 = load i64, i64* @r13, align 8
  store i64 %v0_87f0, i64* @rbx, align 8
  br label %dec_label_pc_8605

dec_label_pc_8800:                                ; preds = %dec_label_pc_8677
  %v1_8800 = add i64 %v0_8695, 8
  %v2_8800 = inttoptr i64 %v1_8800 to i64*
  %v3_8800 = load i64, i64* %v2_8800, align 8
  %v10_8800 = icmp eq i64 %v3_8800, 0
  store i1 %v10_8800, i1* %zf.global-to-local, align 1
  br i1 %v10_8800, label %dec_label_pc_86cf, label %dec_label_pc_880b

dec_label_pc_880b:                                ; preds = %dec_label_pc_8800
  %v0_880b = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_880b = ptrtoint %_IO_FILE* %v0_880b to i64
  store i64 %v1_880b, i64* @rcx, align 8
  store i64 ptrtoint ([5 x i8]* @global_var_17c60.306 to i64), i64* @rdi, align 8
  store i64 4, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %v11_8823 = call i32 @fwrite_unlocked(i64* bitcast ([5 x i8]* @global_var_17c60.306 to i64*), i32 1, i32 4, %_IO_FILE* %v0_880b)
  %v13_8823 = sext i32 %v11_8823 to i64
  store i64 %v13_8823, i64* %rax.global-to-local, align 8
  %v0_8828 = load i64, i64* @rbx, align 8
  %v1_8828 = load i64, i64* @r12, align 8
  %v3_8828 = add i64 %v0_8828, 4
  %v4_8828 = add i64 %v3_8828, %v1_8828
  store i64 %v4_8828, i64* @rcx, align 8
  store i64 1, i64* @rsi, align 8
  %v0_8834 = load i64, i64* @rbp, align 8
  store i64 %v0_8834, i64* @rdi, align 8
  %v0_8837 = load i64, i64* @global_var_2211f8.162, align 8
  %v1_8837 = add i64 %v0_8837, 4
  store i64 %v1_8837, i64* @global_var_2211f8.162, align 8
  %v0_8844 = load i32, i32* @global_var_221314.24, align 4
  %v1_8844 = zext i32 %v0_8844 to i64
  store i64 %v1_8844, i64* @rdx, align 8
  %v5_884a = icmp eq i32 %v0_8844, 0
  store i1 %v5_884a, i1* %zf.global-to-local, align 1
  br i1 %v5_884a, label %dec_label_pc_86cf, label %dec_label_pc_8852

dec_label_pc_8852:                                ; preds = %dec_label_pc_880b
  %v1_8852 = add i64 %v0_8834, 172
  %v2_8852 = inttoptr i64 %v1_8852 to i32*
  %v3_8852 = load i32, i32* %v2_8852, align 4
  %v4_8852 = zext i32 %v3_8852 to i64
  store i64 %v4_8852, i64* @rsi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  %v3_885f = call i64 @function_6ef0(i8 1)
  store i64 %v3_885f, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_86cf

dec_label_pc_8870:                                ; preds = %dec_label_pc_8621
  %v0_8870 = load i64, i64* @rsp, align 8
  %v1_8870 = add i64 %v0_8870, 48
  store i64 %v1_8870, i64* @rbx, align 8
  %v0_8875 = load i64, i64* @global_var_2212a8.138, align 8
  store i64 %v0_8875, i64* @rdi, align 8
  %v1_887c = add i64 %v0_8870, 32
  store i64 %v1_887c, i64* @rsi, align 8
  store i64 %v1_8870, i64* @rdx, align 8
  %v3_8884 = call i64 @function_15a40(i64 %v0_8875, i64 %v1_887c, i64 %v1_8870)
  store i64 %v3_8884, i64* %rax.global-to-local, align 8
  %v1_8889 = icmp eq i64 %v3_8884, 0
  store i1 %v1_8889, i1* %zf.global-to-local, align 1
  br i1 %v1_8889, label %dec_label_pc_8a40, label %dec_label_pc_8892

dec_label_pc_8892:                                ; preds = %dec_label_pc_8870
  %v0_8892 = load i64, i64* @global_var_221370.12, align 8
  store i64 %v0_8892, i64* @rcx, align 8
  %v0_8899 = load i64, i64* @rsp, align 8
  %v1_8899 = add i64 %v0_8899, 32
  %v2_8899 = inttoptr i64 %v1_8899 to i64*
  %v3_8899 = load i64, i64* %v2_8899, align 8
  store i64 %v3_8899, i64* @rdx, align 8
  %v12_889e = icmp eq i64 %v0_8892, %v3_8899
  store i1 %v12_889e, i1* %zf.global-to-local, align 1
  %v5_88a1 = icmp slt i64 %v0_8892, %v3_8899
  br i1 %v5_88a1, label %dec_label_pc_8aa0, label %dec_label_pc_88a7

dec_label_pc_88a7:                                ; preds = %dec_label_pc_8892
  %v0_88a7 = load i32, i32* @global_var_221378.15, align 4
  %v1_88a7 = sext i32 %v0_88a7 to i64
  store i64 %v1_88a7, i64* @rsi, align 8
  %v1_88ae = add i64 %v0_8899, 40
  %v2_88ae = inttoptr i64 %v1_88ae to i64*
  %v3_88ae = load i64, i64* %v2_88ae, align 8
  %v8_88b3 = icmp sgt i64 %v0_8892, %v3_8899
  br i1 %v8_88b3, label %dec_label_pc_8c80, label %dec_label_pc_88b9

dec_label_pc_88b9:                                ; preds = %dec_label_pc_88a7
  %v3_88b9 = trunc i64 %v3_88ae to i32
  %v4_88b9 = sub i32 %v0_88a7, %v3_88b9
  %v14_88b9 = icmp eq i32 %v4_88b9, 0
  store i1 %v14_88b9, i1* %zf.global-to-local, align 1
  %v15_88b9 = icmp slt i32 %v4_88b9, 0
  store i64 %v1_88a7, i64* @r8, align 8
  store i64 %v3_88ae, i64* @rdi, align 8
  br i1 %v15_88b9, label %dec_label_pc_8aa0, label %dec_label_pc_88c8

dec_label_pc_88c8:                                ; preds = %dec_label_pc_88b9
  %v1_88c8 = add i64 %v0_8892, -15778476
  store i64 %v1_88c8, i64* @rcx, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v12_88d1 = icmp eq i64 %v1_88c8, %v3_8899
  store i1 %v12_88d1, i1* %zf.global-to-local, align 1
  %v5_88d4 = icmp slt i64 %v1_88c8, %v3_8899
  br i1 %v5_88d4, label %dec_label_pc_8af3, label %dec_label_pc_88e0

dec_label_pc_88e0:                                ; preds = %dec_label_pc_88c8, %dec_label_pc_8ca0, %dec_label_pc_8c95, %dec_label_pc_8c80, %dec_label_pc_8af3, %dec_label_pc_8ae2, %dec_label_pc_8ad4
  %v6_891d = phi i64 [ %v3_88ae, %dec_label_pc_88c8 ], [ %v2_8ca0, %dec_label_pc_8ca0 ], [ %v2_8ca0, %dec_label_pc_8c95 ], [ %v3_88ae, %dec_label_pc_8c80 ], [ %v0_8af3, %dec_label_pc_8af3 ], [ %v0_8aed, %dec_label_pc_8ae2 ], [ %v0_8aed, %dec_label_pc_8ad4 ]
  %v0_88fb = phi i64 [ %v0_8899, %dec_label_pc_88c8 ], [ %v0_88fb92, %dec_label_pc_8ca0 ], [ %v0_88fb92, %dec_label_pc_8c95 ], [ %v0_8899, %dec_label_pc_8c80 ], [ %v0_88fb93, %dec_label_pc_8af3 ], [ %v0_88fb94, %dec_label_pc_8ae2 ], [ %v0_88fb94, %dec_label_pc_8ad4 ]
  %v1_8bf7 = phi i64 [ 0, %dec_label_pc_88c8 ], [ 0, %dec_label_pc_8ca0 ], [ 0, %dec_label_pc_8c95 ], [ 1, %dec_label_pc_8c80 ], [ %v10_8af8, %dec_label_pc_8af3 ], [ 0, %dec_label_pc_8ae2 ], [ 1, %dec_label_pc_8ad4 ]
  %v0_88e0 = load i8, i8* @global_var_2203c8.243, align 1
  %v7_88e0 = icmp eq i8 %v0_88e0, 0
  store i1 %v7_88e0, i1* %zf.global-to-local, align 1
  %v0_88e7 = load i64, i64* @global_var_2212a8.138, align 8
  store i64 %v0_88e7, i64* @r8, align 8
  br i1 %v7_88e0, label %dec_label_pc_8bf0, label %dec_label_pc_88f4

dec_label_pc_88f4:                                ; preds = %dec_label_pc_88e0
  %tmp309 = sub nsw i64 0, %v1_8bf7
  %v3_88f4 = and i64 %tmp309, 2
  store i64 %v3_88f4, i64* @rdx, align 8
  %tmp310 = sub nsw i64 0, %v1_8bf7
  %v2_88f8 = and i64 %tmp310, 3
  store i64 %v2_88f8, i64* %rax.global-to-local, align 8
  %v1_88fb = add i64 %v0_88fb, 64
  %v2_88fb = inttoptr i64 %v1_88fb to i32*
  %v3_88fb = load i32, i32* %v2_88fb, align 4
  %v4_88fb = sext i32 %v3_88fb to i64
  %tmp311 = sub nsw i64 0, %v1_8bf7
  %v2_8900 = and i64 %tmp311, 12
  %v3_8900 = add nsw i64 %v4_88fb, %v2_8900
  store i64 ptrtoint (i32* @global_var_2203e0.245 to i64), i64* %rax.global-to-local, align 8
  %v2_890b = mul nsw i64 %v3_8900, 128
  store i64 %v2_890b, i64* @rdx, align 8
  %v2_890f = add i64 %v2_890b, ptrtoint (i32* @global_var_2203e0.245 to i64)
  %v12_890f = icmp eq i64 %v2_890f, 0
  store i1 %v12_890f, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8912

dec_label_pc_8912:                                ; preds = %dec_label_pc_8bf0, %dec_label_pc_88f4
  %storemerge = phi i64 [ %v5_8bf7, %dec_label_pc_8bf0 ], [ %v2_890f, %dec_label_pc_88f4 ]
  store i64 %storemerge, i64* @rdx, align 8
  %v0_8912 = load i64, i64* @rbx, align 8
  store i64 %v0_8912, i64* @rcx, align 8
  store i64 ptrtoint (i64* @global_var_3e9.307 to i64), i64* @rsi, align 8
  %v0_891a = load i64, i64* @r13, align 8
  store i64 %v0_891a, i64* @rdi, align 8
  %v7_891d = call i64 @function_11f80(i64 %v0_891a, i64* nonnull @global_var_3e9.307, i64 %storemerge, i64 %v0_8912, i64 %v0_88e7, i64 %v6_891d)
  store i64 %v7_891d, i64* %rax.global-to-local, align 8
  %v1_8922 = icmp eq i64 %v7_891d, 0
  store i1 %v1_8922, i1* %zf.global-to-local, align 1
  br i1 %v1_8922, label %dec_label_pc_8a40, label %dec_label_pc_892b

dec_label_pc_892b:                                ; preds = %dec_label_pc_8912
  %v0_892b = load i64, i64* @r13, align 8
  %v2_892b = add i64 %v0_892b, %v7_891d
  %v12_892b = icmp eq i64 %v2_892b, 0
  store i1 %v12_892b, i1* %zf.global-to-local, align 1
  store i64 %v2_892b, i64* @r13, align 8
  br label %dec_label_pc_8a4b

dec_label_pc_8938:                                ; preds = %dec_label_pc_84c6
  %v0_8938 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_8938 = ptrtoint %_IO_FILE* %v0_8938 to i64
  store i64 %v1_8938, i64* @rcx, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_17c53.308 to i64), i64* @rdi, align 8
  store i64 2, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %v10_8950 = call i32 @fwrite_unlocked(i64* bitcast ([3 x i8]* @global_var_17c53.308 to i64*), i32 1, i32 2, %_IO_FILE* %v0_8938)
  %v12_8950 = sext i32 %v10_8950 to i64
  store i64 %v12_8950, i64* %rax.global-to-local, align 8
  %v0_8955 = load i64, i64* @global_var_2211f8.162, align 8
  %v1_8955 = add i64 %v0_8955, 2
  %v10_8955 = icmp eq i64 %v1_8955, 0
  store i1 %v10_8955, i1* %zf.global-to-local, align 1
  store i64 %v1_8955, i64* @global_var_2211f8.162, align 8
  br label %dec_label_pc_850e

dec_label_pc_8968:                                ; preds = %dec_label_pc_84b7
  %v1_8968 = add i64 %v0_8968, 40
  %v2_8968 = inttoptr i64 %v1_8968 to i64*
  %v3_8968 = load i64, i64* %v2_8968, align 8
  store i64 %v3_8968, i64* @rdi, align 8
  %v2_896c = ptrtoint i64* %stack_var_-5424 to i64
  store i64 %v2_896c, i64* @rsi, align 8
  %v3_8974 = call i64 @function_fcf0(i64 %v3_8968, i64* nonnull %stack_var_-5424)
  store i64 %v3_8974, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_84c6

dec_label_pc_8980:                                ; preds = %dec_label_pc_8495, %dec_label_pc_844b
  %v0_8980 = load i64, i64* @rbx, align 8
  br label %dec_label_pc_8495

dec_label_pc_8990:                                ; preds = %dec_label_pc_8570
  %v0_8990 = load i64, i64* @rbp, align 8
  %v1_8990 = add i64 %v0_8990, 176
  %v2_8990 = inttoptr i64 %v1_8990 to i64*
  %v3_8990 = load i64, i64* %v2_8990, align 8
  store i64 %v3_8990, i64* @rdi, align 8
  %v0_8997 = load i32, i32* @global_var_221354.258, align 4
  %v1_8997 = zext i32 %v0_8997 to i64
  store i64 %v1_8997, i64* @rdx, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rsi, align 8
  %v3_899f = sext i32 %v0_8997 to i64
  %v4_899f = call i64 @function_6880(i64 %v3_8990, i64 0, i64 %v3_899f)
  store i64 %v4_899f, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_8580

dec_label_pc_89b0:                                ; preds = %dec_label_pc_8563
  %v0_89b0 = load i64, i64* @rbp, align 8
  %v1_89b0 = add i64 %v0_89b0, 184
  %v2_89b0 = inttoptr i64 %v1_89b0 to i8*
  %v3_89b0 = load i8, i8* %v2_89b0, align 1
  %v4_89b0 = zext i8 %v3_89b0 to i64
  store i64 %v4_89b0, i64* @rdx, align 8
  %v1_89b7 = add i64 %v0_89b0, 52
  %v2_89b7 = inttoptr i64 %v1_89b7 to i32*
  %v3_89b7 = load i32, i32* %v2_89b7, align 4
  %v4_89b7 = zext i32 %v3_89b7 to i64
  store i64 %v4_89b7, i64* @rdi, align 8
  %v0_89ba = load i32, i32* @global_var_221348.257, align 4
  %v1_89ba = zext i32 %v0_89ba to i64
  store i64 %v1_89ba, i64* @rsi, align 8
  %v8_89c0 = call i64 @function_6940(i32 %v3_89b7, i32 %v0_89ba, i8 %v3_89b0)
  store i64 %v8_89c0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_8570

dec_label_pc_89d0:                                ; preds = %dec_label_pc_8556
  %v0_89d0 = load i64, i64* @rbp, align 8
  %v1_89d0 = add i64 %v0_89d0, 184
  %v2_89d0 = inttoptr i64 %v1_89d0 to i8*
  %v3_89d0 = load i8, i8* %v2_89d0, align 1
  %v10_89d0 = icmp eq i8 %v3_89d0, 0
  store i1 %v10_89d0, i1* %zf.global-to-local, align 1
  %v0_89d7 = load i32, i32* @global_var_22134c.256, align 4
  %v1_89d7 = zext i32 %v0_89d7 to i64
  store i64 %v1_89d7, i64* @rdx, align 8
  store i64 ptrtoint (i8** @global_var_17c2e.271 to i64), i64* @rdi, align 8
  %v1_89e4 = add i64 %v0_89d0, 56
  %v2_89e4 = inttoptr i64 %v1_89e4 to i32*
  %v3_89e4 = load i32, i32* %v2_89e4, align 4
  %v4_89e4 = zext i32 %v3_89e4 to i64
  store i64 %v4_89e4, i64* @rsi, align 8
  br i1 %v10_89d0, label %dec_label_pc_8a10, label %dec_label_pc_89e9

dec_label_pc_89e9:                                ; preds = %dec_label_pc_89d0
  store i64 0, i64* @rdi, align 8
  %v0_89eb = load i8, i8* @global_var_22132d.22, align 1
  %v7_89eb = icmp eq i8 %v0_89eb, 0
  store i1 %v7_89eb, i1* %zf.global-to-local, align 1
  %v1_89f2 = icmp eq i1 %v7_89eb, false
  br i1 %v1_89f2, label %dec_label_pc_8a10, label %dec_label_pc_89f4

dec_label_pc_89f4:                                ; preds = %dec_label_pc_89e9
  store i64 %v4_89e4, i64* @rdi, align 8
  %v1_89ff = call i64 @function_fab0(i64 %v4_89e4)
  store i64 %v1_89ff, i64* %rax.global-to-local, align 8
  store i64 %v4_89e4, i64* @rsi, align 8
  store i64 %v1_89d7, i64* @rdx, align 8
  store i64 %v1_89ff, i64* @rdi, align 8
  br label %dec_label_pc_8a10

dec_label_pc_8a10:                                ; preds = %dec_label_pc_89f4, %dec_label_pc_89e9, %dec_label_pc_89d0
  %v0_8a10 = phi i64 [ %v1_89ff, %dec_label_pc_89f4 ], [ 0, %dec_label_pc_89e9 ], [ ptrtoint (i8** @global_var_17c2e.271 to i64), %dec_label_pc_89d0 ]
  %v3_8a10 = call i64 @function_6880(i64 %v0_8a10, i64 %v4_89e4, i64 %v1_89d7)
  store i64 %v3_8a10, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_8563

dec_label_pc_8a20:                                ; preds = %dec_label_pc_8530
  %v0_8a20 = load i64, i64* @rbp, align 8
  %v1_8a20 = add i64 %v0_8a20, 184
  %v2_8a20 = inttoptr i64 %v1_8a20 to i8*
  %v3_8a20 = load i8, i8* %v2_8a20, align 1
  %v4_8a20 = zext i8 %v3_8a20 to i64
  store i64 %v4_8a20, i64* @rdx, align 8
  %v1_8a27 = add i64 %v0_8a20, 52
  %v2_8a27 = inttoptr i64 %v1_8a27 to i32*
  %v3_8a27 = load i32, i32* %v2_8a27, align 4
  %v4_8a27 = zext i32 %v3_8a27 to i64
  store i64 %v4_8a27, i64* @rdi, align 8
  %v0_8a2a = load i32, i32* @global_var_221350.255, align 4
  %v1_8a2a = zext i32 %v0_8a2a to i64
  store i64 %v1_8a2a, i64* @rsi, align 8
  %v8_8a30 = call i64 @function_6940(i32 %v3_8a27, i32 %v0_8a2a, i8 %v3_8a20)
  store i64 %v8_8a30, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_8556

dec_label_pc_8a40:                                ; preds = %dec_label_pc_8912, %dec_label_pc_8870
  %v0_8a40 = load i64, i64* @r13, align 8
  %v1_8a40 = inttoptr i64 %v0_8a40 to i8*
  %v2_8a40 = load i8, i8* %v1_8a40, align 1
  %v9_8a40 = icmp eq i8 %v2_8a40, 0
  store i1 %v9_8a40, i1* %zf.global-to-local, align 1
  %v1_8a45 = icmp eq i1 %v9_8a40, false
  br i1 %v1_8a45, label %dec_label_pc_8ceb, label %dec_label_pc_8a4b

dec_label_pc_8a4b:                                ; preds = %dec_label_pc_8a40, %dec_label_pc_892b
  %v0_8a50 = phi i64 [ %v0_8a40, %dec_label_pc_8a40 ], [ %v2_892b, %dec_label_pc_892b ]
  store i64 32, i64* @rcx, align 8
  %v1_8a50 = add i64 %v0_8a50, 1
  store i64 %v1_8a50, i64* %rbx.global-to-local, align 8
  %v3_8a54 = inttoptr i64 %v0_8a50 to i16*
  store i16 32, i16* %v3_8a54, align 2
  %v0_8681.pre = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_8677

dec_label_pc_8a70:                                ; preds = %dec_label_pc_8520
  %v0_8a70 = load i8, i8* @global_var_221365.32, align 1
  %v7_8a70 = icmp eq i8 %v0_8a70, 0
  store i1 %v7_8a70, i1* %zf.global-to-local, align 1
  br i1 %v7_8a70, label %dec_label_pc_8580, label %dec_label_pc_8530

dec_label_pc_8a88:                                ; preds = %dec_label_pc_83bc
  %v2_8a88 = ptrtoint i64* %stack_var_-5424 to i64
  store i64 %v2_8a88, i64* @rsi, align 8
  %v3_8a90 = call i64 @function_fcf0(i64 %v3_83bc, i64* nonnull %stack_var_-5424)
  store i64 %v3_8a90, i64* %rax.global-to-local, align 8
  store i64 %v3_8a90, i64* @r9, align 8
  br label %dec_label_pc_83c9

dec_label_pc_8aa0:                                ; preds = %dec_label_pc_88b9, %dec_label_pc_8892
  store i64 ptrtoint (i64* @global_var_221370.12 to i64), i64* @rdi, align 8
  %v2_8aa7 = call i64 @function_d7d0(i64* nonnull @global_var_221370.12)
  store i64 %v2_8aa7, i64* %rax.global-to-local, align 8
  %v0_8aac = load i64, i64* @global_var_221370.12, align 8
  store i64 %v0_8aac, i64* @rcx, align 8
  %v0_8ab3 = load i64, i64* @rsp, align 8
  %v1_8ab3 = add i64 %v0_8ab3, 32
  %v2_8ab3 = inttoptr i64 %v1_8ab3 to i64*
  %v3_8ab3 = load i64, i64* %v2_8ab3, align 8
  store i64 %v3_8ab3, i64* @rdx, align 8
  %v0_8ab8 = load i32, i32* @global_var_221378.15, align 4
  %v1_8ab8 = sext i32 %v0_8ab8 to i64
  store i64 %v1_8ab8, i64* @rsi, align 8
  %v1_8abf = add i64 %v0_8ab3, 40
  %v2_8abf = inttoptr i64 %v1_8abf to i64*
  %v3_8abf = load i64, i64* %v2_8abf, align 8
  %v1_8ac4 = add i64 %v0_8aac, -15778476
  store i64 %v1_8ac4, i64* @rdi, align 8
  %v12_8acb = icmp eq i64 %v1_8ac4, %v3_8ab3
  store i1 %v12_8acb, i1* %zf.global-to-local, align 1
  %v5_8ace = icmp slt i64 %v1_8ac4, %v3_8ab3
  br i1 %v5_8ace, label %dec_label_pc_8ad4, label %dec_label_pc_8c95

dec_label_pc_8ad4:                                ; preds = %dec_label_pc_8ca0, %dec_label_pc_8aa0
  %v0_88fb94 = phi i64 [ %v0_88fb92, %dec_label_pc_8ca0 ], [ %v0_8ab3, %dec_label_pc_8aa0 ]
  %v0_8af0 = phi i64 [ %v0_8ca0, %dec_label_pc_8ca0 ], [ %v1_8ab8, %dec_label_pc_8aa0 ]
  %v0_8aed = phi i64 [ %v2_8ca0, %dec_label_pc_8ca0 ], [ %v3_8abf, %dec_label_pc_8aa0 ]
  %v1_8ad4 = phi i64 [ %v0_8c97, %dec_label_pc_8ca0 ], [ %v3_8ab3, %dec_label_pc_8aa0 ]
  %v0_8ad4 = phi i64 [ %v0_8ad483, %dec_label_pc_8ca0 ], [ %v0_8aac, %dec_label_pc_8aa0 ]
  %v12_8ad4 = icmp eq i64 %v0_8ad4, %v1_8ad4
  store i1 %v12_8ad4, i1* %zf.global-to-local, align 1
  store i64 1, i64* %rax.global-to-local, align 8
  %v8_8adc = icmp sgt i64 %v0_8ad4, %v1_8ad4
  br i1 %v8_8adc, label %dec_label_pc_88e0, label %dec_label_pc_8ae2

dec_label_pc_8ae2:                                ; preds = %dec_label_pc_8ad4
  store i64 0, i64* %rax.global-to-local, align 8
  %v5_8ae7 = icmp slt i64 %v0_8ad4, %v1_8ad4
  br i1 %v5_8ae7, label %dec_label_pc_88e0, label %dec_label_pc_8aed

dec_label_pc_8aed:                                ; preds = %dec_label_pc_8ae2
  store i64 %v0_8aed, i64* @rdi, align 8
  store i64 %v0_8af0, i64* @r8, align 8
  br label %dec_label_pc_8af3

dec_label_pc_8af3:                                ; preds = %dec_label_pc_8aed, %dec_label_pc_88c8
  %v0_88fb93 = phi i64 [ %v0_88fb94, %dec_label_pc_8aed ], [ %v0_8899, %dec_label_pc_88c8 ]
  %v2_8af5 = phi i64 [ %v0_8af0, %dec_label_pc_8aed ], [ %v1_88a7, %dec_label_pc_88c8 ]
  %v0_8af3 = phi i64 [ %v0_8aed, %dec_label_pc_8aed ], [ %v3_88ae, %dec_label_pc_88c8 ]
  %v1_8af5 = trunc i64 %v0_8af3 to i32
  %v3_8af5 = trunc i64 %v2_8af5 to i32
  %v4_8af5 = sub i32 %v1_8af5, %v3_8af5
  %tmp312 = icmp slt i32 %v4_8af5, 0
  %v4_8af8 = icmp eq i1 %tmp312, false
  store i1 %v4_8af8, i1* %zf.global-to-local, align 1
  %v10_8af8 = zext i1 %tmp312 to i64
  store i64 %v10_8af8, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_88e0

dec_label_pc_8b00:                                ; preds = %dec_label_pc_858d
  %v0_8b00 = load i32, i32* @global_var_221344.259, align 4
  %v1_8b00 = zext i32 %v0_8b00 to i64
  store i64 %v1_8b00, i64* @rdx, align 8
  %v0_8b06 = load i32, i32* bitcast (i8** @global_var_221340.260 to i32*), align 8
  %v1_8b06 = zext i32 %v0_8b06 to i64
  %v2_8b0c = ptrtoint i64* %stack_var_-5424 to i64
  store i64 %v2_8b0c, i64* @rsi, align 8
  %v0_8b14 = load i32, i32* @global_var_22133c.261, align 4
  %v3_8b1b = add nuw nsw i64 %v1_8b00, 2
  %v4_8b1b = add nuw nsw i64 %v3_8b1b, %v1_8b06
  store i64 %v4_8b1b, i64* %rax.global-to-local, align 8
  %v3_8b1f = trunc i64 %v4_8b1b to i32
  %v4_8b1f = sub i32 %v0_8b14, %v3_8b1f
  %v20_8b1f = zext i32 %v4_8b1f to i64
  store i64 %v20_8b1f, i64* %r13.global-to-local, align 8
  %v1_8b22 = add i64 %v0_8580, 64
  %v2_8b22 = inttoptr i64 %v1_8b22 to i64*
  %v3_8b22 = load i64, i64* %v2_8b22, align 8
  store i64 %v3_8b22, i64* @rdx, align 8
  %v2_8b29 = udiv i64 %v3_8b22, 4096
  store i64 %v2_8b29, i64* %rax.global-to-local, align 8
  %v12_8b30 = and i64 %v2_8b29, 4503599627370240
  %v4_8b3336 = or i64 %v12_8b30, %v3_8b22
  %v4_8b33 = trunc i64 %v4_8b3336 to i32
  %v5_8b33 = icmp eq i32 %v4_8b33, 0
  store i1 %v5_8b33, i1* %zf.global-to-local, align 1
  %v11_8b33 = and i64 %v4_8b3336, 4294967295
  store i64 %v11_8b33, i64* @rdi, align 8
  %v3_8b35 = call i64 @function_fcf0(i64 %v11_8b33, i64* nonnull %stack_var_-5424)
  store i64 %v3_8b35, i64* %rax.global-to-local, align 8
  store i64 %v3_8b35, i64* @r15, align 8
  %v0_8b3d = load i64, i64* @rbp, align 8
  %v1_8b3d = add i64 %v0_8b3d, 64
  %v2_8b3d = inttoptr i64 %v1_8b3d to i64*
  %v3_8b3d = load i64, i64* %v2_8b3d, align 8
  %v2_8b41 = ptrtoint i64* %stack_var_-5456 to i64
  store i64 %v2_8b41, i64* @rsi, align 8
  %v0_8b49 = load i32, i32* bitcast (i8** @global_var_221340.260 to i32*), align 8
  %v1_8b49 = zext i32 %v0_8b49 to i64
  store i64 %v1_8b49, i64* @r14, align 8
  %v2_8b53 = udiv i64 %v3_8b3d, 4294967296
  store i64 %v2_8b53, i64* %rax.global-to-local, align 8
  %v2_8b57 = udiv i64 %v3_8b3d, 256
  %v1_8b60 = trunc i64 %v2_8b57 to i32
  %v2_8b60 = and i32 %v1_8b60, ptrtoint (i32* @global_var_fff.310 to i32)
  %v9_8b60 = zext i32 %v2_8b60 to i64
  store i64 %v9_8b60, i64* @rdx, align 8
  %v1_8b66 = trunc i64 %v2_8b53 to i32
  %v2_8b66 = and i32 %v1_8b66, -4096
  %v4_8b6c = or i32 %v2_8b60, %v2_8b66
  %v5_8b6c = icmp eq i32 %v4_8b6c, 0
  store i1 %v5_8b6c, i1* %zf.global-to-local, align 1
  %v11_8b6c = zext i32 %v4_8b6c to i64
  store i64 %v11_8b6c, i64* @rdi, align 8
  %v3_8b6e = call i64 @function_fcf0(i64 %v11_8b6c, i64* nonnull %stack_var_-5456)
  %v0_8b73 = load i64, i64* %r13.global-to-local, align 8
  %v4_8b73 = trunc i64 %v0_8b73 to i32
  %v6_8b73 = icmp slt i32 %v4_8b73, 0
  %v0_8b7c = load i64, i64* @r15, align 8
  %v4_8b7c = inttoptr i64 %v0_8b7c to i8*
  %v1_8b7e = icmp eq i1 %v6_8b73, false
  %v1_8b82 = select i1 %v1_8b7e, i32 %v4_8b73, i32 0
  %v2_8b82 = load i32, i32* @global_var_221344.259, align 4
  %v3_8b82 = add i32 %v1_8b82, %v2_8b82
  %v19_8b82 = zext i32 %v3_8b82 to i64
  store i64 %v19_8b82, i64* @r8, align 8
  %v0_8b89 = load i64, i64* @r14, align 8
  %v4_8b89 = inttoptr i64 %v0_8b89 to i8*
  store i8* %v4_8b89, i8** %stack_var_-5664, align 8
  store i64 ptrtoint ([10 x i8]* @global_var_17c56.311 to i64), i64* @rcx, align 8
  store i64 %v3_8b6e, i64* @r9, align 8
  store i64 1, i64* @rsi, align 8
  %v0_8b9a = load i64, i64* @rbx, align 8
  %v1_8b9a = inttoptr i64 %v0_8b9a to i8*
  store i64 %v0_8b9a, i64* @rdi, align 8
  store i64 -1, i64* @rdx, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  %v13_8ba6 = sext i32 %v3_8b82 to i64
  %v15_8ba6 = inttoptr i64 %v3_8b6e to i8*
  %v21_8ba6 = call i32 (i8*, i32, i32, i8*, ...) @__sprintf_chk(i8* %v1_8b9a, i32 1, i32 -1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_17c56.311, i64 0, i64 0), i64 %v13_8ba6, i8* %v15_8ba6, i64 %v0_8b89, i8* %v4_8b7c)
  %v0_8bab = load i32, i32* @global_var_22133c.261, align 4
  %v1_8bab = sext i32 %v0_8bab to i64
  store i64 %v1_8bab, i64* %rax.global-to-local, align 8
  %v2_8bb2 = load i8*, i8** %stack_var_-5664, align 8
  %v3_8bb2 = ptrtoint i8* %v2_8bb2 to i64
  store i64 %v3_8bb2, i64* @rsi, align 8
  store i64 %v0_8b7c, i64* @rdi, align 8
  %v0_8bb4 = load i64, i64* @rbx, align 8
  %v3_8bb4 = add nsw i64 %v1_8bab, 1
  %v4_8bb4 = add i64 %v3_8bb4, %v0_8bb4
  store i64 %v4_8bb4, i64* @r13, align 8
  br label %dec_label_pc_8621

dec_label_pc_8bc0:                                ; preds = %dec_label_pc_843c
  %v1_8bc0 = add i64 %v0_8bc0, 88
  %v2_8bc0 = inttoptr i64 %v1_8bc0 to i64*
  %v3_8bc0 = load i64, i64* %v2_8bc0, align 8
  store i64 %v3_8bc0, i64* @rdi, align 8
  %v0_8bc4 = load i64, i64* @global_var_221320.55, align 8
  store i64 %v0_8bc4, i64* @r8, align 8
  %v2_8bcb = ptrtoint i64* %stack_var_-5424 to i64
  store i64 %v2_8bcb, i64* @rsi, align 8
  %v0_8bd3 = load i32, i32* bitcast (i64* @global_var_221328.53 to i32*), align 8
  %v1_8bd3 = zext i32 %v0_8bd3 to i64
  store i64 %v1_8bd3, i64* @rdx, align 8
  store i64 512, i64* @rcx, align 8
  %v7_8bde = load i64, i64* @r9, align 8
  %v8_8bde = call i64 @function_ed10(i64 %v3_8bc0, i64* nonnull %stack_var_-5424, i32 %v0_8bd3, i64 512, i64 %v0_8bc4, i64 %v7_8bde)
  store i64 %v8_8bde, i64* %rax.global-to-local, align 8
  store i64 %v8_8bde, i64* @r15, align 8
  br label %dec_label_pc_844b

dec_label_pc_8bf0:                                ; preds = %dec_label_pc_88e0
  store i64 ptrtoint ([2 x i8*]* @global_var_220040.181 to i64), i64* @rdx, align 8
  %tmp313 = sub nsw i64 0, %v1_8bf7
  %v2_8bf7 = and i64 %tmp313, 8
  %v3_8bf7 = add i64 %v2_8bf7, ptrtoint ([2 x i8*]* @global_var_220040.181 to i64)
  %v4_8bf7 = inttoptr i64 %v3_8bf7 to i64*
  %v5_8bf7 = load i64, i64* %v4_8bf7, align 8
  br label %dec_label_pc_8912

dec_label_pc_8c00:                                ; preds = %dec_label_pc_863a
  %v2_8c00 = ptrtoint i64* %stack_var_-5536 to i64
  store i64 %v2_8c00, i64* @r15, align 8
  %v0_8c05 = load i64, i64* @global_var_2212a8.138, align 8
  store i64 %v0_8c05, i64* @rdi, align 8
  %v2_8c0c = ptrtoint i64* %stack_var_-5624 to i64
  store i64 %v2_8c0c, i64* @rsi, align 8
  store i64 0, i64* %stack_var_-5624, align 8
  store i64 %v2_8c00, i64* @rdx, align 8
  %v3_8c1d = call i64 @function_15a40(i64 %v0_8c05, i64 %v2_8c0c, i64 %v2_8c00)
  store i64 %v3_8c1d, i64* %rax.global-to-local, align 8
  %v1_8c22 = icmp eq i64 %v3_8c1d, 0
  store i1 %v1_8c22, i1* %zf.global-to-local, align 1
  br i1 %v1_8c22, label %dec_label_pc_8c5e, label %dec_label_pc_8c27

dec_label_pc_8c27:                                ; preds = %dec_label_pc_8c00
  %v0_8c27 = load i8, i8* @global_var_2203c8.243, align 1
  %v7_8c27 = icmp eq i8 %v0_8c27, 0
  store i1 %v7_8c27, i1* %zf.global-to-local, align 1
  %v0_8c2e = load i64, i64* @global_var_2212a8.138, align 8
  store i64 %v0_8c2e, i64* @r8, align 8
  %v0_8c35 = load i64, i64* bitcast ([2 x i8*]* @global_var_220040.181 to i64*), align 8
  store i64 %v0_8c35, i64* @rdx, align 8
  %v1_8c3c = icmp eq i1 %v7_8c27, false
  br i1 %v1_8c3c, label %dec_label_pc_8cae, label %dec_label_pc_8c3e

dec_label_pc_8c3e:                                ; preds = %dec_label_pc_8cae, %dec_label_pc_8c27
  %v3_8c54 = phi i64 [ %v2_8cc1, %dec_label_pc_8cae ], [ %v0_8c35, %dec_label_pc_8c27 ]
  %v2_8c3e = ptrtoint i64* %stack_var_-5424 to i64
  store i64 %v2_8c3e, i64* @r14, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 %v2_8c00, i64* @rcx, align 8
  store i64 ptrtoint (i64* @global_var_3e9.307 to i64), i64* @rsi, align 8
  store i64 %v2_8c3e, i64* @rdi, align 8
  %v7_8c54 = call i64 @function_11f80(i64 %v2_8c3e, i64* nonnull @global_var_3e9.307, i64 %v3_8c54, i64 %v2_8c00, i64 %v0_8c2e, i64 0)
  store i64 %v7_8c54, i64* %rax.global-to-local, align 8
  %v1_8c59 = icmp eq i64 %v7_8c54, 0
  store i1 %v1_8c59, i1* %zf.global-to-local, align 1
  %v1_8c5c = icmp eq i1 %v1_8c59, false
  br i1 %v1_8c5c, label %dec_label_pc_8cc9, label %dec_label_pc_8c5e

dec_label_pc_8c5e:                                ; preds = %dec_label_pc_8c3e, %dec_label_pc_8c00
  %v0_8c5e = load i32, i32* @global_var_220014.303, align 4
  %v1_8c5e = zext i32 %v0_8c5e to i64
  store i64 %v1_8c5e, i64* @r8, align 8
  br label %dec_label_pc_8c65

dec_label_pc_8c65:                                ; preds = %dec_label_pc_8cc9, %dec_label_pc_8c5e
  %v0_8c65 = phi i64 [ %v5_8cd1, %dec_label_pc_8cc9 ], [ %v1_8c5e, %dec_label_pc_8c5e ]
  %v4_8c65 = trunc i64 %v0_8c65 to i32
  %v5_8c65 = icmp eq i32 %v4_8c65, 0
  store i1 %v5_8c65, i1* %zf.global-to-local, align 1
  %v6_8c65 = icmp slt i32 %v4_8c65, 0
  %v1_8c68 = icmp eq i1 %v6_8c65, false
  br i1 %v1_8c68, label %dec_label_pc_864a, label %dec_label_pc_8c6e

dec_label_pc_8c6e:                                ; preds = %dec_label_pc_8c65
  store i32 0, i32* @global_var_220014.303, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @r8, align 8
  br label %dec_label_pc_864a

dec_label_pc_8c80:                                ; preds = %dec_label_pc_88a7
  %v1_8c80 = add i64 %v0_8892, -15778476
  store i64 %v1_8c80, i64* @rdi, align 8
  store i64 1, i64* %rax.global-to-local, align 8
  %v12_8c8c = icmp eq i64 %v1_8c80, %v3_8899
  store i1 %v12_8c8c, i1* %zf.global-to-local, align 1
  %v5_8c8f = icmp slt i64 %v1_8c80, %v3_8899
  br i1 %v5_8c8f, label %dec_label_pc_88e0, label %dec_label_pc_8c95

dec_label_pc_8c95:                                ; preds = %dec_label_pc_8aa0, %dec_label_pc_8c80
  %v0_88fb92 = phi i64 [ %v0_8ab3, %dec_label_pc_8aa0 ], [ %v0_8899, %dec_label_pc_8c80 ]
  %v0_8ad483 = phi i64 [ %v0_8aac, %dec_label_pc_8aa0 ], [ %v0_8892, %dec_label_pc_8c80 ]
  %v2_8ca0 = phi i64 [ %v3_8abf, %dec_label_pc_8aa0 ], [ %v3_88ae, %dec_label_pc_8c80 ]
  %v0_8ca0 = phi i64 [ %v1_8ab8, %dec_label_pc_8aa0 ], [ %v1_88a7, %dec_label_pc_8c80 ]
  %v1_8c97 = phi i64 [ %v1_8ac4, %dec_label_pc_8aa0 ], [ %v1_8c80, %dec_label_pc_8c80 ]
  %v0_8c97 = phi i64 [ %v3_8ab3, %dec_label_pc_8aa0 ], [ %v3_8899, %dec_label_pc_8c80 ]
  store i64 0, i64* %rax.global-to-local, align 8
  %v12_8c97 = icmp eq i64 %v0_8c97, %v1_8c97
  store i1 %v12_8c97, i1* %zf.global-to-local, align 1
  %v5_8c9a = icmp slt i64 %v0_8c97, %v1_8c97
  br i1 %v5_8c9a, label %dec_label_pc_88e0, label %dec_label_pc_8ca0

dec_label_pc_8ca0:                                ; preds = %dec_label_pc_8c95
  %v1_8ca0 = trunc i64 %v0_8ca0 to i32
  %v3_8ca0 = trunc i64 %v2_8ca0 to i32
  %v4_8ca0 = sub i32 %v1_8ca0, %v3_8ca0
  %v14_8ca0 = icmp eq i32 %v4_8ca0, 0
  store i1 %v14_8ca0, i1* %zf.global-to-local, align 1
  %v15_8ca0 = icmp slt i32 %v4_8ca0, 0
  %v1_8ca3 = icmp eq i1 %v15_8ca0, false
  br i1 %v1_8ca3, label %dec_label_pc_88e0, label %dec_label_pc_8ad4

dec_label_pc_8cae:                                ; preds = %dec_label_pc_8c27
  %v4_8cae = sext i32 %tmp240 to i64
  store i64 ptrtoint (i32* @global_var_2203e0.245 to i64), i64* %rax.global-to-local, align 8
  %v2_8cbd = mul nsw i64 %v4_8cae, 128
  %v2_8cc1 = add i64 %v2_8cbd, ptrtoint (i32* @global_var_2203e0.245 to i64)
  %v12_8cc1 = icmp eq i64 %v2_8cc1, 0
  store i1 %v12_8cc1, i1* %zf.global-to-local, align 1
  store i64 %v2_8cc1, i64* @rdx, align 8
  br label %dec_label_pc_8c3e

dec_label_pc_8cc9:                                ; preds = %dec_label_pc_8c3e
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rdx, align 8
  store i64 %v7_8c54, i64* @rsi, align 8
  store i64 %v2_8c3e, i64* @rdi, align 8
  %v5_8cd1 = call i64 @function_101b0(i64 %v2_8c3e, i64 %v7_8c54, i32 0)
  store i64 %v5_8cd1, i64* %rax.global-to-local, align 8
  store i64 %v5_8cd1, i64* @r8, align 8
  %v1_8cd9 = trunc i64 %v5_8cd1 to i32
  store i32 %v1_8cd9, i32* @global_var_220014.303, align 4
  br label %dec_label_pc_8c65

dec_label_pc_8ce1:                                ; preds = %dec_label_pc_8382
  call void @abort()
  unreachable

dec_label_pc_8ce6:                                ; preds = %dec_label_pc_86cf
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_8ceb

dec_label_pc_8ceb:                                ; preds = %dec_label_pc_8ce6, %dec_label_pc_8a40
  %v0_8ceb = load i64, i64* @rbp, align 8
  %v1_8ceb = add i64 %v0_8ceb, 184
  %v2_8ceb = inttoptr i64 %v1_8ceb to i8*
  %v3_8ceb = load i8, i8* %v2_8ceb, align 1
  %v10_8ceb = icmp eq i8 %v3_8ceb, 0
  store i1 %v10_8ceb, i1* %zf.global-to-local, align 1
  store i64 ptrtoint (i8** @global_var_17c2e.271 to i64), i64* @rbx, align 8
  br i1 %v10_8ceb, label %dec_label_pc_863a, label %dec_label_pc_8cff

dec_label_pc_8cff:                                ; preds = %dec_label_pc_8ceb
  store i64 %stack_var_-5616.1, i64* @rdi, align 8
  %v2_8d04 = ptrtoint i64* %stack_var_-5456 to i64
  store i64 %v2_8d04, i64* @rsi, align 8
  %v3_8d0c = call i64 @function_fc50(i64 %stack_var_-5616.1, i64* nonnull %stack_var_-5456)
  store i64 %v3_8d0c, i64* %rax.global-to-local, align 8
  store i64 %v3_8d0c, i64* @rbx, align 8
  br label %dec_label_pc_863a
}

define i64 @function_8d20(i64 %arg1, i64 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8d20:
  %r10.global-to-local = alloca i64, align 8
  %r11.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r9.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  %tmp95 = sext i32 %arg3 to i64
  store i64 %tmp95, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-9000 = alloca i64, align 8
  %stack_var_-8960 = alloca i64, align 8
  %stack_var_-8280 = alloca i64, align 8
  %stack_var_-8240 = alloca i64, align 8
  %stack_var_-8249 = alloca i64, align 8
  %stack_var_-8248 = alloca i64, align 8
  %stack_var_-8232 = alloca i64, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_8d20 = load i64, i64* @rbp, align 8
  %v0_8d21 = load i64, i64* @rbx, align 8
  store i64 %v0_8d21, i64* %stack_var_-16, align 8
  %v0_8d22 = load i64, i64* @rdi, align 8
  store i64 %v0_8d22, i64* @rbp, align 8
  %v0_8d25 = load i64, i64* @rdx, align 8
  store i64 %v0_8d25, i64* @rcx, align 8
  %v0_8d27 = load i64, i64* @rsi, align 8
  store i64 %v0_8d27, i64* @rdx, align 8
  store i64 %v0_8d22, i64* @rsi, align 8
  %v2_8d34 = ptrtoint i64* %stack_var_-8232 to i64
  store i64 %v2_8d34, i64* @rbx, align 8
  %v2_8d39 = ptrtoint i64* %stack_var_-8248 to i64
  store i64 %v2_8d39, i64* @rdi, align 8
  %v2_8d3e = ptrtoint i64* %stack_var_-8249 to i64
  store i64 %v2_8d3e, i64* %r9.global-to-local, align 8
  %v2_8d43 = ptrtoint i64* %stack_var_-8240 to i64
  %v3_8d43 = trunc i64 %v2_8d43 to i32
  store i64 %v2_8d43, i64* @r8, align 8
  %v0_8d48 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  store i64 %v2_8d34, i64* %stack_var_-8248, align 8
  %sext = mul i64 %v0_8d25, 4294967296
  %v5_8d60 = sdiv i64 %sext, 4294967296
  %v12_8d60 = call i64 @function_74a0(i64* nonnull %stack_var_-8248, i64 %v0_8d22, i64 %v0_8d27, i64 %v5_8d60, i32 %v3_8d43, i64* nonnull %stack_var_-8249, i64 %v2_8d34)
  store i64 %v12_8d60, i64* %rax.global-to-local, align 8
  %v3_8d65 = load i64, i64* %stack_var_-8248, align 8
  store i64 %v3_8d65, i64* @rdi, align 8
  %v1_8d6a = load i64, i64* @rbx, align 8
  %v12_8d6a = icmp eq i64 %v3_8d65, %v1_8d6a
  br i1 %v12_8d6a, label %dec_label_pc_8d79, label %dec_label_pc_8d6f

dec_label_pc_8d6f:                                ; preds = %dec_label_pc_8d20
  %v1_8d6f = load i64, i64* @rbp, align 8
  %v12_8d6f = icmp eq i64 %v3_8d65, %v1_8d6f
  br i1 %v12_8d6f, label %dec_label_pc_8d79, label %dec_label_pc_8d74

dec_label_pc_8d74:                                ; preds = %dec_label_pc_8d6f
  %v1_8d74 = inttoptr i64 %v3_8d65 to i64*
  call void @free(i64* %v1_8d74)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_8d79

dec_label_pc_8d79:                                ; preds = %dec_label_pc_8d74, %dec_label_pc_8d6f, %dec_label_pc_8d20
  %v3_8d79 = load i64, i64* %stack_var_-8249, align 8
  %v4_8d7e = load i64, i64* %stack_var_-8240, align 8
  %v5_8d7e = add i64 %v4_8d7e, %v3_8d79
  store i64 %v5_8d7e, i64* %rax.global-to-local, align 8
  store i64 %v0_8d48, i64* @rcx, align 8
  %v1_8d8b = call i64 @__readfsqword(i64 40)
  %v2_8d8b = xor i64 %v1_8d8b, %v0_8d48
  %v3_8d8b = icmp eq i64 %v2_8d8b, 0
  store i64 %v2_8d8b, i64* @rcx, align 8
  %v1_8d94 = icmp eq i1 %v3_8d8b, false
  br i1 %v1_8d94, label %dec_label_pc_8da0, label %dec_label_pc_8d96

dec_label_pc_8d96:                                ; preds = %dec_label_pc_8d79
  %v2_8d9d = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_8d9d, i64* @rbx, align 8
  store i64 %v0_8d20, i64* %rbp.global-to-local, align 8
  %v0_8d9f = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_8d9f

dec_label_pc_8da0:                                ; preds = %dec_label_pc_8d79
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_8db0 = load i64, i64* @rbp, align 8
  store i64 %v2_8d34, i64* %stack_var_-8280, align 8
  store i64 %v3_8d65, i64* @rbp, align 8
  %v16_8db5 = ptrtoint i64* %stack_var_-8960 to i64
  %v0_8dbc = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_8dcf = load i8, i8* @global_var_2212fc.25, align 1
  %v7_8dcf = icmp eq i8 %v0_8dcf, 0
  br i1 %v7_8dcf, label %dec_label_pc_8e88, label %dec_label_pc_8ddc

dec_label_pc_8ddc:                                ; preds = %dec_label_pc_8da0
  %v0_8ddc = load i32, i32* @global_var_221338.17, align 4
  %v10_8ddc = icmp eq i32 %v0_8ddc, 4
  br i1 %v10_8ddc, label %dec_label_pc_8f20, label %dec_label_pc_8de9

dec_label_pc_8de9:                                ; preds = %dec_label_pc_8ddc
  store i64 ptrtoint (i64* @global_var_221361.313 to i64), i64* @rbx, align 8
  %v0_8df4 = load i8, i8* @global_var_22132c.23, align 1
  %v7_8df4 = icmp eq i8 %v0_8df4, 0
  br i1 %v7_8df4, label %dec_label_pc_8f08, label %dec_label_pc_8e01

dec_label_pc_8e01:                                ; preds = %dec_label_pc_8e97, %dec_label_pc_8de9
  %v0_8e0c29 = phi i64 [ %storemerge21, %dec_label_pc_8e97 ], [ ptrtoint (i64* @global_var_221361.313 to i64), %dec_label_pc_8de9 ]
  store i64 ptrtoint (i64* @global_var_22135d.314 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_8e0c

dec_label_pc_8e0c:                                ; preds = %dec_label_pc_8eb6, %dec_label_pc_8ea4, %dec_label_pc_8e01
  %v1_8e0c = phi i64 [ %v1_8edc, %dec_label_pc_8eb6 ], [ 2, %dec_label_pc_8ea4 ], [ ptrtoint (i64* @global_var_22135d.314 to i64), %dec_label_pc_8e01 ]
  %v0_8e0c = phi i64 [ %v0_8e0c.pre, %dec_label_pc_8eb6 ], [ %storemerge21, %dec_label_pc_8ea4 ], [ %v0_8e0c29, %dec_label_pc_8e01 ]
  %v2_8e0c = add i64 %v0_8e0c, %v1_8e0c
  store i64 %v2_8e0c, i64* @rbx, align 8
  br label %dec_label_pc_8e0f

dec_label_pc_8e0f:                                ; preds = %dec_label_pc_8e8a, %dec_label_pc_8e0c
  %v0_8efc33 = phi i64 [ %storemerge21, %dec_label_pc_8e8a ], [ %v2_8e0c, %dec_label_pc_8e0c ]
  %v0_8e0f = load i8, i8* @global_var_221365.32, align 1
  %v7_8e0f = icmp eq i8 %v0_8e0f, 0
  %v1_8e16 = icmp eq i1 %v7_8e0f, false
  br i1 %v1_8e16, label %dec_label_pc_8ee8, label %dec_label_pc_8e1c

dec_label_pc_8e1c:                                ; preds = %dec_label_pc_8f08, %dec_label_pc_8efc, %dec_label_pc_8e0f
  %v0_8e1c = load i64, i64* @rbp, align 8
  %v1_8e1c = add i64 %v0_8e1c, 196
  %v2_8e1c = inttoptr i64 %v1_8e1c to i32*
  %v3_8e1c = load i32, i32* %v2_8e1c, align 4
  %v4_8e1c = zext i32 %v3_8e1c to i64
  store i64 %v4_8e1c, i64* @rdx, align 8
  %v0_8e22 = load i32, i32* @global_var_2212d0.129, align 4
  %v1_8e22 = sext i32 %v0_8e22 to i64
  store i64 %v1_8e22, i64* @rsi, align 8
  %v1_8e29 = inttoptr i64 %v0_8e1c to i64*
  %v2_8e29 = load i64, i64* %v1_8e29, align 8
  store i64 %v2_8e29, i64* @rdi, align 8
  %v4_8e2d = call i64 @function_8d20(i64 %v2_8e29, i64 %v1_8e22, i32 %v3_8e1c)
  %v0_8e32 = load i64, i64* @rbx, align 8
  %v2_8e32 = add i64 %v0_8e32, %v4_8e2d
  store i64 %v2_8e32, i64* %rbx.global-to-local, align 8
  %v0_8e35 = load i32, i32* @global_var_221314.24, align 4
  %v1_8e35 = zext i32 %v0_8e35 to i64
  store i64 %v1_8e35, i64* %rax.global-to-local, align 8
  %v5_8e3b = icmp eq i32 %v0_8e35, 0
  br i1 %v5_8e3b, label %dec_label_pc_8e5f, label %dec_label_pc_8e3f

dec_label_pc_8e3f:                                ; preds = %dec_label_pc_8e1c
  %v0_8e3f = load i64, i64* %rbp.global-to-local, align 8
  %v1_8e3f = add i64 %v0_8e3f, 184
  %v2_8e3f = inttoptr i64 %v1_8e3f to i8*
  %v3_8e3f = load i8, i8* %v2_8e3f, align 1
  %v4_8e3f = zext i8 %v3_8e3f to i64
  store i64 %v4_8e3f, i64* @rdi, align 8
  %v1_8e46 = add i64 %v0_8e3f, 168
  %v2_8e46 = inttoptr i64 %v1_8e46 to i32*
  %v3_8e46 = load i32, i32* %v2_8e46, align 4
  %v4_8e46 = zext i32 %v3_8e46 to i64
  store i64 %v4_8e46, i64* @rdx, align 8
  %v1_8e4c = add i64 %v0_8e3f, 48
  %v2_8e4c = inttoptr i64 %v1_8e4c to i32*
  %v3_8e4c = load i32, i32* %v2_8e4c, align 4
  %v4_8e4c = zext i32 %v3_8e4c to i64
  store i64 %v4_8e4c, i64* @rsi, align 8
  %v3_8e4f = load i64, i64* @rcx, align 8
  %v4_8e4f = call i64 @function_6df0(i64 %v4_8e3f, i64 %v4_8e4c, i64 %v4_8e46, i64 %v3_8e4f)
  %v4_8e54 = trunc i64 %v4_8e4f to i8
  %v5_8e54 = icmp eq i8 %v4_8e54, 0
  %v1_8e56 = icmp eq i1 %v5_8e54, false
  %v2_8e56 = zext i1 %v1_8e56 to i64
  %v4_8e56 = and i64 %v4_8e4f, -256
  %v5_8e56 = or i64 %v2_8e56, %v4_8e56
  store i64 %v5_8e56, i64* %rax.global-to-local, align 8
  %v0_8e5c = load i64, i64* %rbx.global-to-local, align 8
  %v2_8e5c = add i64 %v5_8e56, %v0_8e5c
  store i64 %v2_8e5c, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_8e5f

dec_label_pc_8e5f:                                ; preds = %dec_label_pc_8e3f, %dec_label_pc_8e1c
  store i64 %v0_8dbc, i64* @rcx, align 8
  %v1_8e67 = call i64 @__readfsqword(i64 40)
  %v2_8e67 = xor i64 %v1_8e67, %v0_8dbc
  %v3_8e67 = icmp eq i64 %v2_8e67, 0
  store i64 %v2_8e67, i64* @rcx, align 8
  %v0_8e70 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_8e70, i64* %rax.global-to-local, align 8
  %v1_8e73 = icmp eq i1 %v3_8e67, false
  br i1 %v1_8e73, label %dec_label_pc_8f52, label %dec_label_pc_8e79

dec_label_pc_8e79:                                ; preds = %dec_label_pc_8e5f
  %v2_8e80 = load i64, i64* %stack_var_-8280, align 8
  store i64 %v2_8e80, i64* @rbx, align 8
  store i64 %v0_8db0, i64* %rbp.global-to-local, align 8
  ret i64 %v0_8e70

dec_label_pc_8e88:                                ; preds = %dec_label_pc_8da0
  br label %dec_label_pc_8e8a

dec_label_pc_8e8a:                                ; preds = %dec_label_pc_8f20, %dec_label_pc_8e88
  %storemerge21 = phi i64 [ 0, %dec_label_pc_8e88 ], [ %v1_8f34, %dec_label_pc_8f20 ]
  store i64 %storemerge21, i64* @rbx, align 8
  %v0_8e8a = load i8, i8* @global_var_22132c.23, align 1
  %v7_8e8a = icmp eq i8 %v0_8e8a, 0
  br i1 %v7_8e8a, label %dec_label_pc_8e0f, label %dec_label_pc_8e97

dec_label_pc_8e97:                                ; preds = %dec_label_pc_8e8a
  %v0_8e97 = load i32, i32* @global_var_221338.17, align 4
  %v10_8e97 = icmp eq i32 %v0_8e97, 4
  %v1_8e9e = icmp eq i1 %v10_8e97, false
  br i1 %v1_8e9e, label %dec_label_pc_8e01, label %dec_label_pc_8ea4

dec_label_pc_8ea4:                                ; preds = %dec_label_pc_8e97
  %v0_8ea4 = load i64, i64* @rbp, align 8
  %v1_8ea4 = add i64 %v0_8ea4, 184
  %v2_8ea4 = inttoptr i64 %v1_8ea4 to i8*
  %v3_8ea4 = load i8, i8* %v2_8ea4, align 1
  %v10_8ea4 = icmp eq i8 %v3_8ea4, 0
  store i64 2, i64* %rax.global-to-local, align 8
  br i1 %v10_8ea4, label %dec_label_pc_8e0c, label %dec_label_pc_8eb6

dec_label_pc_8eb6:                                ; preds = %dec_label_pc_8ea4
  %v1_8eb6 = add i64 %v0_8ea4, 88
  %v2_8eb6 = inttoptr i64 %v1_8eb6 to i64*
  %v3_8eb6 = load i64, i64* %v2_8eb6, align 8
  store i64 %v3_8eb6, i64* @rdi, align 8
  %v0_8eba = load i64, i64* @global_var_221320.55, align 8
  store i64 %v0_8eba, i64* @r8, align 8
  store i64 %v16_8db5, i64* @rsi, align 8
  %v0_8ec4 = load i32, i32* bitcast (i64* @global_var_221328.53 to i32*), align 8
  %v1_8ec4 = zext i32 %v0_8ec4 to i64
  store i64 %v1_8ec4, i64* @rdx, align 8
  store i64 512, i64* @rcx, align 8
  %v8_8ecf = call i64 @function_ed10(i64 %v3_8eb6, i64* nonnull %stack_var_-8960, i32 %v0_8ec4, i64 512, i64 %v0_8eba, i64 %v2_8d3e)
  store i64 %v8_8ecf, i64* %rax.global-to-local, align 8
  %v1_8ed4 = inttoptr i64 %v8_8ecf to i8*
  store i64 %v8_8ecf, i64* @rdi, align 8
  %v3_8ed7 = call i32 @strlen(i8* %v1_8ed4)
  %v5_8ed7 = sext i32 %v3_8ed7 to i64
  %v1_8edc = add nsw i64 %v5_8ed7, 1
  store i64 %v1_8edc, i64* %rax.global-to-local, align 8
  %v0_8e0c.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_8e0c

dec_label_pc_8ee8:                                ; preds = %dec_label_pc_8e0f
  %v0_8ee8 = load i32, i32* @global_var_221338.17, align 4
  %v10_8ee8 = icmp eq i32 %v0_8ee8, 4
  br i1 %v10_8ee8, label %dec_label_pc_8f40, label %dec_label_pc_8ef1

dec_label_pc_8ef1:                                ; preds = %dec_label_pc_8f08, %dec_label_pc_8ee8
  %v0_8efc32 = phi i64 [ ptrtoint (i64* @global_var_221361.313 to i64), %dec_label_pc_8f08 ], [ %v0_8efc33, %dec_label_pc_8ee8 ]
  %v0_8ef1 = load i32, i32* @global_var_221354.258, align 4
  %v1_8ef1 = sext i32 %v0_8ef1 to i64
  store i64 %v1_8ef1, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_8efc

dec_label_pc_8efc:                                ; preds = %dec_label_pc_8f40, %dec_label_pc_8ef1
  %v0_8efc = phi i64 [ %v0_8efc.pre, %dec_label_pc_8f40 ], [ %v0_8efc32, %dec_label_pc_8ef1 ]
  %storemerge19 = phi i64 [ %v1_8f4c, %dec_label_pc_8f40 ], [ ptrtoint (i64* @global_var_221355.315 to i64), %dec_label_pc_8ef1 ]
  store i64 %storemerge19, i64* %rax.global-to-local, align 8
  %v2_8efc = add i64 %storemerge19, %v0_8efc
  store i64 %v2_8efc, i64* @rbx, align 8
  br label %dec_label_pc_8e1c

dec_label_pc_8f08:                                ; preds = %dec_label_pc_8de9
  %v0_8f08 = load i8, i8* @global_var_221365.32, align 1
  %v7_8f08 = icmp eq i8 %v0_8f08, 0
  %v1_8f0f = icmp eq i1 %v7_8f08, false
  br i1 %v1_8f0f, label %dec_label_pc_8ef1, label %dec_label_pc_8e1c

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ddc
  %v1_8f20 = add i64 %v3_8d65, 32
  %v2_8f20 = inttoptr i64 %v1_8f20 to i64*
  %v3_8f20 = load i64, i64* %v2_8f20, align 8
  store i64 %v3_8f20, i64* @rdi, align 8
  store i64 %v16_8db5, i64* @rsi, align 8
  %v3_8f27 = call i64 @function_fcf0(i64 %v3_8f20, i64* nonnull %stack_var_-8960)
  store i64 %v3_8f27, i64* %rax.global-to-local, align 8
  %v1_8f2c = inttoptr i64 %v3_8f27 to i8*
  store i64 %v3_8f27, i64* @rdi, align 8
  %v3_8f2f = call i32 @strlen(i8* %v1_8f2c)
  %v5_8f2f = sext i32 %v3_8f2f to i64
  store i64 %v5_8f2f, i64* %rax.global-to-local, align 8
  %v1_8f34 = add nsw i64 %v5_8f2f, 1
  br label %dec_label_pc_8e8a

dec_label_pc_8f40:                                ; preds = %dec_label_pc_8ee8
  %v0_8f40 = load i64, i64* @rbp, align 8
  %v1_8f40 = add i64 %v0_8f40, 176
  %v2_8f40 = inttoptr i64 %v1_8f40 to i64*
  %v3_8f40 = load i64, i64* %v2_8f40, align 8
  %v4_8f40 = inttoptr i64 %v3_8f40 to i8*
  store i64 %v3_8f40, i64* @rdi, align 8
  %v3_8f47 = call i32 @strlen(i8* %v4_8f40)
  %v5_8f47 = sext i32 %v3_8f47 to i64
  store i64 %v5_8f47, i64* %rax.global-to-local, align 8
  %v1_8f4c = add nsw i64 %v5_8f47, 1
  %v0_8efc.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_8efc

dec_label_pc_8f52:                                ; preds = %dec_label_pc_8e5f
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_8f60 = load i128, i128* @global_var_2213b0.142, align 8
  %v1_8f60 = trunc i128 %v0_8f60 to i64
  store i64 %v1_8f60, i64* %r9.global-to-local, align 8
  %v0_8f67 = load i128, i128* @global_var_221200.127, align 8
  %v1_8f67 = trunc i128 %v0_8f67 to i64
  store i64 %v1_8f67, i64* @rcx, align 8
  %v0_8f6e = load i64, i64* @r14, align 8
  %v0_8f70 = load i64, i64* @r13, align 8
  %v0_8f72 = load i64, i64* @r12, align 8
  %v0_8f74 = load i64, i64* %rbp.global-to-local, align 8
  %v0_8f75 = load i64, i64* @rdi, align 8
  store i64 %v0_8f75, i64* @r12, align 8
  %v0_8f7b = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_8f7b, i64* %stack_var_-9000, align 8
  %tmp119 = icmp ule i64 %v1_8f60, %v1_8f67
  %v5_8f7f = select i1 %tmp119, i64 %v1_8f60, i64 %v1_8f67
  store i64 %v5_8f7f, i64* @rbx, align 8
  %v1_8f83 = load i128, i128* @global_var_2202e0.316, align 8
  %v2_8f83 = trunc i128 %v1_8f83 to i64
  %tmp130 = icmp ugt i64 %v5_8f7f, %v2_8f83
  br i1 %tmp130, label %dec_label_pc_8f90, label %dec_label_pc_90a9

dec_label_pc_8f90:                                ; preds = %dec_label_pc_8f52
  %v0_8f93 = load i8*, i8** @global_var_221208.317, align 8
  %v1_8f93 = ptrtoint i8* %v0_8f93 to i64
  store i64 %v1_8f93, i64* @rdi, align 8
  %v2_8f9a = udiv i64 %v1_8f67, 2
  store i64 %v2_8f9a, i64* %rax.global-to-local, align 8
  %v7_8f9d = icmp ult i64 %v5_8f7f, %v2_8f9a
  br i1 %v7_8f9d, label %dec_label_pc_9210, label %dec_label_pc_8fa6

dec_label_pc_8fa6:                                ; preds = %dec_label_pc_8f90
  store i64 0, i64* @rsi, align 8
  %v2_8fb0 = and i128 %v0_8f67, 18446744073709551615
  %v4_8fb0 = mul nuw nsw i128 %v2_8fb0, 24
  %v5_8fb0 = trunc i128 %v4_8fb0 to i64
  store i64 %v5_8fb0, i64* %rax.global-to-local, align 8
  br i1 undef, label %dec_label_pc_9247, label %dec_label_pc_8fb9

dec_label_pc_8fb9:                                ; preds = %dec_label_pc_9247, %dec_label_pc_8fa6
  %v0_8fc2 = phi i64 [ 1, %dec_label_pc_9247 ], [ 0, %dec_label_pc_8fa6 ]
  %v2_8fb9 = icmp slt i64 %v5_8fb0, 0
  br i1 %v2_8fb9, label %dec_label_pc_9251, label %dec_label_pc_8fc2

dec_label_pc_8fc2:                                ; preds = %dec_label_pc_8fb9
  %v1_8fc2 = icmp eq i64 %v0_8fc2, 0
  %v1_8fc5 = icmp eq i1 %v1_8fc2, false
  br i1 %v1_8fc5, label %dec_label_pc_9251, label %dec_label_pc_8fcb

dec_label_pc_8fcb:                                ; preds = %dec_label_pc_8fc2
  %v2_8fcf = mul i64 %v1_8f67, 24
  store i64 %v2_8fcf, i64* @rsi, align 8
  %v2_8fd3 = call i64 @function_144e0(i64 %v1_8f93, i64 %v2_8fcf)
  store i64 %v2_8fd3, i64* %rax.global-to-local, align 8
  %v0_8fd8 = load i128, i128* @global_var_221200.127, align 8
  %v1_8fd8 = trunc i128 %v0_8fd8 to i64
  store i64 %v1_8fd8, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_8fe6

dec_label_pc_8fe6:                                ; preds = %dec_label_pc_9229, %dec_label_pc_8fcb
  %v1_8ff7 = phi i64 [ %v3_9229, %dec_label_pc_9229 ], [ %v1_8fd8, %dec_label_pc_8fcb ]
  %storemerge18.in = phi i64 [ %v2_9236, %dec_label_pc_9229 ], [ %v2_8fd3, %dec_label_pc_8fcb ]
  %storemerge18 = inttoptr i64 %storemerge18.in to i8*
  store i8* %storemerge18, i8** @global_var_221208.317, align 8
  %v0_8fe6 = load i128, i128* @global_var_2202e0.316, align 8
  %v1_8fe6 = trunc i128 %v0_8fe6 to i64
  %v2_8ff0 = sub i64 %v1_8ff7, %v1_8fe6
  store i64 %v2_8ff0, i64* @rdi, align 8
  %v1_8ff3 = add i64 %v1_8fe6, 1
  %v2_8ff7 = add i64 %v1_8ff3, %v1_8ff7
  %v7_8ff7 = icmp ult i64 %v2_8ff7, %v1_8ff3
  store i64 %v2_8ff7, i64* @rsi, align 8
  %v1_9000 = zext i1 %v7_8ff7 to i64
  %v3_9000 = and i64 %v2_8ff7, -256
  %v4_9000 = or i64 %v1_9000, %v3_9000
  store i64 %v4_9000, i64* %rax.global-to-local, align 8
  %v4_9006 = mul i64 %v2_8ff7, %v2_8ff0
  store i64 %v4_9006, i64* @rcx, align 8
  %v1_900a = icmp eq i64 %v4_9000, 0
  %v1_900d = icmp eq i1 %v1_900a, false
  br i1 %v1_900d, label %dec_label_pc_9251, label %dec_label_pc_9013

dec_label_pc_9013:                                ; preds = %dec_label_pc_8fe6
  %div = udiv i64 %v4_9006, %v2_8ff0
  store i64 %div, i64* %rax.global-to-local, align 8
  %tmp121 = urem i64 %v4_9006, %v2_8ff0
  store i64 %tmp121, i64* @rdx, align 8
  %v12_901b = icmp eq i64 %v2_8ff7, %div
  %v1_901e = icmp eq i1 %v12_901b, false
  br i1 %v1_901e, label %dec_label_pc_9251, label %dec_label_pc_9024

dec_label_pc_9024:                                ; preds = %dec_label_pc_9013
  %v2_9029 = udiv i64 %v4_9006, 2
  store i64 %v2_9029, i64* @rcx, align 8
  br i1 undef, label %dec_label_pc_9256, label %dec_label_pc_903a

dec_label_pc_903a:                                ; preds = %dec_label_pc_9256, %dec_label_pc_9024
  %storemerge128 = phi i64 [ 1, %dec_label_pc_9256 ], [ 0, %dec_label_pc_9024 ]
  %v0_9043 = phi i64 [ 1, %dec_label_pc_9256 ], [ 0, %dec_label_pc_9024 ]
  store i64 %storemerge128, i64* @rsi, align 8
  br i1 false, label %dec_label_pc_9251, label %dec_label_pc_9043

dec_label_pc_9043:                                ; preds = %dec_label_pc_903a
  %v1_9043 = icmp eq i64 %v0_9043, 0
  %v1_9046 = icmp eq i1 %v1_9043, false
  br i1 %v1_9046, label %dec_label_pc_9251, label %dec_label_pc_904c

dec_label_pc_904c:                                ; preds = %dec_label_pc_9043
  %v1_904c = mul i64 %v2_9029, 8
  store i64 %v1_904c, i64* @rdi, align 8
  %v1_9054 = call i64 @function_14480(i64 %v1_904c)
  store i64 %v1_9054, i64* %rax.global-to-local, align 8
  %v0_9059 = load i128, i128* @global_var_2202e0.316, align 8
  %v1_9059 = trunc i128 %v0_9059 to i64
  store i64 %v1_9059, i64* @rdx, align 8
  %v0_9060 = load i64, i64* %rbp.global-to-local, align 8
  %tmp131 = icmp ugt i64 %v0_9060, %v1_9059
  br i1 %tmp131, label %dec_label_pc_9065, label %dec_label_pc_909b

dec_label_pc_9065:                                ; preds = %dec_label_pc_904c
  %v0_9065 = load i8*, i8** @global_var_221208.317, align 8
  %v1_9065 = ptrtoint i8* %v0_9065 to i64
  %v1_9070 = mul i64 %v1_9059, 8
  %v2_9070 = add i64 %v1_9070, 8
  store i64 %v2_9070, i64* @rdx, align 8
  %v2_9078 = mul i64 %v1_9059, 24
  %v3_9078 = add i64 %v2_9078, 16
  %v4_9078 = add i64 %v3_9078, %v1_9065
  store i64 %v4_9078, i64* @rcx, align 8
  %v1_907d = mul i64 %v0_9060, 8
  %v2_907d = add i64 %v1_907d, 8
  store i64 %v2_907d, i64* @rsi, align 8
  br label %dec_label_pc_9088

dec_label_pc_9088:                                ; preds = %dec_label_pc_9088, %dec_label_pc_9065
  %v1_9088 = phi i64 [ %v1_9092, %dec_label_pc_9088 ], [ %v4_9078, %dec_label_pc_9065 ]
  %v0_9088 = phi i64 [ %v2_908b, %dec_label_pc_9088 ], [ %v1_9054, %dec_label_pc_9065 ]
  %v2_9088 = inttoptr i64 %v1_9088 to i64*
  store i64 %v0_9088, i64* %v2_9088, align 8
  %v0_908b = load i64, i64* %rax.global-to-local, align 8
  %v1_908b = load i64, i64* @rdx, align 8
  %v2_908b = add i64 %v1_908b, %v0_908b
  store i64 %v2_908b, i64* %rax.global-to-local, align 8
  %v1_908e = add i64 %v1_908b, 8
  store i64 %v1_908e, i64* @rdx, align 8
  %v0_9092 = load i64, i64* @rcx, align 8
  %v1_9092 = add i64 %v0_9092, 24
  store i64 %v1_9092, i64* @rcx, align 8
  %v0_9096 = load i64, i64* @rsi, align 8
  %v12_9096 = icmp eq i64 %v0_9096, %v1_908e
  %v1_9099 = icmp eq i1 %v12_9096, false
  br i1 %v1_9099, label %dec_label_pc_9088, label %dec_label_pc_909b.loopexit

dec_label_pc_909b.loopexit:                       ; preds = %dec_label_pc_9088
  %v0_90a2.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_909b

dec_label_pc_909b:                                ; preds = %dec_label_pc_904c, %dec_label_pc_909b.loopexit
  %v0_90a2 = phi i64 [ %v0_90a2.pre, %dec_label_pc_909b.loopexit ], [ %v0_9060, %dec_label_pc_904c ]
  %v0_909b = load i128, i128* @global_var_2213b0.142, align 8
  %v1_909b = trunc i128 %v0_909b to i64
  store i64 %v1_909b, i64* %r9.global-to-local, align 8
  %v1_90a2 = sext i64 %v0_90a2 to i128
  store i128 %v1_90a2, i128* @global_var_2202e0.316, align 8
  %v0_90a9.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_90a9

dec_label_pc_90a9:                                ; preds = %dec_label_pc_8f52, %dec_label_pc_909b
  %v0_90f948 = phi i64 [ %v1_909b, %dec_label_pc_909b ], [ %v1_8f60, %dec_label_pc_8f52 ]
  %v0_90b5 = phi i64 [ %v0_90a9.pre, %dec_label_pc_909b ], [ %v5_8f7f, %dec_label_pc_8f52 ]
  %v1_90a9 = icmp eq i64 %v0_90b5, 0
  br i1 %v1_90a9, label %dec_label_pc_90f9, label %dec_label_pc_90ae

dec_label_pc_90ae:                                ; preds = %dec_label_pc_90a9
  %v0_90ae = load i8*, i8** @global_var_221208.317, align 8
  %v1_90ae = ptrtoint i8* %v0_90ae to i64
  store i64 %v1_90ae, i64* @rdi, align 8
  %v2_90b5 = mul i64 %v0_90b5, 2
  %v3_90b5 = add i64 %v0_90b5, 3
  %v4_90b5 = add i64 %v3_90b5, %v2_90b5
  store i64 %v4_90b5, i64* @r8, align 8
  store i64 0, i64* @rsi, align 8
  store i64 3, i64* @rdx, align 8
  br label %dec_label_pc_90c8

dec_label_pc_90c8:                                ; preds = %dec_label_pc_90f0.dec_label_pc_90c8_crit_edge, %dec_label_pc_90ae
  %v0_90cd = phi i64 [ %v0_90cd.pre, %dec_label_pc_90f0.dec_label_pc_90c8_crit_edge ], [ 0, %dec_label_pc_90ae ]
  %v1_90d1 = phi i64 [ %v1_90f0, %dec_label_pc_90f0.dec_label_pc_90c8_crit_edge ], [ 3, %dec_label_pc_90ae ]
  %v0_90d1 = phi i64 [ %v0_90c8.pre, %dec_label_pc_90f0.dec_label_pc_90c8_crit_edge ], [ %v1_90ae, %dec_label_pc_90ae ]
  %v2_90c8 = mul i64 %v1_90d1, 8
  %v3_90c8 = add i64 %v0_90d1, -8
  %v4_90c8 = add i64 %v3_90c8, %v2_90c8
  %v5_90c8 = inttoptr i64 %v4_90c8 to i64*
  %v6_90c8 = load i64, i64* %v5_90c8, align 8
  store i64 %v6_90c8, i64* %rax.global-to-local, align 8
  %v1_90cd = add i64 %v0_90cd, 8
  store i64 %v1_90cd, i64* @rsi, align 8
  %v3_90d1 = add i64 %v0_90d1, -24
  %v4_90d1 = add i64 %v3_90d1, %v2_90c8
  %v5_90d1 = inttoptr i64 %v4_90d1 to i8*
  store i8 1, i8* %v5_90d1, align 1
  %v0_90d6 = load i64, i64* @rdx, align 8
  %v1_90d6 = load i64, i64* @rdi, align 8
  %v3_90d6 = mul i64 %v0_90d6, 8
  %v4_90d6 = add i64 %v1_90d6, -16
  %v5_90d6 = add i64 %v4_90d6, %v3_90d6
  %v6_90d6 = inttoptr i64 %v5_90d6 to i64*
  store i64 %v0_90d6, i64* %v6_90d6, align 8
  %v0_90db = load i64, i64* %rax.global-to-local, align 8
  %v1_90db = load i64, i64* @rsi, align 8
  %v3_90db = add i64 %v1_90db, %v0_90db
  store i64 %v3_90db, i64* @rcx, align 8
  br label %dec_label_pc_90e0

dec_label_pc_90e0:                                ; preds = %dec_label_pc_90e0, %dec_label_pc_90c8
  %v0_90e0 = phi i64 [ %v1_90e7, %dec_label_pc_90e0 ], [ %v0_90db, %dec_label_pc_90c8 ]
  %v1_90e0 = inttoptr i64 %v0_90e0 to i64*
  store i64 3, i64* %v1_90e0, align 8
  %v0_90e7 = load i64, i64* %rax.global-to-local, align 8
  %v1_90e7 = add i64 %v0_90e7, 8
  store i64 %v1_90e7, i64* %rax.global-to-local, align 8
  %v0_90eb = load i64, i64* @rcx, align 8
  %v12_90eb = icmp eq i64 %v0_90eb, %v1_90e7
  %v1_90ee = icmp eq i1 %v12_90eb, false
  br i1 %v1_90ee, label %dec_label_pc_90e0, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_90e0
  %v0_90f0 = load i64, i64* @rdx, align 8
  %v1_90f0 = add i64 %v0_90f0, 3
  store i64 %v1_90f0, i64* @rdx, align 8
  %v0_90f4 = load i64, i64* @r8, align 8
  %v12_90f4 = icmp eq i64 %v0_90f4, %v1_90f0
  %v1_90f7 = icmp eq i1 %v12_90f4, false
  br i1 %v1_90f7, label %dec_label_pc_90f0.dec_label_pc_90c8_crit_edge, label %dec_label_pc_90f9.loopexit

dec_label_pc_90f0.dec_label_pc_90c8_crit_edge:    ; preds = %dec_label_pc_90f0
  %v0_90c8.pre = load i64, i64* @rdi, align 8
  %v0_90cd.pre = load i64, i64* @rsi, align 8
  br label %dec_label_pc_90c8

dec_label_pc_90f9.loopexit:                       ; preds = %dec_label_pc_90f0
  %v0_90f9.pre = load i64, i64* %r9.global-to-local, align 8
  br label %dec_label_pc_90f9

dec_label_pc_90f9:                                ; preds = %dec_label_pc_90f9.loopexit, %dec_label_pc_90a9
  %v0_90f9 = phi i64 [ %v0_90f9.pre, %dec_label_pc_90f9.loopexit ], [ %v0_90f948, %dec_label_pc_90a9 ]
  %v1_90f9 = icmp eq i64 %v0_90f9, 0
  br i1 %v1_90f9, label %dec_label_pc_90f9.dec_label_pc_91cd_crit_edge, label %dec_label_pc_9102

dec_label_pc_90f9.dec_label_pc_91cd_crit_edge:    ; preds = %dec_label_pc_90f9
  %v0_91cd.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_91cd

dec_label_pc_9102:                                ; preds = %dec_label_pc_90f9
  store i64 0, i64* %rbp.global-to-local, align 8
  %v0_9118.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_9108

dec_label_pc_9108:                                ; preds = %dec_label_pc_91c0, %dec_label_pc_9102
  %v0_919956 = phi i64 [ %v0_919957, %dec_label_pc_91c0 ], [ %v0_9118.pre, %dec_label_pc_9102 ]
  %v0_9118 = phi i64 [ %v0_911850, %dec_label_pc_91c0 ], [ %v0_9118.pre, %dec_label_pc_9102 ]
  %v1_910f = phi i64 [ %v1_91c0, %dec_label_pc_91c0 ], [ 0, %dec_label_pc_9102 ]
  %v0_9108 = load i64, i64* @global_var_2213a0.249, align 8
  store i64 %v0_9108, i64* %rax.global-to-local, align 8
  %v1_9118 = icmp eq i64 %v0_9118, 0
  store i64 %v0_9108, i64* %r10.global-to-local, align 8
  %v0_911e = load i128, i128* @global_var_2213b0.142, align 8
  %v1_911e = trunc i128 %v0_911e to i64
  store i64 %v1_911e, i64* @rdi, align 8
  br i1 %v1_9118, label %dec_label_pc_91c0, label %dec_label_pc_912b

dec_label_pc_912b:                                ; preds = %dec_label_pc_9108
  %v0_912b = load i128, i128* @global_var_2212b0.46, align 8
  %v1_912b = trunc i128 %v0_912b to i64
  store i64 %v1_912b, i64* %r14.global-to-local, align 8
  %v0_9132 = load i8*, i8** @global_var_221208.317, align 8
  %v1_9132 = ptrtoint i8* %v0_9132 to i64
  store i64 %v1_9132, i64* @rcx, align 8
  store i64 0, i64* @rsi, align 8
  %v1_913b = add i64 %v0_9108, 2
  store i64 %v1_913b, i64* %r11.global-to-local, align 8
  %v1_913f = add i64 %v1_911e, -1
  store i64 %v1_913f, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_91a1

dec_label_pc_9148:                                ; preds = %dec_label_pc_91aa
  %v0_9148 = load i64, i64* %r13.global-to-local, align 8
  %v3_9148 = add i64 %v0_9148, %v1_91a4
  %div14 = udiv i64 %v3_9148, %v1_91a4
  store i64 0, i64* @rdx, align 8
  store i64 %div14, i64* %r9.global-to-local, align 8
  %v0_9157 = load i64, i64* %rbp.global-to-local, align 8
  %div16 = udiv i64 %v0_9157, %div14
  store i64 %div16, i64* %rax.global-to-local, align 8
  %tmp123 = urem i64 %v0_9157, %div14
  br label %dec_label_pc_9160

dec_label_pc_9160:                                ; preds = %dec_label_pc_9148, %dec_label_pc_91af
  %storemerge = phi i64 [ %tmp124, %dec_label_pc_91af ], [ %div16, %dec_label_pc_9148 ]
  %storemerge22 = phi i64 [ %tmp124, %dec_label_pc_91af ], [ %tmp123, %dec_label_pc_9148 ]
  store i64 %storemerge22, i64* @rdx, align 8
  store i64 %storemerge, i64* %r9.global-to-local, align 8
  %v1_9160 = add i64 %v1_9187, 16
  %v2_9160 = inttoptr i64 %v1_9160 to i64*
  %v3_9160 = load i64, i64* %v2_9160, align 8
  store i64 %v3_9160, i64* @rdx, align 8
  %v12_9164 = icmp eq i64 %storemerge, %v1_9164
  %v0_9167 = load i64, i64* %r10.global-to-local, align 8
  %v1_916a = icmp eq i1 %v12_9164, false
  %v3_916a = load i64, i64* %r11.global-to-local, align 8
  %v4_916a = select i1 %v1_916a, i64 %v3_916a, i64 %v0_9167
  store i64 %v4_916a, i64* %rax.global-to-local, align 8
  %v2_916e = mul i64 %storemerge, 8
  %v3_916e = add i64 %v3_9160, %v2_916e
  store i64 %v3_916e, i64* @rsi, align 8
  %v1_9172 = inttoptr i64 %v3_916e to i64*
  %v2_9172 = load i64, i64* %v1_9172, align 8
  store i64 %v2_9172, i64* @rdx, align 8
  %v7_9175 = icmp ult i64 %v2_9172, %v4_916a
  %v1_9178 = icmp eq i1 %v7_9175, false
  br i1 %v1_9178, label %dec_label_pc_9195, label %dec_label_pc_917a

dec_label_pc_917a:                                ; preds = %dec_label_pc_9160
  %v1_917a = add i64 %v1_9187, 8
  %v2_917a = inttoptr i64 %v1_917a to i64*
  %v3_917a = load i64, i64* %v2_917a, align 8
  %v2_917e = sub i64 %v3_917a, %v2_9172
  store i64 %v2_917e, i64* %r9.global-to-local, align 8
  %v2_9184 = add i64 %v2_917e, %v4_916a
  store i64 %v2_9184, i64* @rdx, align 8
  store i64 %v2_9184, i64* %v2_917a, align 8
  %v0_918b = load i64, i64* %rax.global-to-local, align 8
  %v1_918b = load i64, i64* @rsi, align 8
  %v2_918b = inttoptr i64 %v1_918b to i64*
  store i64 %v0_918b, i64* %v2_918b, align 8
  %v0_918e = load i64, i64* @rcx, align 8
  %v1_918e = add i64 %v0_918e, 8
  %v2_918e = inttoptr i64 %v1_918e to i64*
  %v3_918e = load i64, i64* %v2_918e, align 8
  %v4_918e = load i64, i64* %r14.global-to-local, align 8
  %v10_918e = icmp ult i64 %v3_918e, %v4_918e
  %v1_9192 = zext i1 %v10_918e to i8
  %v3_9192 = inttoptr i64 %v0_918e to i8*
  store i8 %v1_9192, i8* %v3_9192, align 1
  %v0_9195.pre = load i64, i64* @rcx, align 8
  %v0_9199.pre = load i64, i64* @rbx, align 8
  %v1_9199.pre = load i64, i64* @r8, align 8
  br label %dec_label_pc_9195

dec_label_pc_9195:                                ; preds = %dec_label_pc_917a, %dec_label_pc_9160, %dec_label_pc_91a1
  %v0_919c = phi i64 [ %v1_9199.pre, %dec_label_pc_917a ], [ %v1_91a4, %dec_label_pc_9160 ], [ %v1_91a4, %dec_label_pc_91a1 ]
  %v0_9199 = phi i64 [ %v0_9199.pre, %dec_label_pc_917a ], [ %v0_919955, %dec_label_pc_9160 ], [ %v0_919955, %dec_label_pc_91a1 ]
  %v0_9195 = phi i64 [ %v0_9195.pre, %dec_label_pc_917a ], [ %v1_9187, %dec_label_pc_9160 ], [ %v1_9187, %dec_label_pc_91a1 ]
  %v1_9195 = add i64 %v0_9195, 24
  store i64 %v1_9195, i64* @rcx, align 8
  %v12_9199 = icmp eq i64 %v0_9199, %v0_919c
  store i64 %v0_919c, i64* @rsi, align 8
  br i1 %v12_9199, label %dec_label_pc_91c0.loopexit, label %dec_label_pc_91a1

dec_label_pc_91a1:                                ; preds = %dec_label_pc_9195, %dec_label_pc_912b
  %v0_919955 = phi i64 [ %v0_9199, %dec_label_pc_9195 ], [ %v0_919956, %dec_label_pc_912b ]
  %v1_9164 = phi i64 [ %v0_919c, %dec_label_pc_9195 ], [ 0, %dec_label_pc_912b ]
  %v1_9187 = phi i64 [ %v1_9195, %dec_label_pc_9195 ], [ %v1_9132, %dec_label_pc_912b ]
  %v1_91a1 = inttoptr i64 %v1_9187 to i8*
  %v2_91a1 = load i8, i8* %v1_91a1, align 1
  %v9_91a1 = icmp eq i8 %v2_91a1, 0
  %v1_91a4 = add i64 %v1_9164, 1
  store i64 %v1_91a4, i64* @r8, align 8
  br i1 %v9_91a1, label %dec_label_pc_9195, label %dec_label_pc_91aa

dec_label_pc_91aa:                                ; preds = %dec_label_pc_91a1
  %v0_91aa = load i64, i64* @r12, align 8
  %v4_91aa = trunc i64 %v0_91aa to i8
  %v5_91aa = icmp eq i8 %v4_91aa, 0
  %v1_91ad = icmp eq i1 %v5_91aa, false
  br i1 %v1_91ad, label %dec_label_pc_9148, label %dec_label_pc_91af

dec_label_pc_91af:                                ; preds = %dec_label_pc_91aa
  %v0_91af = load i64, i64* %rbp.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  %div12 = udiv i64 %v0_91af, %v1_91a4
  store i64 %div12, i64* %rax.global-to-local, align 8
  %tmp124 = urem i64 %v0_91af, %v1_91a4
  br label %dec_label_pc_9160

dec_label_pc_91c0.loopexit:                       ; preds = %dec_label_pc_9195
  %v0_91c0.pre = load i64, i64* %rbp.global-to-local, align 8
  %v1_91c4.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_91c0

dec_label_pc_91c0:                                ; preds = %dec_label_pc_91c0.loopexit, %dec_label_pc_9108
  %v1_91c4 = phi i64 [ %v1_91c4.pre, %dec_label_pc_91c0.loopexit ], [ %v1_911e, %dec_label_pc_9108 ]
  %v0_91c0 = phi i64 [ %v0_91c0.pre, %dec_label_pc_91c0.loopexit ], [ %v1_910f, %dec_label_pc_9108 ]
  %v0_911850 = phi i64 [ %v0_9199, %dec_label_pc_91c0.loopexit ], [ 0, %dec_label_pc_9108 ]
  %v0_919957 = phi i64 [ %v0_9199, %dec_label_pc_91c0.loopexit ], [ %v0_919956, %dec_label_pc_9108 ]
  %v1_91c0 = add i64 %v0_91c0, 1
  store i64 %v1_91c0, i64* %rbp.global-to-local, align 8
  %v7_91c4 = icmp ult i64 %v1_91c0, %v1_91c4
  br i1 %v7_91c4, label %dec_label_pc_9108, label %dec_label_pc_91cd

dec_label_pc_91cd:                                ; preds = %dec_label_pc_91c0, %dec_label_pc_90f9.dec_label_pc_91cd_crit_edge
  %v0_91da = phi i64 [ %v0_91cd.pre, %dec_label_pc_90f9.dec_label_pc_91cd_crit_edge ], [ %v0_919957, %dec_label_pc_91c0 ]
  %tmp132 = or i64 %v0_91da, 1
  %tmp133 = icmp eq i64 %tmp132, 1
  br i1 %tmp133, label %dec_label_pc_9204, label %dec_label_pc_91d3

dec_label_pc_91d3:                                ; preds = %dec_label_pc_91cd
  %v0_91d3 = load i8*, i8** @global_var_221208.317, align 8
  %v1_91d3 = ptrtoint i8* %v0_91d3 to i64
  store i64 %v1_91d3, i64* @rdx, align 8
  %v2_91de = mul i64 %v0_91da, 24
  store i64 %v2_91de, i64* %rax.global-to-local, align 8
  %v3_91e2 = add i64 %v2_91de, -24
  %v4_91e2 = add i64 %v3_91e2, %v1_91d3
  %v5_91e2 = inttoptr i64 %v4_91e2 to i8*
  %v6_91e2 = load i8, i8* %v5_91e2, align 1
  %v13_91e2 = icmp eq i8 %v6_91e2, 0
  %v1_91e7 = icmp eq i1 %v13_91e2, false
  br i1 %v1_91e7, label %dec_label_pc_9204, label %dec_label_pc_91e9

dec_label_pc_91e9:                                ; preds = %dec_label_pc_91d3
  %v3_91e9 = add i64 %v2_91de, -48
  %v4_91e9 = add i64 %v3_91e9, %v1_91d3
  store i64 %v4_91e9, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_91fa

dec_label_pc_91f0:                                ; preds = %dec_label_pc_91fa
  %v1_91f0 = add i64 %v0_91f0, -24
  store i64 %v1_91f0, i64* %rax.global-to-local, align 8
  %v2_91f4 = inttoptr i64 %v0_91f0 to i8*
  %v3_91f4 = load i8, i8* %v2_91f4, align 1
  %v10_91f4 = icmp eq i8 %v3_91f4, 0
  %v1_91f8 = icmp eq i1 %v10_91f4, false
  br i1 %v1_91f8, label %dec_label_pc_9204, label %dec_label_pc_91fa

dec_label_pc_91fa:                                ; preds = %dec_label_pc_91f0, %dec_label_pc_91e9
  %v0_91f0 = phi i64 [ %v1_91f0, %dec_label_pc_91f0 ], [ %v4_91e9, %dec_label_pc_91e9 ]
  %v0_91fa = phi i64 [ %v1_91fa, %dec_label_pc_91f0 ], [ %v0_91da, %dec_label_pc_91e9 ]
  %v1_91fa = add i64 %v0_91fa, -1
  store i64 %v1_91fa, i64* %rbx.global-to-local, align 8
  %v10_91fe = icmp eq i64 %v0_91fa, 2
  %v1_9202 = icmp eq i1 %v10_91fe, false
  br i1 %v1_9202, label %dec_label_pc_91f0, label %dec_label_pc_9204

dec_label_pc_9204:                                ; preds = %dec_label_pc_91f0, %dec_label_pc_91fa, %dec_label_pc_91d3, %dec_label_pc_91cd
  %v0_9204 = phi i64 [ %v0_91da, %dec_label_pc_91d3 ], [ %v0_91da, %dec_label_pc_91cd ], [ %v1_91fa, %dec_label_pc_91fa ], [ %v1_91fa, %dec_label_pc_91f0 ]
  store i64 %v0_9204, i64* %rax.global-to-local, align 8
  %v2_9207 = load i64, i64* %stack_var_-9000, align 8
  store i64 %v2_9207, i64* @rbx, align 8
  store i64 %v0_8f74, i64* %rbp.global-to-local, align 8
  store i64 %v0_8f72, i64* @r12, align 8
  store i64 %v0_8f70, i64* @r13, align 8
  store i64 %v0_8f6e, i64* @r14, align 8
  ret i64 %v0_9204

dec_label_pc_9210:                                ; preds = %dec_label_pc_8f90
  br i1 undef, label %dec_label_pc_9260, label %dec_label_pc_921f

dec_label_pc_921f:                                ; preds = %dec_label_pc_9260, %dec_label_pc_9210
  %storemerge129 = phi i64 [ 1, %dec_label_pc_9260 ], [ 0, %dec_label_pc_9210 ]
  %v0_9224 = phi i64 [ 1, %dec_label_pc_9260 ], [ 0, %dec_label_pc_9210 ]
  store i64 %storemerge129, i64* @rcx, align 8
  br i1 false, label %dec_label_pc_9251, label %dec_label_pc_9224

dec_label_pc_9224:                                ; preds = %dec_label_pc_921f
  %v1_9224 = icmp eq i64 %v0_9224, 0
  %v1_9227 = icmp eq i1 %v1_9224, false
  br i1 %v1_9227, label %dec_label_pc_9251, label %dec_label_pc_9229

dec_label_pc_9229:                                ; preds = %dec_label_pc_9224
  %v3_9229 = mul i64 %v5_8f7f, 2
  store i64 %v3_9229, i64* %rbp.global-to-local, align 8
  %v2_9232 = mul i64 %v5_8f7f, 48
  store i64 %v2_9232, i64* @rsi, align 8
  %v2_9236 = call i64 @function_144e0(i64 %v1_8f93, i64 %v2_9232)
  store i64 %v2_9236, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_8fe6

dec_label_pc_9247:                                ; preds = %dec_label_pc_8fa6
  store i64 1, i64* @rsi, align 8
  br label %dec_label_pc_8fb9

dec_label_pc_9251:                                ; preds = %dec_label_pc_9224, %dec_label_pc_921f, %dec_label_pc_9043, %dec_label_pc_903a, %dec_label_pc_9013, %dec_label_pc_8fe6, %dec_label_pc_8fc2, %dec_label_pc_8fb9
  %v0_9251 = phi i64 [ %v1_8f93, %dec_label_pc_9224 ], [ %v1_8f93, %dec_label_pc_921f ], [ %v2_8ff0, %dec_label_pc_9043 ], [ %v2_8ff0, %dec_label_pc_903a ], [ %v2_8ff0, %dec_label_pc_9013 ], [ %v2_8ff0, %dec_label_pc_8fe6 ], [ %v1_8f93, %dec_label_pc_8fc2 ], [ %v1_8f93, %dec_label_pc_8fb9 ]
  %v1_9251 = call i64 @function_146d0(i64 %v0_9251)
  unreachable

dec_label_pc_9256:                                ; preds = %dec_label_pc_9024
  br label %dec_label_pc_903a

dec_label_pc_9260:                                ; preds = %dec_label_pc_9210
  br label %dec_label_pc_921f
}

define i64 @function_9270(i64 %arg1) local_unnamed_addr {
dec_label_pc_9270:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_927e = load i128, i128* @global_var_2213b0.142, align 8
  %v1_927e = trunc i128 %v0_927e to i64
  %v8_927e = icmp eq i64 %v1_927e, 0
  br i1 %v8_927e, label %dec_label_pc_9388, label %dec_label_pc_928c

dec_label_pc_928c:                                ; preds = %dec_label_pc_9270
  %v0_928c = load i64, i64* @rdi, align 8
  store i64 %v0_928c, i64* @r14, align 8
  store i64 0, i64* @r13, align 8
  store i64 0, i64* @rbx, align 8
  store i64 -3, i64* @r15, align 8
  br label %dec_label_pc_92c8

dec_label_pc_92a0:                                ; preds = %dec_label_pc_92c8
  %v1_92a0 = icmp eq i64 %v0_92a0, 0
  %v0_92a3 = load i64, i64* @r13, align 8
  store i64 %v0_92a3, i64* @rbp, align 8
  %v1_92a6 = icmp eq i1 %v1_92a0, false
  br i1 %v1_92a6, label %dec_label_pc_9370, label %dec_label_pc_92ac

dec_label_pc_92ac:                                ; preds = %dec_label_pc_93d0, %dec_label_pc_93c0, %dec_label_pc_92a0, %dec_label_pc_935a
  %v0_92ac = load i64, i64* @rbp, align 8
  store i64 %v0_92ac, i64* @rsi, align 8
  %v0_92af = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_92af, i64* @rdi, align 8
  %v0_92b2 = load i64, i64* @rbx, align 8
  %v1_92b2 = add i64 %v0_92b2, 1
  store i64 %v1_92b2, i64* @rbx, align 8
  %v2_92b6 = load i64, i64* @rdx, align 8
  %v3_92b6 = call i64 @function_8180(i64 %v0_92af, i64 %v0_92ac, i64 %v2_92b6)
  store i64 %v3_92b6, i64* %rax.global-to-local, align 8
  %v0_92bb = load i128, i128* @global_var_2213b0.142, align 8
  %v1_92bb = trunc i128 %v0_92bb to i64
  %v2_92bb = load i64, i64* @rbx, align 8
  %tmp35 = icmp ugt i64 %v1_92bb, %v2_92bb
  br i1 %tmp35, label %dec_label_pc_92c8, label %dec_label_pc_9388

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92ac, %dec_label_pc_928c
  %v0_92a0 = phi i64 [ %v2_92bb, %dec_label_pc_92ac ], [ 0, %dec_label_pc_928c ]
  %v0_92c8 = load i128, i128* @global_var_2212b0.46, align 8
  %v1_92c8 = trunc i128 %v0_92c8 to i64
  %v8_92c8 = icmp eq i64 %v1_92c8, 0
  %v0_92d0 = load i64, i64* @global_var_2213a0.249, align 8
  store i64 %v0_92d0, i64* %rax.global-to-local, align 8
  %v2_92d7 = mul i64 %v0_92a0, 8
  %v3_92d7 = add i64 %v0_92d0, %v2_92d7
  %v4_92d7 = inttoptr i64 %v3_92d7 to i64*
  %v5_92d7 = load i64, i64* %v4_92d7, align 8
  store i64 %v5_92d7, i64* %r12.global-to-local, align 8
  br i1 %v8_92c8, label %dec_label_pc_92a0, label %dec_label_pc_92dd

dec_label_pc_92dd:                                ; preds = %dec_label_pc_92c8
  store i64 %v5_92d7, i64* @rdi, align 8
  %v1_92e5 = icmp eq i64 %v0_92a0, 0
  br i1 %v1_92e5, label %dec_label_pc_93c0, label %dec_label_pc_9306

dec_label_pc_9306:                                ; preds = %dec_label_pc_92dd
  store i64 %v1_92c8, i64* @rdx, align 8
  %v0_92f5 = load i64, i64* @r13, align 8
  %v1_92f5 = add i64 %v0_92f5, 2
  store i64 %v1_92f5, i64* @rbp, align 8
  %v3_92f9 = add i64 %v1_92f5, %v0_92d0
  store i64 %v3_92f9, i64* @rcx, align 8
  %tmp36 = icmp ugt i64 %v1_92c8, %v3_92f9
  br i1 %tmp36, label %dec_label_pc_930b, label %dec_label_pc_931a

dec_label_pc_930b:                                ; preds = %dec_label_pc_9306
  %v0_930b = load i64, i64* @r15, align 8
  %v2_930e = sub i64 %v0_930b, %v0_92d0
  store i64 %v2_930e, i64* @rdx, align 8
  %v7_9311 = icmp ult i64 %v2_930e, %v0_92f5
  %v1_9314 = icmp eq i1 %v7_9311, false
  br i1 %v1_9314, label %dec_label_pc_9377, label %dec_label_pc_931a

dec_label_pc_931a:                                ; preds = %dec_label_pc_9306, %dec_label_pc_930b
  store i64 %v0_92d0, i64* @r13, align 8
  store i64 10, i64* @rcx, align 8
  store i64 10, i64* @rdx, align 8
  store i64 0, i64* @rbp, align 8
  br label %dec_label_pc_9329

dec_label_pc_9329:                                ; preds = %dec_label_pc_9377, %dec_label_pc_931a
  %v0_93e8 = phi i64 [ 32, %dec_label_pc_9377 ], [ 10, %dec_label_pc_931a ]
  %v0_9329 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_9329 = ptrtoint %_IO_FILE* %v0_9329 to i64
  store i64 %v1_9329, i64* @rdi, align 8
  %v2_9330 = add i64 %v1_9329, 40
  %v3_9330 = inttoptr i64 %v2_9330 to i64*
  %v4_9330 = load i64, i64* %v3_9330, align 8
  store i64 %v4_9330, i64* %rax.global-to-local, align 8
  %v3_9334 = add i64 %v1_9329, 48
  %v4_9334 = inttoptr i64 %v3_9334 to i64*
  %v5_9334 = load i64, i64* %v4_9334, align 8
  %v11_9334 = icmp ult i64 %v4_9330, %v5_9334
  %v1_9338 = icmp eq i1 %v11_9334, false
  br i1 %v1_9338, label %dec_label_pc_93e0, label %dec_label_pc_933e

dec_label_pc_933e:                                ; preds = %dec_label_pc_9329
  %v1_933e = add i64 %v4_9330, 1
  store i64 %v1_933e, i64* @rsi, align 8
  store i64 %v1_933e, i64* %v3_9330, align 8
  %v0_9346 = load i64, i64* @r14, align 8
  %v1_9346 = trunc i64 %v0_9346 to i8
  %v2_9346 = load i64, i64* %rax.global-to-local, align 8
  %v3_9346 = inttoptr i64 %v2_9346 to i8*
  store i8 %v1_9346, i8* %v3_9346, align 1
  br label %dec_label_pc_9349

dec_label_pc_9349:                                ; preds = %dec_label_pc_93e0, %dec_label_pc_933e
  %v0_9349 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_9349 = ptrtoint %_IO_FILE* %v0_9349 to i64
  store i64 %v1_9349, i64* @rdi, align 8
  %v2_9350 = add i64 %v1_9349, 40
  %v3_9350 = inttoptr i64 %v2_9350 to i64*
  %v4_9350 = load i64, i64* %v3_9350, align 8
  store i64 %v4_9350, i64* %rax.global-to-local, align 8
  %v3_9354 = add i64 %v1_9349, 48
  %v4_9354 = inttoptr i64 %v3_9354 to i64*
  %v5_9354 = load i64, i64* %v4_9354, align 8
  %v11_9354 = icmp ult i64 %v4_9350, %v5_9354
  %v1_9358 = icmp eq i1 %v11_9354, false
  br i1 %v1_9358, label %dec_label_pc_93d0, label %dec_label_pc_935a

dec_label_pc_935a:                                ; preds = %dec_label_pc_9349
  %v1_935a = add i64 %v4_9350, 1
  store i64 %v1_935a, i64* @rcx, align 8
  store i64 %v1_935a, i64* %v3_9350, align 8
  %v0_9362 = load i64, i64* @rdx, align 8
  %v1_9362 = trunc i64 %v0_9362 to i8
  %v2_9362 = load i64, i64* %rax.global-to-local, align 8
  %v3_9362 = inttoptr i64 %v2_9362 to i8*
  store i8 %v1_9362, i8* %v3_9362, align 1
  br label %dec_label_pc_92ac

dec_label_pc_9370:                                ; preds = %dec_label_pc_92a0
  %v1_9370 = add i64 %v0_92a3, 2
  store i64 %v1_9370, i64* @rbp, align 8
  br label %dec_label_pc_9377

dec_label_pc_9377:                                ; preds = %dec_label_pc_930b, %dec_label_pc_9370
  %storemerge = phi i64 [ %v1_9370, %dec_label_pc_9370 ], [ %v3_92f9, %dec_label_pc_930b ]
  store i64 %storemerge, i64* @r13, align 8
  store i64 32, i64* @rcx, align 8
  store i64 32, i64* @rdx, align 8
  br label %dec_label_pc_9329

dec_label_pc_9388:                                ; preds = %dec_label_pc_92ac, %dec_label_pc_9270
  %v0_9388 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_9388 = ptrtoint %_IO_FILE* %v0_9388 to i64
  store i64 %v1_9388, i64* @rdi, align 8
  %v2_938f = add i64 %v1_9388, 40
  %v3_938f = inttoptr i64 %v2_938f to i64*
  %v4_938f = load i64, i64* %v3_938f, align 8
  store i64 %v4_938f, i64* %rax.global-to-local, align 8
  %v3_9393 = add i64 %v1_9388, 48
  %v4_9393 = inttoptr i64 %v3_9393 to i64*
  %v5_9393 = load i64, i64* %v4_9393, align 8
  %v11_9393 = icmp ult i64 %v4_938f, %v5_9393
  %v1_9397 = icmp eq i1 %v11_9393, false
  br i1 %v1_9397, label %dec_label_pc_9400, label %dec_label_pc_9399

dec_label_pc_9399:                                ; preds = %dec_label_pc_9388
  %v1_9399 = add i64 %v4_938f, 1
  store i64 %v1_9399, i64* @rdx, align 8
  store i64 %v1_9399, i64* %v3_938f, align 8
  %v0_93a1 = load i64, i64* %rax.global-to-local, align 8
  %v1_93a1 = inttoptr i64 %v0_93a1 to i8*
  store i8 10, i8* %v1_93a1, align 1
  %v0_93b2 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_93b2

dec_label_pc_93c0:                                ; preds = %dec_label_pc_92dd
  %v0_93c0 = load i64, i64* @r13, align 8
  store i64 %v0_93c0, i64* @rbp, align 8
  %v2_93c3 = add i64 %v0_93c0, %v0_92d0
  store i64 %v2_93c3, i64* @r13, align 8
  br label %dec_label_pc_92ac

dec_label_pc_93d0:                                ; preds = %dec_label_pc_9349
  %v0_93d0 = load i64, i64* @rcx, align 8
  %v1_93d0 = trunc i64 %v0_93d0 to i32
  store i64 %v0_93d0, i64* @rsi, align 8
  %v6_93d2 = call i32 @__overflow(%_IO_FILE* %v0_9349, i32 %v1_93d0)
  %v8_93d2 = sext i32 %v6_93d2 to i64
  store i64 %v8_93d2, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_92ac

dec_label_pc_93e0:                                ; preds = %dec_label_pc_9329
  %v0_93e0 = load i64, i64* @r14, align 8
  store i64 %v0_93e0, i64* @rsi, align 8
  %v4_93ec = trunc i64 %v0_93e0 to i32
  %v5_93ec = call i32 @__overflow(%_IO_FILE* %v0_9329, i32 %v4_93ec)
  %v7_93ec = sext i32 %v5_93ec to i64
  store i64 %v7_93ec, i64* %rax.global-to-local, align 8
  store i64 %v0_93e8, i64* @rdx, align 8
  store i64 %v0_93e8, i64* @rcx, align 8
  br label %dec_label_pc_9349

dec_label_pc_9400:                                ; preds = %dec_label_pc_9388
  store i64 10, i64* @rsi, align 8
  %v6_9413 = call i32 @__overflow(%_IO_FILE* %v0_9388, i32 10)
  %v8_9413 = sext i32 %v6_9413 to i64
  store i64 %v8_9413, i64* %rax.global-to-local, align 8
  ret i64 %v8_9413
}

define i64 @function_9420(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8, i64 %arg9) local_unnamed_addr {
dec_label_pc_9420:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_9420 = load i32, i32* @global_var_221338.17, align 4
  %tmp45 = icmp ult i32 %v0_9420, 5
  br i1 %tmp45, label %dec_label_pc_942d, label %dec_label_pc_9778

dec_label_pc_942d:                                ; preds = %dec_label_pc_9420
  store i64 ptrtoint (i64* @global_var_16584.318 to i64), i64* @rdx, align 8
  %v1_9442 = zext i32 %v0_9420 to i64
  %v2_9448 = mul nuw nsw i64 %v1_9442, 4
  %v3_9448 = add i64 %v2_9448, ptrtoint (i64* @global_var_16584.318 to i64)
  %v4_9448 = inttoptr i64 %v3_9448 to i32*
  %v5_9448 = load i32, i32* %v4_9448, align 4
  %v6_9448 = sext i32 %v5_9448 to i64
  %v2_944c = add i64 %v6_9448, ptrtoint (i64* @global_var_16584.318 to i64)
  ret i64 %v2_944c

dec_label_pc_9778:                                ; preds = %dec_label_pc_9420
  %v0_9778 = load i64, i64* @rax, align 8
  ret i64 %v0_9778
}

define i64 @function_9800(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_9800:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_9800 = load i64, i64* @rdi, align 8
  %v1_9800 = add i64 %v0_9800, 168
  %v2_9800 = inttoptr i64 %v1_9800 to i32*
  %v3_9800 = load i32, i32* %v2_9800, align 4
  %v4_9800 = zext i32 %v3_9800 to i64
  %v0_9806 = load i64, i64* @rsi, align 8
  %v1_9806 = add i64 %v0_9806, 168
  %v2_9806 = inttoptr i64 %v1_9806 to i32*
  %v3_9806 = load i32, i32* %v2_9806, align 4
  %v4_9806 = zext i32 %v3_9806 to i64
  store i64 %v0_9806, i64* @r8, align 8
  %v11_980f = icmp eq i32 %v3_9800, 3
  %v1_9812 = zext i1 %v11_980f to i64
  %v2_9812 = load i64, i64* @rcx, align 8
  %v11_9815 = icmp eq i32 %v3_9800, 9
  %v1_9818 = zext i1 %v11_9815 to i64
  %v3_9818 = and i64 %v4_9800, 4294967040
  %v4_9812 = or i64 %v3_9818, %v1_9818
  %v4_9818 = or i64 %v4_9812, %v1_9812
  %v3_9812.masked = and i64 %v2_9812, 4294967040
  %v11_981b = or i64 %v4_9818, %v3_9812.masked
  store i64 %v11_981b, i64* @rcx, align 8
  %v11_981d = icmp eq i32 %v3_9806, 3
  %v11_9823 = icmp eq i32 %v3_9806, 9
  %v1_9829 = zext i1 %v11_9823 to i8
  %v3_9829 = zext i1 %v11_981d to i8
  %v4_9829 = or i8 %v3_9829, %v1_9829
  %v5_9829 = icmp eq i8 %v4_9829, 0
  %v10_9829 = zext i8 %v4_9829 to i64
  %v12_9829 = and i64 %v4_9806, 4294967040
  %v13_9829 = or i64 %v10_9829, %v12_9829
  store i64 %v13_9829, i64* @rdx, align 8
  %v1_982b = icmp eq i1 %v5_9829, false
  %.pre = trunc i64 %v4_9818 to i8
  br i1 %v1_982b, label %dec_label_pc_9831, label %dec_label_pc_982d

dec_label_pc_982d:                                ; preds = %dec_label_pc_9800
  %v5_982d = icmp eq i8 %.pre, 0
  %v1_982f = icmp eq i1 %v5_982d, false
  br i1 %v1_982f, label %dec_label_pc_9870, label %dec_label_pc_9831

dec_label_pc_9831:                                ; preds = %dec_label_pc_9800, %dec_label_pc_982d
  %v5_9831 = icmp eq i8 %.pre, 0
  %v1_9833 = icmp eq i1 %v5_9831, false
  br i1 %v1_9833, label %dec_label_pc_9840, label %dec_label_pc_9835

dec_label_pc_9835:                                ; preds = %dec_label_pc_9831
  br i1 %v5_9829, label %dec_label_pc_9840, label %dec_label_pc_983e

dec_label_pc_983e:                                ; preds = %dec_label_pc_984c, %dec_label_pc_9835
  %v0_983e = phi i64 [ %v22_9850, %dec_label_pc_984c ], [ 1, %dec_label_pc_9835 ]
  ret i64 %v0_983e

dec_label_pc_9840:                                ; preds = %dec_label_pc_9835, %dec_label_pc_9831
  %v1_9840 = add i64 %v0_9800, 96
  %v2_9840 = inttoptr i64 %v1_9840 to i64*
  %v3_9840 = load i64, i64* %v2_9840, align 8
  %v1_9844 = add i64 %v0_9806, 96
  %v2_9844 = inttoptr i64 %v1_9844 to i64*
  %v3_9844 = load i64, i64* %v2_9844, align 8
  %v8_9848 = icmp sgt i64 %v3_9844, %v3_9840
  br i1 %v8_9848, label %dec_label_pc_9870, label %dec_label_pc_984a

dec_label_pc_984a:                                ; preds = %dec_label_pc_9840
  %v5_984a = icmp slt i64 %v3_9844, %v3_9840
  br i1 %v5_984a, label %dec_label_pc_9868, label %dec_label_pc_984c

dec_label_pc_984c:                                ; preds = %dec_label_pc_984a
  %v1_984c = add i64 %v0_9800, 104
  %v2_984c = inttoptr i64 %v1_984c to i64*
  %v3_984c = load i64, i64* %v2_984c, align 8
  %v1_9850 = trunc i64 %v3_984c to i32
  %v3_9850 = add i64 %v0_9806, 104
  %v4_9850 = inttoptr i64 %v3_9850 to i32*
  %v5_9850 = load i32, i32* %v4_9850, align 4
  %v6_9850 = sub i32 %v1_9850, %v5_9850
  %v16_9850 = icmp eq i32 %v6_9850, 0
  %v22_9850 = zext i32 %v6_9850 to i64
  %v1_9854 = icmp eq i1 %v16_9850, false
  br i1 %v1_9854, label %dec_label_pc_983e, label %dec_label_pc_9856

dec_label_pc_9856:                                ; preds = %dec_label_pc_984c
  store i64 %v0_9800, i64* @rsi, align 8
  %v1_985c = inttoptr i64 %v0_9800 to i8*
  %v4_985c = call i32 @strcmp(i8* %v1_985c, i8* %v1_985c)
  %v6_985c = sext i32 %v4_985c to i64
  ret i64 %v6_985c

dec_label_pc_9868:                                ; preds = %dec_label_pc_984a
  ret i64 1

dec_label_pc_9870:                                ; preds = %dec_label_pc_9840, %dec_label_pc_982d
  ret i64 4294967295
}

define i64 @function_9880(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_9880:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_9880 = load i64, i64* @rdi, align 8
  %v1_9880 = add i64 %v0_9880, 168
  %v2_9880 = inttoptr i64 %v1_9880 to i32*
  %v3_9880 = load i32, i32* %v2_9880, align 4
  %v4_9880 = zext i32 %v3_9880 to i64
  %v0_9886 = load i64, i64* @rsi, align 8
  %v1_9886 = add i64 %v0_9886, 168
  %v2_9886 = inttoptr i64 %v1_9886 to i32*
  %v3_9886 = load i32, i32* %v2_9886, align 4
  %v4_9886 = zext i32 %v3_9886 to i64
  store i64 %v0_9886, i64* @r8, align 8
  %v11_988f = icmp eq i32 %v3_9880, 3
  %v1_9892 = zext i1 %v11_988f to i64
  %v2_9892 = load i64, i64* @rcx, align 8
  %v11_9895 = icmp eq i32 %v3_9880, 9
  %v1_9898 = zext i1 %v11_9895 to i64
  %v3_9898 = and i64 %v4_9880, 4294967040
  %v4_9892 = or i64 %v3_9898, %v1_9898
  %v4_9898 = or i64 %v4_9892, %v1_9892
  %v3_9892.masked = and i64 %v2_9892, 4294967040
  %v11_989b = or i64 %v4_9898, %v3_9892.masked
  store i64 %v11_989b, i64* @rcx, align 8
  %v11_989d = icmp eq i32 %v3_9886, 3
  %v11_98a3 = icmp eq i32 %v3_9886, 9
  %v1_98a9 = zext i1 %v11_98a3 to i8
  %v3_98a9 = zext i1 %v11_989d to i8
  %v4_98a9 = or i8 %v3_98a9, %v1_98a9
  %v5_98a9 = icmp eq i8 %v4_98a9, 0
  %v10_98a9 = zext i8 %v4_98a9 to i64
  %v12_98a9 = and i64 %v4_9886, 4294967040
  %v13_98a9 = or i64 %v10_98a9, %v12_98a9
  store i64 %v13_98a9, i64* @rdx, align 8
  %v1_98ab = icmp eq i1 %v5_98a9, false
  %.pre = trunc i64 %v4_9898 to i8
  br i1 %v1_98ab, label %dec_label_pc_98b1, label %dec_label_pc_98ad

dec_label_pc_98ad:                                ; preds = %dec_label_pc_9880
  %v5_98ad = icmp eq i8 %.pre, 0
  %v1_98af = icmp eq i1 %v5_98ad, false
  br i1 %v1_98af, label %dec_label_pc_9900, label %dec_label_pc_98b1

dec_label_pc_98b1:                                ; preds = %dec_label_pc_9880, %dec_label_pc_98ad
  %v5_98b1 = icmp eq i8 %.pre, 0
  %v1_98b3 = icmp eq i1 %v5_98b1, false
  br i1 %v1_98b3, label %dec_label_pc_98c0, label %dec_label_pc_98b5

dec_label_pc_98b5:                                ; preds = %dec_label_pc_98b1
  br i1 %v5_98a9, label %dec_label_pc_98c0, label %dec_label_pc_98be

dec_label_pc_98be:                                ; preds = %dec_label_pc_98d2, %dec_label_pc_98b5
  %v0_98be = phi i64 [ %v22_98d9, %dec_label_pc_98d2 ], [ 1, %dec_label_pc_98b5 ]
  ret i64 %v0_98be

dec_label_pc_98c0:                                ; preds = %dec_label_pc_98b5, %dec_label_pc_98b1
  %v1_98c0 = add i64 %v0_9880, 128
  %v2_98c0 = inttoptr i64 %v1_98c0 to i64*
  %v3_98c0 = load i64, i64* %v2_98c0, align 8
  %v1_98c7 = add i64 %v0_9886, 128
  %v2_98c7 = inttoptr i64 %v1_98c7 to i64*
  %v3_98c7 = load i64, i64* %v2_98c7, align 8
  %v8_98ce = icmp sgt i64 %v3_98c7, %v3_98c0
  br i1 %v8_98ce, label %dec_label_pc_9900, label %dec_label_pc_98d0

dec_label_pc_98d0:                                ; preds = %dec_label_pc_98c0
  %v5_98d0 = icmp slt i64 %v3_98c7, %v3_98c0
  br i1 %v5_98d0, label %dec_label_pc_98f0, label %dec_label_pc_98d2

dec_label_pc_98d2:                                ; preds = %dec_label_pc_98d0
  %v1_98d2 = add i64 %v0_9880, 136
  %v2_98d2 = inttoptr i64 %v1_98d2 to i64*
  %v3_98d2 = load i64, i64* %v2_98d2, align 8
  %v1_98d9 = trunc i64 %v3_98d2 to i32
  %v3_98d9 = add i64 %v0_9886, 136
  %v4_98d9 = inttoptr i64 %v3_98d9 to i32*
  %v5_98d9 = load i32, i32* %v4_98d9, align 4
  %v6_98d9 = sub i32 %v1_98d9, %v5_98d9
  %v16_98d9 = icmp eq i32 %v6_98d9, 0
  %v22_98d9 = zext i32 %v6_98d9 to i64
  %v1_98e0 = icmp eq i1 %v16_98d9, false
  br i1 %v1_98e0, label %dec_label_pc_98be, label %dec_label_pc_98e2

dec_label_pc_98e2:                                ; preds = %dec_label_pc_98d2
  store i64 %v0_9880, i64* @rsi, align 8
  %v1_98e8 = inttoptr i64 %v0_9880 to i8*
  %v4_98e8 = call i32 @strcmp(i8* %v1_98e8, i8* %v1_98e8)
  %v6_98e8 = sext i32 %v4_98e8 to i64
  ret i64 %v6_98e8

dec_label_pc_98f0:                                ; preds = %dec_label_pc_98d0
  ret i64 1

dec_label_pc_9900:                                ; preds = %dec_label_pc_98c0, %dec_label_pc_98ad
  ret i64 4294967295
}

define i64 @function_9910(i32 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_9910:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  %tmp22 = sext i32 %arg1 to i64
  store i64 %tmp22, i64* @rdi, align 8
  %stack_var_-56 = alloca i64, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_9910 = load i64, i64* @rbp, align 8
  %v0_9911 = load i64, i64* @rbx, align 8
  store i64 %v0_9911, i64* %stack_var_-16, align 8
  store i64 %tmp22, i64* @rbp, align 8
  %v16_9914 = ptrtoint i64* %stack_var_-56 to i64
  %v0_9918 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_9928 = load i8, i8* @global_var_22132d.22, align 1
  %v7_9928 = icmp eq i8 %v0_9928, 0
  br i1 %v7_9928, label %dec_label_pc_99a8, label %dec_label_pc_9931

dec_label_pc_9931:                                ; preds = %dec_label_pc_99a8, %dec_label_pc_9910
  store i64 %v16_9914, i64* @rbx, align 8
  store i64 ptrtoint ([4 x i8]* @global_var_17c24.319 to i64), i64* @rcx, align 8
  %v0_993b = load i64, i64* @rbp, align 8
  %v1_993b = trunc i64 %v0_993b to i32
  store i64 %v0_993b, i64* @r8, align 8
  store i64 21, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %tmp29 = bitcast i64* %stack_var_-56 to i8*
  store i64 %v16_9914, i64* @rdi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v15_994d = call i32 (i8*, i32, i32, i8*, ...) @__sprintf_chk(i8* %tmp29, i32 1, i32 21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_17c24.319, i64 0, i64 0), i32 %v1_993b)
  store i64 %v16_9914, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_9955

dec_label_pc_9955:                                ; preds = %dec_label_pc_9955, %dec_label_pc_9931
  %v0_9955 = phi i64 [ %v1_9957, %dec_label_pc_9955 ], [ %v16_9914, %dec_label_pc_9931 ]
  %v1_9955 = inttoptr i64 %v0_9955 to i32*
  %v2_9955 = load i32, i32* %v1_9955, align 4
  %v3_9955 = zext i32 %v2_9955 to i64
  %v1_9957 = add i64 %v0_9955, 4
  store i64 %v1_9957, i64* %rax.global-to-local, align 8
  %v1_995b = add nuw nsw i64 %v3_9955, 4278124287
  %v3_9961 = xor i64 %v3_9955, 4294967295
  store i64 %v3_9961, i64* @rcx, align 8
  %v4_99633 = and i64 %v3_9961, %v1_995b
  %v4_9963 = trunc i64 %v4_99633 to i32
  %v2_9965 = and i32 %v4_9963, -2139062144
  %v3_9965 = icmp eq i32 %v2_9965, 0
  %v9_9965 = zext i32 %v2_9965 to i64
  store i64 %v9_9965, i64* @rdx, align 8
  br i1 %v3_9965, label %dec_label_pc_9955, label %dec_label_pc_996d

dec_label_pc_996d:                                ; preds = %dec_label_pc_9955
  %v3_996f = udiv i32 %v2_9965, 65536
  %v10_996f = zext i32 %v3_996f to i64
  %v2_9972 = and i32 %v4_9963, 32896
  %v3_9972 = icmp eq i32 %v2_9972, 0
  %v5_9978.v = select i1 %v3_9972, i64 %v10_996f, i64 %v9_9965
  store i64 %v5_9978.v, i64* @rdx, align 8
  %v1_997b = add i64 %v0_9955, 6
  store i64 %v1_997b, i64* @rcx, align 8
  %v3_9981 = select i1 %v3_9972, i64 %v1_997b, i64 %v1_9957
  %v1_9985 = trunc i64 %v5_9978.v to i8
  %v9_9985 = icmp ne i8 %v1_9985, 0
  %v21_9985 = and i64 %v5_9978.v, 2155905024
  store i64 %v21_9985, i64* @rsi, align 8
  %v3_9988 = select i1 %v9_9985, i64 4, i64 3
  %v4_9988 = sub i64 %v3_9981, %v3_9988
  store i64 %v4_9988, i64* %rax.global-to-local, align 8
  %v2_998c = load i64, i64* @rbx, align 8
  %v4_998c = sub i64 %v4_9988, %v2_998c
  %v20_998c = and i64 %v4_998c, 4294967295
  br label %dec_label_pc_998e

dec_label_pc_998e:                                ; preds = %dec_label_pc_99b9, %dec_label_pc_996d
  %storemerge = phi i64 [ %v6_99c7, %dec_label_pc_99b9 ], [ %v20_998c, %dec_label_pc_996d ]
  store i64 %storemerge, i64* %rax.global-to-local, align 8
  store i64 %v0_9918, i64* @rsi, align 8
  %v1_9993 = call i64 @__readfsqword(i64 40)
  %v2_9993 = xor i64 %v1_9993, %v0_9918
  %v3_9993 = icmp eq i64 %v2_9993, 0
  store i64 %v2_9993, i64* @rsi, align 8
  %v1_999c = icmp eq i1 %v3_9993, false
  br i1 %v1_999c, label %dec_label_pc_99cc, label %dec_label_pc_999e

dec_label_pc_999e:                                ; preds = %dec_label_pc_998e
  %v2_99a2 = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_99a2, i64* @rbx, align 8
  store i64 %v0_9910, i64* @rbp, align 8
  %v0_99a4 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_99a4

dec_label_pc_99a8:                                ; preds = %dec_label_pc_9910
  %v2_99a8 = call i64 @function_f910(i64 %tmp22)
  store i64 %v2_99a8, i64* %rax.global-to-local, align 8
  %v1_99ad = icmp eq i64 %v2_99a8, 0
  store i64 %v2_99a8, i64* @rdi, align 8
  br i1 %v1_99ad, label %dec_label_pc_9931, label %dec_label_pc_99b9

dec_label_pc_99b9:                                ; preds = %dec_label_pc_99a8
  store i64 0, i64* @rsi, align 8
  %v4_99bb = call i64 @function_10370(i64 %v2_99a8, i32 0)
  store i64 %v4_99bb, i64* %rax.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  %v4_99c5 = trunc i64 %v4_99bb to i32
  %v6_99c5 = icmp slt i32 %v4_99c5, 0
  %v4_99bb.op = and i64 %v4_99bb, 4294967295
  %v6_99c7 = select i1 %v6_99c5, i64 0, i64 %v4_99bb.op
  br label %dec_label_pc_998e

dec_label_pc_99cc:                                ; preds = %dec_label_pc_998e
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_99e0(i64 %arg1, i32 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_99e0:
  %r10.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %zf.global-to-local = alloca i1, align 1
  %tmp253 = call i32 @__decompiler_undefined_function_2()
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  %tmp266 = sext i32 %arg2 to i64
  store i64 %tmp266, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-760 = alloca i64, align 8
  %tmp271 = call i32 @__decompiler_undefined_function_2()
  %stack_var_-904 = alloca i64, align 8
  %stack_var_-728 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_99e4 = load i64, i64* @r15, align 8
  %v0_99e6 = load i64, i64* @r14, align 8
  %v0_99e8 = load i64, i64* @r13, align 8
  %v0_99ea = load i64, i64* @r12, align 8
  %v0_99ec = load i64, i64* @rcx, align 8
  store i64 %v0_99ec, i64* @r15, align 8
  %v0_99ef = load i64, i64* @rbx, align 8
  store i64 %v0_99ef, i64* %stack_var_-48, align 8
  %v0_99f0 = load i64, i64* @rsi, align 8
  store i64 %v0_99f0, i64* @r14, align 8
  %v0_99f3 = load i64, i64* @rdx, align 8
  store i64 %v0_99f3, i64* @r13, align 8
  store i1 false, i1* %zf.global-to-local, align 1
  %v0_99fd = load i128, i128* @global_var_2213b0.142, align 8
  %v1_99fd = trunc i128 %v0_99fd to i64
  store i64 %v1_99fd, i64* @rcx, align 8
  %v0_9a04 = load i64, i64* @rdi, align 8
  %v0_9a0b = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_9a1a = load i64, i64* @rcx, align 8
  %v1_9a1a = load i64, i64* @global_var_2213b8.141, align 8
  %v12_9a1a = icmp eq i64 %v0_9a1a, %v1_9a1a
  store i1 %v12_9a1a, i1* %zf.global-to-local, align 1
  %v0_9a21 = load i64, i64* @global_var_2213c0.143, align 8
  store i64 %v0_9a21, i64* @rdi, align 8
  %v1_9a28 = icmp eq i1 %v12_9a1a, false
  br i1 %v1_9a28, label %dec_label_pc_9a78, label %dec_label_pc_9a2a

dec_label_pc_9a2a:                                ; preds = %dec_label_pc_99e0
  store i1 true, i1* %zf.global-to-local, align 1
  br i1 undef, label %dec_label_pc_a84c, label %dec_label_pc_9a3d

dec_label_pc_9a3d:                                ; preds = %dec_label_pc_a84c, %dec_label_pc_9a2a
  %.0 = phi i32 [ %.8, %dec_label_pc_a84c ], [ %tmp253, %dec_label_pc_9a2a ]
  %storemerge = phi i64 [ 1, %dec_label_pc_a84c ], [ 0, %dec_label_pc_9a2a ]
  %v0_9a46 = phi i64 [ 1, %dec_label_pc_a84c ], [ 0, %dec_label_pc_9a2a ]
  store i64 %storemerge, i64* @rsi, align 8
  store i1 false, i1* %zf.global-to-local, align 1
  br i1 icmp slt (i32* @0, i32* null), label %dec_label_pc_a856, label %dec_label_pc_9a46

dec_label_pc_9a46:                                ; preds = %dec_label_pc_9a3d
  %v1_9a46 = icmp eq i64 %v0_9a46, 0
  store i1 %v1_9a46, i1* %zf.global-to-local, align 1
  %v1_9a49 = icmp eq i1 %v1_9a46, false
  br i1 %v1_9a49, label %dec_label_pc_a856, label %dec_label_pc_9a4f

dec_label_pc_9a4f:                                ; preds = %dec_label_pc_9a46
  %v0_9a4f = load i64, i64* @rcx, align 8
  %v3_9a4f = mul i64 %v0_9a4f, 5
  store i64 %v3_9a4f, i64* %rax.global-to-local, align 8
  %v2_9a57 = mul i64 %v0_9a4f, 400
  %v3_9a57 = icmp eq i64 %v2_9a57, 0
  store i1 %v3_9a57, i1* %zf.global-to-local, align 1
  store i64 %v2_9a57, i64* @rsi, align 8
  %v0_9a5b = load i64, i64* @rdi, align 8
  %v2_9a5b = call i64 @function_144e0(i64 %v0_9a5b, i64 %v2_9a57)
  store i64 %v2_9a5b, i64* %rax.global-to-local, align 8
  %v0_9a60 = load i64, i64* @global_var_2213b8.141, align 8
  %v2_9a60 = mul i64 %v0_9a60, 2
  %v3_9a60 = icmp eq i64 %v2_9a60, 0
  store i1 %v3_9a60, i1* %zf.global-to-local, align 1
  store i64 %v2_9a60, i64* @global_var_2213b8.141, align 8
  %v0_9a67 = load i128, i128* @global_var_2213b0.142, align 8
  %v1_9a67 = trunc i128 %v0_9a67 to i64
  store i64 %v1_9a67, i64* @rcx, align 8
  store i64 %v2_9a5b, i64* @rdi, align 8
  store i64 %v2_9a5b, i64* @global_var_2213c0.143, align 8
  br label %dec_label_pc_9a78

dec_label_pc_9a78:                                ; preds = %dec_label_pc_9a4f, %dec_label_pc_99e0
  %v0_9a80 = phi i64 [ %v0_9a21, %dec_label_pc_99e0 ], [ %v2_9a5b, %dec_label_pc_9a4f ]
  %v0_9a78 = phi i64 [ %v0_9a1a, %dec_label_pc_99e0 ], [ %v1_9a67, %dec_label_pc_9a4f ]
  %.1 = phi i32 [ %tmp253, %dec_label_pc_99e0 ], [ %.0, %dec_label_pc_9a4f ]
  %v2_9a80 = mul i64 %v0_9a78, 200
  %v3_9a80 = add i64 %v2_9a80, %v0_9a80
  store i64 %v3_9a80, i64* @rbx, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v1_9a86 = add i64 %v3_9a80, 8
  store i64 %v1_9a86, i64* @rdi, align 8
  store i64 %v3_9a80, i64* @rcx, align 8
  %v1_9a8d = inttoptr i64 %v3_9a80 to i64*
  store i64 0, i64* %v1_9a8d, align 8
  %v0_9a94 = load i64, i64* @rbx, align 8
  %v1_9a94 = add i64 %v0_9a94, 188
  %v2_9a94 = inttoptr i64 %v1_9a94 to i64*
  store i64 0, i64* %v2_9a94, align 8
  %v0_9a9f = load i64, i64* @rdi, align 8
  %v1_9a9f = and i64 %v0_9a9f, -8
  %v8_9a9f = inttoptr i64 %v1_9a9f to i8*
  store i64 %v1_9a9f, i64* @rdi, align 8
  %v0_9aa3 = load i64, i64* @rcx, align 8
  %v3_9aa3 = sub i64 %v0_9aa3, %v1_9a9f
  %v1_9aa6 = trunc i64 %v3_9aa3 to i32
  %v2_9aa6 = add i32 %v1_9aa6, 196
  %v3_9aac = udiv i32 %v2_9aa6, 8
  %tmp362 = icmp ult i32 %v2_9aa6, 8
  store i1 %tmp362, i1* %zf.global-to-local, align 1
  %v10_9aac = zext i32 %v3_9aac to i64
  store i64 %v10_9aac, i64* @rcx, align 8
  call void @__asm_rep_stosq_memset(i8* %v8_9a9f, i64 0, i64 %v10_9aac)
  %v5_9aaf = load i1, i1* @df, align 1
  %v6_9aaf = select i1 %v5_9aaf, i64 -8, i64 8
  %v7_9aaf = mul nsw i64 %v6_9aaf, %v10_9aac
  %v8_9aaf = add i64 %v7_9aaf, %v1_9a9f
  store i64 %v8_9aaf, i64* @rdi, align 8
  store i64 0, i64* @rcx, align 8
  %v0_9ab2 = load i64, i64* @rbx, align 8
  %v1_9ab2 = add i64 %v0_9ab2, 32
  %v2_9ab2 = inttoptr i64 %v1_9ab2 to i64*
  store i64 0, i64* %v2_9ab2, align 8
  %v0_9aba = load i64, i64* @r14, align 8
  %v1_9aba = trunc i64 %v0_9aba to i32
  %v2_9aba = load i64, i64* @rbx, align 8
  %v3_9aba = add i64 %v2_9aba, 168
  %v4_9aba = inttoptr i64 %v3_9aba to i32*
  store i32 %v1_9aba, i32* %v4_9aba, align 4
  %v0_9ac1 = load i64, i64* @rbx, align 8
  %v1_9ac1 = add i64 %v0_9ac1, 196
  %v2_9ac1 = inttoptr i64 %v1_9ac1 to i32*
  store i32 -1, i32* %v2_9ac1, align 4
  %v0_9acb = load i8, i8* bitcast (i32* @global_var_2213a9.250 to i8*), align 4
  %v7_9acb = icmp eq i8 %v0_9acb, 0
  store i1 %v7_9acb, i1* %zf.global-to-local, align 1
  %v1_9ad2 = icmp eq i1 %v7_9acb, false
  br i1 %v1_9ad2, label %dec_label_pc_9ae1, label %dec_label_pc_9ad4

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9a78
  %v0_9ad4 = load i8, i8* @global_var_2213a8.128, align 1
  %v7_9ad4 = icmp eq i8 %v0_9ad4, 0
  store i1 %v7_9ad4, i1* %zf.global-to-local, align 1
  %v1_9adb = icmp eq i1 %v7_9ad4, false
  br i1 %v1_9adb, label %dec_label_pc_a3f0, label %dec_label_pc_9ae1

dec_label_pc_9ae1:                                ; preds = %dec_label_pc_a40d, %dec_label_pc_a3f0, %dec_label_pc_9ad4, %dec_label_pc_9a78
  %v0_9ae1 = load i64, i64* @r13, align 8
  %v4_9ae1 = trunc i64 %v0_9ae1 to i8
  %v5_9ae1 = icmp eq i8 %v4_9ae1, 0
  store i1 %v5_9ae1, i1* %zf.global-to-local, align 1
  %v0_9ae4 = load i8, i8* @global_var_221311.59, align 1
  %v1_9ae4 = zext i8 %v0_9ae4 to i64
  store i64 %v1_9ae4, i64* @r8, align 8
  br i1 %v5_9ae1, label %dec_label_pc_9cd0, label %dec_label_pc_9af2

dec_label_pc_9af2:                                ; preds = %dec_label_pc_9ae1
  store i64 %v0_9a04, i64* @r12, align 8
  %v2_9af9 = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v3_9af9 = zext i8 %v2_9af9 to i64
  store i64 %v3_9af9, i64* @rdx, align 8
  %v11_9afe = icmp eq i8 %v2_9af9, 47
  store i1 %v11_9afe, i1* %zf.global-to-local, align 1
  br i1 %v11_9afe, label %dec_label_pc_a678, label %dec_label_pc_9b07

dec_label_pc_9b07:                                ; preds = %dec_label_pc_9af2
  %v0_9b07 = load i64, i64* @r15, align 8
  %v1_9b07 = inttoptr i64 %v0_9b07 to i8*
  %v2_9b07 = load i8, i8* %v1_9b07, align 1
  %v3_9b07 = zext i8 %v2_9b07 to i64
  store i64 %v3_9b07, i64* @rcx, align 8
  %v5_9b0b = icmp eq i8 %v2_9b07, 0
  store i1 %v5_9b0b, i1* %zf.global-to-local, align 1
  %v1_9b0d = icmp eq i1 %v5_9b0b, false
  br i1 %v1_9b0d, label %dec_label_pc_a31b, label %dec_label_pc_9b13

dec_label_pc_9b13:                                ; preds = %dec_label_pc_a678, %dec_label_pc_a3e2, %dec_label_pc_9b07
  %v0_9b13 = phi i64 [ %v1_9ae4, %dec_label_pc_a678 ], [ %v0_9b13.pre, %dec_label_pc_a3e2 ], [ %v1_9ae4, %dec_label_pc_9b07 ]
  %v4_9b13 = trunc i64 %v0_9b13 to i8
  %v5_9b13 = icmp eq i8 %v4_9b13, 0
  store i1 %v5_9b13, i1* %zf.global-to-local, align 1
  %v1_9b16 = icmp eq i1 %v5_9b13, false
  br i1 %v1_9b16, label %dec_label_pc_9b13.dec_label_pc_a0ea_crit_edge, label %dec_label_pc_9b1c

dec_label_pc_9b13.dec_label_pc_a0ea_crit_edge:    ; preds = %dec_label_pc_9b13
  %v0_a0ef.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_a0ea

dec_label_pc_9b1c:                                ; preds = %dec_label_pc_a514, %dec_label_pc_a104, %dec_label_pc_a0ea, %dec_label_pc_9b13
  %v0_9b1c = load i32, i32* @global_var_2212f8.26, align 4
  %v1_9b1c = zext i32 %v0_9b1c to i64
  store i64 %v1_9b1c, i64* @rcx, align 8
  %v0_9b22 = load i64, i64* @rbx, align 8
  %v1_9b22 = add i64 %v0_9b22, 24
  store i64 %v1_9b22, i64* @r15, align 8
  %v6_9b26 = icmp ult i32 %v0_9b1c, 3
  %v11_9b26 = icmp eq i32 %v0_9b1c, 3
  store i1 %v11_9b26, i1* %zf.global-to-local, align 1
  br i1 %v6_9b26, label %dec_label_pc_9e50, label %dec_label_pc_9b2f

dec_label_pc_9b2f:                                ; preds = %dec_label_pc_9b1c
  %v11_9b2f = icmp eq i32 %v0_9b1c, 4
  store i1 %v11_9b2f, i1* %zf.global-to-local, align 1
  %v0_9b1c.off = add i32 %v0_9b1c, -3
  %tmp363 = icmp ult i32 %v0_9b1c.off, 2
  br i1 %tmp363, label %dec_label_pc_a130, label %dec_label_pc_9b38

dec_label_pc_9b38:                                ; preds = %dec_label_pc_9b2f
  %v11_9b38 = icmp eq i32 %v0_9b1c, 5
  store i1 %v11_9b38, i1* %zf.global-to-local, align 1
  %v1_9b3b = icmp eq i1 %v11_9b38, false
  br i1 %v1_9b3b, label %dec_label_pc_9e50, label %dec_label_pc_9b38.dec_label_pc_9b41_crit_edge

dec_label_pc_9b38.dec_label_pc_9b41_crit_edge:    ; preds = %dec_label_pc_9b38
  %v0_9b44.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_9b41

dec_label_pc_9b41:                                ; preds = %dec_label_pc_9b38.dec_label_pc_9b41_crit_edge, %dec_label_pc_9e37
  %v0_9b44 = phi i64 [ %v0_9a04, %dec_label_pc_9e37 ], [ %v0_9b44.pre, %dec_label_pc_9b38.dec_label_pc_9b41_crit_edge ]
  %v0_9b41 = phi i64 [ %v1_9e29, %dec_label_pc_9e37 ], [ %v1_9b22, %dec_label_pc_9b38.dec_label_pc_9b41_crit_edge ]
  %v1_9b41 = inttoptr i64 %v0_9b41 to %stat*
  store i64 %v0_9b41, i64* @rdx, align 8
  store i64 %v0_9b44, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v3_9b4c = inttoptr i64 %v0_9b44 to i8*
  %v7_9b4c = call i32 @__xstat(i32 1, i8* %v3_9b4c, %stat* %v1_9b41)
  %v9_9b4c = sext i32 %v7_9b4c to i64
  store i64 %v9_9b4c, i64* %rax.global-to-local, align 8
  %v5_9b51 = icmp eq i32 %v7_9b4c, 0
  store i1 %v5_9b51, i1* %zf.global-to-local, align 1
  store i64 1, i64* @rdx, align 8
  %v1_9b58 = icmp eq i1 %v5_9b51, false
  br i1 %v1_9b58, label %dec_label_pc_9e6a, label %dec_label_pc_9b5e

dec_label_pc_9b5e:                                ; preds = %dec_label_pc_a177, %dec_label_pc_9e50, %dec_label_pc_9b41
  %v0_9b5e = load i64, i64* @r14, align 8
  %v1_9b5e = trunc i64 %v0_9b5e to i32
  %v11_9b5e = icmp eq i32 %v1_9b5e, 5
  store i1 %v11_9b5e, i1* %zf.global-to-local, align 1
  %v0_9b62 = load i64, i64* @rbx, align 8
  %v1_9b62 = add i64 %v0_9b62, 184
  %v2_9b62 = inttoptr i64 %v1_9b62 to i8*
  store i8 1, i8* %v2_9b62, align 1
  %v0_9b69 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_9b69, label %dec_label_pc_a070, label %dec_label_pc_9b6f

dec_label_pc_9b6f:                                ; preds = %dec_label_pc_9b5e
  %v0_9b6f = load i64, i64* @rbx, align 8
  %v1_9b6f = add i64 %v0_9b6f, 48
  %v2_9b6f = inttoptr i64 %v1_9b6f to i32*
  %v3_9b6f = load i32, i32* %v2_9b6f, align 4
  %v2_9b72 = and i32 %v3_9b6f, 61440
  %v9_9b72 = zext i32 %v2_9b72 to i64
  store i64 %v9_9b72, i64* %rax.global-to-local, align 8
  %v10_9b77 = icmp eq i32 %v2_9b72, 32768
  store i1 %v10_9b77, i1* %zf.global-to-local, align 1
  br i1 %v10_9b77, label %dec_label_pc_a070, label %dec_label_pc_9b82

dec_label_pc_9b82:                                ; preds = %dec_label_pc_a0c2, %dec_label_pc_a07d, %dec_label_pc_a070, %dec_label_pc_9b6f
  %v0_9b82 = load i32, i32* @global_var_221338.17, align 4
  %v5_9b89 = icmp eq i32 %v0_9b82, 0
  store i1 %v5_9b89, i1* %zf.global-to-local, align 1
  br i1 %v5_9b89, label %dec_label_pc_9ea0, label %dec_label_pc_9b92

dec_label_pc_9b92:                                ; preds = %dec_label_pc_9b82
  %v0_9b92 = load i8, i8* @global_var_221365.32, align 1
  %v7_9b92 = icmp eq i8 %v0_9b92, 0
  store i1 %v7_9b92, i1* %zf.global-to-local, align 1
  %v1_9b99 = icmp eq i1 %v7_9b92, false
  br i1 %v1_9b99, label %dec_label_pc_9ea0, label %dec_label_pc_9b9f

dec_label_pc_9b9f:                                ; preds = %dec_label_pc_a2f2, %dec_label_pc_9b92
  %v0_9b9f = load i64, i64* @rbx, align 8
  %v1_9b9f = add i64 %v0_9b9f, 48
  %v2_9b9f = inttoptr i64 %v1_9b9f to i32*
  %v3_9b9f = load i32, i32* %v2_9b9f, align 4
  %v2_9ba2 = and i32 %v3_9b9f, 61440
  %v9_9ba2 = zext i32 %v2_9ba2 to i64
  store i64 %v9_9ba2, i64* %rax.global-to-local, align 8
  %v10_9ba7 = icmp eq i32 %v2_9ba2, 40960
  store i1 %v10_9ba7, i1* %zf.global-to-local, align 1
  br i1 %v10_9ba7, label %dec_label_pc_a478, label %dec_label_pc_9bb2

dec_label_pc_9bb2:                                ; preds = %dec_label_pc_a046, %dec_label_pc_9f25, %dec_label_pc_9b9f
  %v0_a540 = phi i64 [ %v0_9f25, %dec_label_pc_9f25 ], [ %v0_a04e, %dec_label_pc_a046 ], [ %v0_9b9f, %dec_label_pc_9b9f ]
  %v0_9bb2 = phi i32 [ %v2_9f28, %dec_label_pc_9f25 ], [ %v2_a051, %dec_label_pc_a046 ], [ %v2_9ba2, %dec_label_pc_9b9f ]
  %.2 = phi i32 [ %.1, %dec_label_pc_9f25 ], [ %.6, %dec_label_pc_a046 ], [ %.1, %dec_label_pc_9b9f ]
  %v10_9bb2 = icmp eq i32 %v0_9bb2, 16384
  store i1 %v10_9bb2, i1* %zf.global-to-local, align 1
  br i1 %v10_9bb2, label %dec_label_pc_a520, label %dec_label_pc_9bbd

dec_label_pc_9bbd:                                ; preds = %dec_label_pc_9bb2
  %v1_9bbd = add i64 %v0_a540, 168
  %v2_9bbd = inttoptr i64 %v1_9bbd to i32*
  store i32 5, i32* %v2_9bbd, align 4
  br label %dec_label_pc_9bc7

dec_label_pc_9bc7:                                ; preds = %dec_label_pc_a540, %dec_label_pc_a52e, %dec_label_pc_a485, %dec_label_pc_9bbd
  %.3 = phi i32 [ %.2, %dec_label_pc_a540 ], [ %.2, %dec_label_pc_a52e ], [ %.2, %dec_label_pc_9bbd ], [ %.7, %dec_label_pc_a485 ]
  %v0_9bc7 = load i32, i32* @global_var_221338.17, align 4
  %v1_9bc7 = zext i32 %v0_9bc7 to i64
  store i64 %v1_9bc7, i64* @rdi, align 8
  %v0_9bcd = load i64, i64* @rbx, align 8
  %v1_9bcd = add i64 %v0_9bcd, 88
  %v2_9bcd = inttoptr i64 %v1_9bcd to i64*
  %v3_9bcd = load i64, i64* %v2_9bcd, align 8
  store i64 %v3_9bcd, i64* @r12, align 8
  %v5_9bd1 = icmp eq i32 %v0_9bc7, 0
  store i1 %v5_9bd1, i1* %zf.global-to-local, align 1
  br i1 %v5_9bd1, label %dec_label_pc_9bde, label %dec_label_pc_9bd5

dec_label_pc_9bd5:                                ; preds = %dec_label_pc_9bc7
  %v0_9bd5 = load i8, i8* @global_var_22132c.23, align 1
  %v7_9bd5 = icmp eq i8 %v0_9bd5, 0
  store i1 %v7_9bd5, i1* %zf.global-to-local, align 1
  br i1 %v7_9bd5, label %dec_label_pc_9c4f, label %dec_label_pc_9bde

dec_label_pc_9bde:                                ; preds = %dec_label_pc_9bd5, %dec_label_pc_9bc7
  %v0_9bde = load i64, i64* @global_var_221320.55, align 8
  store i64 %v0_9bde, i64* @r8, align 8
  %v0_9be5 = load i32, i32* bitcast (i64* @global_var_221328.53 to i32*), align 8
  %v1_9be5 = zext i32 %v0_9be5 to i64
  store i64 %v1_9be5, i64* @rdx, align 8
  %v2_9beb = ptrtoint i64* %stack_var_-728 to i64
  store i64 512, i64* @rcx, align 8
  store i64 %v3_9bcd, i64* @rdi, align 8
  store i64 %v2_9beb, i64* @rsi, align 8
  %v8_9bfd = sext i32 %.3 to i64
  %v9_9bfd = call i64 @function_ed10(i64 %v3_9bcd, i64* nonnull %stack_var_-728, i32 %v0_9be5, i64 512, i64 %v0_9bde, i64 %v8_9bfd)
  store i64 %v9_9bfd, i64* %rax.global-to-local, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rsi, align 8
  store i64 %v9_9bfd, i64* @rdi, align 8
  %v4_9c07 = call i64 @function_10370(i64 %v9_9bfd, i32 0)
  store i64 %v4_9c07, i64* %rax.global-to-local, align 8
  %v1_9c0c = trunc i64 %v4_9c07 to i32
  %v2_9c0c = load i32, i32* @global_var_22135c.253, align 4
  %v14_9c0c = icmp eq i32 %v1_9c0c, %v2_9c0c
  store i1 %v14_9c0c, i1* %zf.global-to-local, align 1
  %v9_9c12 = icmp sgt i32 %v1_9c0c, %v2_9c0c
  br i1 %v9_9c12, label %dec_label_pc_9c14, label %dec_label_pc_9c1a

dec_label_pc_9c14:                                ; preds = %dec_label_pc_9bde
  store i32 %v1_9c0c, i32* @global_var_22135c.253, align 4
  br label %dec_label_pc_9c1a

dec_label_pc_9c1a:                                ; preds = %dec_label_pc_9bde, %dec_label_pc_9c14
  %v0_9c1a = load i32, i32* @global_var_221338.17, align 4
  %v1_9c1a = zext i32 %v0_9c1a to i64
  store i64 %v1_9c1a, i64* @rsi, align 8
  %v5_9c20 = icmp eq i32 %v0_9c1a, 0
  store i1 %v5_9c20, i1* %zf.global-to-local, align 1
  %v1_9c22 = icmp eq i1 %v5_9c20, false
  br i1 %v1_9c22, label %dec_label_pc_a660, label %dec_label_pc_9c28

dec_label_pc_9c28:                                ; preds = %dec_label_pc_9c1a
  %v0_9c28 = load i8, i8* @global_var_220021.57, align 1
  %v7_9c28 = icmp eq i8 %v0_9c28, 0
  store i1 %v7_9c28, i1* %zf.global-to-local, align 1
  %v1_9c2f = icmp eq i1 %v7_9c28, false
  br i1 %v1_9c2f, label %dec_label_pc_a638, label %dec_label_pc_9c35

dec_label_pc_9c35:                                ; preds = %dec_label_pc_a638, %dec_label_pc_a64c, %dec_label_pc_9c28
  %v0_9c35 = load i8, i8* @global_var_220020.62, align 1
  %v7_9c35 = icmp eq i8 %v0_9c35, 0
  store i1 %v7_9c35, i1* %zf.global-to-local, align 1
  %v1_9c3c = icmp eq i1 %v7_9c35, false
  br i1 %v1_9c3c, label %dec_label_pc_a5b0, label %dec_label_pc_9c42

dec_label_pc_9c42:                                ; preds = %dec_label_pc_a61c, %dec_label_pc_a628, %dec_label_pc_9c35
  %v0_9c42 = load i8, i8* @global_var_22132e.125, align 1
  %v7_9c42 = icmp eq i8 %v0_9c42, 0
  store i1 %v7_9c42, i1* %zf.global-to-local, align 1
  %v1_9c49 = icmp eq i1 %v7_9c42, false
  br i1 %v1_9c49, label %dec_label_pc_a590, label %dec_label_pc_9c4f

dec_label_pc_9c4f:                                ; preds = %dec_label_pc_a590, %dec_label_pc_a5a4, %dec_label_pc_9c42, %dec_label_pc_9bd5
  %v0_9c4f = load i8, i8* @global_var_221365.32, align 1
  %v7_9c4f = icmp eq i8 %v0_9c4f, 0
  store i1 %v7_9c4f, i1* %zf.global-to-local, align 1
  br i1 %v7_9c4f, label %dec_label_pc_9c70, label %dec_label_pc_9c58

dec_label_pc_9c58:                                ; preds = %dec_label_pc_a660, %dec_label_pc_9c4f
  %v0_9c58 = load i64, i64* @rbx, align 8
  %v1_9c58 = add i64 %v0_9c58, 176
  %v2_9c58 = inttoptr i64 %v1_9c58 to i64*
  %v3_9c58 = load i64, i64* %v2_9c58, align 8
  %v4_9c58 = inttoptr i64 %v3_9c58 to i8*
  store i64 %v3_9c58, i64* @rdi, align 8
  %v3_9c5f = call i32 @strlen(i8* %v4_9c58)
  %v5_9c5f = sext i32 %v3_9c5f to i64
  store i64 %v5_9c5f, i64* %rax.global-to-local, align 8
  %v2_9c64 = load i32, i32* @global_var_221354.258, align 4
  %v14_9c64 = icmp eq i32 %v3_9c5f, %v2_9c64
  store i1 %v14_9c64, i1* %zf.global-to-local, align 1
  %v10_9c6a = icmp sgt i32 %v3_9c5f, %v2_9c64
  br i1 %v10_9c6a, label %dec_label_pc_a420, label %dec_label_pc_9c70

dec_label_pc_9c70:                                ; preds = %dec_label_pc_a420, %dec_label_pc_9c58, %dec_label_pc_9c4f
  %v0_9c70 = load i32, i32* @global_var_221338.17, align 4
  %v1_9c70 = zext i32 %v0_9c70 to i64
  store i64 %v1_9c70, i64* @rcx, align 8
  %v5_9c76 = icmp eq i32 %v0_9c70, 0
  store i1 %v5_9c76, i1* %zf.global-to-local, align 1
  br i1 %v5_9c76, label %dec_label_pc_a1c0, label %dec_label_pc_9c7e

dec_label_pc_9c7e:                                ; preds = %dec_label_pc_a660, %dec_label_pc_a430, %dec_label_pc_a275, %dec_label_pc_a468, %dec_label_pc_9c70
  %v0_9c7e = load i8, i8* @global_var_2212fc.25, align 1
  %v1_9c7e = zext i8 %v0_9c7e to i64
  store i64 %v1_9c7e, i64* %rax.global-to-local, align 8
  %v5_9c85 = icmp eq i8 %v0_9c7e, 0
  store i1 %v5_9c85, i1* %zf.global-to-local, align 1
  %v1_9c87 = icmp eq i1 %v5_9c85, false
  br i1 %v1_9c87, label %dec_label_pc_a190, label %dec_label_pc_9c8d

dec_label_pc_9c8d:                                ; preds = %dec_label_pc_9e6a, %dec_label_pc_a190, %dec_label_pc_a1b4, %dec_label_pc_9df0, %dec_label_pc_9d9a, %dec_label_pc_9d84, %dec_label_pc_9d20, %dec_label_pc_9c7e
  %.4 = phi i32 [ %.3, %dec_label_pc_a1b4 ], [ %.3, %dec_label_pc_a190 ], [ %.3, %dec_label_pc_9c7e ], [ %.1, %dec_label_pc_9e6a ], [ %.1, %dec_label_pc_9d20 ], [ %.1, %dec_label_pc_9d84 ], [ %.1, %dec_label_pc_9d9a ], [ %.1, %dec_label_pc_9df0 ]
  store i64 %v0_9a04, i64* @rdi, align 8
  %v1_9c94 = call i64 @function_146b0(i64 %v0_9a04)
  store i64 %v1_9c94, i64* %rax.global-to-local, align 8
  %v0_9c99 = load i128, i128* @global_var_2213b0.142, align 8
  %v1_9c99 = trunc i128 %v0_9c99 to i64
  %v2_9c99 = add i64 %v1_9c99, 1
  %v11_9c99 = icmp eq i64 %v2_9c99, 0
  store i1 %v11_9c99, i1* %zf.global-to-local, align 1
  %v17_9c99 = sext i64 %v2_9c99 to i128
  store i128 %v17_9c99, i128* @global_var_2213b0.142, align 8
  %v1_9ca1 = load i64, i64* @rbx, align 8
  %v2_9ca1 = inttoptr i64 %v1_9ca1 to i64*
  store i64 %v1_9c94, i64* %v2_9ca1, align 8
  br label %dec_label_pc_9ca4

dec_label_pc_9ca4:                                ; preds = %dec_label_pc_a6be, %dec_label_pc_9e6a, %dec_label_pc_9c8d
  %.5 = phi i32 [ %.4, %dec_label_pc_9c8d ], [ %.1, %dec_label_pc_9e6a ], [ %.1, %dec_label_pc_a6be ]
  store i64 %v0_9a0b, i64* @rsi, align 8
  %v1_9ca8 = call i64 @__readfsqword(i64 40)
  %v2_9ca8 = xor i64 %v1_9ca8, %v0_9a0b
  %v3_9ca8 = icmp eq i64 %v2_9ca8, 0
  store i1 %v3_9ca8, i1* %zf.global-to-local, align 1
  store i64 %v2_9ca8, i64* @rsi, align 8
  %v0_9cb1 = load i64, i64* @r12, align 8
  store i64 %v0_9cb1, i64* %rax.global-to-local, align 8
  %v1_9cb4 = icmp eq i1 %v3_9ca8, false
  br i1 %v1_9cb4, label %dec_label_pc_a847, label %dec_label_pc_9cba

dec_label_pc_9cba:                                ; preds = %dec_label_pc_9ca4
  %v2_9cbe = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_9cbe, i64* @rbx, align 8
  store i64 %v0_99ea, i64* @r12, align 8
  store i64 %v0_99e8, i64* @r13, align 8
  store i64 %v0_99e6, i64* @r14, align 8
  store i64 %v0_99e4, i64* @r15, align 8
  ret i64 %v0_9cb1

dec_label_pc_9cd0:                                ; preds = %dec_label_pc_9ae1
  %v5_9cd0 = icmp eq i8 %v0_9ae4, 0
  store i1 %v5_9cd0, i1* %zf.global-to-local, align 1
  %v1_9cd3 = icmp eq i1 %v5_9cd0, false
  br i1 %v1_9cd3, label %dec_label_pc_a0d0, label %dec_label_pc_9cd9

dec_label_pc_9cd9:                                ; preds = %dec_label_pc_9cd0
  %v0_9cd9 = load i8, i8* @global_var_2212a1.139, align 1
  %v7_9cd9 = icmp eq i8 %v0_9cd9, 0
  store i1 %v7_9cd9, i1* %zf.global-to-local, align 1
  %v1_9ce0 = icmp eq i1 %v7_9cd9, false
  br i1 %v1_9ce0, label %dec_label_pc_9e10, label %dec_label_pc_9ce6

dec_label_pc_9ce6:                                ; preds = %dec_label_pc_9cd9
  %v0_9ce6 = load i64, i64* @r14, align 8
  %v1_9ce6 = trunc i64 %v0_9ce6 to i32
  %v11_9ce6 = icmp eq i32 %v1_9ce6, 3
  store i1 %v11_9ce6, i1* %zf.global-to-local, align 1
  br i1 %v11_9ce6, label %dec_label_pc_a730, label %dec_label_pc_9cf0

dec_label_pc_9cf0:                                ; preds = %dec_label_pc_a778, %dec_label_pc_a730, %dec_label_pc_9ce6
  %v0_9cf0 = load i8, i8* @global_var_2212fc.25, align 1
  %v1_9cf0 = zext i8 %v0_9cf0 to i64
  store i64 %v1_9cf0, i64* %rax.global-to-local, align 8
  %v5_9cf7 = icmp eq i8 %v0_9cf0, 0
  store i1 %v5_9cf7, i1* %zf.global-to-local, align 1
  %v1_9cf9 = icmp eq i1 %v5_9cf7, false
  br i1 %v1_9cf9, label %dec_label_pc_9d30, label %dec_label_pc_9cfb

dec_label_pc_9cfb:                                ; preds = %dec_label_pc_9cf0
  %v0_9cfb = load i8, i8* @global_var_2212a0.140, align 1
  %v7_9cfb = icmp eq i8 %v0_9cfb, 0
  store i1 %v7_9cfb, i1* %zf.global-to-local, align 1
  br i1 %v7_9cfb, label %dec_label_pc_9d20, label %dec_label_pc_9d04

dec_label_pc_9d04:                                ; preds = %dec_label_pc_9cfb
  %v0_9d04 = load i64, i64* @r14, align 8
  %v4_9d04 = trunc i64 %v0_9d04 to i32
  %v5_9d04 = icmp eq i32 %v4_9d04, 0
  %v1_9d07 = zext i1 %v5_9d04 to i64
  %v2_9d07 = load i64, i64* @rcx, align 8
  %v3_9d07 = and i64 %v2_9d07, -256
  %v4_9d07 = or i64 %v1_9d07, %v3_9d07
  store i64 %v4_9d07, i64* @rcx, align 8
  %v11_9d0a = icmp eq i32 %v4_9d04, 6
  store i1 %v11_9d0a, i1* %zf.global-to-local, align 1
  store i64 %v4_9d07, i64* @rdx, align 8
  br i1 %v11_9d0a, label %dec_label_pc_9d44, label %dec_label_pc_9d12

dec_label_pc_9d12:                                ; preds = %dec_label_pc_9d04
  %v5_9d12 = icmp eq i1 %v5_9d04, false
  store i1 %v5_9d12, i1* %zf.global-to-local, align 1
  %v1_9d14 = icmp eq i1 %v5_9d12, false
  br i1 %v1_9d14, label %dec_label_pc_9d44, label %dec_label_pc_9d16

dec_label_pc_9d16:                                ; preds = %dec_label_pc_9d12
  store i1 false, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_9d84

dec_label_pc_9d20:                                ; preds = %dec_label_pc_9d73, %dec_label_pc_9cfb
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @r12, align 8
  br label %dec_label_pc_9c8d

dec_label_pc_9d30:                                ; preds = %dec_label_pc_9cf0
  %v0_9d30 = load i64, i64* @r14, align 8
  %v4_9d30 = trunc i64 %v0_9d30 to i32
  %v5_9d30 = icmp eq i32 %v4_9d30, 0
  %v1_9d33 = zext i1 %v5_9d30 to i64
  %v2_9d33 = load i64, i64* @rdx, align 8
  %v3_9d33 = and i64 %v2_9d33, -256
  %v4_9d33 = or i64 %v1_9d33, %v3_9d33
  store i64 %v4_9d33, i64* @rdx, align 8
  %v11_9d36 = icmp eq i32 %v4_9d30, 6
  store i1 %v11_9d36, i1* %zf.global-to-local, align 1
  br i1 %v11_9d36, label %dec_label_pc_9d44, label %dec_label_pc_9d3c

dec_label_pc_9d3c:                                ; preds = %dec_label_pc_9d30
  %v5_9d3c = icmp eq i1 %v5_9d30, false
  store i1 %v5_9d3c, i1* %zf.global-to-local, align 1
  br i1 %v5_9d3c, label %dec_label_pc_9e10, label %dec_label_pc_9d44

dec_label_pc_9d44:                                ; preds = %dec_label_pc_9d3c, %dec_label_pc_9d30, %dec_label_pc_9d12, %dec_label_pc_9d04
  %v0_9d8776 = phi i64 [ %v0_9d30, %dec_label_pc_9d3c ], [ %v0_9d30, %dec_label_pc_9d30 ], [ %v0_9d04, %dec_label_pc_9d12 ], [ %v0_9d04, %dec_label_pc_9d04 ]
  %v0_9d7c = phi i64 [ %v4_9d33, %dec_label_pc_9d3c ], [ %v4_9d33, %dec_label_pc_9d30 ], [ %v4_9d07, %dec_label_pc_9d12 ], [ %v4_9d07, %dec_label_pc_9d04 ]
  %v0_9d44 = load i32, i32* @global_var_2212f8.26, align 4
  %v10_9d44 = icmp eq i32 %v0_9d44, 5
  store i1 %v10_9d44, i1* %zf.global-to-local, align 1
  br i1 %v10_9d44, label %dec_label_pc_9e10, label %dec_label_pc_9d51

dec_label_pc_9d51:                                ; preds = %dec_label_pc_9d44
  %v0_9d51 = load i8, i8* @global_var_221390.172, align 1
  %v7_9d51 = icmp eq i8 %v0_9d51, 0
  store i1 %v7_9d51, i1* %zf.global-to-local, align 1
  %v1_9d58 = icmp eq i1 %v7_9d51, false
  br i1 %v1_9d58, label %dec_label_pc_9e10, label %dec_label_pc_9d5e

dec_label_pc_9d5e:                                ; preds = %dec_label_pc_9d51
  %v0_9d5e = load i8, i8* @global_var_2212fd.173, align 1
  %v7_9d5e = icmp eq i8 %v0_9d5e, 0
  store i1 %v7_9d5e, i1* %zf.global-to-local, align 1
  %v1_9d65 = icmp eq i1 %v7_9d5e, false
  br i1 %v1_9d65, label %dec_label_pc_9e10, label %dec_label_pc_9d6b

dec_label_pc_9d6b:                                ; preds = %dec_label_pc_9d5e
  store i1 %v5_9cf7, i1* %zf.global-to-local, align 1
  br i1 %v1_9cf9, label %dec_label_pc_9e10, label %dec_label_pc_9d73

dec_label_pc_9d73:                                ; preds = %dec_label_pc_9d6b
  %v0_9d73 = load i8, i8* @global_var_2212a0.140, align 1
  %v7_9d73 = icmp eq i8 %v0_9d73, 0
  store i1 %v7_9d73, i1* %zf.global-to-local, align 1
  br i1 %v7_9d73, label %dec_label_pc_9d20, label %dec_label_pc_9d7c

dec_label_pc_9d7c:                                ; preds = %dec_label_pc_9d73
  %v4_9d7c = trunc i64 %v0_9d7c to i8
  %v5_9d7c = icmp eq i8 %v4_9d7c, 0
  store i1 %v5_9d7c, i1* %zf.global-to-local, align 1
  %v1_9d7e = icmp eq i1 %v5_9d7c, false
  br i1 %v1_9d7e, label %dec_label_pc_9e10, label %dec_label_pc_9d84

dec_label_pc_9d84:                                ; preds = %dec_label_pc_9d16, %dec_label_pc_9d7c
  %v0_9d87 = phi i64 [ %v0_9d8776, %dec_label_pc_9d7c ], [ %v0_9d04, %dec_label_pc_9d16 ]
  store i64 0, i64* @r12, align 8
  %v1_9d87 = trunc i64 %v0_9d87 to i32
  %v11_9d87 = icmp eq i32 %v1_9d87, 5
  store i1 %v11_9d87, i1* %zf.global-to-local, align 1
  %v1_9d8b = icmp eq i1 %v11_9d87, false
  br i1 %v1_9d8b, label %dec_label_pc_9c8d, label %dec_label_pc_9d91

dec_label_pc_9d91:                                ; preds = %dec_label_pc_9d84
  %v0_9d91 = load i32, i32* @global_var_221314.24, align 4
  %v10_9d91 = icmp eq i32 %v0_9d91, 3
  store i1 %v10_9d91, i1* %zf.global-to-local, align 1
  br i1 %v10_9d91, label %dec_label_pc_9e10, label %dec_label_pc_9d9a

dec_label_pc_9d9a:                                ; preds = %dec_label_pc_9d91
  %v0_9d9a = load i8, i8* @global_var_221312.58, align 1
  %v7_9d9a = icmp eq i8 %v0_9d9a, 0
  store i1 %v7_9d9a, i1* %zf.global-to-local, align 1
  br i1 %v7_9d9a, label %dec_label_pc_9c8d, label %dec_label_pc_9dae

dec_label_pc_9dae:                                ; preds = %dec_label_pc_9d9a
  store i64 14, i64* @rdi, align 8
  %v1_9db3 = call i64 @function_5c50(i64 14)
  store i64 %v1_9db3, i64* %rax.global-to-local, align 8
  %v4_9db8 = trunc i64 %v1_9db3 to i8
  %v5_9db8 = icmp eq i8 %v4_9db8, 0
  store i1 %v5_9db8, i1* %zf.global-to-local, align 1
  store i64 %v1_9ae4, i64* @r8, align 8
  %v1_9dc2 = icmp eq i1 %v5_9db8, false
  br i1 %v1_9dc2, label %dec_label_pc_9e10, label %dec_label_pc_9dc4

dec_label_pc_9dc4:                                ; preds = %dec_label_pc_9dae
  store i64 16, i64* @rdi, align 8
  %v1_9dc9 = call i64 @function_5c50(i64 16)
  store i64 %v1_9dc9, i64* %rax.global-to-local, align 8
  %v4_9dce = trunc i64 %v1_9dc9 to i8
  %v5_9dce = icmp eq i8 %v4_9dce, 0
  store i1 %v5_9dce, i1* %zf.global-to-local, align 1
  store i64 %v1_9ae4, i64* @r8, align 8
  %v1_9dd8 = icmp eq i1 %v5_9dce, false
  br i1 %v1_9dd8, label %dec_label_pc_9e10, label %dec_label_pc_9dda

dec_label_pc_9dda:                                ; preds = %dec_label_pc_9dc4
  store i64 17, i64* @rdi, align 8
  %v1_9ddf = call i64 @function_5c50(i64 17)
  store i64 %v1_9ddf, i64* %rax.global-to-local, align 8
  %v4_9de4 = trunc i64 %v1_9ddf to i8
  %v5_9de4 = icmp eq i8 %v4_9de4, 0
  store i1 %v5_9de4, i1* %zf.global-to-local, align 1
  store i64 %v1_9ae4, i64* @r8, align 8
  %v1_9dee = icmp eq i1 %v5_9de4, false
  br i1 %v1_9dee, label %dec_label_pc_9e10, label %dec_label_pc_9df0

dec_label_pc_9df0:                                ; preds = %dec_label_pc_9dda
  store i64 21, i64* @rdi, align 8
  %v1_9df5 = call i64 @function_5c50(i64 21)
  store i64 %v1_9df5, i64* %rax.global-to-local, align 8
  %v4_9dfa = trunc i64 %v1_9df5 to i8
  %v5_9dfa = icmp eq i8 %v4_9dfa, 0
  store i1 %v5_9dfa, i1* %zf.global-to-local, align 1
  store i64 %v1_9ae4, i64* @r8, align 8
  br i1 %v5_9dfa, label %dec_label_pc_9c8d, label %dec_label_pc_9e10

dec_label_pc_9e10:                                ; preds = %dec_label_pc_9df0, %dec_label_pc_a778, %dec_label_pc_a75e, %dec_label_pc_a73d, %dec_label_pc_9dda, %dec_label_pc_9dc4, %dec_label_pc_9dae, %dec_label_pc_9d91, %dec_label_pc_9d7c, %dec_label_pc_9d6b, %dec_label_pc_9d5e, %dec_label_pc_9d51, %dec_label_pc_9d44, %dec_label_pc_9d3c, %dec_label_pc_9cd9
  store i64 %v0_9a04, i64* %rax.global-to-local, align 8
  %v2_9e17 = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v3_9e17 = zext i8 %v2_9e17 to i64
  store i64 %v3_9e17, i64* @rdx, align 8
  %v11_9e1a = icmp eq i8 %v2_9e17, 47
  store i1 %v11_9e1a, i1* %zf.global-to-local, align 1
  %v1_9e1d = icmp eq i1 %v11_9e1a, false
  br i1 %v1_9e1d, label %dec_label_pc_a508, label %dec_label_pc_9e23

dec_label_pc_9e23:                                ; preds = %dec_label_pc_9e10
  %v0_9e23 = load i32, i32* @global_var_2212f8.26, align 4
  %v1_9e23 = zext i32 %v0_9e23 to i64
  store i64 %v1_9e23, i64* %rax.global-to-local, align 8
  %v0_9e29 = load i64, i64* @rbx, align 8
  %v1_9e29 = add i64 %v0_9e29, 24
  store i64 %v1_9e29, i64* @r15, align 8
  %v6_9e2d = icmp ult i32 %v0_9e23, 3
  %v11_9e2d = icmp eq i32 %v0_9e23, 3
  store i1 %v11_9e2d, i1* %zf.global-to-local, align 1
  br i1 %v6_9e2d, label %dec_label_pc_9e47, label %dec_label_pc_9e32

dec_label_pc_9e32:                                ; preds = %dec_label_pc_9e23
  %v11_9e32 = icmp eq i32 %v0_9e23, 4
  store i1 %v11_9e32, i1* %zf.global-to-local, align 1
  %v0_9e23.off = add i32 %v0_9e23, -3
  %tmp364 = icmp ult i32 %v0_9e23.off, 2
  br i1 %tmp364, label %dec_label_pc_9e47, label %dec_label_pc_9e37

dec_label_pc_9e37:                                ; preds = %dec_label_pc_9e32
  %v11_9e37 = icmp eq i32 %v0_9e23, 5
  store i1 %v11_9e37, i1* %zf.global-to-local, align 1
  store i64 %v0_9a04, i64* @r12, align 8
  br i1 %v11_9e37, label %dec_label_pc_9b41, label %dec_label_pc_9e47

dec_label_pc_9e47:                                ; preds = %dec_label_pc_9e37, %dec_label_pc_9e32, %dec_label_pc_9e23
  store i64 %v0_9a04, i64* @r12, align 8
  br label %dec_label_pc_9e50

dec_label_pc_9e50:                                ; preds = %dec_label_pc_a6b0, %dec_label_pc_a162, %dec_label_pc_a130, %dec_label_pc_9e47, %dec_label_pc_9b38, %dec_label_pc_9b1c
  %v0_9e50 = load i64, i64* @r15, align 8
  %v1_9e50 = inttoptr i64 %v0_9e50 to %stat*
  store i64 %v0_9e50, i64* @rdx, align 8
  %v0_9e53 = load i64, i64* @r12, align 8
  store i64 %v0_9e53, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v3_9e5b = inttoptr i64 %v0_9e53 to i8*
  %v7_9e5b = call i32 @__lxstat(i32 1, i8* %v3_9e5b, %stat* %v1_9e50)
  %v9_9e5b = sext i32 %v7_9e5b to i64
  store i64 %v9_9e5b, i64* %rax.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  %v5_9e62 = icmp eq i32 %v7_9e5b, 0
  store i1 %v5_9e62, i1* %zf.global-to-local, align 1
  br i1 %v5_9e62, label %dec_label_pc_9b5e, label %dec_label_pc_9e6a

dec_label_pc_9e6a:                                ; preds = %dec_label_pc_9e50, %dec_label_pc_9b41
  store i64 ptrtoint ([17 x i8]* @global_var_17c7d.321 to i64), i64* @rsi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_9e78 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_17c7d.321, i64 0, i64 0), i32 5)
  %v11_9e78 = ptrtoint i8* %v9_9e78 to i64
  store i64 %v11_9e78, i64* %rax.global-to-local, align 8
  %v0_9e7d = load i64, i64* @r12, align 8
  store i64 %v0_9e7d, i64* @rdx, align 8
  %v0_9e80 = load i64, i64* @r13, align 8
  store i64 %v0_9e80, i64* @rdi, align 8
  store i64 %v11_9e78, i64* @rsi, align 8
  %v3_9e87 = call i64 @function_69a0(i64 %v0_9e80, i64 %v11_9e78, i64 %v0_9e7d)
  store i64 %v3_9e87, i64* %rax.global-to-local, align 8
  store i64 0, i64* @r12, align 8
  %v0_9e8f = load i64, i64* @r13, align 8
  %v4_9e8f = trunc i64 %v0_9e8f to i8
  %v5_9e8f = icmp eq i8 %v4_9e8f, 0
  store i1 %v5_9e8f, i1* %zf.global-to-local, align 1
  %v1_9e92 = icmp eq i1 %v5_9e8f, false
  br i1 %v1_9e92, label %dec_label_pc_9ca4, label %dec_label_pc_9c8d

dec_label_pc_9ea0:                                ; preds = %dec_label_pc_9b92, %dec_label_pc_9b82
  %v0_9ea0 = load i64, i64* @global_var_2202f0.322, align 8
  store i64 %v0_9ea0, i64* %rax.global-to-local, align 8
  %v0_9ea7 = load i64, i64* @rbx, align 8
  %v1_9ea7 = add i64 %v0_9ea7, 24
  %v2_9ea7 = inttoptr i64 %v1_9ea7 to i64*
  %v3_9ea7 = load i64, i64* %v2_9ea7, align 8
  %v15_9ea7 = icmp eq i64 %v3_9ea7, %v0_9ea0
  store i1 %v15_9ea7, i1* %zf.global-to-local, align 1
  br i1 %v15_9ea7, label %dec_label_pc_a826, label %dec_label_pc_9eb1

dec_label_pc_9eb1:                                ; preds = %dec_label_pc_9ea0
  %v0_9eb1 = load i64, i64* @rdx, align 8
  %v4_9eb1 = trunc i64 %v0_9eb1 to i8
  %v5_9eb1 = icmp eq i8 %v4_9eb1, 0
  store i1 %v5_9eb1, i1* %zf.global-to-local, align 1
  %v1_9eb3 = add i64 %v0_9ea7, 176
  store i64 %v1_9eb3, i64* @rsi, align 8
  %v0_9eba = load i64, i64* @r12, align 8
  store i64 %v0_9eba, i64* @rdi, align 8
  br i1 %v5_9eb1, label %dec_label_pc_a290, label %dec_label_pc_9ec3

dec_label_pc_9ec3:                                ; preds = %dec_label_pc_9eb1
  %v2_9ec3 = call i64 @function_152b0(i64 %v0_9eba, i64 %v1_9eb3)
  store i64 %v2_9ec3, i64* %rax.global-to-local, align 8
  %v4_9ec8 = trunc i64 %v2_9ec3 to i32
  %v5_9ec8 = icmp eq i32 %v4_9ec8, 0
  store i1 %v5_9ec8, i1* %zf.global-to-local, align 1
  %v6_9ec8 = icmp slt i32 %v4_9ec8, 0
  br i1 %v6_9ec8, label %dec_label_pc_a29d, label %dec_label_pc_9ed0

dec_label_pc_9ed0:                                ; preds = %dec_label_pc_a290, %dec_label_pc_9ec3
  %v0_9eeb97 = phi i1 [ %v5_a295, %dec_label_pc_a290 ], [ %v5_9ec8, %dec_label_pc_9ec3 ]
  %v0_9ed0 = load i64, i64* @rbx, align 8
  %v1_9ed0 = add i64 %v0_9ed0, 176
  %v2_9ed0 = inttoptr i64 %v1_9ed0 to i64*
  %v3_9ed0 = load i64, i64* %v2_9ed0, align 8
  store i64 %v3_9ed0, i64* @rdi, align 8
  store i64 ptrtoint ([10 x i8]* @global_var_17cab.323 to i64), i64* @rsi, align 8
  store i64 10, i64* @rcx, align 8
  %v0_9ee3 = load i32, i32* @global_var_221338.17, align 4
  %v1_9ee3 = zext i32 %v0_9ee3 to i64
  store i64 %v1_9ee3, i64* @rdx, align 8
  br label %bb

bb:                                               ; preds = %bb336, %dec_label_pc_9ed0
  %v0_9eeb96 = phi i1 [ true, %bb336 ], [ %v0_9eeb97, %dec_label_pc_9ed0 ]
  %v24_9ee9 = phi i64 [ %v27_9ee9, %bb336 ], [ %v3_9ed0, %dec_label_pc_9ed0 ]
  %v23_9ee9 = phi i64 [ %v28_9ee9, %bb336 ], [ ptrtoint ([10 x i8]* @global_var_17cab.323 to i64), %dec_label_pc_9ed0 ]
  %v0_9ee9 = phi i64 [ %v29_9ee9, %bb336 ], [ 10, %dec_label_pc_9ed0 ]
  %v1_9ee9 = icmp eq i64 %v0_9ee9, 0
  br i1 %v1_9ee9, label %bb337, label %bb336

bb336:                                            ; preds = %bb
  %v3_9ee9 = inttoptr i64 %v23_9ee9 to i8*
  %v4_9ee9 = load i8, i8* %v3_9ee9, align 1
  %v6_9ee9 = inttoptr i64 %v24_9ee9 to i8*
  %v7_9ee9 = load i8, i8* %v6_9ee9, align 1
  %v18_9ee9 = icmp eq i8 %v4_9ee9, %v7_9ee9
  store i1 %v18_9ee9, i1* %zf.global-to-local, align 1
  %v25_9ee9 = load i1, i1* @df, align 1
  %v26_9ee9 = select i1 %v25_9ee9, i64 -1, i64 1
  %v27_9ee9 = add i64 %v26_9ee9, %v24_9ee9
  %v28_9ee9 = add i64 %v26_9ee9, %v23_9ee9
  store i64 %v27_9ee9, i64* @rdi, align 8
  store i64 %v28_9ee9, i64* @rsi, align 8
  %v29_9ee9 = add nsw i64 %v0_9ee9, -1
  store i64 %v29_9ee9, i64* @rcx, align 8
  br i1 %v18_9ee9, label %bb, label %bb337

bb337:                                            ; preds = %bb, %bb336
  %v0_9eeb = phi i1 [ %v0_9eeb96, %bb ], [ false, %bb336 ]
  %v1_9eeb = icmp eq i1 %v0_9eeb, false
  %v2_9eeb = zext i1 %v1_9eeb to i64
  %v3_9eeb = load i64, i64* @r14, align 8
  %v4_9eeb = and i64 %v3_9eeb, -256
  %v5_9eeb = or i64 %v4_9eeb, %v2_9eeb
  store i64 %v5_9eeb, i64* @r14, align 8
  %v5_9eef = icmp eq i32 %v0_9ee3, 0
  store i1 %v5_9eef, i1* %zf.global-to-local, align 1
  br i1 %v5_9eef, label %dec_label_pc_a498, label %dec_label_pc_9ef7

dec_label_pc_9ef7:                                ; preds = %bb337
  store i64 %v5_9eeb, i64* @rcx, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_9efc

dec_label_pc_9efc:                                ; preds = %dec_label_pc_a6a8, %dec_label_pc_9ef7
  %v0_9f17102 = phi i64 [ %v0_9f17103, %dec_label_pc_a6a8 ], [ 0, %dec_label_pc_9ef7 ]
  %v0_9f03 = phi i64 [ %v0_a6a8, %dec_label_pc_a6a8 ], [ %v5_9eeb, %dec_label_pc_9ef7 ]
  store i64 0, i64* @rdx, align 8
  %v4_9efe = trunc i64 %v0_9f03 to i8
  %v5_9efe = icmp eq i8 %v4_9efe, 0
  store i1 %v5_9efe, i1* %zf.global-to-local, align 1
  br i1 %v5_9efe, label %dec_label_pc_9f11, label %dec_label_pc_9f03

dec_label_pc_9f03:                                ; preds = %dec_label_pc_9efc
  store i64 %v0_9f03, i64* @rcx, align 8
  %v1_9f08 = trunc i64 %v0_9f03 to i32
  %v3_9f08 = shl i32 %v1_9f08, 31
  %v3_9f0b = ashr exact i32 %v3_9f08, 31
  %v2_9f0e = add nsw i32 %v3_9f0b, 2
  %v11_9f0e = icmp eq i32 %v2_9f0e, 0
  store i1 %v11_9f0e, i1* %zf.global-to-local, align 1
  %v17_9f0e = zext i32 %v2_9f0e to i64
  store i64 %v17_9f0e, i64* @rdx, align 8
  br label %dec_label_pc_9f11

dec_label_pc_9f11:                                ; preds = %dec_label_pc_a4d8, %dec_label_pc_9f03, %dec_label_pc_9efc
  %v0_9f19 = phi i32 [ 2, %dec_label_pc_a4d8 ], [ %v2_9f0e, %dec_label_pc_9f03 ], [ 0, %dec_label_pc_9efc ]
  %v0_9f17 = phi i64 [ 0, %dec_label_pc_a4d8 ], [ %v0_9f17102, %dec_label_pc_9f03 ], [ %v0_9f17102, %dec_label_pc_9efc ]
  %v1_9f11 = phi i64 [ 1, %dec_label_pc_a4d8 ], [ %v0_9f03, %dec_label_pc_9f03 ], [ %v0_9f03, %dec_label_pc_9efc ]
  %v0_9f11 = load i8, i8* @global_var_221364.251, align 1
  %v2_9f11 = trunc i64 %v1_9f11 to i8
  %v3_9f11 = or i8 %v2_9f11, %v0_9f11
  store i8 %v3_9f11, i8* @global_var_221364.251, align 1
  %v4_9f17 = trunc i64 %v0_9f17 to i32
  %v5_9f17 = icmp eq i32 %v4_9f17, 0
  store i1 %v5_9f17, i1* %zf.global-to-local, align 1
  %v2_9f19 = load i64, i64* @rbx, align 8
  %v3_9f19 = add i64 %v2_9f19, 188
  %v4_9f19 = inttoptr i64 %v3_9f19 to i32*
  store i32 %v0_9f19, i32* %v4_9f19, align 4
  %v1_9f1f = icmp eq i1 %v5_9f17, false
  br i1 %v1_9f1f, label %dec_label_pc_a55a, label %dec_label_pc_9f25

dec_label_pc_9f25:                                ; preds = %dec_label_pc_a55a, %dec_label_pc_9f11
  %v0_9f25 = load i64, i64* @rbx, align 8
  %v1_9f25 = add i64 %v0_9f25, 48
  %v2_9f25 = inttoptr i64 %v1_9f25 to i32*
  %v3_9f25 = load i32, i32* %v2_9f25, align 4
  %v2_9f28 = and i32 %v3_9f25, 61440
  %v9_9f28 = zext i32 %v2_9f28 to i64
  store i64 %v9_9f28, i64* %rax.global-to-local, align 8
  %v10_9f2d = icmp eq i32 %v2_9f28, 40960
  store i1 %v10_9f2d, i1* %zf.global-to-local, align 1
  %v1_9f32 = icmp eq i1 %v10_9f2d, false
  br i1 %v1_9f32, label %dec_label_pc_9bb2, label %dec_label_pc_9f38

dec_label_pc_9f38:                                ; preds = %dec_label_pc_9f25
  %v0_9f38 = load i32, i32* @global_var_221338.17, align 4
  %v1_9f38 = zext i32 %v0_9f38 to i64
  store i64 %v1_9f38, i64* %r10.global-to-local, align 8
  %v5_9f3f = icmp eq i32 %v0_9f38, 0
  store i1 %v5_9f3f, i1* %zf.global-to-local, align 1
  %v1_9f42 = icmp eq i1 %v5_9f3f, false
  br i1 %v1_9f42, label %dec_label_pc_a478, label %dec_label_pc_9f48

dec_label_pc_9f48:                                ; preds = %dec_label_pc_a478, %dec_label_pc_9f38
  %v0_9f48 = phi i64 [ %v0_9f48106, %dec_label_pc_a478 ], [ %v0_9f25, %dec_label_pc_9f38 ]
  %v1_9f48 = add i64 %v0_9f48, 72
  %v2_9f48 = inttoptr i64 %v1_9f48 to i64*
  %v3_9f48 = load i64, i64* %v2_9f48, align 8
  store i64 %v3_9f48, i64* @rsi, align 8
  %v0_9f4c = load i64, i64* @r12, align 8
  store i64 %v0_9f4c, i64* @rdi, align 8
  %v2_9f4f = call i64 @function_c1c0(i64 %v0_9f4c, i64 %v3_9f48)
  store i64 %v2_9f4f, i64* %rax.global-to-local, align 8
  %v2_9f54 = icmp eq i64 %v2_9f4f, 0
  store i1 %v2_9f54, i1* %zf.global-to-local, align 1
  store i64 %v2_9f4f, i64* @r14, align 8
  %v2_9f5a = load i64, i64* @rbx, align 8
  %v3_9f5a = add i64 %v2_9f5a, 8
  %v4_9f5a = inttoptr i64 %v3_9f5a to i64*
  store i64 %v2_9f4f, i64* %v4_9f5a, align 8
  br i1 %v2_9f54, label %dec_label_pc_a6f0, label %dec_label_pc_9f48.dec_label_pc_9f64_crit_edge

dec_label_pc_9f48.dec_label_pc_9f64_crit_edge:    ; preds = %dec_label_pc_9f48
  %v0_9f64.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_9f64

dec_label_pc_9f64:                                ; preds = %dec_label_pc_9f48.dec_label_pc_9f64_crit_edge, %dec_label_pc_a6f0
  %v0_9f64 = phi i64 [ %v0_9f64.pre, %dec_label_pc_9f48.dec_label_pc_9f64_crit_edge ], [ %v3_a712, %dec_label_pc_a6f0 ]
  %v1_9f64 = inttoptr i64 %v0_9f64 to i8*
  %v2_9f64 = load i8, i8* %v1_9f64, align 1
  %v12_9f64 = icmp eq i8 %v2_9f64, 47
  store i1 %v12_9f64, i1* %zf.global-to-local, align 1
  br i1 %v12_9f64, label %dec_label_pc_a688, label %dec_label_pc_9f6e

dec_label_pc_9f6e:                                ; preds = %dec_label_pc_9f64
  %v0_9f6e = load i64, i64* @r12, align 8
  store i64 %v0_9f6e, i64* @rdi, align 8
  %v1_9f71 = call i64 @function_cd50(i64 %v0_9f6e)
  store i64 %v1_9f71, i64* %rax.global-to-local, align 8
  %sext = mul i64 %v1_9f71, 72057594037927936
  %v2_9f76 = icmp eq i64 %sext, 0
  store i1 %v2_9f76, i1* %zf.global-to-local, align 1
  %v0_a688.pre = load i64, i64* @r14, align 8
  br i1 %v2_9f76, label %dec_label_pc_a688, label %dec_label_pc_9f7f

dec_label_pc_9f7f:                                ; preds = %dec_label_pc_9f6e
  %v1_9f7f = inttoptr i64 %v0_a688.pre to i8*
  store i64 %v0_a688.pre, i64* @rdi, align 8
  %v6_9f82 = sdiv i64 %sext, 72057594037927936
  %v3_9f89 = call i32 @strlen(i8* %v1_9f7f)
  %v5_9f89 = sext i32 %v3_9f89 to i64
  store i64 %v5_9f89, i64* %rax.global-to-local, align 8
  %tmp340 = and i64 %v6_9f82, 4294967295
  store i64 %tmp340, i64* @rdx, align 8
  %v3_9f95 = add nuw nsw i64 %tmp340, 2
  %v4_9f95 = add nsw i64 %v3_9f95, %v5_9f89
  store i64 %v4_9f95, i64* @rdi, align 8
  %v1_9f9a = call i64 @function_14480(i64 %v4_9f95)
  store i64 %v1_9f9a, i64* %rax.global-to-local, align 8
  store i64 %tmp340, i64* @rdx, align 8
  store i64 %v1_9f9a, i64* @r15, align 8
  %v0_9fa9 = load i64, i64* @r12, align 8
  %v3_9fa9 = add nsw i64 %tmp340, -1
  %v4_9fa9 = add i64 %v3_9fa9, %v0_9fa9
  %v5_9fa9 = inttoptr i64 %v4_9fa9 to i8*
  %v6_9fa9 = load i8, i8* %v5_9fa9, align 1
  %v16_9fa9 = icmp eq i8 %v6_9fa9, 47
  store i1 %v16_9fa9, i1* %zf.global-to-local, align 1
  br i1 %v16_9fa9, label %dec_label_pc_9fb5, label %dec_label_pc_9fb1

dec_label_pc_9fb1:                                ; preds = %dec_label_pc_9f7f
  %v1_9fb1 = add nuw nsw i64 %tmp340, 1
  store i1 false, i1* %zf.global-to-local, align 1
  store i64 %v1_9fb1, i64* @rdx, align 8
  br label %dec_label_pc_9fb5

dec_label_pc_9fb5:                                ; preds = %dec_label_pc_9fb1, %dec_label_pc_9f7f
  %v5_9fbb = phi i64 [ %v1_9fb1, %dec_label_pc_9fb1 ], [ %tmp340, %dec_label_pc_9f7f ]
  store i64 %v0_9fa9, i64* @rsi, align 8
  %v1_9fb8 = inttoptr i64 %v1_9f9a to i8*
  store i64 %v1_9f9a, i64* @rdi, align 8
  %v4_9fbb = inttoptr i64 %v0_9fa9 to i8*
  %v6_9fbb = trunc i64 %v5_9fbb to i32
  %v7_9fbb = call i8* @stpncpy(i8* %v1_9fb8, i8* %v4_9fbb, i32 %v6_9fbb)
  %v9_9fbb = ptrtoint i8* %v7_9fbb to i64
  store i64 %v9_9fbb, i64* %rax.global-to-local, align 8
  %v0_9fc0 = load i64, i64* @r14, align 8
  %v1_9fc0 = inttoptr i64 %v0_9fc0 to i8*
  store i64 %v0_9fc0, i64* @rsi, align 8
  store i64 %v9_9fbb, i64* @rdi, align 8
  %v6_9fc6 = call i8* @strcpy(i8* %v7_9fbb, i8* %v1_9fc0)
  %v8_9fc6 = ptrtoint i8* %v6_9fc6 to i64
  store i64 %v8_9fc6, i64* %rax.global-to-local, align 8
  %v0_9fcb.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_9fcb

dec_label_pc_9fcb:                                ; preds = %dec_label_pc_a688, %dec_label_pc_9fb5
  %v0_9fcb = phi i64 [ %v1_a68b, %dec_label_pc_a688 ], [ %v0_9fcb.pre, %dec_label_pc_9fb5 ]
  %v1_9fcb = icmp eq i64 %v0_9fcb, 0
  store i1 %v1_9fcb, i1* %zf.global-to-local, align 1
  br i1 %v1_9fcb, label %dec_label_pc_a720, label %dec_label_pc_9fd4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_9fcb
  %v0_9fd4 = load i64, i64* @rbx, align 8
  %v1_9fd4 = add i64 %v0_9fd4, 196
  %v2_9fd4 = inttoptr i64 %v1_9fd4 to i32*
  %v3_9fd4 = load i32, i32* %v2_9fd4, align 4
  %v7_9fdb = icmp eq i32 %v3_9fd4, 0
  store i1 %v7_9fdb, i1* %zf.global-to-local, align 1
  br i1 %v7_9fdb, label %dec_label_pc_a7d0, label %dec_label_pc_9fe4

dec_label_pc_9fe4:                                ; preds = %dec_label_pc_a7e1, %dec_label_pc_a7d0, %dec_label_pc_9fd4
  %v0_9fe4 = load i32, i32* @global_var_221314.24, align 4
  %v10_9fe4 = icmp eq i32 %v0_9fe4, 1
  store i1 %v10_9fe4, i1* %zf.global-to-local, align 1
  %tmp365 = or i32 %v0_9fe4, 1
  %tmp366 = icmp eq i32 %tmp365, 1
  br i1 %tmp366, label %dec_label_pc_9fed, label %dec_label_pc_9ff6

dec_label_pc_9fed:                                ; preds = %dec_label_pc_9fe4
  %v0_9fed = load i8, i8* @global_var_2212fd.173, align 1
  %v7_9fed = icmp eq i8 %v0_9fed, 0
  store i1 %v7_9fed, i1* %zf.global-to-local, align 1
  br i1 %v7_9fed, label %dec_label_pc_a046, label %dec_label_pc_9ff6

dec_label_pc_9ff6:                                ; preds = %dec_label_pc_9fe4, %dec_label_pc_9fed
  %v2_9ff6 = ptrtoint i64* %stack_var_-904 to i64
  store i64 %v2_9ff6, i64* @rdx, align 8
  %v0_9ffd = load i64, i64* @r15, align 8
  %v1_9ffd = inttoptr i64 %v0_9ffd to i8*
  store i64 %v0_9ffd, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v7_a005 = bitcast i64* %stack_var_-904 to %stat*
  %v8_a005 = call i32 @__xstat(i32 1, i8* %v1_9ffd, %stat* %v7_a005)
  %v10_a005 = sext i32 %v8_a005 to i64
  store i64 %v10_a005, i64* %rax.global-to-local, align 8
  %v5_a00a = icmp eq i32 %v8_a005, 0
  store i1 %v5_a00a, i1* %zf.global-to-local, align 1
  %v1_a00c = icmp eq i1 %v5_a00a, false
  br i1 %v1_a00c, label %dec_label_pc_a046, label %dec_label_pc_a00e

dec_label_pc_a00e:                                ; preds = %dec_label_pc_9ff6
  %v0_a00e = load i64, i64* @r13, align 8
  %v4_a00e = trunc i64 %v0_a00e to i8
  %v5_a00e = icmp eq i8 %v4_a00e, 0
  store i1 %v5_a00e, i1* %zf.global-to-local, align 1
  %v0_a011 = load i64, i64* @rbx, align 8
  %v1_a011 = add i64 %v0_a011, 185
  %v2_a011 = inttoptr i64 %v1_a011 to i8*
  store i8 1, i8* %v2_a011, align 1
  %v4_a018 = zext i32 %tmp271 to i64
  store i64 %v4_a018, i64* %rax.global-to-local, align 8
  %v0_a01e = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_a01e, label %dec_label_pc_a040, label %dec_label_pc_a020

dec_label_pc_a020:                                ; preds = %dec_label_pc_a00e
  %v0_a020 = load i32, i32* @global_var_221338.17, align 4
  %v1_a020 = zext i32 %v0_a020 to i64
  store i64 %v1_a020, i64* @r8, align 8
  %v5_a027 = icmp eq i32 %v0_a020, 0
  store i1 %v5_a027, i1* %zf.global-to-local, align 1
  br i1 %v5_a027, label %dec_label_pc_a040, label %dec_label_pc_a02c

dec_label_pc_a02c:                                ; preds = %dec_label_pc_a020
  %v2_a02e = and i32 %tmp271, 61440
  %v9_a02e = zext i32 %v2_a02e to i64
  store i64 %v9_a02e, i64* @rdx, align 8
  %v10_a034 = icmp eq i32 %v2_a02e, 16384
  store i1 %v10_a034, i1* %zf.global-to-local, align 1
  br i1 %v10_a034, label %dec_label_pc_a046, label %dec_label_pc_a040

dec_label_pc_a040:                                ; preds = %dec_label_pc_a02c, %dec_label_pc_a020, %dec_label_pc_a00e
  %v2_a040 = load i64, i64* @rbx, align 8
  %v3_a040 = add i64 %v2_a040, 172
  %v4_a040 = inttoptr i64 %v3_a040 to i32*
  br label %dec_label_pc_a046

dec_label_pc_a046:                                ; preds = %dec_label_pc_a720, %dec_label_pc_a040, %dec_label_pc_a02c, %dec_label_pc_9ff6, %dec_label_pc_9fed
  %.6 = phi i32 [ %.1, %dec_label_pc_a720 ], [ %v3_9fd4, %dec_label_pc_9fed ], [ %v3_9fd4, %dec_label_pc_9ff6 ], [ %v3_9fd4, %dec_label_pc_a040 ], [ %v3_9fd4, %dec_label_pc_a02c ]
  %v0_a046 = load i64, i64* @r15, align 8
  store i64 %v0_a046, i64* @rdi, align 8
  %v1_a049 = inttoptr i64 %v0_a046 to i64*
  call void @free(i64* %v1_a049)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_a04e = load i64, i64* @rbx, align 8
  %v1_a04e = add i64 %v0_a04e, 48
  %v2_a04e = inttoptr i64 %v1_a04e to i32*
  %v3_a04e = load i32, i32* %v2_a04e, align 4
  %v2_a051 = and i32 %v3_a04e, 61440
  %v9_a051 = zext i32 %v2_a051 to i64
  store i64 %v9_a051, i64* %rax.global-to-local, align 8
  %v10_a056 = icmp eq i32 %v2_a051, 40960
  store i1 %v10_a056, i1* %zf.global-to-local, align 1
  br i1 %v10_a056, label %dec_label_pc_a485, label %dec_label_pc_9bb2

dec_label_pc_a070:                                ; preds = %dec_label_pc_9b6f, %dec_label_pc_9b5e
  %v0_a070 = load i8, i8* @global_var_221312.58, align 1
  %v7_a070 = icmp eq i8 %v0_a070, 0
  store i1 %v7_a070, i1* %zf.global-to-local, align 1
  br i1 %v7_a070, label %dec_label_pc_9b82, label %dec_label_pc_a07d

dec_label_pc_a07d:                                ; preds = %dec_label_pc_a070
  store i64 21, i64* @rdi, align 8
  %v0_a082 = load i64, i64* @rdx, align 8
  %v1_a088 = call i64 @function_5c50(i64 21)
  store i64 %v1_a088, i64* %rax.global-to-local, align 8
  %v4_a08d = trunc i64 %v1_a088 to i8
  %v5_a08d = icmp eq i8 %v4_a08d, 0
  store i1 %v5_a08d, i1* %zf.global-to-local, align 1
  %tmp343 = and i64 %v0_a082, 4294967295
  store i64 %tmp343, i64* @rdx, align 8
  br i1 %v5_a08d, label %dec_label_pc_9b82, label %dec_label_pc_a09c

dec_label_pc_a09c:                                ; preds = %dec_label_pc_a07d
  %v0_a09c = call i32* @__errno_location()
  %v2_a09c = ptrtoint i32* %v0_a09c to i64
  store i64 %v2_a09c, i64* %rax.global-to-local, align 8
  %v0_a0a1 = load i64, i64* @rbx, align 8
  %v1_a0a1 = add i64 %v0_a0a1, 24
  %v2_a0a1 = inttoptr i64 %v1_a0a1 to i64*
  %v3_a0a1 = load i64, i64* %v2_a0a1, align 8
  store i64 %v3_a0a1, i64* @r14, align 8
  %v1_a0a5 = load i64, i64* @global_var_2202f8.324, align 8
  %v12_a0a5 = icmp eq i64 %v3_a0a1, %v1_a0a5
  store i1 %v12_a0a5, i1* %zf.global-to-local, align 1
  store i64 %tmp343, i64* @rdx, align 8
  store i32 95, i32* %v0_a09c, align 4
  br i1 %v12_a0a5, label %dec_label_pc_a0c2, label %dec_label_pc_a0bb

dec_label_pc_a0bb:                                ; preds = %dec_label_pc_a09c
  %v0_a0bb = load i64, i64* @r14, align 8
  store i64 %v0_a0bb, i64* @global_var_2202f8.324, align 8
  br label %dec_label_pc_a0c2

dec_label_pc_a0c2:                                ; preds = %dec_label_pc_a0bb, %dec_label_pc_a09c
  %v0_a0c2 = load i64, i64* @rbx, align 8
  %v1_a0c2 = add i64 %v0_a0c2, 192
  %v2_a0c2 = inttoptr i64 %v1_a0c2 to i8*
  store i8 0, i8* %v2_a0c2, align 1
  br label %dec_label_pc_9b82

dec_label_pc_a0d0:                                ; preds = %dec_label_pc_9cd0
  store i64 %v0_9a04, i64* %rax.global-to-local, align 8
  %v2_a0d7 = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v3_a0d7 = zext i8 %v2_a0d7 to i64
  store i64 %v3_a0d7, i64* @rdx, align 8
  %v11_a0da = icmp eq i8 %v2_a0d7, 47
  store i1 %v11_a0da, i1* %zf.global-to-local, align 1
  %v1_a0dd = icmp eq i1 %v11_a0da, false
  br i1 %v1_a0dd, label %dec_label_pc_a308, label %dec_label_pc_a0e3

dec_label_pc_a0e3:                                ; preds = %dec_label_pc_a0d0
  store i64 %v0_9a04, i64* @r12, align 8
  br label %dec_label_pc_a0ea

dec_label_pc_a0ea:                                ; preds = %dec_label_pc_9b13.dec_label_pc_a0ea_crit_edge, %dec_label_pc_a308, %dec_label_pc_a0e3
  %v0_a0ef = phi i64 [ %v0_a0ef.pre, %dec_label_pc_9b13.dec_label_pc_a0ea_crit_edge ], [ %v0_9a04, %dec_label_pc_a308 ], [ %v0_9a04, %dec_label_pc_a0e3 ]
  store i64 2, i64* @rsi, align 8
  store i64 %v0_a0ef, i64* @rdi, align 8
  %v2_a0f2 = call i64 @function_c640(i64 %v0_a0ef, i64 2)
  store i64 %v2_a0f2, i64* %rax.global-to-local, align 8
  %v1_a0f7 = icmp eq i64 %v2_a0f2, 0
  store i1 %v1_a0f7, i1* %zf.global-to-local, align 1
  %v1_a0fa = load i64, i64* @rbx, align 8
  %v2_a0fa = add i64 %v1_a0fa, 16
  %v3_a0fa = inttoptr i64 %v2_a0fa to i64*
  store i64 %v2_a0f2, i64* %v3_a0fa, align 8
  %v1_a0fe = icmp eq i1 %v1_a0f7, false
  br i1 %v1_a0fe, label %dec_label_pc_9b1c, label %dec_label_pc_a104

dec_label_pc_a104:                                ; preds = %dec_label_pc_a0ea
  store i64 ptrtoint ([24 x i8]* @global_var_17c65.325 to i64), i64* @rsi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_a112 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @global_var_17c65.325, i64 0, i64 0), i32 5)
  %v11_a112 = ptrtoint i8* %v9_a112 to i64
  store i64 %v11_a112, i64* %rax.global-to-local, align 8
  %v0_a117 = load i64, i64* @r13, align 8
  store i64 %v0_a117, i64* @rdi, align 8
  %v0_a11b = load i64, i64* @r12, align 8
  store i64 %v0_a11b, i64* @rdx, align 8
  store i64 %v11_a112, i64* @rsi, align 8
  %v3_a121 = call i64 @function_69a0(i64 %v0_a117, i64 %v11_a112, i64 %v0_a11b)
  store i64 %v3_a121, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_9b1c

dec_label_pc_a130:                                ; preds = %dec_label_pc_9b2f
  %v0_a130 = load i64, i64* @r13, align 8
  %v4_a130 = trunc i64 %v0_a130 to i8
  %v5_a130 = icmp eq i8 %v4_a130, 0
  store i1 %v5_a130, i1* %zf.global-to-local, align 1
  br i1 %v5_a130, label %dec_label_pc_9e50, label %dec_label_pc_a139

dec_label_pc_a139:                                ; preds = %dec_label_pc_a130
  %v1_a139 = inttoptr i64 %v1_9b22 to %stat*
  store i64 %v1_9b22, i64* @rdx, align 8
  %v0_a13c = load i64, i64* @r12, align 8
  store i64 %v0_a13c, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v3_a14a = inttoptr i64 %v0_a13c to i8*
  %v7_a14a = call i32 @__xstat(i32 1, i8* %v3_a14a, %stat* %v1_a139)
  %v9_a14a = sext i32 %v7_a14a to i64
  store i64 %v9_a14a, i64* %rax.global-to-local, align 8
  store i64 %v1_9b1c, i64* @rcx, align 8
  store i1 %v11_9b26, i1* %zf.global-to-local, align 1
  br i1 %v11_9b26, label %dec_label_pc_a177, label %dec_label_pc_a15a

dec_label_pc_a15a:                                ; preds = %dec_label_pc_a139
  %v5_a15a = icmp eq i32 %v7_a14a, 0
  store i1 %v5_a15a, i1* %zf.global-to-local, align 1
  %v6_a15a = icmp slt i32 %v7_a14a, 0
  br i1 %v6_a15a, label %dec_label_pc_a6b0, label %dec_label_pc_a162

dec_label_pc_a162:                                ; preds = %dec_label_pc_a15a
  %v0_a162 = load i64, i64* @rbx, align 8
  %v1_a162 = add i64 %v0_a162, 48
  %v2_a162 = inttoptr i64 %v1_a162 to i32*
  %v3_a162 = load i32, i32* %v2_a162, align 4
  %v2_a165 = and i32 %v3_a162, 61440
  %v9_a165 = zext i32 %v2_a165 to i64
  store i64 %v9_a165, i64* @rdx, align 8
  %v10_a16b = icmp eq i32 %v2_a165, 16384
  store i1 %v10_a16b, i1* %zf.global-to-local, align 1
  %v1_a171 = icmp eq i1 %v10_a16b, false
  br i1 %v1_a171, label %dec_label_pc_9e50, label %dec_label_pc_a177

dec_label_pc_a177:                                ; preds = %dec_label_pc_a139, %dec_label_pc_a162
  %v5_a177 = icmp eq i32 %v7_a14a, 0
  store i1 %v5_a177, i1* %zf.global-to-local, align 1
  %v0_a179 = load i64, i64* @r13, align 8
  store i64 %v0_a179, i64* @rdx, align 8
  br i1 %v5_a177, label %dec_label_pc_9b5e, label %dec_label_pc_a6be

dec_label_pc_a190:                                ; preds = %dec_label_pc_9c7e
  %v0_a190 = load i64, i64* @rbx, align 8
  %v1_a190 = add i64 %v0_a190, 32
  %v2_a190 = inttoptr i64 %v1_a190 to i64*
  %v3_a190 = load i64, i64* %v2_a190, align 8
  store i64 %v3_a190, i64* @rdi, align 8
  %v2_a194 = ptrtoint i64* %stack_var_-728 to i64
  store i64 %v2_a194, i64* @rsi, align 8
  %v3_a19b = call i64 @function_fcf0(i64 %v3_a190, i64* nonnull %stack_var_-728)
  store i64 %v3_a19b, i64* %rax.global-to-local, align 8
  %v1_a1a0 = inttoptr i64 %v3_a19b to i8*
  store i64 %v3_a19b, i64* @rdi, align 8
  %v3_a1a3 = call i32 @strlen(i8* %v1_a1a0)
  %v5_a1a3 = sext i32 %v3_a1a3 to i64
  store i64 %v5_a1a3, i64* %rax.global-to-local, align 8
  %v2_a1a8 = load i32, i32* @global_var_221360.252, align 4
  %v14_a1a8 = icmp eq i32 %v3_a1a3, %v2_a1a8
  store i1 %v14_a1a8, i1* %zf.global-to-local, align 1
  %v9_a1ae = icmp sgt i32 %v3_a1a3, %v2_a1a8
  br i1 %v9_a1ae, label %dec_label_pc_a1b4, label %dec_label_pc_9c8d

dec_label_pc_a1b4:                                ; preds = %dec_label_pc_a190
  store i32 %v3_a1a3, i32* @global_var_221360.252, align 4
  br label %dec_label_pc_9c8d

dec_label_pc_a1c0:                                ; preds = %dec_label_pc_9c70
  %v0_a1c0 = load i64, i64* @rbx, align 8
  %v1_a1c0 = add i64 %v0_a1c0, 40
  %v2_a1c0 = inttoptr i64 %v1_a1c0 to i64*
  %v3_a1c0 = load i64, i64* %v2_a1c0, align 8
  store i64 %v3_a1c0, i64* @rdi, align 8
  %v2_a1c4 = ptrtoint i64* %stack_var_-760 to i64
  store i64 %v2_a1c4, i64* @rsi, align 8
  %v3_a1cb = call i64 @function_fcf0(i64 %v3_a1c0, i64* nonnull %stack_var_-760)
  store i64 %v3_a1cb, i64* %rax.global-to-local, align 8
  %v1_a1d0 = inttoptr i64 %v3_a1cb to i8*
  store i64 %v3_a1cb, i64* @rdi, align 8
  %v3_a1d3 = call i32 @strlen(i8* %v1_a1d0)
  %v5_a1d3 = sext i32 %v3_a1d3 to i64
  store i64 %v5_a1d3, i64* %rax.global-to-local, align 8
  %v2_a1d8 = load i32, i32* @global_var_221358.254, align 4
  %v14_a1d8 = icmp eq i32 %v3_a1d3, %v2_a1d8
  store i1 %v14_a1d8, i1* %zf.global-to-local, align 1
  %v9_a1de = icmp sgt i32 %v3_a1d3, %v2_a1d8
  br i1 %v9_a1de, label %dec_label_pc_a1e0, label %dec_label_pc_a1e6

dec_label_pc_a1e0:                                ; preds = %dec_label_pc_a1c0
  store i32 %v3_a1d3, i32* @global_var_221358.254, align 4
  br label %dec_label_pc_a1e6

dec_label_pc_a1e6:                                ; preds = %dec_label_pc_a1c0, %dec_label_pc_a1e0
  %v0_a1e6 = load i64, i64* @rbx, align 8
  %v1_a1e6 = add i64 %v0_a1e6, 48
  %v2_a1e6 = inttoptr i64 %v1_a1e6 to i32*
  %v3_a1e6 = load i32, i32* %v2_a1e6, align 4
  %v2_a1e9 = and i32 %v3_a1e6, 45056
  %v9_a1e9 = zext i32 %v2_a1e9 to i64
  store i64 %v9_a1e9, i64* %rax.global-to-local, align 8
  %v10_a1ee = icmp eq i32 %v2_a1e9, 8192
  store i1 %v10_a1ee, i1* %zf.global-to-local, align 1
  %v1_a1f3 = icmp eq i1 %v10_a1ee, false
  br i1 %v1_a1f3, label %dec_label_pc_a430, label %dec_label_pc_a1f9

dec_label_pc_a1f9:                                ; preds = %dec_label_pc_a1e6
  %v1_a1f9 = add i64 %v0_a1e6, 64
  %v2_a1f9 = inttoptr i64 %v1_a1f9 to i64*
  %v3_a1f9 = load i64, i64* %v2_a1f9, align 8
  %v2_a1fd = ptrtoint i64* %stack_var_-728 to i64
  store i64 %v2_a1fd, i64* @r13, align 8
  store i64 %v2_a1fd, i64* @rsi, align 8
  %v2_a20a = udiv i64 %v3_a1f9, 4294967296
  store i64 %v2_a20a, i64* %rax.global-to-local, align 8
  %v2_a20e = udiv i64 %v3_a1f9, 256
  %v1_a217 = trunc i64 %v2_a20e to i32
  %v2_a217 = and i32 %v1_a217, ptrtoint (i32* @global_var_fff.310 to i32)
  %v9_a217 = zext i32 %v2_a217 to i64
  store i64 %v9_a217, i64* @rdx, align 8
  %v1_a21d = trunc i64 %v2_a20a to i32
  %v2_a21d = and i32 %v1_a21d, -4096
  %v4_a223 = or i32 %v2_a217, %v2_a21d
  %v5_a223 = icmp eq i32 %v4_a223, 0
  store i1 %v5_a223, i1* %zf.global-to-local, align 1
  %v11_a223 = zext i32 %v4_a223 to i64
  store i64 %v11_a223, i64* @rdi, align 8
  %v3_a225 = call i64 @function_fcf0(i64 %v11_a223, i64* nonnull %stack_var_-728)
  store i64 %v3_a225, i64* %rax.global-to-local, align 8
  %v1_a22a = inttoptr i64 %v3_a225 to i8*
  store i64 %v3_a225, i64* @rdi, align 8
  %v3_a22d = call i32 @strlen(i8* %v1_a22a)
  %v5_a22d = sext i32 %v3_a22d to i64
  store i64 %v5_a22d, i64* %rax.global-to-local, align 8
  %v2_a232 = load i32, i32* @global_var_221344.259, align 4
  %v14_a232 = icmp eq i32 %v3_a22d, %v2_a232
  store i1 %v14_a232, i1* %zf.global-to-local, align 1
  %v9_a238 = icmp sgt i32 %v3_a22d, %v2_a232
  br i1 %v9_a238, label %dec_label_pc_a23a, label %dec_label_pc_a240

dec_label_pc_a23a:                                ; preds = %dec_label_pc_a1f9
  store i32 %v3_a22d, i32* @global_var_221344.259, align 4
  br label %dec_label_pc_a240

dec_label_pc_a240:                                ; preds = %dec_label_pc_a1f9, %dec_label_pc_a23a
  %v0_a240 = load i64, i64* @rbx, align 8
  %v1_a240 = add i64 %v0_a240, 64
  %v2_a240 = inttoptr i64 %v1_a240 to i64*
  %v3_a240 = load i64, i64* %v2_a240, align 8
  store i64 %v2_a1fd, i64* @rsi, align 8
  store i64 %v3_a240, i64* @rdx, align 8
  %v2_a24a = udiv i64 %v3_a240, 4096
  store i64 %v2_a24a, i64* %rax.global-to-local, align 8
  %v12_a251 = and i64 %v2_a24a, 4503599627370240
  %v4_a25410 = or i64 %v12_a251, %v3_a240
  %v4_a254 = trunc i64 %v4_a25410 to i32
  %v5_a254 = icmp eq i32 %v4_a254, 0
  store i1 %v5_a254, i1* %zf.global-to-local, align 1
  %v11_a254 = and i64 %v4_a25410, 4294967295
  store i64 %v11_a254, i64* @rdi, align 8
  %v3_a256 = call i64 @function_fcf0(i64 %v11_a254, i64* nonnull %stack_var_-728)
  store i64 %v3_a256, i64* %rax.global-to-local, align 8
  %v1_a25b = inttoptr i64 %v3_a256 to i8*
  store i64 %v3_a256, i64* @rdi, align 8
  %v3_a25e = call i32 @strlen(i8* %v1_a25b)
  %v5_a25e = sext i32 %v3_a25e to i64
  store i64 %v5_a25e, i64* %rax.global-to-local, align 8
  %v0_a263 = load i32, i32* bitcast (i8** @global_var_221340.260 to i32*), align 8
  %v1_a263 = zext i32 %v0_a263 to i64
  store i64 %v1_a263, i64* @rdx, align 8
  %v15_a269 = icmp eq i32 %v3_a25e, %v0_a263
  store i1 %v15_a269, i1* %zf.global-to-local, align 1
  %v8_a26b = icmp sgt i64 %v5_a25e, %v1_a263
  br i1 %v8_a26b, label %dec_label_pc_a26d, label %dec_label_pc_a275

dec_label_pc_a26d:                                ; preds = %dec_label_pc_a240
  store i32 %v3_a25e, i32* bitcast (i8** @global_var_221340.260 to i32*), align 8
  store i64 %v5_a25e, i64* @rdx, align 8
  br label %dec_label_pc_a275

dec_label_pc_a275:                                ; preds = %dec_label_pc_a240, %dec_label_pc_a26d
  %v0_a27b = phi i64 [ %v1_a263, %dec_label_pc_a240 ], [ %v5_a25e, %dec_label_pc_a26d ]
  %v0_a275 = load i32, i32* @global_var_221344.259, align 4
  %v1_a275 = zext i32 %v0_a275 to i64
  %v3_a27b = add nsw i64 %v0_a27b, 2
  %v4_a27b = add nsw i64 %v3_a27b, %v1_a275
  store i64 %v4_a27b, i64* %rax.global-to-local, align 8
  %v1_a27f = trunc i64 %v4_a27b to i32
  %v2_a27f = load i32, i32* @global_var_22133c.261, align 4
  %v14_a27f = icmp eq i32 %v1_a27f, %v2_a27f
  store i1 %v14_a27f, i1* %zf.global-to-local, align 1
  %v9_a285 = icmp sgt i32 %v1_a27f, %v2_a27f
  br i1 %v9_a285, label %dec_label_pc_a468, label %dec_label_pc_9c7e

dec_label_pc_a290:                                ; preds = %dec_label_pc_9eb1
  %v2_a290 = call i64 @function_152d0(i64 %v0_9eba, i64 %v1_9eb3)
  store i64 %v2_a290, i64* %rax.global-to-local, align 8
  %v4_a295 = trunc i64 %v2_a290 to i32
  %v5_a295 = icmp eq i32 %v4_a295, 0
  store i1 %v5_a295, i1* %zf.global-to-local, align 1
  %v6_a295 = icmp slt i32 %v4_a295, 0
  %v1_a297 = icmp eq i1 %v6_a295, false
  br i1 %v1_a297, label %dec_label_pc_9ed0, label %dec_label_pc_a29d

dec_label_pc_a29d:                                ; preds = %dec_label_pc_a290, %dec_label_pc_9ec3
  %v0_a29d = call i32* @__errno_location()
  %v2_a29d = ptrtoint i32* %v0_a29d to i64
  store i64 %v2_a29d, i64* %rax.global-to-local, align 8
  store i64 %v2_a29d, i64* @rcx, align 8
  %v2_a2a5 = load i32, i32* %v0_a29d, align 4
  %v11_a2a7 = icmp eq i32 %v2_a2a5, 95
  %v1_a2aa = zext i1 %v11_a2a7 to i64
  %v3_a2aa = and i64 %v1_9eb3, -256
  %v4_a2aa = or i64 %v1_a2aa, %v3_a2aa
  store i64 %v4_a2aa, i64* @rsi, align 8
  %v11_a2ae = icmp eq i32 %v2_a2a5, 61
  %v1_a2b1 = zext i1 %v11_a2ae to i64
  %v2_a2b1 = load i64, i64* @rdx, align 8
  %v3_a2b1 = and i64 %v2_a2b1, -256
  %v4_a2b1 = or i64 %v3_a2b1, %v1_a2b1
  %v2_a2b4 = add i32 %v2_a2a5, -22
  %v4_a2b734 = or i64 %v4_a2b1, %v4_a2aa
  %v11_a2b7 = and i64 %v4_a2b734, 4294967041
  store i64 %v11_a2b7, i64* @rdx, align 8
  %v2_a2b9 = and i32 %v2_a2b4, -17
  %v3_a2b9 = icmp eq i32 %v2_a2b9, 0
  store i1 %v3_a2b9, i1* %zf.global-to-local, align 1
  %v9_a2b9 = zext i32 %v2_a2b9 to i64
  store i64 %v9_a2b9, i64* %rax.global-to-local, align 8
  br i1 %v3_a2b9, label %dec_label_pc_a2c3, label %dec_label_pc_a2be

dec_label_pc_a2be:                                ; preds = %dec_label_pc_a29d
  %v5_a2be = icmp eq i1 %v11_a2a7, false
  store i1 %v5_a2be, i1* %zf.global-to-local, align 1
  br i1 %v5_a2be, label %dec_label_pc_a2be.dec_label_pc_a2ce_crit_edge, label %dec_label_pc_a2c3

dec_label_pc_a2be.dec_label_pc_a2ce_crit_edge:    ; preds = %dec_label_pc_a2be
  %v1_a2d7.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_a2ce

dec_label_pc_a2c3:                                ; preds = %dec_label_pc_a2be, %dec_label_pc_a29d
  %v0_a2c3 = load i64, i64* @rbx, align 8
  %v1_a2c3 = add i64 %v0_a2c3, 24
  %v2_a2c3 = inttoptr i64 %v1_a2c3 to i64*
  %v3_a2c3 = load i64, i64* %v2_a2c3, align 8
  store i64 %v3_a2c3, i64* %rax.global-to-local, align 8
  store i64 %v3_a2c3, i64* @global_var_2202f0.322, align 8
  br label %dec_label_pc_a2ce

dec_label_pc_a2ce:                                ; preds = %dec_label_pc_a2be.dec_label_pc_a2ce_crit_edge, %dec_label_pc_a2c3
  %v1_a2d7 = phi i64 [ %v1_a2d7.pre, %dec_label_pc_a2be.dec_label_pc_a2ce_crit_edge ], [ %v0_a2c3, %dec_label_pc_a2c3 ]
  store i64 ptrtoint (i64* @global_var_220022.248 to i64), i64* %rax.global-to-local, align 8
  %v4_a2d5 = trunc i64 %v4_a2b734 to i8
  %v5_a2d5 = icmp eq i8 %v4_a2d5, 0
  store i1 %v5_a2d5, i1* %zf.global-to-local, align 1
  %v2_a2d7 = add i64 %v1_a2d7, 176
  %v3_a2d7 = inttoptr i64 %v2_a2d7 to i64*
  store i64 ptrtoint (i64* @global_var_220022.248 to i64), i64* %v3_a2d7, align 8
  br i1 %v5_a2d5, label %dec_label_pc_a550, label %dec_label_pc_a2e4

dec_label_pc_a2e4:                                ; preds = %dec_label_pc_a826, %dec_label_pc_a2ce
  %v0_a2e4 = load i32, i32* @global_var_221338.17, align 4
  %v1_a2e4 = zext i32 %v0_a2e4 to i64
  store i64 %v1_a2e4, i64* %rax.global-to-local, align 8
  %v5_a2ea = icmp eq i32 %v0_a2e4, 0
  store i1 %v5_a2ea, i1* %zf.global-to-local, align 1
  br i1 %v5_a2ea, label %dec_label_pc_a7f0, label %dec_label_pc_a2f2

dec_label_pc_a2f2:                                ; preds = %dec_label_pc_a2e4
  %v0_a2f2 = load i64, i64* @rbx, align 8
  %v1_a2f2 = add i64 %v0_a2f2, 188
  %v2_a2f2 = inttoptr i64 %v1_a2f2 to i32*
  store i32 0, i32* %v2_a2f2, align 4
  br label %dec_label_pc_9b9f

dec_label_pc_a308:                                ; preds = %dec_label_pc_a0d0
  %v0_a308 = load i64, i64* @r15, align 8
  %v1_a308 = inttoptr i64 %v0_a308 to i8*
  %v2_a308 = load i8, i8* %v1_a308, align 1
  %v3_a308 = zext i8 %v2_a308 to i64
  store i64 %v3_a308, i64* @rcx, align 8
  store i64 %v0_9a04, i64* @r12, align 8
  %v5_a313 = icmp eq i8 %v2_a308, 0
  store i1 %v5_a313, i1* %zf.global-to-local, align 1
  br i1 %v5_a313, label %dec_label_pc_a0ea, label %dec_label_pc_a31b

dec_label_pc_a31b:                                ; preds = %dec_label_pc_a508, %dec_label_pc_a308, %dec_label_pc_9b07
  %v0_a32f = phi i64 [ %v3_a508, %dec_label_pc_a508 ], [ %v3_a308, %dec_label_pc_a308 ], [ %v3_9b07, %dec_label_pc_9b07 ]
  %v0_a329 = phi i64 [ %v3_9e17, %dec_label_pc_a508 ], [ %v3_a0d7, %dec_label_pc_a308 ], [ %v3_9af9, %dec_label_pc_9b07 ]
  store i64 %v0_9a04, i64* @rdi, align 8
  %v1_a335 = inttoptr i64 %v0_9a04 to i8*
  %v2_a335 = call i32 @strlen(i8* %v1_a335)
  %v4_a335 = sext i32 %v2_a335 to i64
  store i64 %v4_a335, i64* %rax.global-to-local, align 8
  %v0_a33a = load i64, i64* @r15, align 8
  store i64 %v0_a33a, i64* @rdi, align 8
  %v1_a340 = inttoptr i64 %v0_a33a to i8*
  %v2_a340 = call i32 @strlen(i8* %v1_a340)
  %v4_a340 = sext i32 %v2_a340 to i64
  %v3_a345 = add nsw i64 %v4_a340, 32
  %v4_a345 = add nsw i64 %v3_a345, %v4_a335
  store i64 %v4_a345, i64* %rax.global-to-local, align 8
  store i64 %v0_a32f, i64* @rcx, align 8
  %v0_a351 = load i64, i64* @r15, align 8
  %v1_a351 = add i64 %v0_a351, 1
  %v2_a351 = inttoptr i64 %v1_a351 to i8*
  %v3_a351 = load i8, i8* %v2_a351, align 1
  %v4_a351 = zext i8 %v3_a351 to i64
  store i64 %v4_a351, i64* %r10.global-to-local, align 8
  store i64 %v0_a329, i64* @rdx, align 8
  store i64 %v1_9ae4, i64* @r8, align 8
  %v1_a365 = and i64 %v4_a345, -16
  store i64 %v1_a365, i64* %rax.global-to-local, align 8
  %v0_a369 = load i64, i64* @rsp, align 8
  %v2_a369 = sub i64 %v0_a369, %v1_a365
  %v1_a36c = add i64 %v2_a369, 15
  %v1_a371 = and i64 %v1_a36c, -16
  store i64 %v1_a371, i64* @rdi, align 8
  %v1_a375 = trunc i64 %v0_a32f to i8
  %v11_a375 = icmp eq i8 %v1_a375, 46
  store i1 %v11_a375, i1* %zf.global-to-local, align 1
  store i64 %v1_a371, i64* @r12, align 8
  br i1 %v11_a375, label %dec_label_pc_a4f0, label %dec_label_pc_a381

dec_label_pc_a381:                                ; preds = %dec_label_pc_a4f0, %dec_label_pc_a31b
  %v1_a39b354 = or i64 %v1_a371, 1
  store i64 %v1_a39b354, i64* %rax.global-to-local, align 8
  store i64 %v1_a351, i64* @rsi, align 8
  %v5_a3a3356 = icmp eq i8 %v3_a351, 0
  store i1 %v5_a3a3356, i1* %zf.global-to-local, align 1
  %v4_a3a6359 = inttoptr i64 %v1_a371 to i8*
  store i8 %v1_a375, i8* %v4_a3a6359, align 16
  %v0_a3a9360 = load i1, i1* %zf.global-to-local, align 1
  %v1_a3a9361 = icmp eq i1 %v0_a3a9360, false
  br i1 %v1_a3a9361, label %dec_label_pc_a390, label %dec_label_pc_a3ab

dec_label_pc_a390:                                ; preds = %dec_label_pc_a381, %dec_label_pc_a390
  %v0_a390 = load i64, i64* %r10.global-to-local, align 8
  store i64 %v0_a390, i64* @rcx, align 8
  %v0_a393 = load i64, i64* @rsi, align 8
  %v1_a393 = add i64 %v0_a393, 1
  %v2_a393 = inttoptr i64 %v1_a393 to i8*
  %v3_a393 = load i8, i8* %v2_a393, align 1
  %v4_a393 = zext i8 %v3_a393 to i64
  store i64 %v4_a393, i64* %r10.global-to-local, align 8
  %v0_a398 = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_a398, i64* @rdi, align 8
  %v1_a39b = add i64 %v0_a398, 1
  store i64 %v1_a39b, i64* %rax.global-to-local, align 8
  store i64 %v1_a393, i64* @rsi, align 8
  %v5_a3a3 = icmp eq i8 %v3_a393, 0
  store i1 %v5_a3a3, i1* %zf.global-to-local, align 1
  %v1_a3a6 = trunc i64 %v0_a390 to i8
  %v4_a3a6 = inttoptr i64 %v0_a398 to i8*
  store i8 %v1_a3a6, i8* %v4_a3a6, align 1
  %v0_a3a9 = load i1, i1* %zf.global-to-local, align 1
  %v1_a3a9 = icmp eq i1 %v0_a3a9, false
  br i1 %v1_a3a9, label %dec_label_pc_a390, label %dec_label_pc_a3ab

dec_label_pc_a3ab:                                ; preds = %dec_label_pc_a390, %dec_label_pc_a381
  %v0_a3ab = load i64, i64* @r15, align 8
  %v1_a3ab = load i64, i64* @rsi, align 8
  %v7_a3ab = icmp ult i64 %v0_a3ab, %v1_a3ab
  %v12_a3ab = icmp eq i64 %v0_a3ab, %v1_a3ab
  store i1 %v12_a3ab, i1* %zf.global-to-local, align 1
  %v1_a3ae = icmp eq i1 %v7_a3ab, false
  br i1 %v1_a3ae, label %dec_label_pc_a3bd, label %dec_label_pc_a3b0

dec_label_pc_a3b0:                                ; preds = %dec_label_pc_a3ab
  %v1_a3b0 = add i64 %v1_a3ab, -1
  %v2_a3b0 = inttoptr i64 %v1_a3b0 to i8*
  %v3_a3b0 = load i8, i8* %v2_a3b0, align 1
  %v13_a3b0 = icmp eq i8 %v3_a3b0, 47
  store i1 %v13_a3b0, i1* %zf.global-to-local, align 1
  br i1 %v13_a3b0, label %dec_label_pc_a3bd, label %dec_label_pc_a3b6

dec_label_pc_a3b6:                                ; preds = %dec_label_pc_a3b0
  %v0_a3b6 = load i64, i64* %rax.global-to-local, align 8
  %v1_a3b6 = inttoptr i64 %v0_a3b6 to i8*
  store i8 47, i8* %v1_a3b6, align 1
  %v0_a3b9 = load i64, i64* @rdi, align 8
  %v1_a3b9 = add i64 %v0_a3b9, 2
  store i64 %v1_a3b9, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_a3bd

dec_label_pc_a3bd:                                ; preds = %dec_label_pc_a4f0, %dec_label_pc_a3b6, %dec_label_pc_a3b0, %dec_label_pc_a3ab
  %v0_a3bd = load i64, i64* @rdx, align 8
  %v4_a3bd = trunc i64 %v0_a3bd to i8
  %v5_a3bd = icmp eq i8 %v4_a3bd, 0
  store i1 %v5_a3bd, i1* %zf.global-to-local, align 1
  br i1 %v5_a3bd, label %dec_label_pc_a3e2, label %dec_label_pc_a3c1

dec_label_pc_a3c1:                                ; preds = %dec_label_pc_a3bd
  store i64 %v0_9a04, i64* @rcx, align 8
  br label %dec_label_pc_a3d0

dec_label_pc_a3d0:                                ; preds = %dec_label_pc_a3d0, %dec_label_pc_a3c1
  %v0_a3d8 = phi i64 [ %v3_a3db, %dec_label_pc_a3d0 ], [ %v0_a3bd, %dec_label_pc_a3c1 ]
  %v0_a3d0 = phi i64 [ %v0_a3db, %dec_label_pc_a3d0 ], [ %v0_9a04, %dec_label_pc_a3c1 ]
  %v1_a3d0 = add i64 %v0_a3d0, 1
  store i64 %v1_a3d0, i64* @rcx, align 8
  %v0_a3d4 = load i64, i64* %rax.global-to-local, align 8
  %v1_a3d4 = add i64 %v0_a3d4, 1
  %v10_a3d4 = icmp eq i64 %v1_a3d4, 0
  store i1 %v10_a3d4, i1* %zf.global-to-local, align 1
  store i64 %v1_a3d4, i64* %rax.global-to-local, align 8
  %v1_a3d8 = trunc i64 %v0_a3d8 to i8
  %v4_a3d8 = inttoptr i64 %v0_a3d4 to i8*
  store i8 %v1_a3d8, i8* %v4_a3d8, align 1
  %v0_a3db = load i64, i64* @rcx, align 8
  %v1_a3db = inttoptr i64 %v0_a3db to i8*
  %v2_a3db = load i8, i8* %v1_a3db, align 1
  %v3_a3db = zext i8 %v2_a3db to i64
  store i64 %v3_a3db, i64* @rdx, align 8
  %v5_a3de = icmp eq i8 %v2_a3db, 0
  store i1 %v5_a3de, i1* %zf.global-to-local, align 1
  %v1_a3e0 = icmp eq i1 %v5_a3de, false
  br i1 %v1_a3e0, label %dec_label_pc_a3d0, label %dec_label_pc_a3e2

dec_label_pc_a3e2:                                ; preds = %dec_label_pc_a3d0, %dec_label_pc_a3bd
  %v0_a3e2 = load i64, i64* %rax.global-to-local, align 8
  %v1_a3e2 = inttoptr i64 %v0_a3e2 to i8*
  store i8 0, i8* %v1_a3e2, align 1
  %v0_9b13.pre = load i64, i64* @r8, align 8
  br label %dec_label_pc_9b13

dec_label_pc_a3f0:                                ; preds = %dec_label_pc_9ad4
  store i64 %v0_9a04, i64* @rdi, align 8
  %v1_a3f7 = call i64 @function_6190(i64 %v0_9a04)
  store i64 %v1_a3f7, i64* %rax.global-to-local, align 8
  store i64 %v1_a3f7, i64* @rdx, align 8
  %v4_a3ff = trunc i64 %v1_a3f7 to i8
  %v5_a3ff = icmp eq i8 %v4_a3ff, 0
  store i1 %v5_a3ff, i1* %zf.global-to-local, align 1
  %v1_a401 = trunc i64 %v1_a3f7 to i32
  %v2_a401 = load i64, i64* @rbx, align 8
  %v3_a401 = add i64 %v2_a401, 196
  %v4_a401 = inttoptr i64 %v3_a401 to i32*
  store i32 %v1_a401, i32* %v4_a401, align 4
  br i1 %v5_a3ff, label %dec_label_pc_9ae1, label %dec_label_pc_a40d

dec_label_pc_a40d:                                ; preds = %dec_label_pc_a3f0
  store i8 1, i8* bitcast (i32* @global_var_2213a9.250 to i8*), align 4
  br label %dec_label_pc_9ae1

dec_label_pc_a420:                                ; preds = %dec_label_pc_9c58
  store i32 %v3_9c5f, i32* @global_var_221354.258, align 4
  br label %dec_label_pc_9c70

dec_label_pc_a430:                                ; preds = %dec_label_pc_a1e6
  %v1_a430 = add i64 %v0_a1e6, 72
  %v2_a430 = inttoptr i64 %v1_a430 to i64*
  %v3_a430 = load i64, i64* %v2_a430, align 8
  store i64 %v3_a430, i64* @rdi, align 8
  %v0_a434 = load i64, i64* @global_var_220018.56, align 8
  store i64 %v0_a434, i64* @r8, align 8
  %v2_a43b = ptrtoint i64* %stack_var_-728 to i64
  store i64 %v2_a43b, i64* @rsi, align 8
  %v0_a442 = load i32, i32* @global_var_22131c.54, align 4
  %v1_a442 = zext i32 %v0_a442 to i64
  store i64 %v1_a442, i64* @rdx, align 8
  store i64 1, i64* @rcx, align 8
  %v8_a44d = sext i32 %.3 to i64
  %v9_a44d = call i64 @function_ed10(i64 %v3_a430, i64* nonnull %stack_var_-728, i32 %v0_a442, i64 1, i64 %v0_a434, i64 %v8_a44d)
  store i64 %v9_a44d, i64* %rax.global-to-local, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rsi, align 8
  store i64 %v9_a44d, i64* @rdi, align 8
  %v4_a457 = call i64 @function_10370(i64 %v9_a44d, i32 0)
  store i64 %v4_a457, i64* %rax.global-to-local, align 8
  %v1_a45c = trunc i64 %v4_a457 to i32
  %v2_a45c = load i32, i32* @global_var_22133c.261, align 4
  %v14_a45c = icmp eq i32 %v1_a45c, %v2_a45c
  store i1 %v14_a45c, i1* %zf.global-to-local, align 1
  %v9_a462 = icmp sgt i32 %v1_a45c, %v2_a45c
  br i1 %v9_a462, label %dec_label_pc_a468, label %dec_label_pc_9c7e

dec_label_pc_a468:                                ; preds = %dec_label_pc_a275, %dec_label_pc_a430
  %v0_a468 = phi i64 [ %v4_a27b, %dec_label_pc_a275 ], [ %v4_a457, %dec_label_pc_a430 ]
  %v1_a468 = trunc i64 %v0_a468 to i32
  store i32 %v1_a468, i32* @global_var_22133c.261, align 4
  br label %dec_label_pc_9c7e

dec_label_pc_a478:                                ; preds = %dec_label_pc_9f38, %dec_label_pc_9b9f
  %v0_9f48106 = phi i64 [ %v0_9f25, %dec_label_pc_9f38 ], [ %v0_9b9f, %dec_label_pc_9b9f ]
  %v0_a478 = load i8, i8* @global_var_2212fd.173, align 1
  %v7_a478 = icmp eq i8 %v0_a478, 0
  store i1 %v7_a478, i1* %zf.global-to-local, align 1
  %v1_a47f = icmp eq i1 %v7_a478, false
  br i1 %v1_a47f, label %dec_label_pc_9f48, label %dec_label_pc_a485

dec_label_pc_a485:                                ; preds = %dec_label_pc_a478, %dec_label_pc_a046
  %v0_a485 = phi i64 [ %v0_a04e, %dec_label_pc_a046 ], [ %v0_9f48106, %dec_label_pc_a478 ]
  %.7 = phi i32 [ %.6, %dec_label_pc_a046 ], [ %.1, %dec_label_pc_a478 ]
  %v1_a485 = add i64 %v0_a485, 168
  %v2_a485 = inttoptr i64 %v1_a485 to i32*
  store i32 6, i32* %v2_a485, align 4
  br label %dec_label_pc_9bc7

dec_label_pc_a498:                                ; preds = %bb337
  %v0_a498 = call i32* @__errno_location()
  %v2_a498 = ptrtoint i32* %v0_a498 to i64
  store i64 %v2_a498, i64* %rax.global-to-local, align 8
  store i64 %v2_a498, i64* @rcx, align 8
  br label %dec_label_pc_a4a0

dec_label_pc_a4a0:                                ; preds = %dec_label_pc_a7f0, %dec_label_pc_a498
  %v0_a6a0 = phi i64 [ %v0_a6a0.pre, %dec_label_pc_a7f0 ], [ %v2_a498, %dec_label_pc_a498 ]
  %v0_a4a0 = load i32, i32* @global_var_2202e8.326, align 4
  %v1_a4a0 = sext i32 %v0_a4a0 to i64
  store i64 %v1_a4a0, i64* %rax.global-to-local, align 8
  %v0_a4a7 = load i64, i64* @rbx, align 8
  %v1_a4a7 = add i64 %v0_a4a7, 24
  %v2_a4a7 = inttoptr i64 %v1_a4a7 to i64*
  %v3_a4a7 = load i64, i64* %v2_a4a7, align 8
  %v15_a4a7 = icmp eq i64 %v3_a4a7, %v1_a4a0
  store i1 %v15_a4a7, i1* %zf.global-to-local, align 1
  %v1_a6a0 = inttoptr i64 %v0_a6a0 to i32*
  br i1 %v15_a4a7, label %dec_label_pc_a6a0, label %dec_label_pc_a4b1

dec_label_pc_a4b1:                                ; preds = %dec_label_pc_a4a0
  store i32 0, i32* %v1_a6a0, align 4
  %v0_a4b7 = load i64, i64* @r15, align 8
  store i64 %v0_a4b7, i64* @rsi, align 8
  %v0_a4ba = load i64, i64* @r12, align 8
  store i64 %v0_a4ba, i64* @rdi, align 8
  %v0_a4bd = load i64, i64* @rcx, align 8
  %v2_a4c4 = load i64, i64* @rdx, align 8
  %v4_a4c4 = call i64 @function_cec0(i64 %v0_a4ba, i64 %v0_a4b7, i64 %v2_a4c4, i64 %v0_a4bd)
  store i64 %v4_a4c4, i64* %rax.global-to-local, align 8
  %v4_a4c9 = trunc i64 %v4_a4c4 to i32
  %v5_a4c9 = icmp eq i32 %v4_a4c9, 0
  store i1 %v5_a4c9, i1* %zf.global-to-local, align 1
  %tmp349 = and i64 %v0_a4bd, 4294967295
  store i64 %tmp349, i64* @rcx, align 8
  %tmp350 = icmp slt i32 %v4_a4c9, 1
  br i1 %tmp350, label %dec_label_pc_a800, label %dec_label_pc_a4d8

dec_label_pc_a4d8:                                ; preds = %dec_label_pc_a4b1
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  store i64 1, i64* @rcx, align 8
  store i64 2, i64* @rdx, align 8
  br label %dec_label_pc_9f11

dec_label_pc_a4f0:                                ; preds = %dec_label_pc_a31b
  %v5_a4f0 = icmp eq i8 %v3_a351, 0
  store i1 %v5_a4f0, i1* %zf.global-to-local, align 1
  store i64 %v1_a371, i64* %rax.global-to-local, align 8
  br i1 %v5_a4f0, label %dec_label_pc_a3bd, label %dec_label_pc_a381

dec_label_pc_a508:                                ; preds = %dec_label_pc_9e10
  %v0_a508 = load i64, i64* @r15, align 8
  %v1_a508 = inttoptr i64 %v0_a508 to i8*
  %v2_a508 = load i8, i8* %v1_a508, align 1
  %v3_a508 = zext i8 %v2_a508 to i64
  store i64 %v3_a508, i64* @rcx, align 8
  %v5_a50c = icmp eq i8 %v2_a508, 0
  store i1 %v5_a50c, i1* %zf.global-to-local, align 1
  %v1_a50e = icmp eq i1 %v5_a50c, false
  br i1 %v1_a50e, label %dec_label_pc_a31b, label %dec_label_pc_a514

dec_label_pc_a514:                                ; preds = %dec_label_pc_a508
  store i64 %v0_9a04, i64* @r12, align 8
  br label %dec_label_pc_9b1c

dec_label_pc_a520:                                ; preds = %dec_label_pc_9bb2
  %v0_a520 = load i64, i64* @r13, align 8
  %v4_a520 = trunc i64 %v0_a520 to i8
  %v5_a520 = icmp eq i8 %v4_a520, 0
  store i1 %v5_a520, i1* %zf.global-to-local, align 1
  br i1 %v5_a520, label %dec_label_pc_a540, label %dec_label_pc_a525

dec_label_pc_a525:                                ; preds = %dec_label_pc_a520
  %v0_a525 = load i8, i8* @global_var_2212f5.28, align 1
  %v7_a525 = icmp eq i8 %v0_a525, 0
  store i1 %v7_a525, i1* %zf.global-to-local, align 1
  %v1_a52c = icmp eq i1 %v7_a525, false
  br i1 %v1_a52c, label %dec_label_pc_a540, label %dec_label_pc_a52e

dec_label_pc_a52e:                                ; preds = %dec_label_pc_a525
  %v1_a52e = add i64 %v0_a540, 168
  %v2_a52e = inttoptr i64 %v1_a52e to i32*
  store i32 9, i32* %v2_a52e, align 4
  br label %dec_label_pc_9bc7

dec_label_pc_a540:                                ; preds = %dec_label_pc_a525, %dec_label_pc_a520
  %v1_a540 = add i64 %v0_a540, 168
  %v2_a540 = inttoptr i64 %v1_a540 to i32*
  store i32 3, i32* %v2_a540, align 4
  br label %dec_label_pc_9bc7

dec_label_pc_a550:                                ; preds = %dec_label_pc_a2ce
  %v0_a550 = load i64, i64* @rbx, align 8
  %v1_a550 = add i64 %v0_a550, 188
  %v2_a550 = inttoptr i64 %v1_a550 to i32*
  store i32 0, i32* %v2_a550, align 4
  br label %dec_label_pc_a55a

dec_label_pc_a55a:                                ; preds = %dec_label_pc_a550, %dec_label_pc_9f11
  %v0_a55a = load i64, i64* @r12, align 8
  store i64 %v0_a55a, i64* @rdx, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rdi, align 8
  store i64 3, i64* @rsi, align 8
  %v5_a564 = call i64 @function_13b10(i32 0, i64 3, i64 %v0_a55a)
  store i64 %v5_a564, i64* %rax.global-to-local, align 8
  store i64 %v5_a564, i64* @r14, align 8
  %v0_a56c = call i32* @__errno_location()
  %v2_a56c = ptrtoint i32* %v0_a56c to i64
  store i64 %v2_a56c, i64* %rax.global-to-local, align 8
  %v2_a571 = load i32, i32* %v0_a56c, align 4
  %v3_a571 = zext i32 %v2_a571 to i64
  store i64 %v3_a571, i64* @rsi, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_1a2fc.247 to i64), i64* @rdx, align 8
  %v0_a57a = load i64, i64* @r14, align 8
  %v1_a57a = inttoptr i64 %v0_a57a to i8*
  store i64 %v0_a57a, i64* @rcx, align 8
  store i64 0, i64* @rdi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %v2_a571, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1a2fc.247, i64 0, i64 0), i8* %v1_a57a)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_9f25

dec_label_pc_a590:                                ; preds = %dec_label_pc_9c42
  %v0_a590 = load i64, i64* @rbx, align 8
  %v1_a590 = add i64 %v0_a590, 52
  %v2_a590 = inttoptr i64 %v1_a590 to i32*
  %v3_a590 = load i32, i32* %v2_a590, align 4
  %v4_a590 = zext i32 %v3_a590 to i64
  store i64 %v4_a590, i64* @rdi, align 8
  %v3_a593 = load i64, i64* @rsi, align 8
  %v4_a593 = call i64 @function_9910(i32 %v3_a590, i64 %v3_a593)
  store i64 %v4_a593, i64* %rax.global-to-local, align 8
  %v1_a598 = trunc i64 %v4_a593 to i32
  %v2_a598 = load i32, i32* @global_var_221348.257, align 4
  %v14_a598 = icmp eq i32 %v1_a598, %v2_a598
  store i1 %v14_a598, i1* %zf.global-to-local, align 1
  %v9_a59e = icmp sgt i32 %v1_a598, %v2_a598
  br i1 %v9_a59e, label %dec_label_pc_a5a4, label %dec_label_pc_9c4f

dec_label_pc_a5a4:                                ; preds = %dec_label_pc_a590
  store i32 %v1_a598, i32* @global_var_221348.257, align 4
  br label %dec_label_pc_9c4f

dec_label_pc_a5b0:                                ; preds = %dec_label_pc_9c35
  %v0_a5b0 = load i8, i8* @global_var_22132d.22, align 1
  %v7_a5b0 = icmp eq i8 %v0_a5b0, 0
  store i1 %v7_a5b0, i1* %zf.global-to-local, align 1
  %v0_a5b7 = load i64, i64* @rbx, align 8
  %v1_a5b7 = add i64 %v0_a5b7, 56
  %v2_a5b7 = inttoptr i64 %v1_a5b7 to i32*
  %v3_a5b7 = load i32, i32* %v2_a5b7, align 4
  %v4_a5b7 = zext i32 %v3_a5b7 to i64
  store i64 %v4_a5b7, i64* @r14, align 8
  br i1 %v7_a5b0, label %dec_label_pc_a7a0, label %dec_label_pc_a5c1

dec_label_pc_a5c1:                                ; preds = %dec_label_pc_a7a0.dec_label_pc_a5c1_crit_edge, %dec_label_pc_a5b0
  %v0_a5c8 = phi i64 [ %v0_a5c8.pre, %dec_label_pc_a7a0.dec_label_pc_a5c1_crit_edge ], [ %v4_a5b7, %dec_label_pc_a5b0 ]
  store i64 ptrtoint ([4 x i8]* @global_var_17c24.319 to i64), i64* @rcx, align 8
  %v1_a5c8 = trunc i64 %v0_a5c8 to i32
  store i64 %v0_a5c8, i64* @r8, align 8
  store i64 21, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %tmp351 = bitcast i64* %stack_var_-728 to i8*
  store i64 %v2_9beb, i64* @rdi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  %v15_a5da = call i32 (i8*, i32, i32, i8*, ...) @__sprintf_chk(i8* %tmp351, i32 1, i32 21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_17c24.319, i64 0, i64 0), i32 %v1_a5c8)
  store i64 %v2_9beb, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_a5e2

dec_label_pc_a5e2:                                ; preds = %dec_label_pc_a5e2, %dec_label_pc_a5c1
  %v0_a5e2 = phi i64 [ %v1_a5e4, %dec_label_pc_a5e2 ], [ %v2_9beb, %dec_label_pc_a5c1 ]
  %v1_a5e2 = inttoptr i64 %v0_a5e2 to i32*
  %v2_a5e2 = load i32, i32* %v1_a5e2, align 4
  %v3_a5e2 = zext i32 %v2_a5e2 to i64
  %v1_a5e4 = add i64 %v0_a5e2, 4
  store i64 %v1_a5e4, i64* %rax.global-to-local, align 8
  %v1_a5e8 = add nuw nsw i64 %v3_a5e2, 4278124287
  %v3_a5ee = xor i64 %v3_a5e2, 4294967295
  store i64 %v3_a5ee, i64* @rcx, align 8
  %v4_a5f013 = and i64 %v3_a5ee, %v1_a5e8
  %v4_a5f0 = trunc i64 %v4_a5f013 to i32
  %v2_a5f2 = and i32 %v4_a5f0, -2139062144
  %v3_a5f2 = icmp eq i32 %v2_a5f2, 0
  %v9_a5f2 = zext i32 %v2_a5f2 to i64
  store i64 %v9_a5f2, i64* @rdx, align 8
  br i1 %v3_a5f2, label %dec_label_pc_a5e2, label %dec_label_pc_a5fa

dec_label_pc_a5fa:                                ; preds = %dec_label_pc_a5e2
  %v3_a5fc = udiv i32 %v2_a5f2, 65536
  %v10_a5fc = zext i32 %v3_a5fc to i64
  %v2_a5ff = and i32 %v4_a5f0, 32896
  %v3_a5ff = icmp eq i32 %v2_a5ff, 0
  %v5_a605.v = select i1 %v3_a5ff, i64 %v10_a5fc, i64 %v9_a5f2
  store i64 %v5_a605.v, i64* @rdx, align 8
  %v1_a608 = add i64 %v0_a5e2, 6
  store i64 %v1_a608, i64* @rcx, align 8
  %v3_a60e = select i1 %v3_a5ff, i64 %v1_a608, i64 %v1_a5e4
  %v1_a612 = trunc i64 %v5_a605.v to i8
  %v9_a612 = icmp ne i8 %v1_a612, 0
  %v21_a612 = and i64 %v5_a605.v, 2155905024
  store i64 %v21_a612, i64* @rsi, align 8
  %v3_a615 = select i1 %v9_a612, i64 4, i64 3
  %v4_a615 = sub i64 %v3_a60e, %v3_a615
  store i64 %v4_a615, i64* %rax.global-to-local, align 8
  %v1_a619 = trunc i64 %v4_a615 to i32
  %v2_a619 = load i64, i64* @r13, align 8
  %v3_a619 = trunc i64 %v2_a619 to i32
  %v4_a619 = sub i32 %v1_a619, %v3_a619
  %v14_a619 = icmp eq i32 %v4_a619, 0
  store i1 %v14_a619, i1* %zf.global-to-local, align 1
  %v20_a619 = zext i32 %v4_a619 to i64
  br label %dec_label_pc_a61c

dec_label_pc_a61c:                                ; preds = %dec_label_pc_a7b4, %dec_label_pc_a5fa
  %v0_a628 = phi i64 [ %v6_a7c2, %dec_label_pc_a7b4 ], [ %v20_a619, %dec_label_pc_a5fa ]
  store i64 %v0_a628, i64* %rax.global-to-local, align 8
  %v0_a61c = load i32, i32* @global_var_22134c.256, align 4
  %v2_a61c = trunc i64 %v0_a628 to i32
  %v13_a61c = icmp eq i32 %v0_a61c, %v2_a61c
  store i1 %v13_a61c, i1* %zf.global-to-local, align 1
  %v5_a622 = sext i32 %v0_a61c to i64
  %v6_a622 = icmp slt i64 %v5_a622, %v0_a628
  br i1 %v6_a622, label %dec_label_pc_a628, label %dec_label_pc_9c42

dec_label_pc_a628:                                ; preds = %dec_label_pc_a61c
  store i32 %v2_a61c, i32* @global_var_22134c.256, align 4
  br label %dec_label_pc_9c42

dec_label_pc_a638:                                ; preds = %dec_label_pc_9c28
  %v0_a638 = load i64, i64* @rbx, align 8
  %v1_a638 = add i64 %v0_a638, 52
  %v2_a638 = inttoptr i64 %v1_a638 to i32*
  %v3_a638 = load i32, i32* %v2_a638, align 4
  %v4_a638 = zext i32 %v3_a638 to i64
  store i64 %v4_a638, i64* @rdi, align 8
  %v4_a63b = call i64 @function_9910(i32 %v3_a638, i64 %v1_9c1a)
  store i64 %v4_a63b, i64* %rax.global-to-local, align 8
  %v1_a640 = trunc i64 %v4_a63b to i32
  %v2_a640 = load i32, i32* @global_var_221350.255, align 4
  %v14_a640 = icmp eq i32 %v1_a640, %v2_a640
  store i1 %v14_a640, i1* %zf.global-to-local, align 1
  %v9_a646 = icmp sgt i32 %v1_a640, %v2_a640
  br i1 %v9_a646, label %dec_label_pc_a64c, label %dec_label_pc_9c35

dec_label_pc_a64c:                                ; preds = %dec_label_pc_a638
  store i32 %v1_a640, i32* @global_var_221350.255, align 4
  br label %dec_label_pc_9c35

dec_label_pc_a660:                                ; preds = %dec_label_pc_9c1a
  %v0_a660 = load i8, i8* @global_var_221365.32, align 1
  %v7_a660 = icmp eq i8 %v0_a660, 0
  store i1 %v7_a660, i1* %zf.global-to-local, align 1
  %v1_a667 = icmp eq i1 %v7_a660, false
  br i1 %v1_a667, label %dec_label_pc_9c58, label %dec_label_pc_9c7e

dec_label_pc_a678:                                ; preds = %dec_label_pc_9af2
  store i64 %v0_9a04, i64* @r12, align 8
  br label %dec_label_pc_9b13

dec_label_pc_a688:                                ; preds = %dec_label_pc_9f6e, %dec_label_pc_9f64
  %v0_a688 = phi i64 [ %v0_9f64, %dec_label_pc_9f64 ], [ %v0_a688.pre, %dec_label_pc_9f6e ]
  store i64 %v0_a688, i64* @rdi, align 8
  %v1_a68b = call i64 @function_146b0(i64 %v0_a688)
  store i64 %v1_a68b, i64* %rax.global-to-local, align 8
  store i64 %v1_a68b, i64* @r15, align 8
  br label %dec_label_pc_9fcb

dec_label_pc_a6a0:                                ; preds = %dec_label_pc_a4a0
  store i32 95, i32* %v1_a6a0, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_a6a8

dec_label_pc_a6a8:                                ; preds = %dec_label_pc_a816, %dec_label_pc_a80d, %dec_label_pc_a6a0
  %v0_9f17103 = phi i64 [ %v10_a802, %dec_label_pc_a816 ], [ %v10_a802, %dec_label_pc_a80d ], [ 0, %dec_label_pc_a6a0 ]
  %v0_a6a8 = load i64, i64* @r14, align 8
  store i64 %v0_a6a8, i64* @rcx, align 8
  br label %dec_label_pc_9efc

dec_label_pc_a6b0:                                ; preds = %dec_label_pc_a15a
  %v0_a6b0 = call i32* @__errno_location()
  %v2_a6b0 = ptrtoint i32* %v0_a6b0 to i64
  store i64 %v2_a6b0, i64* %rax.global-to-local, align 8
  %v2_a6b5 = load i32, i32* %v0_a6b0, align 4
  %v12_a6b5 = icmp eq i32 %v2_a6b5, 2
  store i1 %v12_a6b5, i1* %zf.global-to-local, align 1
  br i1 %v12_a6b5, label %dec_label_pc_9e50, label %dec_label_pc_a6be

dec_label_pc_a6be:                                ; preds = %dec_label_pc_a177, %dec_label_pc_a6b0
  store i64 ptrtoint ([17 x i8]* @global_var_17c7d.321 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rdi, align 8
  %v9_a6cc = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_17c7d.321, i64 0, i64 0), i32 5)
  %v11_a6cc = ptrtoint i8* %v9_a6cc to i64
  store i64 %v11_a6cc, i64* %rax.global-to-local, align 8
  %v0_a6d1 = load i64, i64* @r12, align 8
  store i64 %v0_a6d1, i64* @rdx, align 8
  store i64 %v11_a6cc, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v3_a6dc = call i64 @function_69a0(i64 1, i64 %v11_a6cc, i64 %v0_a6d1)
  store i64 %v3_a6dc, i64* %rax.global-to-local, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @r12, align 8
  br label %dec_label_pc_9ca4

dec_label_pc_a6f0:                                ; preds = %dec_label_pc_9f48
  store i64 ptrtoint ([29 x i8]* @global_var_17c8e.327 to i64), i64* @rsi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_a6fe = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @global_var_17c8e.327, i64 0, i64 0), i32 5)
  %v11_a6fe = ptrtoint i8* %v9_a6fe to i64
  store i64 %v11_a6fe, i64* %rax.global-to-local, align 8
  %v0_a703 = load i64, i64* @r13, align 8
  store i64 %v0_a703, i64* @rdi, align 8
  %v0_a707 = load i64, i64* @r12, align 8
  store i64 %v0_a707, i64* @rdx, align 8
  store i64 %v11_a6fe, i64* @rsi, align 8
  %v3_a70d = call i64 @function_69a0(i64 %v0_a703, i64 %v11_a6fe, i64 %v0_a707)
  store i64 %v3_a70d, i64* %rax.global-to-local, align 8
  %v0_a712 = load i64, i64* @rbx, align 8
  %v1_a712 = add i64 %v0_a712, 8
  %v2_a712 = inttoptr i64 %v1_a712 to i64*
  %v3_a712 = load i64, i64* %v2_a712, align 8
  store i64 %v3_a712, i64* @r14, align 8
  %v1_a716 = icmp eq i64 %v3_a712, 0
  store i1 %v1_a716, i1* %zf.global-to-local, align 1
  %v1_a719 = icmp eq i1 %v1_a716, false
  br i1 %v1_a719, label %dec_label_pc_9f64, label %dec_label_pc_a720

dec_label_pc_a720:                                ; preds = %dec_label_pc_a6f0, %dec_label_pc_9fcb
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @r15, align 8
  br label %dec_label_pc_a046

dec_label_pc_a730:                                ; preds = %dec_label_pc_9ce6
  %v0_a730 = load i8, i8* @global_var_221312.58, align 1
  %v7_a730 = icmp eq i8 %v0_a730, 0
  store i1 %v7_a730, i1* %zf.global-to-local, align 1
  br i1 %v7_a730, label %dec_label_pc_9cf0, label %dec_label_pc_a73d

dec_label_pc_a73d:                                ; preds = %dec_label_pc_a730
  store i64 19, i64* @rdi, align 8
  %v1_a749 = call i64 @function_5c50(i64 19)
  store i64 %v1_a749, i64* %rax.global-to-local, align 8
  %v4_a74e = trunc i64 %v1_a749 to i8
  %v5_a74e = icmp eq i8 %v4_a74e, 0
  store i1 %v5_a74e, i1* %zf.global-to-local, align 1
  store i64 %v1_9ae4, i64* @r8, align 8
  %v1_a758 = icmp eq i1 %v5_a74e, false
  br i1 %v1_a758, label %dec_label_pc_9e10, label %dec_label_pc_a75e

dec_label_pc_a75e:                                ; preds = %dec_label_pc_a73d
  store i64 18, i64* @rdi, align 8
  %v1_a763 = call i64 @function_5c50(i64 18)
  store i64 %v1_a763, i64* %rax.global-to-local, align 8
  %v4_a768 = trunc i64 %v1_a763 to i8
  %v5_a768 = icmp eq i8 %v4_a768, 0
  store i1 %v5_a768, i1* %zf.global-to-local, align 1
  store i64 %v1_9ae4, i64* @r8, align 8
  %v1_a772 = icmp eq i1 %v5_a768, false
  br i1 %v1_a772, label %dec_label_pc_9e10, label %dec_label_pc_a778

dec_label_pc_a778:                                ; preds = %dec_label_pc_a75e
  store i64 20, i64* @rdi, align 8
  %v1_a77d = call i64 @function_5c50(i64 20)
  store i64 %v1_a77d, i64* %rax.global-to-local, align 8
  %v4_a782 = trunc i64 %v1_a77d to i8
  %v5_a782 = icmp eq i8 %v4_a782, 0
  store i1 %v5_a782, i1* %zf.global-to-local, align 1
  store i64 %v1_9ae4, i64* @r8, align 8
  %v1_a78c = icmp eq i1 %v5_a782, false
  br i1 %v1_a78c, label %dec_label_pc_9e10, label %dec_label_pc_9cf0

dec_label_pc_a7a0:                                ; preds = %dec_label_pc_a5b0
  store i64 %v4_a5b7, i64* @rdi, align 8
  %v1_a7a3 = call i64 @function_fab0(i64 %v4_a5b7)
  store i64 %v1_a7a3, i64* %rax.global-to-local, align 8
  %v1_a7a8 = icmp eq i64 %v1_a7a3, 0
  store i1 %v1_a7a8, i1* %zf.global-to-local, align 1
  store i64 %v1_a7a3, i64* @rdi, align 8
  br i1 %v1_a7a8, label %dec_label_pc_a7a0.dec_label_pc_a5c1_crit_edge, label %dec_label_pc_a7b4

dec_label_pc_a7a0.dec_label_pc_a5c1_crit_edge:    ; preds = %dec_label_pc_a7a0
  %v0_a5c8.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_a5c1

dec_label_pc_a7b4:                                ; preds = %dec_label_pc_a7a0
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rsi, align 8
  %v3_a7b6 = call i64 @function_10370(i64 %v1_a7a3, i32 0)
  store i64 %v3_a7b6, i64* %rax.global-to-local, align 8
  store i64 0, i64* @rdx, align 8
  %v4_a7c0 = trunc i64 %v3_a7b6 to i32
  %v5_a7c0 = icmp eq i32 %v4_a7c0, 0
  store i1 %v5_a7c0, i1* %zf.global-to-local, align 1
  %v6_a7c0 = icmp slt i32 %v4_a7c0, 0
  %v3_a7b6.op = and i64 %v3_a7b6, 4294967295
  %v6_a7c2 = select i1 %v6_a7c0, i64 0, i64 %v3_a7b6.op
  br label %dec_label_pc_a61c

dec_label_pc_a7d0:                                ; preds = %dec_label_pc_9fd4
  %v1_a7d0 = add i64 %v0_9fd4, 8
  %v2_a7d0 = inttoptr i64 %v1_a7d0 to i64*
  %v3_a7d0 = load i64, i64* %v2_a7d0, align 8
  store i64 %v3_a7d0, i64* @rdi, align 8
  %v1_a7d4 = call i64 @function_6190(i64 %v3_a7d0)
  store i64 %v1_a7d4, i64* %rax.global-to-local, align 8
  %v4_a7d9 = trunc i64 %v1_a7d4 to i8
  %v5_a7d9 = icmp eq i8 %v4_a7d9, 0
  store i1 %v5_a7d9, i1* %zf.global-to-local, align 1
  br i1 %v5_a7d9, label %dec_label_pc_9fe4, label %dec_label_pc_a7e1

dec_label_pc_a7e1:                                ; preds = %dec_label_pc_a7d0
  %v0_a7e1 = load i64, i64* @rbx, align 8
  %v1_a7e1 = add i64 %v0_a7e1, 196
  %v2_a7e1 = inttoptr i64 %v1_a7e1 to i32*
  store i32 -1, i32* %v2_a7e1, align 4
  br label %dec_label_pc_9fe4

dec_label_pc_a7f0:                                ; preds = %dec_label_pc_a2e4
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @r14, align 8
  %v0_a6a0.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_a4a0

dec_label_pc_a800:                                ; preds = %dec_label_pc_a4b1
  %v1_a800 = inttoptr i64 %tmp349 to i32*
  %v2_a800 = load i32, i32* %v1_a800, align 4
  %v3_a800 = zext i32 %v2_a800 to i64
  store i64 %v3_a800, i64* @rdx, align 8
  %tmp367 = icmp slt i64 %v4_a4c4, 0
  %v3_a802 = zext i1 %tmp367 to i64
  %v10_a802 = urem i64 %v3_a802, 2
  store i64 %v10_a802, i64* %rax.global-to-local, align 8
  %v1_a805 = add i32 %v2_a800, -22
  %v2_a808 = and i32 %v1_a805, -17
  %v3_a808 = icmp eq i32 %v2_a808, 0
  store i1 %v3_a808, i1* %zf.global-to-local, align 1
  %v9_a808 = zext i32 %v2_a808 to i64
  store i64 %v9_a808, i64* @rcx, align 8
  br i1 %v3_a808, label %dec_label_pc_a816, label %dec_label_pc_a80d

dec_label_pc_a80d:                                ; preds = %dec_label_pc_a800
  %v11_a80d = icmp eq i32 %v2_a800, 95
  store i1 %v11_a80d, i1* %zf.global-to-local, align 1
  %v1_a810 = icmp eq i1 %v11_a80d, false
  br i1 %v1_a810, label %dec_label_pc_a6a8, label %dec_label_pc_a816

dec_label_pc_a816:                                ; preds = %dec_label_pc_a80d, %dec_label_pc_a800
  %v0_a816 = load i64, i64* @rbx, align 8
  %v1_a816 = add i64 %v0_a816, 24
  %v2_a816 = inttoptr i64 %v1_a816 to i64*
  %v3_a816 = load i64, i64* %v2_a816, align 8
  store i64 %v3_a816, i64* @rdx, align 8
  %v1_a81a = trunc i64 %v3_a816 to i32
  store i32 %v1_a81a, i32* @global_var_2202e8.326, align 4
  br label %dec_label_pc_a6a8

dec_label_pc_a826:                                ; preds = %dec_label_pc_9ea0
  %v0_a826 = call i32* @__errno_location()
  %v2_a826 = ptrtoint i32* %v0_a826 to i64
  store i64 %v2_a826, i64* %rax.global-to-local, align 8
  store i32 95, i32* %v0_a826, align 4
  %v0_a831 = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_a831, i64* @rcx, align 8
  store i64 ptrtoint (i64* @global_var_220022.248 to i64), i64* %rax.global-to-local, align 8
  %v1_a83b = load i64, i64* @rbx, align 8
  %v2_a83b = add i64 %v1_a83b, 176
  %v3_a83b = inttoptr i64 %v2_a83b to i64*
  store i64 ptrtoint (i64* @global_var_220022.248 to i64), i64* %v3_a83b, align 8
  br label %dec_label_pc_a2e4

dec_label_pc_a847:                                ; preds = %dec_label_pc_9ca4
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_a84c

dec_label_pc_a84c:                                ; preds = %dec_label_pc_a847, %dec_label_pc_9a2a
  %.8 = phi i32 [ %.5, %dec_label_pc_a847 ], [ %tmp253, %dec_label_pc_9a2a ]
  br label %dec_label_pc_9a3d

dec_label_pc_a856:                                ; preds = %dec_label_pc_9a46, %dec_label_pc_9a3d
  %v0_a856 = load i64, i64* @rdi, align 8
  %v1_a856 = call i64 @function_146d0(i64 %v0_a856)
  unreachable
}

define i64 @function_a860(i64 %arg1, i64 %arg2, i8 %arg3) local_unnamed_addr {
dec_label_pc_a860:
  %rax.global-to-local = alloca i64, align 8
  %tmp123 = call i64 @__decompiler_undefined_function_0()
  %tmp179 = sext i8 %arg3 to i64
  store i64 %tmp179, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-728 = alloca i64, align 8
  %stack_var_-904 = alloca i64, align 8
  %tmp183 = call i32 @__decompiler_undefined_function_2()
  %stack_var_-872 = alloca i64, align 8
  %stack_var_-888 = alloca i32, align 4
  %v0_a864 = load i64, i64* @rdi, align 8
  store i64 %v0_a864, i64* @r14, align 8
  %v0_a86d = load i64, i64* @rsi, align 8
  store i64 %v0_a86d, i64* @rbx, align 8
  %v0_a877 = load i64, i64* @rdx, align 8
  %v0_a87f = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_a892 = call i32* @__errno_location()
  %v2_a892 = ptrtoint i32* %v0_a892 to i64
  store i64 %v2_a892, i64* %rax.global-to-local, align 8
  %v0_a897 = load i64, i64* @r14, align 8
  store i64 %v0_a897, i64* @rdi, align 8
  store i32 0, i32* %v0_a892, align 4
  %v0_a8a0 = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_a8a0, i64* @r12, align 8
  %v1_a8a3 = inttoptr i64 %v0_a897 to i8*
  %v2_a8a3 = call %__dirstream* @opendir(i8* %v1_a8a3)
  %v3_a8a3 = ptrtoint %__dirstream* %v2_a8a3 to i64
  store i64 %v3_a8a3, i64* @rax, align 8
  %v2_a8a8 = icmp eq %__dirstream* %v2_a8a3, null
  br i1 %v2_a8a8, label %dec_label_pc_ade0, label %dec_label_pc_a8b1

dec_label_pc_a8b1:                                ; preds = %dec_label_pc_a860
  %v0_a8b1 = load i64, i64* @global_var_2213c8.134, align 8
  %v7_a8b1 = icmp eq i64 %v0_a8b1, 0
  store i64 %v3_a8a3, i64* @r13, align 8
  br i1 %v7_a8b1, label %dec_label_pc_aa37, label %dec_label_pc_a8c2

dec_label_pc_a8c2:                                ; preds = %dec_label_pc_a8b1
  store i64 %v3_a8a3, i64* @rdi, align 8
  %v3_a8c5 = call i32 @dirfd(%__dirstream* nonnull %v2_a8a3)
  %v5_a8c5 = sext i32 %v3_a8c5 to i64
  store i64 %v5_a8c5, i64* %rax.global-to-local, align 8
  %v6_a8ca = icmp slt i32 %v3_a8c5, 0
  %v2_a8cc = ptrtoint i64* %stack_var_-872 to i64
  %tmp198 = bitcast i64* %stack_var_-872 to %stat*
  store i64 %v2_a8cc, i64* @rdx, align 8
  br i1 %v6_a8ca, label %dec_label_pc_a940, label %dec_label_pc_a8d3

dec_label_pc_a8d3:                                ; preds = %dec_label_pc_a8c2
  store i64 %v5_a8c5, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v8_a8da = call i32 @__fxstat(i32 1, i32 %v3_a8c5, %stat* %tmp198)
  %tmp216 = icmp slt i32 %v8_a8da, 0
  %v4_a8df = icmp eq i1 %tmp216, false
  %v10_a8df = zext i1 %tmp216 to i64
  store i64 %v10_a8df, i64* %rax.global-to-local, align 8
  br i1 %v4_a8df, label %dec_label_pc_a954, label %dec_label_pc_a8e6

dec_label_pc_a8e6:                                ; preds = %dec_label_pc_a940, %dec_label_pc_a8d3
  store i64 ptrtoint ([40 x i8]* @global_var_181d0.329 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_a8f4 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @global_var_181d0.329, i64 0, i64 0), i32 5)
  %v11_a8f4 = ptrtoint i8* %v9_a8f4 to i64
  store i64 %v11_a8f4, i64* %rax.global-to-local, align 8
  %tmp199 = urem i64 %v0_a877, 256
  store i64 %tmp199, i64* @rdi, align 8
  %v0_a8fe = load i64, i64* @r14, align 8
  store i64 %v0_a8fe, i64* @rdx, align 8
  store i64 %v11_a8f4, i64* @rsi, align 8
  %sext = mul i64 %v0_a877, 72057594037927936
  %v1_a904 = sdiv i64 %sext, 72057594037927936
  %v4_a904 = call i64 @function_69a0(i64 %v1_a904, i64 %v11_a8f4, i64 %v0_a8fe)
  store i64 %v4_a904, i64* %rax.global-to-local, align 8
  %v0_a909 = load i64, i64* @r13, align 8
  store i64 %v0_a909, i64* @rdi, align 8
  %v1_a90c = inttoptr i64 %v0_a909 to %__dirstream*
  %v2_a90c = call i32 @closedir(%__dirstream* %v1_a90c)
  %v4_a90c = sext i32 %v2_a90c to i64
  store i64 %v4_a90c, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_a911

dec_label_pc_a911:                                ; preds = %dec_label_pc_ade0, %dec_label_pc_ad02, %dec_label_pc_acf4, %dec_label_pc_a997, %dec_label_pc_a8e6
  %v0_a911 = load i64, i64* @rsp, align 8
  %v1_a911 = add i64 %v0_a911, ptrtoint (i64* @global_var_338.330 to i64)
  %v2_a911 = inttoptr i64 %v1_a911 to i64*
  %v3_a911 = load i64, i64* %v2_a911, align 8
  store i64 %v3_a911, i64* %rax.global-to-local, align 8
  %v1_a919 = call i64 @__readfsqword(i64 40)
  %v2_a919 = xor i64 %v1_a919, %v3_a911
  %v3_a919 = icmp eq i64 %v2_a919, 0
  store i64 %v2_a919, i64* %rax.global-to-local, align 8
  %v1_a922 = icmp eq i1 %v3_a919, false
  br i1 %v1_a922, label %dec_label_pc_af0a, label %dec_label_pc_a928

dec_label_pc_a928:                                ; preds = %dec_label_pc_a911
  %v0_a928 = load i64, i64* @rsp, align 8
  %v1_a928 = add i64 %v0_a928, ptrtoint (i64* @global_var_348.328 to i64)
  %v1_a92f = inttoptr i64 %v1_a928 to i64*
  %v2_a92f = load i64, i64* %v1_a92f, align 8
  store i64 %v2_a92f, i64* @rbx, align 8
  %v3_a92f = add i64 %v0_a928, add (i64 ptrtoint (i64* @global_var_348.328 to i64), i64 8)
  %v1_a930 = inttoptr i64 %v3_a92f to i64*
  %v2_a930 = load i64, i64* %v1_a930, align 8
  store i64 %v2_a930, i64* @rbp, align 8
  %v3_a930 = add i64 %v0_a928, add (i64 ptrtoint (i64* @global_var_348.328 to i64), i64 16)
  %v1_a931 = inttoptr i64 %v3_a930 to i64*
  %v2_a931 = load i64, i64* %v1_a931, align 8
  store i64 %v2_a931, i64* @r12, align 8
  %v3_a931 = add i64 %v0_a928, add (i64 ptrtoint (i64* @global_var_348.328 to i64), i64 24)
  %v1_a933 = inttoptr i64 %v3_a931 to i64*
  %v2_a933 = load i64, i64* %v1_a933, align 8
  store i64 %v2_a933, i64* @r13, align 8
  %v3_a933 = add i64 %v0_a928, add (i64 ptrtoint (i64* @global_var_348.328 to i64), i64 32)
  %v1_a935 = inttoptr i64 %v3_a933 to i64*
  %v2_a935 = load i64, i64* %v1_a935, align 8
  store i64 %v2_a935, i64* @r14, align 8
  %v3_a935 = add i64 %v0_a928, add (i64 ptrtoint (i64* @global_var_348.328 to i64), i64 40)
  %v1_a937 = inttoptr i64 %v3_a935 to i64*
  %v2_a937 = load i64, i64* %v1_a937, align 8
  store i64 %v2_a937, i64* @r15, align 8
  ret i64 %v2_a919

dec_label_pc_a940:                                ; preds = %dec_label_pc_a8c2
  %v0_a940 = load i64, i64* @r14, align 8
  store i64 %v0_a940, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v3_a948 = inttoptr i64 %v0_a940 to i8*
  %v7_a948 = call i32 @__xstat(i32 1, i8* %v3_a948, %stat* %tmp198)
  %tmp217 = icmp slt i32 %v7_a948, 0
  %v4_a94d = icmp eq i1 %tmp217, false
  %v10_a94d = zext i1 %tmp217 to i64
  store i64 %v10_a94d, i64* %rax.global-to-local, align 8
  %v1_a952 = icmp eq i1 %v4_a94d, false
  br i1 %v1_a952, label %dec_label_pc_a8e6, label %dec_label_pc_a954

dec_label_pc_a954:                                ; preds = %dec_label_pc_a940, %dec_label_pc_a8d3
  %v4_a954 = sext i32 %tmp183 to i64
  store i64 %v4_a954, i64* @rdx, align 8
  store i64 16, i64* @rdi, align 8
  %v3_a95e = load i64, i64* %stack_var_-872, align 8
  store i64 %v3_a95e, i64* @r15, align 8
  %v1_a967 = call i64 @function_14480(i64 16)
  store i64 %v1_a967, i64* %rax.global-to-local, align 8
  %v3_a96c = sext i32 %tmp183 to i64
  store i64 %v3_a96c, i64* @rdx, align 8
  %v0_a970 = load i64, i64* @global_var_2213c8.134, align 8
  store i64 %v0_a970, i64* @rdi, align 8
  store i64 %v1_a967, i64* @rsi, align 8
  %v0_a97a = load i64, i64* @r15, align 8
  %v2_a97a = add i64 %v1_a967, 8
  %v3_a97a = inttoptr i64 %v2_a97a to i64*
  store i64 %v0_a97a, i64* %v3_a97a, align 8
  %v0_a97e = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_a97e, i64* @rbp, align 8
  %v0_a981 = load i64, i64* @rdx, align 8
  %v2_a981 = inttoptr i64 %v0_a97e to i64*
  store i64 %v0_a981, i64* %v2_a981, align 8
  %v0_a984 = load i64, i64* @rdi, align 8
  %v1_a984 = load i64, i64* @rsi, align 8
  %v2_a984 = call i64 @function_e900(i64 %v0_a984, i64 %v1_a984)
  store i64 %v2_a984, i64* %rax.global-to-local, align 8
  %v1_a989 = icmp eq i64 %v2_a984, 0
  br i1 %v1_a989, label %dec_label_pc_af0f, label %dec_label_pc_a992

dec_label_pc_a992:                                ; preds = %dec_label_pc_a954
  %v0_a992 = load i64, i64* @rbp, align 8
  %v12_a992 = icmp eq i64 %v0_a992, %v2_a984
  br i1 %v12_a992, label %dec_label_pc_a9ec, label %dec_label_pc_a997

dec_label_pc_a997:                                ; preds = %dec_label_pc_a992
  store i64 %v0_a992, i64* @rdi, align 8
  %v1_a99a = inttoptr i64 %v0_a992 to i64*
  call void @free(i64* %v1_a99a)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_a99f = load i64, i64* @r14, align 8
  store i64 %v0_a99f, i64* @rdx, align 8
  store i64 3, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v5_a9a9 = call i64 @function_13b10(i32 0, i64 3, i64 %v0_a99f)
  store i64 %v5_a9a9, i64* %rax.global-to-local, align 8
  store i64 ptrtoint ([41 x i8]* @global_var_181f8.331 to i64), i64* @rsi, align 8
  store i64 %v5_a9a9, i64* @rbx, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_a9bf = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @global_var_181f8.331, i64 0, i64 0), i32 5)
  %v11_a9bf = ptrtoint i8* %v9_a9bf to i64
  %v0_a9c4 = load i64, i64* @rbx, align 8
  store i64 %v0_a9c4, i64* @rcx, align 8
  store i64 %v11_a9bf, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %v9_a9bf)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_a9d5 = load i64, i64* @r13, align 8
  store i64 %v0_a9d5, i64* @rdi, align 8
  %v1_a9d8 = inttoptr i64 %v0_a9d5 to %__dirstream*
  %v2_a9d8 = call i32 @closedir(%__dirstream* %v1_a9d8)
  %v4_a9d8 = sext i32 %v2_a9d8 to i64
  store i64 %v4_a9d8, i64* %rax.global-to-local, align 8
  store i32 2, i32* @global_var_221210.10, align 4
  br label %dec_label_pc_a911

dec_label_pc_a9ec:                                ; preds = %dec_label_pc_a992
  %v0_a9ec = load i64, i64* @global_var_2210f8.144, align 8
  store i64 %v0_a9ec, i64* @rax, align 8
  %v0_a9f3 = load i64, i64* @global_var_221100.332, align 8
  store i64 %v4_a954, i64* @rbp, align 8
  %v3_a9ff = load i64, i64* %stack_var_-872, align 8
  store i64 %v3_a9ff, i64* @r15, align 8
  %v2_aa04 = sub i64 %v0_a9f3, %v0_a9ec
  store i64 %v2_aa04, i64* @rdx, align 8
  %tmp218 = icmp ult i64 %v2_aa04, 16
  br i1 %tmp218, label %dec_label_pc_aa0d, label %dec_label_pc_aa25

dec_label_pc_aa0d:                                ; preds = %dec_label_pc_a9ec
  store i64 ptrtoint (i64* @global_var_2210e0.136 to i64), i64* @rdi, align 8
  store i64 16, i64* @rsi, align 8
  %v3_aa19 = call i64 @_obstack_newchunk(i64 ptrtoint (i64* @global_var_2210e0.136 to i64), i64 16, i64 %v2_aa04)
  %v0_aa1e = load i64, i64* @global_var_2210f8.144, align 8
  store i64 %v0_aa1e, i64* @rax, align 8
  %v0_aa30.pre = load i64, i64* @r15, align 8
  br label %dec_label_pc_aa25

dec_label_pc_aa25:                                ; preds = %dec_label_pc_a9ec, %dec_label_pc_aa0d
  %v0_aa30 = phi i64 [ %v3_a9ff, %dec_label_pc_a9ec ], [ %v0_aa30.pre, %dec_label_pc_aa0d ]
  %v0_aa25 = phi i64 [ %v0_a9ec, %dec_label_pc_a9ec ], [ %v0_aa1e, %dec_label_pc_aa0d ]
  %v1_aa25 = add i64 %v0_aa25, 16
  store i64 %v1_aa25, i64* @rdx, align 8
  store i64 %v1_aa25, i64* @global_var_2210f8.144, align 8
  %v2_aa30 = add i64 %v0_aa25, 8
  %v3_aa30 = inttoptr i64 %v2_aa30 to i64*
  store i64 %v0_aa30, i64* %v3_aa30, align 8
  %v0_aa34 = load i64, i64* @rbp, align 8
  %v1_aa34 = load i64, i64* @rax, align 8
  %v2_aa34 = inttoptr i64 %v1_aa34 to i64*
  store i64 %v0_aa34, i64* %v2_aa34, align 8
  br label %dec_label_pc_aa37

dec_label_pc_aa37:                                ; preds = %dec_label_pc_aa25, %dec_label_pc_a8b1
  %v0_aa37 = call i64 @function_60e0()
  store i64 %v0_aa37, i64* %rax.global-to-local, align 8
  %v0_aa3c = load i8, i8* @global_var_2212f6.27, align 1
  %v7_aa3c = icmp eq i8 %v0_aa3c, 0
  %v1_aa43 = icmp eq i1 %v7_aa3c, false
  br i1 %v1_aa43, label %dec_label_pc_aaf0, label %dec_label_pc_aa49

dec_label_pc_aa49:                                ; preds = %dec_label_pc_aa37
  %v0_aa49 = load i8, i8* @global_var_2212b8.11, align 1
  %v7_aa49 = icmp eq i8 %v0_aa49, 0
  %v1_aa50 = icmp eq i1 %v7_aa49, false
  br i1 %v1_aa50, label %dec_label_pc_aaf0, label %dec_label_pc_aa56

dec_label_pc_aa56:                                ; preds = %dec_label_pc_ab44, %dec_label_pc_aa49
  %.025 = phi i64 [ ptrtoint (i64* @global_var_221140.161 to i64), %dec_label_pc_ab44 ], [ %tmp123, %dec_label_pc_aa49 ]
  store i32 0, i32* %stack_var_-888, align 4
  %v4_abcb = urem i64 %v0_a877, 256
  %sext26 = mul i64 %v0_a877, 72057594037927936
  %v1_abd6 = sdiv i64 %sext26, 72057594037927936
  br label %dec_label_pc_aa60

dec_label_pc_aa60:                                ; preds = %dec_label_pc_aae0, %dec_label_pc_aa56
  %v0_aa60 = load i64, i64* @r12, align 8
  %v1_aa60 = inttoptr i64 %v0_aa60 to i32*
  store i32 0, i32* %v1_aa60, align 4
  %v0_aa68 = load i64, i64* @r13, align 8
  %v1_aa68 = inttoptr i64 %v0_aa68 to %__dirstream*
  store i64 %v0_aa68, i64* @rdi, align 8
  %v3_aa6b = call %dirent* @readdir(%__dirstream* %v1_aa68)
  %v4_aa6b = ptrtoint %dirent* %v3_aa6b to i64
  store i64 %v4_aa6b, i64* %rax.global-to-local, align 8
  %v1_aa70 = icmp eq %dirent* %v3_aa6b, null
  store i64 %v4_aa6b, i64* @rbp, align 8
  br i1 %v1_aa70, label %dec_label_pc_abb0, label %dec_label_pc_aa7c

dec_label_pc_aa7c:                                ; preds = %dec_label_pc_aa60
  %v1_aa7c = add i64 %v4_aa6b, 19
  store i64 %v1_aa7c, i64* @rbx, align 8
  %v0_aa80 = load i32, i32* @global_var_2212f0.29, align 4
  %v1_aa80 = zext i32 %v0_aa80 to i64
  store i64 %v1_aa80, i64* %rax.global-to-local, align 8
  %v11_aa86 = icmp eq i32 %v0_aa80, 2
  br i1 %v11_aa86, label %dec_label_pc_ad30, label %dec_label_pc_aa8f

dec_label_pc_aa8f:                                ; preds = %dec_label_pc_aa7c
  %v2_aa8f = inttoptr i64 %v1_aa7c to i8*
  %v3_aa8f = load i8, i8* %v2_aa8f, align 1
  %v13_aa8f = icmp eq i8 %v3_aa8f, 46
  %v5_ad10 = icmp eq i32 %v0_aa80, 0
  br i1 %v13_aa8f, label %dec_label_pc_ad10, label %dec_label_pc_aa99

dec_label_pc_aa99:                                ; preds = %dec_label_pc_aa8f
  %v1_aa9b = icmp eq i1 %v5_ad10, false
  br i1 %v1_aa9b, label %dec_label_pc_ad30, label %dec_label_pc_aaa1

dec_label_pc_aaa1:                                ; preds = %dec_label_pc_aa99
  %v0_aaa1 = load i64, i64* @global_var_2212e0.31, align 8
  store i64 %v0_aaa1, i64* @r15, align 8
  %v1_aaa8 = icmp eq i64 %v0_aaa1, 0
  %v1_aaab = icmp eq i1 %v1_aaa8, false
  br i1 %v1_aaab, label %dec_label_pc_aac5, label %dec_label_pc_ad30

dec_label_pc_aab8:                                ; preds = %dec_label_pc_aac5
  %v0_aab8 = load i64, i64* @r15, align 8
  %v1_aab8 = add i64 %v0_aab8, 8
  %v2_aab8 = inttoptr i64 %v1_aab8 to i64*
  %v3_aab8 = load i64, i64* %v2_aab8, align 8
  store i64 %v3_aab8, i64* @r15, align 8
  %v1_aabc = icmp eq i64 %v3_aab8, 0
  br i1 %v1_aabc, label %dec_label_pc_ad30, label %dec_label_pc_aab8.dec_label_pc_aac5_crit_edge

dec_label_pc_aab8.dec_label_pc_aac5_crit_edge:    ; preds = %dec_label_pc_aab8
  %v0_aacd.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_aac5

dec_label_pc_aac5:                                ; preds = %dec_label_pc_aaa1, %dec_label_pc_aab8.dec_label_pc_aac5_crit_edge
  %v0_aacd = phi i64 [ %v0_aacd.pre, %dec_label_pc_aab8.dec_label_pc_aac5_crit_edge ], [ %v1_aa7c, %dec_label_pc_aaa1 ]
  %v0_aac5 = phi i64 [ %v3_aab8, %dec_label_pc_aab8.dec_label_pc_aac5_crit_edge ], [ %v0_aaa1, %dec_label_pc_aaa1 ]
  %v1_aac5 = inttoptr i64 %v0_aac5 to i64*
  %v2_aac5 = load i64, i64* %v1_aac5, align 8
  %v3_aac5 = inttoptr i64 %v2_aac5 to i8*
  store i64 %v2_aac5, i64* @rdi, align 8
  store i64 4, i64* @rdx, align 8
  store i64 %v0_aacd, i64* @rsi, align 8
  %v4_aad0 = inttoptr i64 %v0_aacd to i8*
  %v7_aad0 = call i32 @fnmatch(i8* %v3_aac5, i8* %v4_aad0, i32 4)
  %v9_aad0 = sext i32 %v7_aad0 to i64
  store i64 %v9_aad0, i64* %rax.global-to-local, align 8
  %v5_aad5 = icmp eq i32 %v7_aad0, 0
  %v1_aad7 = icmp eq i1 %v5_aad5, false
  br i1 %v1_aad7, label %dec_label_pc_aab8, label %dec_label_pc_aae0

dec_label_pc_aae0:                                ; preds = %dec_label_pc_aac5, %dec_label_pc_ad49, %dec_label_pc_adc7, %dec_label_pc_adba, %dec_label_pc_adad, %dec_label_pc_ada0, %dec_label_pc_ad82, %dec_label_pc_ad18, %dec_label_pc_ad10, %dec_label_pc_abb8
  %v0_aae0 = call i64 @function_7360()
  store i64 %v0_aae0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_aa60

dec_label_pc_aaf0:                                ; preds = %dec_label_pc_aa49, %dec_label_pc_aa37
  %v0_aaf0 = load i8, i8* @global_var_220010.333, align 1
  %v7_aaf0 = icmp eq i8 %v0_aaf0, 0
  %v1_aaf7 = icmp eq i1 %v7_aaf0, false
  br i1 %v1_aaf7, label %dec_label_pc_ab21, label %dec_label_pc_aaf9

dec_label_pc_aaf9:                                ; preds = %dec_label_pc_aaf0
  %v0_aaf9 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_aaf9 = ptrtoint %_IO_FILE* %v0_aaf9 to i64
  store i64 %v1_aaf9, i64* @rdi, align 8
  %v2_ab00 = add i64 %v1_aaf9, 40
  %v3_ab00 = inttoptr i64 %v2_ab00 to i64*
  %v4_ab00 = load i64, i64* %v3_ab00, align 8
  store i64 %v4_ab00, i64* %rax.global-to-local, align 8
  %v3_ab04 = add i64 %v1_aaf9, 48
  %v4_ab04 = inttoptr i64 %v3_ab04 to i64*
  %v5_ab04 = load i64, i64* %v4_ab04, align 8
  %v11_ab04 = icmp ult i64 %v4_ab00, %v5_ab04
  %v1_ab08 = icmp eq i1 %v11_ab04, false
  br i1 %v1_ab08, label %dec_label_pc_aefb, label %dec_label_pc_ab0e

dec_label_pc_ab0e:                                ; preds = %dec_label_pc_aaf9
  %v1_ab0e = add i64 %v4_ab00, 1
  store i64 %v1_ab0e, i64* @rdx, align 8
  store i64 %v1_ab0e, i64* %v3_ab00, align 8
  %v0_ab16 = load i64, i64* %rax.global-to-local, align 8
  %v1_ab16 = inttoptr i64 %v0_ab16 to i8*
  store i8 10, i8* %v1_ab16, align 1
  br label %dec_label_pc_ab19

dec_label_pc_ab19:                                ; preds = %dec_label_pc_aefb, %dec_label_pc_ab0e
  %v0_ab19 = load i64, i64* @global_var_2211f8.162, align 8
  %v1_ab19 = add i64 %v0_ab19, 1
  store i64 %v1_ab19, i64* @global_var_2211f8.162, align 8
  br label %dec_label_pc_ab21

dec_label_pc_ab21:                                ; preds = %dec_label_pc_ab19, %dec_label_pc_aaf0
  %v0_ab21 = load i8, i8* @global_var_221318.63, align 1
  %v7_ab21 = icmp eq i8 %v0_ab21, 0
  store i8 0, i8* @global_var_220010.333, align 1
  %v1_ab2f = icmp eq i1 %v7_ab21, false
  br i1 %v1_ab2f, label %dec_label_pc_aeb3, label %dec_label_pc_ab35

dec_label_pc_ab35:                                ; preds = %dec_label_pc_aeb3, %dec_label_pc_ab21
  store i64 0, i64* @rbp, align 8
  %v0_ab37 = load i8, i8* @global_var_221311.59, align 1
  %v7_ab37 = icmp eq i8 %v0_ab37, 0
  %v1_ab3e = icmp eq i1 %v7_ab37, false
  br i1 %v1_ab3e, label %dec_label_pc_ae72, label %dec_label_pc_ab44

dec_label_pc_ab44:                                ; preds = %dec_label_pc_ae8b, %dec_label_pc_ae72, %dec_label_pc_ab35
  %v0_ab63 = phi i64 [ %v0_ab63.pre, %dec_label_pc_ae8b ], [ %v2_ae7a, %dec_label_pc_ae72 ], [ 0, %dec_label_pc_ab35 ]
  %v1_ab44 = icmp eq i64 %v0_a86d, 0
  %v0_ab47 = load i64, i64* @global_var_2212c8.131, align 8
  store i64 %v0_ab47, i64* @rsi, align 8
  %v2_ab55 = load i64, i64* @r14, align 8
  %v3_ab55 = select i1 %v1_ab44, i64 %v2_ab55, i64 %v0_a86d
  store i64 %v3_ab55, i64* @rbx, align 8
  store i64 1, i64* @r8, align 8
  store i64 %v0_ab63, i64* %stack_var_-904, align 8
  store i64 0, i64* @rcx, align 8
  store i64 4294967295, i64* @rdx, align 8
  store i64 %v3_ab55, i64* @rdi, align 8
  %v11_ab6e = call i64 @function_7910(i64 %v3_ab55, i64 %v0_ab47, i32 -1, i32 0, i64 1, i64 ptrtoint (i64* @global_var_221140.161 to i64), i64 %v0_ab63)
  store i64 %v11_ab6e, i64* %rax.global-to-local, align 8
  %v0_ab73 = load i64, i64* @rbp, align 8
  store i64 %v0_ab73, i64* @rdi, align 8
  %v1_ab76 = inttoptr i64 %v0_ab73 to i64*
  call void @free(i64* %v1_ab76)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_ab7b = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_ab7b = ptrtoint %_IO_FILE* %v0_ab7b to i64
  store i64 %v1_ab7b, i64* @rcx, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_17ebf.334 to i64), i64* @rdi, align 8
  store i64 1, i64* @rsi, align 8
  store i64 2, i64* @rdx, align 8
  %v10_ab93 = call i32 @fwrite_unlocked(i64* bitcast ([3 x i8]* @global_var_17ebf.334 to i64*), i32 1, i32 2, %_IO_FILE* %v0_ab7b)
  %v12_ab93 = sext i32 %v10_ab93 to i64
  store i64 %v12_ab93, i64* %rax.global-to-local, align 8
  %v2_ab98 = load i64, i64* %stack_var_-904, align 8
  store i64 %v2_ab98, i64* @rcx, align 8
  %v0_ab99 = load i64, i64* @global_var_2211f8.162, align 8
  %v1_ab99 = add i64 %v0_ab99, 2
  store i64 %v1_ab99, i64* @global_var_2211f8.162, align 8
  br label %dec_label_pc_aa56

dec_label_pc_abb0:                                ; preds = %dec_label_pc_aa60
  %v0_abb0 = load i64, i64* @r12, align 8
  %v1_abb0 = inttoptr i64 %v0_abb0 to i32*
  %v2_abb0 = load i32, i32* %v1_abb0, align 4
  %v3_abb0 = zext i32 %v2_abb0 to i64
  store i64 %v3_abb0, i64* @rdx, align 8
  %v5_abb4 = icmp eq i32 %v2_abb0, 0
  br i1 %v5_abb4, label %dec_label_pc_abe6, label %dec_label_pc_abb8

dec_label_pc_abb8:                                ; preds = %dec_label_pc_abb0
  store i64 ptrtoint ([21 x i8]* @global_var_17cce.335 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_abc6 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @global_var_17cce.335, i64 0, i64 0), i32 5)
  %v11_abc6 = ptrtoint i8* %v9_abc6 to i64
  store i64 %v11_abc6, i64* %rax.global-to-local, align 8
  store i64 %v4_abcb, i64* @rdi, align 8
  %v0_abd0 = load i64, i64* @r14, align 8
  store i64 %v0_abd0, i64* @rdx, align 8
  store i64 %v11_abc6, i64* @rsi, align 8
  %v4_abd6 = call i64 @function_69a0(i64 %v1_abd6, i64 %v11_abc6, i64 %v0_abd0)
  store i64 %v4_abd6, i64* %rax.global-to-local, align 8
  %v0_abdb = load i64, i64* @r12, align 8
  %v1_abdb = inttoptr i64 %v0_abdb to i32*
  %v2_abdb = load i32, i32* %v1_abdb, align 4
  %v12_abdb = icmp eq i32 %v2_abdb, 75
  br i1 %v12_abdb, label %dec_label_pc_aae0, label %dec_label_pc_abe6

dec_label_pc_abe6:                                ; preds = %dec_label_pc_abb8, %dec_label_pc_abb0
  %v0_abe6 = load i64, i64* @r13, align 8
  store i64 %v0_abe6, i64* @rdi, align 8
  %v1_abe9 = inttoptr i64 %v0_abe6 to %__dirstream*
  %v2_abe9 = call i32 @closedir(%__dirstream* %v1_abe9)
  %v4_abe9 = sext i32 %v2_abe9 to i64
  store i64 %v4_abe9, i64* %rax.global-to-local, align 8
  %v5_abee = icmp eq i32 %v2_abe9, 0
  %v1_abf0 = icmp eq i1 %v5_abee, false
  br i1 %v1_abf0, label %dec_label_pc_ae20, label %dec_label_pc_abf6

dec_label_pc_abf6:                                ; preds = %dec_label_pc_ae20, %dec_label_pc_abe6
  %v0_abf6 = load i64, i64* @rdi, align 8
  %v1_abf6 = load i64, i64* @rsi, align 8
  %v2_abf6 = load i64, i64* @rdx, align 8
  %v3_abf6 = load i64, i64* @rcx, align 8
  %v4_abf6 = call i64 @function_62f0(i64 %v0_abf6, i64 %v1_abf6, i64 %v2_abf6, i64 %v3_abf6)
  store i64 %v4_abf6, i64* @rax, align 8
  %v0_abfb = load i8, i8* @global_var_2212f6.27, align 1
  %v7_abfb = icmp eq i8 %v0_abfb, 0
  %v1_ac02 = icmp eq i1 %v7_abfb, false
  br i1 %v1_ac02, label %dec_label_pc_ae08, label %dec_label_pc_ac08

dec_label_pc_ac08:                                ; preds = %dec_label_pc_ae08, %dec_label_pc_abf6
  %v0_ac08 = load i32, i32* @global_var_221338.17, align 4
  %v1_ac08 = zext i32 %v0_ac08 to i64
  store i64 %v1_ac08, i64* @rax, align 8
  %v5_ac0e = icmp eq i32 %v0_ac08, 0
  br i1 %v5_ac0e, label %dec_label_pc_ac1f, label %dec_label_pc_ac12

dec_label_pc_ac12:                                ; preds = %dec_label_pc_ac08
  %v0_ac12 = load i8, i8* @global_var_22132c.23, align 1
  %v7_ac12 = icmp eq i8 %v0_ac12, 0
  br i1 %v7_ac12, label %dec_label_pc_acf4, label %dec_label_pc_ac1f

dec_label_pc_ac1f:                                ; preds = %dec_label_pc_ac12, %dec_label_pc_ac08
  %v0_ac1f = load i8, i8* @global_var_221318.63, align 1
  %v7_ac1f = icmp eq i8 %v0_ac1f, 0
  %v1_ac26 = icmp eq i1 %v7_ac1f, false
  br i1 %v1_ac26, label %dec_label_pc_ae48, label %dec_label_pc_ac2c

dec_label_pc_ac2c:                                ; preds = %dec_label_pc_ae48, %dec_label_pc_ac1f
  store i64 ptrtoint ([6 x i8]* @global_var_17cf8.336 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_ac3a = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_17cf8.336, i64 0, i64 0), i32 5)
  %v11_ac3a = ptrtoint i8* %v9_ac3a to i64
  store i64 %v11_ac3a, i64* %rax.global-to-local, align 8
  %v0_ac3f = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_ac3f = ptrtoint %_IO_FILE* %v0_ac3f to i64
  store i64 %v1_ac3f, i64* @rsi, align 8
  store i64 %v11_ac3a, i64* @rbx, align 8
  store i64 %v11_ac3a, i64* @rdi, align 8
  %v6_ac4c = call i32 @fputs_unlocked(i8* %v9_ac3a, %_IO_FILE* %v0_ac3f)
  %v8_ac4c = sext i32 %v6_ac4c to i64
  store i64 %v8_ac4c, i64* %rax.global-to-local, align 8
  %v0_ac51 = load i64, i64* @rbx, align 8
  %v1_ac51 = inttoptr i64 %v0_ac51 to i8*
  store i64 %v0_ac51, i64* @rdi, align 8
  %v3_ac54 = call i32 @strlen(i8* %v1_ac51)
  %v5_ac54 = sext i32 %v3_ac54 to i64
  store i64 %v5_ac54, i64* %rax.global-to-local, align 8
  %v0_ac59 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_ac59 = ptrtoint %_IO_FILE* %v0_ac59 to i64
  store i64 %v1_ac59, i64* @rdi, align 8
  %v0_ac60 = load i64, i64* @global_var_2211f8.162, align 8
  %v2_ac60 = add i64 %v0_ac60, %v5_ac54
  store i64 %v2_ac60, i64* @global_var_2211f8.162, align 8
  %v2_ac67 = add i64 %v1_ac59, 40
  %v3_ac67 = inttoptr i64 %v2_ac67 to i64*
  %v4_ac67 = load i64, i64* %v3_ac67, align 8
  store i64 %v4_ac67, i64* %rax.global-to-local, align 8
  %v3_ac6b = add i64 %v1_ac59, 48
  %v4_ac6b = inttoptr i64 %v3_ac6b to i64*
  %v5_ac6b = load i64, i64* %v4_ac6b, align 8
  %v11_ac6b = icmp ult i64 %v4_ac67, %v5_ac6b
  %v1_ac6f = icmp eq i1 %v11_ac6b, false
  br i1 %v1_ac6f, label %dec_label_pc_aedd, label %dec_label_pc_ac75

dec_label_pc_ac75:                                ; preds = %dec_label_pc_ac2c
  %v1_ac75 = add i64 %v4_ac67, 1
  store i64 %v1_ac75, i64* @rdx, align 8
  store i64 %v1_ac75, i64* %v3_ac67, align 8
  %v0_ac7d = load i64, i64* %rax.global-to-local, align 8
  %v1_ac7d = inttoptr i64 %v0_ac7d to i8*
  store i8 32, i8* %v1_ac7d, align 1
  br label %dec_label_pc_ac80

dec_label_pc_ac80:                                ; preds = %dec_label_pc_aedd, %dec_label_pc_ac75
  %v0_ac80 = load i64, i64* @global_var_221320.55, align 8
  store i64 %v0_ac80, i64* @r8, align 8
  %v0_ac87 = load i32, i32* bitcast (i64* @global_var_221328.53 to i32*), align 8
  %v1_ac87 = zext i32 %v0_ac87 to i64
  store i64 %v1_ac87, i64* @rdx, align 8
  %v2_ac8d = ptrtoint i64* %stack_var_-728 to i64
  store i64 %v2_ac8d, i64* @rsi, align 8
  %v2_ac95 = load i32, i32* %stack_var_-888, align 4
  %v3_ac95 = sext i32 %v2_ac95 to i64
  store i64 %v3_ac95, i64* @rdi, align 8
  store i64 512, i64* @rcx, align 8
  %v0_ac9e = load i64, i64* @global_var_2211f8.162, align 8
  %v1_ac9e = add i64 %v0_ac9e, 1
  store i64 %v1_ac9e, i64* @global_var_2211f8.162, align 8
  %v8_aca6 = call i64 @function_ed10(i64 %v3_ac95, i64* nonnull %stack_var_-728, i32 %v0_ac87, i64 512, i64 %v0_ac80, i64 %.025)
  store i64 %v8_aca6, i64* %rax.global-to-local, align 8
  %v0_acab = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_acab = ptrtoint %_IO_FILE* %v0_acab to i64
  store i64 %v1_acab, i64* @rsi, align 8
  store i64 %v8_aca6, i64* @rbx, align 8
  %v1_acb5 = inttoptr i64 %v8_aca6 to i8*
  store i64 %v8_aca6, i64* @rdi, align 8
  %v5_acb8 = call i32 @fputs_unlocked(i8* %v1_acb5, %_IO_FILE* %v0_acab)
  %v7_acb8 = sext i32 %v5_acb8 to i64
  store i64 %v7_acb8, i64* %rax.global-to-local, align 8
  %v0_acbd = load i64, i64* @rbx, align 8
  %v1_acbd = inttoptr i64 %v0_acbd to i8*
  store i64 %v0_acbd, i64* @rdi, align 8
  %v3_acc0 = call i32 @strlen(i8* %v1_acbd)
  %v5_acc0 = sext i32 %v3_acc0 to i64
  store i64 %v5_acc0, i64* %rax.global-to-local, align 8
  %v0_acc5 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_acc5 = ptrtoint %_IO_FILE* %v0_acc5 to i64
  store i64 %v1_acc5, i64* @rdi, align 8
  %v0_accc = load i64, i64* @global_var_2211f8.162, align 8
  %v2_accc = add i64 %v0_accc, %v5_acc0
  store i64 %v2_accc, i64* @global_var_2211f8.162, align 8
  %v1_acd3 = add i64 %v1_acc5, 40
  %v2_acd3 = inttoptr i64 %v1_acd3 to i64*
  %v3_acd3 = load i64, i64* %v2_acd3, align 8
  store i64 %v3_acd3, i64* @rax, align 8
  %v2_acd7 = add i64 %v1_acc5, 48
  %v3_acd7 = inttoptr i64 %v2_acd7 to i64*
  %v4_acd7 = load i64, i64* %v3_acd7, align 8
  %v10_acd7 = icmp ult i64 %v3_acd3, %v4_acd7
  %v1_acdb = icmp eq i1 %v10_acd7, false
  br i1 %v1_acdb, label %dec_label_pc_aeec, label %dec_label_pc_ace1

dec_label_pc_ace1:                                ; preds = %dec_label_pc_ac80
  %v1_ace1 = add i64 %v3_acd3, 1
  store i64 %v1_ace1, i64* @rdx, align 8
  store i64 %v1_ace1, i64* %v2_acd3, align 8
  %v0_ace9 = load i64, i64* @rax, align 8
  %v1_ace9 = inttoptr i64 %v0_ace9 to i8*
  store i8 10, i8* %v1_ace9, align 1
  br label %dec_label_pc_acec

dec_label_pc_acec:                                ; preds = %dec_label_pc_aeec, %dec_label_pc_ace1
  %v0_acec = load i64, i64* @global_var_2211f8.162, align 8
  %v1_acec = add i64 %v0_acec, 1
  store i64 %v1_acec, i64* @global_var_2211f8.162, align 8
  br label %dec_label_pc_acf4

dec_label_pc_acf4:                                ; preds = %dec_label_pc_acec, %dec_label_pc_ac12
  %v0_acf4 = load i128, i128* @global_var_2213b0.142, align 8
  %v1_acf4 = trunc i128 %v0_acf4 to i64
  %v8_acf4 = icmp eq i64 %v1_acf4, 0
  br i1 %v8_acf4, label %dec_label_pc_a911, label %dec_label_pc_ad02

dec_label_pc_ad02:                                ; preds = %dec_label_pc_acf4
  %v0_ad02 = load i64, i64* @rdi, align 8
  %v1_ad02 = load i64, i64* @rsi, align 8
  %v2_ad02 = load i64, i64* @rdx, align 8
  %v3_ad02 = load i64, i64* @rcx, align 8
  %v9_ad02 = call i64 @function_9420(i64 %v0_ad02, i64 %v1_ad02, i64 %v2_ad02, i64 %v3_ad02, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v9_ad02, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_a911

dec_label_pc_ad10:                                ; preds = %dec_label_pc_aa8f
  br i1 %v5_ad10, label %dec_label_pc_aae0, label %dec_label_pc_ad18

dec_label_pc_ad18:                                ; preds = %dec_label_pc_ad10
  store i64 0, i64* %rax.global-to-local, align 8
  %v1_ad1a = add i64 %v4_aa6b, 20
  %v2_ad1a = inttoptr i64 %v1_ad1a to i8*
  %v3_ad1a = load i8, i8* %v2_ad1a, align 1
  %v13_ad1a = icmp eq i8 %v3_ad1a, 46
  %v1_ad1e = zext i1 %v13_ad1a to i64
  store i64 %v1_ad1e, i64* %rax.global-to-local, align 8
  %v4_ad21 = add i64 %v1_ad1e, %v1_ad1a
  %v5_ad21 = inttoptr i64 %v4_ad21 to i8*
  %v6_ad21 = load i8, i8* %v5_ad21, align 1
  %v13_ad21 = icmp eq i8 %v6_ad21, 0
  br i1 %v13_ad21, label %dec_label_pc_aae0, label %dec_label_pc_ad30

dec_label_pc_ad30:                                ; preds = %dec_label_pc_aab8, %dec_label_pc_ad18, %dec_label_pc_aaa1, %dec_label_pc_aa99, %dec_label_pc_aa7c
  %v0_ad30 = load i64, i64* @global_var_2212e8.30, align 8
  store i64 %v0_ad30, i64* @r15, align 8
  %v1_ad37 = icmp eq i64 %v0_ad30, 0
  %v1_ad3a = icmp eq i1 %v1_ad37, false
  br i1 %v1_ad3a, label %dec_label_pc_ad49, label %dec_label_pc_ad68

dec_label_pc_ad40:                                ; preds = %dec_label_pc_ad49
  %v0_ad40 = load i64, i64* @r15, align 8
  %v1_ad40 = add i64 %v0_ad40, 8
  %v2_ad40 = inttoptr i64 %v1_ad40 to i64*
  %v3_ad40 = load i64, i64* %v2_ad40, align 8
  store i64 %v3_ad40, i64* @r15, align 8
  %v1_ad44 = icmp eq i64 %v3_ad40, 0
  br i1 %v1_ad44, label %dec_label_pc_ad68, label %dec_label_pc_ad49

dec_label_pc_ad49:                                ; preds = %dec_label_pc_ad30, %dec_label_pc_ad40
  %v0_ad49 = phi i64 [ %v3_ad40, %dec_label_pc_ad40 ], [ %v0_ad30, %dec_label_pc_ad30 ]
  %v1_ad49 = inttoptr i64 %v0_ad49 to i64*
  %v2_ad49 = load i64, i64* %v1_ad49, align 8
  %v3_ad49 = inttoptr i64 %v2_ad49 to i8*
  store i64 %v2_ad49, i64* @rdi, align 8
  store i64 4, i64* @rdx, align 8
  %v0_ad51 = load i64, i64* @rbx, align 8
  store i64 %v0_ad51, i64* @rsi, align 8
  %v4_ad54 = inttoptr i64 %v0_ad51 to i8*
  %v7_ad54 = call i32 @fnmatch(i8* %v3_ad49, i8* %v4_ad54, i32 4)
  %v9_ad54 = sext i32 %v7_ad54 to i64
  store i64 %v9_ad54, i64* %rax.global-to-local, align 8
  %v5_ad59 = icmp eq i32 %v7_ad54, 0
  %v1_ad5b = icmp eq i1 %v5_ad59, false
  br i1 %v1_ad5b, label %dec_label_pc_ad40, label %dec_label_pc_aae0

dec_label_pc_ad68:                                ; preds = %dec_label_pc_ad40, %dec_label_pc_ad30
  %v0_ad68 = load i64, i64* @rbp, align 8
  %v1_ad68 = add i64 %v0_ad68, 18
  %v2_ad68 = inttoptr i64 %v1_ad68 to i8*
  %v3_ad68 = load i8, i8* %v2_ad68, align 1
  store i64 0, i64* @rsi, align 8
  %v1_ad6e = zext i8 %v3_ad68 to i32
  %v2_ad6e = add nsw i32 %v1_ad6e, -1
  %v13_ad6e = trunc i32 %v2_ad6e to i8
  %v17_ad6e = zext i32 %v2_ad6e to i64
  store i64 %v17_ad6e, i64* %rax.global-to-local, align 8
  %tmp219 = icmp ult i8 %v13_ad6e, 14
  br i1 %tmp219, label %dec_label_pc_ad75, label %dec_label_pc_ad82

dec_label_pc_ad75:                                ; preds = %dec_label_pc_ad68
  store i64 ptrtoint (i64* @global_var_16a00.337 to i64), i64* @rcx, align 8
  %v2_ad7f = mul nuw nsw i64 %v17_ad6e, 4
  %v3_ad7f = add i64 %v2_ad7f, ptrtoint (i64* @global_var_16a00.337 to i64)
  %v4_ad7f = inttoptr i64 %v3_ad7f to i32*
  %v5_ad7f = load i32, i32* %v4_ad7f, align 4
  %v6_ad7f = zext i32 %v5_ad7f to i64
  store i64 %v6_ad7f, i64* @rsi, align 8
  br label %dec_label_pc_ad82

dec_label_pc_ad82:                                ; preds = %dec_label_pc_ad68, %dec_label_pc_ad75
  %v1_ad8a = phi i32 [ 0, %dec_label_pc_ad68 ], [ %v5_ad7f, %dec_label_pc_ad75 ]
  store i64 0, i64* @rdx, align 8
  %v0_ad84 = load i64, i64* @r14, align 8
  store i64 %v0_ad84, i64* @rcx, align 8
  %v0_ad87 = load i64, i64* @rbx, align 8
  store i64 %v0_ad87, i64* @rdi, align 8
  %v5_ad8a = call i64 @function_99e0(i64 %v0_ad87, i32 %v1_ad8a, i64 0, i64 %v0_ad84)
  store i64 %v5_ad8a, i64* %rax.global-to-local, align 8
  %v2_ad8f = load i32, i32* %stack_var_-888, align 4
  %v3_ad8f36 = zext i32 %v2_ad8f to i64
  %v5_ad8f = add i64 %v3_ad8f36, %v5_ad8a
  %v23_ad8f = trunc i64 %v5_ad8f to i32
  store i32 %v23_ad8f, i32* %stack_var_-888, align 4
  %v0_ad93 = load i32, i32* @global_var_221338.17, align 4
  %v10_ad93 = icmp eq i32 %v0_ad93, 1
  %v1_ad9a = icmp eq i1 %v10_ad93, false
  br i1 %v1_ad9a, label %dec_label_pc_aae0, label %dec_label_pc_ada0

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ad82
  %v0_ada0 = load i32, i32* @global_var_221330.20, align 4
  %v10_ada0 = icmp eq i32 %v0_ada0, -1
  %v1_ada7 = icmp eq i1 %v10_ada0, false
  br i1 %v1_ada7, label %dec_label_pc_aae0, label %dec_label_pc_adad

dec_label_pc_adad:                                ; preds = %dec_label_pc_ada0
  %v0_adad = load i8, i8* @global_var_22132c.23, align 1
  %v7_adad = icmp eq i8 %v0_adad, 0
  %v1_adb4 = icmp eq i1 %v7_adad, false
  br i1 %v1_adb4, label %dec_label_pc_aae0, label %dec_label_pc_adba

dec_label_pc_adba:                                ; preds = %dec_label_pc_adad
  %v0_adba = load i8, i8* @global_var_2212f6.27, align 1
  %v7_adba = icmp eq i8 %v0_adba, 0
  %v1_adc1 = icmp eq i1 %v7_adba, false
  br i1 %v1_adc1, label %dec_label_pc_aae0, label %dec_label_pc_adc7

dec_label_pc_adc7:                                ; preds = %dec_label_pc_adba
  %v1_adc7 = load i64, i64* @rsi, align 8
  %v2_adc7 = load i64, i64* @rdx, align 8
  %v3_adc7 = load i64, i64* @rcx, align 8
  %v4_adc7 = call i64 @function_62f0(i64 %v0_ad87, i64 %v1_adc7, i64 %v2_adc7, i64 %v3_adc7)
  store i64 %v4_adc7, i64* @rax, align 8
  %v1_adcc = load i64, i64* @rsi, align 8
  %v2_adcc = load i64, i64* @rdx, align 8
  %v3_adcc = load i64, i64* @rcx, align 8
  %v9_adcc = call i64 @function_9420(i64 %v0_ad87, i64 %v1_adcc, i64 %v2_adcc, i64 %v3_adcc, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v9_adcc, i64* @rax, align 8
  %v0_add1 = call i64 @function_60e0()
  store i64 %v0_add1, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_aae0

dec_label_pc_ade0:                                ; preds = %dec_label_pc_a860
  store i64 ptrtoint ([25 x i8]* @global_var_17cb5.338 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_adee = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @global_var_17cb5.338, i64 0, i64 0), i32 5)
  %v11_adee = ptrtoint i8* %v9_adee to i64
  store i64 %v11_adee, i64* %rax.global-to-local, align 8
  %tmp211 = urem i64 %v0_a877, 256
  store i64 %tmp211, i64* @rdi, align 8
  %v0_adf8 = load i64, i64* @r14, align 8
  store i64 %v0_adf8, i64* @rdx, align 8
  store i64 %v11_adee, i64* @rsi, align 8
  %v3_adfe = call i64 @function_69a0(i64 %tmp211, i64 %v11_adee, i64 %v0_adf8)
  store i64 %v3_adfe, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_a911

dec_label_pc_ae08:                                ; preds = %dec_label_pc_abf6
  store i64 0, i64* @rsi, align 8
  %v0_ae0a = load i64, i64* @r14, align 8
  store i64 %v0_ae0a, i64* @rdi, align 8
  %v1_ae0d = trunc i64 %v0_ae0a to i32
  %v3_ae0d = load i64, i64* @rdx, align 8
  %v4_ae0d = call i64 @function_6570(i32 %v1_ae0d, i64 0, i64 %v3_ae0d)
  store i64 %v4_ae0d, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_ac08

dec_label_pc_ae20:                                ; preds = %dec_label_pc_abe6
  store i64 ptrtoint ([21 x i8]* @global_var_17ce3.339 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_ae2e = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @global_var_17ce3.339, i64 0, i64 0), i32 5)
  %v11_ae2e = ptrtoint i8* %v9_ae2e to i64
  store i64 %v11_ae2e, i64* %rax.global-to-local, align 8
  store i64 %v4_abcb, i64* @rdi, align 8
  %v0_ae38 = load i64, i64* @r14, align 8
  store i64 %v0_ae38, i64* @rdx, align 8
  store i64 %v11_ae2e, i64* @rsi, align 8
  %v3_ae3e = call i64 @function_69a0(i64 %v4_abcb, i64 %v11_ae2e, i64 %v0_ae38)
  store i64 %v3_ae3e, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_abf6

dec_label_pc_ae48:                                ; preds = %dec_label_pc_ac1f
  %v0_ae48 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_ae48 = ptrtoint %_IO_FILE* %v0_ae48 to i64
  store i64 %v1_ae48, i64* @rcx, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_17c53.308 to i64), i64* @rdi, align 8
  store i64 2, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %v11_ae60 = call i32 @fwrite_unlocked(i64* bitcast ([3 x i8]* @global_var_17c53.308 to i64*), i32 1, i32 2, %_IO_FILE* %v0_ae48)
  %v13_ae60 = sext i32 %v11_ae60 to i64
  store i64 %v13_ae60, i64* %rax.global-to-local, align 8
  %v0_ae65 = load i64, i64* @global_var_2211f8.162, align 8
  %v1_ae65 = add i64 %v0_ae65, 2
  store i64 %v1_ae65, i64* @global_var_2211f8.162, align 8
  br label %dec_label_pc_ac2c

dec_label_pc_ae72:                                ; preds = %dec_label_pc_ab35
  store i64 2, i64* @rsi, align 8
  %v0_ae77 = load i64, i64* @r14, align 8
  store i64 %v0_ae77, i64* @rdi, align 8
  %v2_ae7a = call i64 @function_c640(i64 %v0_ae77, i64 2)
  store i64 %v2_ae7a, i64* %rax.global-to-local, align 8
  %v1_ae7f = icmp eq i64 %v2_ae7a, 0
  store i64 %v2_ae7a, i64* @rbp, align 8
  %v1_ae85 = icmp eq i1 %v1_ae7f, false
  br i1 %v1_ae85, label %dec_label_pc_ab44, label %dec_label_pc_ae8b

dec_label_pc_ae8b:                                ; preds = %dec_label_pc_ae72
  store i64 ptrtoint ([24 x i8]* @global_var_17c65.325 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_ae99 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @global_var_17c65.325, i64 0, i64 0), i32 5)
  %v11_ae99 = ptrtoint i8* %v9_ae99 to i64
  store i64 %v11_ae99, i64* %rax.global-to-local, align 8
  %tmp213 = urem i64 %v0_a877, 256
  store i64 %tmp213, i64* @rdi, align 8
  %v0_aea3 = load i64, i64* @r14, align 8
  store i64 %v0_aea3, i64* @rdx, align 8
  store i64 %v11_ae99, i64* @rsi, align 8
  %sext27 = mul i64 %v0_a877, 72057594037927936
  %v1_aea9 = sdiv i64 %sext27, 72057594037927936
  %v4_aea9 = call i64 @function_69a0(i64 %v1_aea9, i64 %v11_ae99, i64 %v0_aea3)
  store i64 %v4_aea9, i64* %rax.global-to-local, align 8
  %v0_ab63.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_ab44

dec_label_pc_aeb3:                                ; preds = %dec_label_pc_ab21
  %v0_aeb3 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_aeb3 = ptrtoint %_IO_FILE* %v0_aeb3 to i64
  store i64 %v1_aeb3, i64* @rcx, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_17c53.308 to i64), i64* @rdi, align 8
  store i64 2, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %v11_aecb = call i32 @fwrite_unlocked(i64* bitcast ([3 x i8]* @global_var_17c53.308 to i64*), i32 1, i32 2, %_IO_FILE* %v0_aeb3)
  %v13_aecb = sext i32 %v11_aecb to i64
  store i64 %v13_aecb, i64* %rax.global-to-local, align 8
  %v0_aed0 = load i64, i64* @global_var_2211f8.162, align 8
  %v1_aed0 = add i64 %v0_aed0, 2
  store i64 %v1_aed0, i64* @global_var_2211f8.162, align 8
  br label %dec_label_pc_ab35

dec_label_pc_aedd:                                ; preds = %dec_label_pc_ac2c
  store i64 32, i64* @rsi, align 8
  %v6_aee2 = call i32 @__overflow(%_IO_FILE* %v0_ac59, i32 32)
  %v8_aee2 = sext i32 %v6_aee2 to i64
  store i64 %v8_aee2, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_ac80

dec_label_pc_aeec:                                ; preds = %dec_label_pc_ac80
  store i64 10, i64* @rsi, align 8
  %v4_aef1 = call i32 @__overflow(%_IO_FILE* %v0_acc5, i32 10)
  %v6_aef1 = sext i32 %v4_aef1 to i64
  store i64 %v6_aef1, i64* @rax, align 8
  br label %dec_label_pc_acec

dec_label_pc_aefb:                                ; preds = %dec_label_pc_aaf9
  store i64 10, i64* @rsi, align 8
  %v6_af00 = call i32 @__overflow(%_IO_FILE* %v0_aaf9, i32 10)
  %v8_af00 = sext i32 %v6_af00 to i64
  store i64 %v8_af00, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_ab19

dec_label_pc_af0a:                                ; preds = %dec_label_pc_a911
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_af0f

dec_label_pc_af0f:                                ; preds = %dec_label_pc_af0a, %dec_label_pc_a954
  %v0_af0f = load i64, i64* @rdi, align 8
  %v1_af0f = call i64 @function_146d0(i64 %v0_af0f)
  unreachable
}

define i64 @function_af20(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_af20:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_af20 = load i64, i64* @rsi, align 8
  %v1_af20 = add i64 %v0_af20, 128
  %v2_af20 = inttoptr i64 %v1_af20 to i64*
  %v3_af20 = load i64, i64* %v2_af20, align 8
  %v0_af27 = load i64, i64* @rdi, align 8
  %v1_af27 = add i64 %v0_af27, 128
  %v2_af27 = inttoptr i64 %v1_af27 to i64*
  %v3_af27 = load i64, i64* %v2_af27, align 8
  %v8_af2e = icmp sgt i64 %v3_af27, %v3_af20
  br i1 %v8_af2e, label %dec_label_pc_af60, label %dec_label_pc_af30

dec_label_pc_af30:                                ; preds = %dec_label_pc_af20
  %v5_af30 = icmp slt i64 %v3_af27, %v3_af20
  br i1 %v5_af30, label %dec_label_pc_af41, label %dec_label_pc_af32

dec_label_pc_af32:                                ; preds = %dec_label_pc_af30
  %v1_af32 = add i64 %v0_af20, 136
  %v2_af32 = inttoptr i64 %v1_af32 to i64*
  %v3_af32 = load i64, i64* %v2_af32, align 8
  %v1_af39 = trunc i64 %v3_af32 to i32
  %v3_af39 = add i64 %v0_af27, 136
  %v4_af39 = inttoptr i64 %v3_af39 to i32*
  %v5_af39 = load i32, i32* %v4_af39, align 4
  %v6_af39 = sub i32 %v1_af39, %v5_af39
  %v22_af39 = zext i32 %v6_af39 to i64
  br label %dec_label_pc_af41

dec_label_pc_af41:                                ; preds = %dec_label_pc_af30, %dec_label_pc_af32
  %storemerge = phi i64 [ %v22_af39, %dec_label_pc_af32 ], [ 1, %dec_label_pc_af30 ]
  ret i64 %storemerge

dec_label_pc_af60:                                ; preds = %dec_label_pc_af20
  ret i64 4294967295
}

define i64 @function_af70(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_af70:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_af70 = load i64, i64* @rdi, align 8
  %v1_af70 = add i64 %v0_af70, 96
  %v2_af70 = inttoptr i64 %v1_af70 to i64*
  %v3_af70 = load i64, i64* %v2_af70, align 8
  %v0_af74 = load i64, i64* @rsi, align 8
  %v1_af74 = add i64 %v0_af74, 96
  %v2_af74 = inttoptr i64 %v1_af74 to i64*
  %v3_af74 = load i64, i64* %v2_af74, align 8
  store i64 %v0_af74, i64* @rdx, align 8
  %v8_af7b = icmp sgt i64 %v3_af74, %v3_af70
  br i1 %v8_af7b, label %dec_label_pc_afa0, label %dec_label_pc_af7d

dec_label_pc_af7d:                                ; preds = %dec_label_pc_af70
  %v5_af7d = icmp slt i64 %v3_af74, %v3_af70
  br i1 %v5_af7d, label %dec_label_pc_af98, label %dec_label_pc_af7f

dec_label_pc_af7f:                                ; preds = %dec_label_pc_af7d
  %v1_af7f = add i64 %v0_af70, 104
  %v2_af7f = inttoptr i64 %v1_af7f to i64*
  %v3_af7f = load i64, i64* %v2_af7f, align 8
  %v1_af83 = trunc i64 %v3_af7f to i32
  %v3_af83 = add i64 %v0_af74, 104
  %v4_af83 = inttoptr i64 %v3_af83 to i32*
  %v5_af83 = load i32, i32* %v4_af83, align 4
  %v6_af83 = sub i32 %v1_af83, %v5_af83
  %v16_af83 = icmp eq i32 %v6_af83, 0
  %v22_af83 = zext i32 %v6_af83 to i64
  %v1_af86 = icmp eq i1 %v16_af83, false
  br i1 %v1_af86, label %dec_label_pc_af9d, label %dec_label_pc_af88

dec_label_pc_af88:                                ; preds = %dec_label_pc_af7f
  store i64 %v0_af70, i64* @rsi, align 8
  ret i64 %v22_af83

dec_label_pc_af98:                                ; preds = %dec_label_pc_af7d
  br label %dec_label_pc_af9d

dec_label_pc_af9d:                                ; preds = %dec_label_pc_af98, %dec_label_pc_af7f
  %v0_af9d = phi i64 [ 1, %dec_label_pc_af98 ], [ %v22_af83, %dec_label_pc_af7f ]
  ret i64 %v0_af9d

dec_label_pc_afa0:                                ; preds = %dec_label_pc_af70
  ret i64 4294967295
}

define i64 @function_afb0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_afb0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_afb0 = load i64, i64* @rdi, align 8
  %v1_afb0 = add i64 %v0_afb0, 112
  %v2_afb0 = inttoptr i64 %v1_afb0 to i64*
  %v3_afb0 = load i64, i64* %v2_afb0, align 8
  %v0_afb4 = load i64, i64* @rsi, align 8
  %v1_afb4 = add i64 %v0_afb4, 112
  %v2_afb4 = inttoptr i64 %v1_afb4 to i64*
  %v3_afb4 = load i64, i64* %v2_afb4, align 8
  store i64 %v0_afb4, i64* @rdx, align 8
  %v8_afbb = icmp sgt i64 %v3_afb4, %v3_afb0
  br i1 %v8_afbb, label %dec_label_pc_afe0, label %dec_label_pc_afbd

dec_label_pc_afbd:                                ; preds = %dec_label_pc_afb0
  %v5_afbd = icmp slt i64 %v3_afb4, %v3_afb0
  br i1 %v5_afbd, label %dec_label_pc_afd8, label %dec_label_pc_afbf

dec_label_pc_afbf:                                ; preds = %dec_label_pc_afbd
  %v1_afbf = add i64 %v0_afb0, 120
  %v2_afbf = inttoptr i64 %v1_afbf to i64*
  %v3_afbf = load i64, i64* %v2_afbf, align 8
  %v1_afc3 = trunc i64 %v3_afbf to i32
  %v3_afc3 = add i64 %v0_afb4, 120
  %v4_afc3 = inttoptr i64 %v3_afc3 to i32*
  %v5_afc3 = load i32, i32* %v4_afc3, align 4
  %v6_afc3 = sub i32 %v1_afc3, %v5_afc3
  %v16_afc3 = icmp eq i32 %v6_afc3, 0
  %v22_afc3 = zext i32 %v6_afc3 to i64
  %v1_afc6 = icmp eq i1 %v16_afc3, false
  br i1 %v1_afc6, label %dec_label_pc_afdd, label %dec_label_pc_afc8

dec_label_pc_afc8:                                ; preds = %dec_label_pc_afbf
  store i64 %v0_afb0, i64* @rsi, align 8
  ret i64 %v22_afc3

dec_label_pc_afd8:                                ; preds = %dec_label_pc_afbd
  br label %dec_label_pc_afdd

dec_label_pc_afdd:                                ; preds = %dec_label_pc_afd8, %dec_label_pc_afbf
  %v0_afdd = phi i64 [ 1, %dec_label_pc_afd8 ], [ %v22_afc3, %dec_label_pc_afbf ]
  ret i64 %v0_afdd

dec_label_pc_afe0:                                ; preds = %dec_label_pc_afb0
  ret i64 4294967295
}

define i64 @function_aff0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_aff0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_aff0 = load i64, i64* @rsi, align 8
  %v1_aff0 = add i64 %v0_aff0, 96
  %v2_aff0 = inttoptr i64 %v1_aff0 to i64*
  %v3_aff0 = load i64, i64* %v2_aff0, align 8
  %v0_aff4 = load i64, i64* @rdi, align 8
  %v1_aff4 = add i64 %v0_aff4, 96
  %v2_aff4 = inttoptr i64 %v1_aff4 to i64*
  %v3_aff4 = load i64, i64* %v2_aff4, align 8
  %v8_aff8 = icmp sgt i64 %v3_aff4, %v3_aff0
  br i1 %v8_aff8, label %dec_label_pc_b020, label %dec_label_pc_affa

dec_label_pc_affa:                                ; preds = %dec_label_pc_aff0
  %v5_affa = icmp slt i64 %v3_aff4, %v3_aff0
  br i1 %v5_affa, label %dec_label_pc_b005, label %dec_label_pc_affc

dec_label_pc_affc:                                ; preds = %dec_label_pc_affa
  %v1_affc = add i64 %v0_aff0, 104
  %v2_affc = inttoptr i64 %v1_affc to i64*
  %v3_affc = load i64, i64* %v2_affc, align 8
  %v1_b000 = trunc i64 %v3_affc to i32
  %v3_b000 = add i64 %v0_aff4, 104
  %v4_b000 = inttoptr i64 %v3_b000 to i32*
  %v5_b000 = load i32, i32* %v4_b000, align 4
  %v6_b000 = sub i32 %v1_b000, %v5_b000
  %v22_b000 = zext i32 %v6_b000 to i64
  br label %dec_label_pc_b005

dec_label_pc_b005:                                ; preds = %dec_label_pc_affa, %dec_label_pc_affc
  %storemerge = phi i64 [ %v22_b000, %dec_label_pc_affc ], [ 1, %dec_label_pc_affa ]
  ret i64 %storemerge

dec_label_pc_b020:                                ; preds = %dec_label_pc_aff0
  ret i64 4294967295
}

define i64 @function_b030(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b030:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b030 = load i64, i64* @rdi, align 8
  %v1_b030 = add i64 %v0_b030, 128
  %v2_b030 = inttoptr i64 %v1_b030 to i64*
  %v3_b030 = load i64, i64* %v2_b030, align 8
  %v0_b037 = load i64, i64* @rsi, align 8
  %v1_b037 = add i64 %v0_b037, 128
  %v2_b037 = inttoptr i64 %v1_b037 to i64*
  %v3_b037 = load i64, i64* %v2_b037, align 8
  store i64 %v0_b037, i64* @rdx, align 8
  %v8_b041 = icmp sgt i64 %v3_b037, %v3_b030
  br i1 %v8_b041, label %dec_label_pc_b070, label %dec_label_pc_b043

dec_label_pc_b043:                                ; preds = %dec_label_pc_b030
  %v5_b043 = icmp slt i64 %v3_b037, %v3_b030
  br i1 %v5_b043, label %dec_label_pc_b060, label %dec_label_pc_b045

dec_label_pc_b045:                                ; preds = %dec_label_pc_b043
  %v1_b045 = add i64 %v0_b030, 136
  %v2_b045 = inttoptr i64 %v1_b045 to i64*
  %v3_b045 = load i64, i64* %v2_b045, align 8
  %v1_b04c = trunc i64 %v3_b045 to i32
  %v3_b04c = add i64 %v0_b037, 136
  %v4_b04c = inttoptr i64 %v3_b04c to i32*
  %v5_b04c = load i32, i32* %v4_b04c, align 4
  %v6_b04c = sub i32 %v1_b04c, %v5_b04c
  %v16_b04c = icmp eq i32 %v6_b04c, 0
  %v22_b04c = zext i32 %v6_b04c to i64
  %v1_b052 = icmp eq i1 %v16_b04c, false
  br i1 %v1_b052, label %dec_label_pc_b065, label %dec_label_pc_b054

dec_label_pc_b054:                                ; preds = %dec_label_pc_b045
  store i64 %v0_b030, i64* @rsi, align 8
  ret i64 %v22_b04c

dec_label_pc_b060:                                ; preds = %dec_label_pc_b043
  br label %dec_label_pc_b065

dec_label_pc_b065:                                ; preds = %dec_label_pc_b060, %dec_label_pc_b045
  %v0_b065 = phi i64 [ 1, %dec_label_pc_b060 ], [ %v22_b04c, %dec_label_pc_b045 ]
  ret i64 %v0_b065

dec_label_pc_b070:                                ; preds = %dec_label_pc_b030
  ret i64 4294967295
}

define i64 @function_b080(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b080:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b080 = load i64, i64* @rsi, align 8
  %v1_b080 = add i64 %v0_b080, 112
  %v2_b080 = inttoptr i64 %v1_b080 to i64*
  %v3_b080 = load i64, i64* %v2_b080, align 8
  %v0_b084 = load i64, i64* @rdi, align 8
  %v1_b084 = add i64 %v0_b084, 112
  %v2_b084 = inttoptr i64 %v1_b084 to i64*
  %v3_b084 = load i64, i64* %v2_b084, align 8
  %v8_b088 = icmp sgt i64 %v3_b084, %v3_b080
  br i1 %v8_b088, label %dec_label_pc_b0b0, label %dec_label_pc_b08a

dec_label_pc_b08a:                                ; preds = %dec_label_pc_b080
  %v5_b08a = icmp slt i64 %v3_b084, %v3_b080
  br i1 %v5_b08a, label %dec_label_pc_b095, label %dec_label_pc_b08c

dec_label_pc_b08c:                                ; preds = %dec_label_pc_b08a
  %v1_b08c = add i64 %v0_b080, 120
  %v2_b08c = inttoptr i64 %v1_b08c to i64*
  %v3_b08c = load i64, i64* %v2_b08c, align 8
  %v1_b090 = trunc i64 %v3_b08c to i32
  %v3_b090 = add i64 %v0_b084, 120
  %v4_b090 = inttoptr i64 %v3_b090 to i32*
  %v5_b090 = load i32, i32* %v4_b090, align 4
  %v6_b090 = sub i32 %v1_b090, %v5_b090
  %v22_b090 = zext i32 %v6_b090 to i64
  br label %dec_label_pc_b095

dec_label_pc_b095:                                ; preds = %dec_label_pc_b08a, %dec_label_pc_b08c
  %storemerge = phi i64 [ %v22_b090, %dec_label_pc_b08c ], [ 1, %dec_label_pc_b08a ]
  ret i64 %storemerge

dec_label_pc_b0b0:                                ; preds = %dec_label_pc_b080
  ret i64 4294967295
}

define i64 @function_b0c0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b0c0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b0c0 = load i64, i64* @rdi, align 8
  %v1_b0c0 = add i64 %v0_b0c0, 96
  %v2_b0c0 = inttoptr i64 %v1_b0c0 to i64*
  %v3_b0c0 = load i64, i64* %v2_b0c0, align 8
  %v0_b0c4 = load i64, i64* @rsi, align 8
  %v1_b0c4 = add i64 %v0_b0c4, 96
  %v2_b0c4 = inttoptr i64 %v1_b0c4 to i64*
  %v3_b0c4 = load i64, i64* %v2_b0c4, align 8
  store i64 %v0_b0c4, i64* @rdx, align 8
  %v8_b0cb = icmp sgt i64 %v3_b0c4, %v3_b0c0
  br i1 %v8_b0cb, label %dec_label_pc_b0f0, label %dec_label_pc_b0cd

dec_label_pc_b0cd:                                ; preds = %dec_label_pc_b0c0
  %v5_b0cd = icmp slt i64 %v3_b0c4, %v3_b0c0
  br i1 %v5_b0cd, label %dec_label_pc_b0e8, label %dec_label_pc_b0cf

dec_label_pc_b0cf:                                ; preds = %dec_label_pc_b0cd
  %v1_b0cf = add i64 %v0_b0c0, 104
  %v2_b0cf = inttoptr i64 %v1_b0cf to i64*
  %v3_b0cf = load i64, i64* %v2_b0cf, align 8
  %v1_b0d3 = trunc i64 %v3_b0cf to i32
  %v3_b0d3 = add i64 %v0_b0c4, 104
  %v4_b0d3 = inttoptr i64 %v3_b0d3 to i32*
  %v5_b0d3 = load i32, i32* %v4_b0d3, align 4
  %v6_b0d3 = sub i32 %v1_b0d3, %v5_b0d3
  %v16_b0d3 = icmp eq i32 %v6_b0d3, 0
  %v22_b0d3 = zext i32 %v6_b0d3 to i64
  %v1_b0d6 = icmp eq i1 %v16_b0d3, false
  br i1 %v1_b0d6, label %dec_label_pc_b0ed, label %dec_label_pc_b0d8

dec_label_pc_b0d8:                                ; preds = %dec_label_pc_b0cf
  store i64 %v0_b0c0, i64* @rsi, align 8
  %v1_b0de = inttoptr i64 %v0_b0c0 to i8*
  %v4_b0de = call i32 @strcmp(i8* %v1_b0de, i8* %v1_b0de)
  %v6_b0de = sext i32 %v4_b0de to i64
  ret i64 %v6_b0de

dec_label_pc_b0e8:                                ; preds = %dec_label_pc_b0cd
  br label %dec_label_pc_b0ed

dec_label_pc_b0ed:                                ; preds = %dec_label_pc_b0e8, %dec_label_pc_b0cf
  %v0_b0ed = phi i64 [ 1, %dec_label_pc_b0e8 ], [ %v22_b0d3, %dec_label_pc_b0cf ]
  ret i64 %v0_b0ed

dec_label_pc_b0f0:                                ; preds = %dec_label_pc_b0c0
  ret i64 4294967295
}

define i64 @function_b100(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b100:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b100 = load i64, i64* @rsi, align 8
  %v1_b100 = add i64 %v0_b100, 112
  %v2_b100 = inttoptr i64 %v1_b100 to i64*
  %v3_b100 = load i64, i64* %v2_b100, align 8
  %v0_b104 = load i64, i64* @rdi, align 8
  %v1_b104 = add i64 %v0_b104, 112
  %v2_b104 = inttoptr i64 %v1_b104 to i64*
  %v3_b104 = load i64, i64* %v2_b104, align 8
  %v8_b108 = icmp sgt i64 %v3_b104, %v3_b100
  br i1 %v8_b108, label %dec_label_pc_b130, label %dec_label_pc_b10a

dec_label_pc_b10a:                                ; preds = %dec_label_pc_b100
  %v5_b10a = icmp slt i64 %v3_b104, %v3_b100
  br i1 %v5_b10a, label %dec_label_pc_b120, label %dec_label_pc_b10c

dec_label_pc_b10c:                                ; preds = %dec_label_pc_b10a
  %v1_b10c = add i64 %v0_b100, 120
  %v2_b10c = inttoptr i64 %v1_b10c to i64*
  %v3_b10c = load i64, i64* %v2_b10c, align 8
  %v1_b110 = trunc i64 %v3_b10c to i32
  %v3_b110 = add i64 %v0_b104, 120
  %v4_b110 = inttoptr i64 %v3_b110 to i32*
  %v5_b110 = load i32, i32* %v4_b110, align 4
  %v6_b110 = sub i32 %v1_b110, %v5_b110
  %v16_b110 = icmp eq i32 %v6_b110, 0
  %v22_b110 = zext i32 %v6_b110 to i64
  %v1_b113 = icmp eq i1 %v16_b110, false
  br i1 %v1_b113, label %dec_label_pc_b125, label %dec_label_pc_b115

dec_label_pc_b115:                                ; preds = %dec_label_pc_b10c
  %v1_b11b = inttoptr i64 %v0_b104 to i8*
  %v3_b11b = inttoptr i64 %v0_b100 to i8*
  %v4_b11b = call i32 @strcmp(i8* %v1_b11b, i8* %v3_b11b)
  %v6_b11b = sext i32 %v4_b11b to i64
  ret i64 %v6_b11b

dec_label_pc_b120:                                ; preds = %dec_label_pc_b10a
  br label %dec_label_pc_b125

dec_label_pc_b125:                                ; preds = %dec_label_pc_b120, %dec_label_pc_b10c
  %v0_b125 = phi i64 [ 1, %dec_label_pc_b120 ], [ %v22_b110, %dec_label_pc_b10c ]
  ret i64 %v0_b125

dec_label_pc_b130:                                ; preds = %dec_label_pc_b100
  ret i64 4294967295
}

define i64 @function_b140(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b140:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b140 = load i64, i64* @rsi, align 8
  %v1_b140 = add i64 %v0_b140, 96
  %v2_b140 = inttoptr i64 %v1_b140 to i64*
  %v3_b140 = load i64, i64* %v2_b140, align 8
  %v0_b144 = load i64, i64* @rdi, align 8
  %v1_b144 = add i64 %v0_b144, 96
  %v2_b144 = inttoptr i64 %v1_b144 to i64*
  %v3_b144 = load i64, i64* %v2_b144, align 8
  %v8_b148 = icmp sgt i64 %v3_b144, %v3_b140
  br i1 %v8_b148, label %dec_label_pc_b170, label %dec_label_pc_b14a

dec_label_pc_b14a:                                ; preds = %dec_label_pc_b140
  %v5_b14a = icmp slt i64 %v3_b144, %v3_b140
  br i1 %v5_b14a, label %dec_label_pc_b160, label %dec_label_pc_b14c

dec_label_pc_b14c:                                ; preds = %dec_label_pc_b14a
  %v1_b14c = add i64 %v0_b140, 104
  %v2_b14c = inttoptr i64 %v1_b14c to i64*
  %v3_b14c = load i64, i64* %v2_b14c, align 8
  %v1_b150 = trunc i64 %v3_b14c to i32
  %v3_b150 = add i64 %v0_b144, 104
  %v4_b150 = inttoptr i64 %v3_b150 to i32*
  %v5_b150 = load i32, i32* %v4_b150, align 4
  %v6_b150 = sub i32 %v1_b150, %v5_b150
  %v16_b150 = icmp eq i32 %v6_b150, 0
  %v22_b150 = zext i32 %v6_b150 to i64
  %v1_b153 = icmp eq i1 %v16_b150, false
  br i1 %v1_b153, label %dec_label_pc_b165, label %dec_label_pc_b155

dec_label_pc_b155:                                ; preds = %dec_label_pc_b14c
  %v1_b15b = inttoptr i64 %v0_b144 to i8*
  %v3_b15b = inttoptr i64 %v0_b140 to i8*
  %v4_b15b = call i32 @strcmp(i8* %v1_b15b, i8* %v3_b15b)
  %v6_b15b = sext i32 %v4_b15b to i64
  ret i64 %v6_b15b

dec_label_pc_b160:                                ; preds = %dec_label_pc_b14a
  br label %dec_label_pc_b165

dec_label_pc_b165:                                ; preds = %dec_label_pc_b160, %dec_label_pc_b14c
  %v0_b165 = phi i64 [ 1, %dec_label_pc_b160 ], [ %v22_b150, %dec_label_pc_b14c ]
  ret i64 %v0_b165

dec_label_pc_b170:                                ; preds = %dec_label_pc_b140
  ret i64 4294967295
}

define i64 @function_b180(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b180:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b180 = load i64, i64* @rdi, align 8
  %v1_b180 = add i64 %v0_b180, 112
  %v2_b180 = inttoptr i64 %v1_b180 to i64*
  %v3_b180 = load i64, i64* %v2_b180, align 8
  %v0_b184 = load i64, i64* @rsi, align 8
  %v1_b184 = add i64 %v0_b184, 112
  %v2_b184 = inttoptr i64 %v1_b184 to i64*
  %v3_b184 = load i64, i64* %v2_b184, align 8
  store i64 %v0_b184, i64* @rdx, align 8
  %v8_b18b = icmp sgt i64 %v3_b184, %v3_b180
  br i1 %v8_b18b, label %dec_label_pc_b1b0, label %dec_label_pc_b18d

dec_label_pc_b18d:                                ; preds = %dec_label_pc_b180
  %v5_b18d = icmp slt i64 %v3_b184, %v3_b180
  br i1 %v5_b18d, label %dec_label_pc_b1a8, label %dec_label_pc_b18f

dec_label_pc_b18f:                                ; preds = %dec_label_pc_b18d
  %v1_b18f = add i64 %v0_b180, 120
  %v2_b18f = inttoptr i64 %v1_b18f to i64*
  %v3_b18f = load i64, i64* %v2_b18f, align 8
  %v1_b193 = trunc i64 %v3_b18f to i32
  %v3_b193 = add i64 %v0_b184, 120
  %v4_b193 = inttoptr i64 %v3_b193 to i32*
  %v5_b193 = load i32, i32* %v4_b193, align 4
  %v6_b193 = sub i32 %v1_b193, %v5_b193
  %v16_b193 = icmp eq i32 %v6_b193, 0
  %v22_b193 = zext i32 %v6_b193 to i64
  %v1_b196 = icmp eq i1 %v16_b193, false
  br i1 %v1_b196, label %dec_label_pc_b1ad, label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_b18f
  store i64 %v0_b180, i64* @rsi, align 8
  %v1_b19e = inttoptr i64 %v0_b180 to i8*
  %v4_b19e = call i32 @strcmp(i8* %v1_b19e, i8* %v1_b19e)
  %v6_b19e = sext i32 %v4_b19e to i64
  ret i64 %v6_b19e

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b18d
  br label %dec_label_pc_b1ad

dec_label_pc_b1ad:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b18f
  %v0_b1ad = phi i64 [ 1, %dec_label_pc_b1a8 ], [ %v22_b193, %dec_label_pc_b18f ]
  ret i64 %v0_b1ad

dec_label_pc_b1b0:                                ; preds = %dec_label_pc_b180
  ret i64 4294967295
}

define i64 @function_b1c0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b1c0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b1c0 = load i64, i64* @rdi, align 8
  %v1_b1c0 = add i64 %v0_b1c0, 128
  %v2_b1c0 = inttoptr i64 %v1_b1c0 to i64*
  %v3_b1c0 = load i64, i64* %v2_b1c0, align 8
  %v0_b1c7 = load i64, i64* @rsi, align 8
  %v1_b1c7 = add i64 %v0_b1c7, 128
  %v2_b1c7 = inttoptr i64 %v1_b1c7 to i64*
  %v3_b1c7 = load i64, i64* %v2_b1c7, align 8
  store i64 %v0_b1c7, i64* @rdx, align 8
  %v8_b1d1 = icmp sgt i64 %v3_b1c7, %v3_b1c0
  br i1 %v8_b1d1, label %dec_label_pc_b200, label %dec_label_pc_b1d3

dec_label_pc_b1d3:                                ; preds = %dec_label_pc_b1c0
  %v5_b1d3 = icmp slt i64 %v3_b1c7, %v3_b1c0
  br i1 %v5_b1d3, label %dec_label_pc_b1f0, label %dec_label_pc_b1d5

dec_label_pc_b1d5:                                ; preds = %dec_label_pc_b1d3
  %v1_b1d5 = add i64 %v0_b1c0, 136
  %v2_b1d5 = inttoptr i64 %v1_b1d5 to i64*
  %v3_b1d5 = load i64, i64* %v2_b1d5, align 8
  %v1_b1dc = trunc i64 %v3_b1d5 to i32
  %v3_b1dc = add i64 %v0_b1c7, 136
  %v4_b1dc = inttoptr i64 %v3_b1dc to i32*
  %v5_b1dc = load i32, i32* %v4_b1dc, align 4
  %v6_b1dc = sub i32 %v1_b1dc, %v5_b1dc
  %v16_b1dc = icmp eq i32 %v6_b1dc, 0
  %v22_b1dc = zext i32 %v6_b1dc to i64
  %v1_b1e2 = icmp eq i1 %v16_b1dc, false
  br i1 %v1_b1e2, label %dec_label_pc_b1f5, label %dec_label_pc_b1e4

dec_label_pc_b1e4:                                ; preds = %dec_label_pc_b1d5
  store i64 %v0_b1c0, i64* @rsi, align 8
  %v1_b1ea = inttoptr i64 %v0_b1c0 to i8*
  %v4_b1ea = call i32 @strcmp(i8* %v1_b1ea, i8* %v1_b1ea)
  %v6_b1ea = sext i32 %v4_b1ea to i64
  ret i64 %v6_b1ea

dec_label_pc_b1f0:                                ; preds = %dec_label_pc_b1d3
  br label %dec_label_pc_b1f5

dec_label_pc_b1f5:                                ; preds = %dec_label_pc_b1f0, %dec_label_pc_b1d5
  %v0_b1f5 = phi i64 [ 1, %dec_label_pc_b1f0 ], [ %v22_b1dc, %dec_label_pc_b1d5 ]
  ret i64 %v0_b1f5

dec_label_pc_b200:                                ; preds = %dec_label_pc_b1c0
  ret i64 4294967295
}

define i64 @function_b210(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b210:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b210 = load i64, i64* @rsi, align 8
  %v1_b210 = add i64 %v0_b210, 128
  %v2_b210 = inttoptr i64 %v1_b210 to i64*
  %v3_b210 = load i64, i64* %v2_b210, align 8
  %v0_b217 = load i64, i64* @rdi, align 8
  %v1_b217 = add i64 %v0_b217, 128
  %v2_b217 = inttoptr i64 %v1_b217 to i64*
  %v3_b217 = load i64, i64* %v2_b217, align 8
  %v8_b21e = icmp sgt i64 %v3_b217, %v3_b210
  br i1 %v8_b21e, label %dec_label_pc_b250, label %dec_label_pc_b220

dec_label_pc_b220:                                ; preds = %dec_label_pc_b210
  %v5_b220 = icmp slt i64 %v3_b217, %v3_b210
  br i1 %v5_b220, label %dec_label_pc_b240, label %dec_label_pc_b222

dec_label_pc_b222:                                ; preds = %dec_label_pc_b220
  %v1_b222 = add i64 %v0_b210, 136
  %v2_b222 = inttoptr i64 %v1_b222 to i64*
  %v3_b222 = load i64, i64* %v2_b222, align 8
  %v1_b229 = trunc i64 %v3_b222 to i32
  %v3_b229 = add i64 %v0_b217, 136
  %v4_b229 = inttoptr i64 %v3_b229 to i32*
  %v5_b229 = load i32, i32* %v4_b229, align 4
  %v6_b229 = sub i32 %v1_b229, %v5_b229
  %v16_b229 = icmp eq i32 %v6_b229, 0
  %v22_b229 = zext i32 %v6_b229 to i64
  %v1_b22f = icmp eq i1 %v16_b229, false
  br i1 %v1_b22f, label %dec_label_pc_b245, label %dec_label_pc_b231

dec_label_pc_b231:                                ; preds = %dec_label_pc_b222
  %v1_b237 = inttoptr i64 %v0_b217 to i8*
  %v3_b237 = inttoptr i64 %v0_b210 to i8*
  %v4_b237 = call i32 @strcmp(i8* %v1_b237, i8* %v3_b237)
  %v6_b237 = sext i32 %v4_b237 to i64
  ret i64 %v6_b237

dec_label_pc_b240:                                ; preds = %dec_label_pc_b220
  br label %dec_label_pc_b245

dec_label_pc_b245:                                ; preds = %dec_label_pc_b240, %dec_label_pc_b222
  %v0_b245 = phi i64 [ 1, %dec_label_pc_b240 ], [ %v22_b229, %dec_label_pc_b222 ]
  ret i64 %v0_b245

dec_label_pc_b250:                                ; preds = %dec_label_pc_b210
  ret i64 4294967295
}

define i64 @function_b260(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b260:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b260 = load i64, i64* @rdi, align 8
  %v1_b260 = add i64 %v0_b260, 168
  %v2_b260 = inttoptr i64 %v1_b260 to i32*
  %v3_b260 = load i32, i32* %v2_b260, align 4
  %v4_b260 = zext i32 %v3_b260 to i64
  %v0_b266 = load i64, i64* @rsi, align 8
  %v1_b266 = add i64 %v0_b266, 168
  %v2_b266 = inttoptr i64 %v1_b266 to i32*
  %v3_b266 = load i32, i32* %v2_b266, align 4
  %v4_b266 = zext i32 %v3_b266 to i64
  store i64 %v0_b266, i64* @r8, align 8
  %v11_b26f = icmp eq i32 %v3_b260, 3
  %v1_b272 = zext i1 %v11_b26f to i64
  %v2_b272 = load i64, i64* @rcx, align 8
  %v11_b275 = icmp eq i32 %v3_b260, 9
  %v1_b278 = zext i1 %v11_b275 to i64
  %v3_b278 = and i64 %v4_b260, 4294967040
  %v4_b272 = or i64 %v3_b278, %v1_b278
  %v4_b278 = or i64 %v4_b272, %v1_b272
  %v3_b272.masked = and i64 %v2_b272, 4294967040
  %v11_b27b = or i64 %v4_b278, %v3_b272.masked
  store i64 %v11_b27b, i64* @rcx, align 8
  %v11_b27d = icmp eq i32 %v3_b266, 3
  %v11_b283 = icmp eq i32 %v3_b266, 9
  %v1_b289 = zext i1 %v11_b283 to i8
  %v3_b289 = zext i1 %v11_b27d to i8
  %v4_b289 = or i8 %v3_b289, %v1_b289
  %v5_b289 = icmp eq i8 %v4_b289, 0
  %v10_b289 = zext i8 %v4_b289 to i64
  %v12_b289 = and i64 %v4_b266, 4294967040
  %v13_b289 = or i64 %v10_b289, %v12_b289
  store i64 %v13_b289, i64* @rdx, align 8
  %v1_b28b = icmp eq i1 %v5_b289, false
  %.pre = trunc i64 %v4_b278 to i8
  br i1 %v1_b28b, label %dec_label_pc_b291, label %dec_label_pc_b28d

dec_label_pc_b28d:                                ; preds = %dec_label_pc_b260
  %v5_b28d = icmp eq i8 %.pre, 0
  %v1_b28f = icmp eq i1 %v5_b28d, false
  br i1 %v1_b28f, label %dec_label_pc_b2e0, label %dec_label_pc_b291

dec_label_pc_b291:                                ; preds = %dec_label_pc_b260, %dec_label_pc_b28d
  %v5_b291 = icmp eq i8 %.pre, 0
  %v1_b293 = icmp eq i1 %v5_b291, false
  br i1 %v1_b293, label %dec_label_pc_b2a0, label %dec_label_pc_b295

dec_label_pc_b295:                                ; preds = %dec_label_pc_b291
  br i1 %v5_b289, label %dec_label_pc_b2a0, label %dec_label_pc_b29e

dec_label_pc_b29e:                                ; preds = %dec_label_pc_b2b2, %dec_label_pc_b295
  %v0_b29e = phi i64 [ %v22_b2b9, %dec_label_pc_b2b2 ], [ 1, %dec_label_pc_b295 ]
  ret i64 %v0_b29e

dec_label_pc_b2a0:                                ; preds = %dec_label_pc_b295, %dec_label_pc_b291
  %v1_b2a0 = add i64 %v0_b260, 128
  %v2_b2a0 = inttoptr i64 %v1_b2a0 to i64*
  %v3_b2a0 = load i64, i64* %v2_b2a0, align 8
  %v1_b2a7 = add i64 %v0_b266, 128
  %v2_b2a7 = inttoptr i64 %v1_b2a7 to i64*
  %v3_b2a7 = load i64, i64* %v2_b2a7, align 8
  %v8_b2ae = icmp sgt i64 %v3_b2a7, %v3_b2a0
  br i1 %v8_b2ae, label %dec_label_pc_b2e0, label %dec_label_pc_b2b0

dec_label_pc_b2b0:                                ; preds = %dec_label_pc_b2a0
  %v5_b2b0 = icmp slt i64 %v3_b2a7, %v3_b2a0
  br i1 %v5_b2b0, label %dec_label_pc_b2d0, label %dec_label_pc_b2b2

dec_label_pc_b2b2:                                ; preds = %dec_label_pc_b2b0
  %v1_b2b2 = add i64 %v0_b260, 136
  %v2_b2b2 = inttoptr i64 %v1_b2b2 to i64*
  %v3_b2b2 = load i64, i64* %v2_b2b2, align 8
  %v1_b2b9 = trunc i64 %v3_b2b2 to i32
  %v3_b2b9 = add i64 %v0_b266, 136
  %v4_b2b9 = inttoptr i64 %v3_b2b9 to i32*
  %v5_b2b9 = load i32, i32* %v4_b2b9, align 4
  %v6_b2b9 = sub i32 %v1_b2b9, %v5_b2b9
  %v16_b2b9 = icmp eq i32 %v6_b2b9, 0
  %v22_b2b9 = zext i32 %v6_b2b9 to i64
  %v1_b2c0 = icmp eq i1 %v16_b2b9, false
  br i1 %v1_b2c0, label %dec_label_pc_b29e, label %dec_label_pc_b2c2

dec_label_pc_b2c2:                                ; preds = %dec_label_pc_b2b2
  store i64 %v0_b260, i64* @rsi, align 8
  ret i64 %v22_b2b9

dec_label_pc_b2d0:                                ; preds = %dec_label_pc_b2b0
  ret i64 1

dec_label_pc_b2e0:                                ; preds = %dec_label_pc_b2a0, %dec_label_pc_b28d
  ret i64 4294967295
}

define i64 @function_b2f0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b2f0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b2f0 = load i64, i64* @rdi, align 8
  %v1_b2f0 = add i64 %v0_b2f0, 168
  %v2_b2f0 = inttoptr i64 %v1_b2f0 to i32*
  %v3_b2f0 = load i32, i32* %v2_b2f0, align 4
  %v4_b2f0 = zext i32 %v3_b2f0 to i64
  %v0_b2f6 = load i64, i64* @rsi, align 8
  %v1_b2f6 = add i64 %v0_b2f6, 168
  %v2_b2f6 = inttoptr i64 %v1_b2f6 to i32*
  %v3_b2f6 = load i32, i32* %v2_b2f6, align 4
  %v4_b2f6 = zext i32 %v3_b2f6 to i64
  store i64 %v0_b2f6, i64* @r8, align 8
  %v11_b2ff = icmp eq i32 %v3_b2f0, 3
  %v1_b302 = zext i1 %v11_b2ff to i64
  %v2_b302 = load i64, i64* @rcx, align 8
  %v11_b305 = icmp eq i32 %v3_b2f0, 9
  %v1_b308 = zext i1 %v11_b305 to i64
  %v3_b308 = and i64 %v4_b2f0, 4294967040
  %v4_b302 = or i64 %v3_b308, %v1_b308
  %v4_b308 = or i64 %v4_b302, %v1_b302
  %v3_b302.masked = and i64 %v2_b302, 4294967040
  %v11_b30b = or i64 %v4_b308, %v3_b302.masked
  store i64 %v11_b30b, i64* @rcx, align 8
  %v11_b30d = icmp eq i32 %v3_b2f6, 3
  %v11_b313 = icmp eq i32 %v3_b2f6, 9
  %v1_b319 = zext i1 %v11_b313 to i8
  %v3_b319 = zext i1 %v11_b30d to i8
  %v4_b319 = or i8 %v3_b319, %v1_b319
  %v5_b319 = icmp eq i8 %v4_b319, 0
  %v10_b319 = zext i8 %v4_b319 to i64
  %v12_b319 = and i64 %v4_b2f6, 4294967040
  %v13_b319 = or i64 %v10_b319, %v12_b319
  store i64 %v13_b319, i64* @rdx, align 8
  %v1_b31b = icmp eq i1 %v5_b319, false
  %.pre = trunc i64 %v4_b308 to i8
  br i1 %v1_b31b, label %dec_label_pc_b321, label %dec_label_pc_b31d

dec_label_pc_b31d:                                ; preds = %dec_label_pc_b2f0
  %v5_b31d = icmp eq i8 %.pre, 0
  %v1_b31f = icmp eq i1 %v5_b31d, false
  br i1 %v1_b31f, label %dec_label_pc_b360, label %dec_label_pc_b321

dec_label_pc_b321:                                ; preds = %dec_label_pc_b2f0, %dec_label_pc_b31d
  %v5_b321 = icmp eq i8 %.pre, 0
  %v1_b323 = icmp eq i1 %v5_b321, false
  br i1 %v1_b323, label %dec_label_pc_b330, label %dec_label_pc_b325

dec_label_pc_b325:                                ; preds = %dec_label_pc_b321
  br i1 %v5_b319, label %dec_label_pc_b330, label %dec_label_pc_b32e

dec_label_pc_b32e:                                ; preds = %dec_label_pc_b33c, %dec_label_pc_b325
  %v0_b32e = phi i64 [ %v22_b340, %dec_label_pc_b33c ], [ 1, %dec_label_pc_b325 ]
  ret i64 %v0_b32e

dec_label_pc_b330:                                ; preds = %dec_label_pc_b325, %dec_label_pc_b321
  %v1_b330 = add i64 %v0_b2f0, 96
  %v2_b330 = inttoptr i64 %v1_b330 to i64*
  %v3_b330 = load i64, i64* %v2_b330, align 8
  %v1_b334 = add i64 %v0_b2f6, 96
  %v2_b334 = inttoptr i64 %v1_b334 to i64*
  %v3_b334 = load i64, i64* %v2_b334, align 8
  %v8_b338 = icmp sgt i64 %v3_b334, %v3_b330
  br i1 %v8_b338, label %dec_label_pc_b360, label %dec_label_pc_b33a

dec_label_pc_b33a:                                ; preds = %dec_label_pc_b330
  %v5_b33a = icmp slt i64 %v3_b334, %v3_b330
  br i1 %v5_b33a, label %dec_label_pc_b358, label %dec_label_pc_b33c

dec_label_pc_b33c:                                ; preds = %dec_label_pc_b33a
  %v1_b33c = add i64 %v0_b2f0, 104
  %v2_b33c = inttoptr i64 %v1_b33c to i64*
  %v3_b33c = load i64, i64* %v2_b33c, align 8
  %v1_b340 = trunc i64 %v3_b33c to i32
  %v3_b340 = add i64 %v0_b2f6, 104
  %v4_b340 = inttoptr i64 %v3_b340 to i32*
  %v5_b340 = load i32, i32* %v4_b340, align 4
  %v6_b340 = sub i32 %v1_b340, %v5_b340
  %v16_b340 = icmp eq i32 %v6_b340, 0
  %v22_b340 = zext i32 %v6_b340 to i64
  %v1_b344 = icmp eq i1 %v16_b340, false
  br i1 %v1_b344, label %dec_label_pc_b32e, label %dec_label_pc_b346

dec_label_pc_b346:                                ; preds = %dec_label_pc_b33c
  store i64 %v0_b2f0, i64* @rsi, align 8
  ret i64 %v22_b340

dec_label_pc_b358:                                ; preds = %dec_label_pc_b33a
  ret i64 1

dec_label_pc_b360:                                ; preds = %dec_label_pc_b330, %dec_label_pc_b31d
  ret i64 4294967295
}

define i64 @function_b370(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b370:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b370 = load i64, i64* @rdi, align 8
  %v1_b370 = add i64 %v0_b370, 168
  %v2_b370 = inttoptr i64 %v1_b370 to i32*
  %v3_b370 = load i32, i32* %v2_b370, align 4
  %v4_b370 = zext i32 %v3_b370 to i64
  %v0_b376 = load i64, i64* @rsi, align 8
  %v1_b376 = add i64 %v0_b376, 168
  %v2_b376 = inttoptr i64 %v1_b376 to i32*
  %v3_b376 = load i32, i32* %v2_b376, align 4
  %v4_b376 = zext i32 %v3_b376 to i64
  %v11_b37c = icmp eq i32 %v3_b370, 3
  %v1_b37f = zext i1 %v11_b37c to i64
  %v2_b37f = load i64, i64* @rcx, align 8
  %v11_b382 = icmp eq i32 %v3_b370, 9
  %v1_b385 = zext i1 %v11_b382 to i64
  %v3_b385 = and i64 %v4_b370, 4294967040
  %v4_b37f = or i64 %v3_b385, %v1_b385
  %v4_b385 = or i64 %v4_b37f, %v1_b37f
  %v3_b37f.masked = and i64 %v2_b37f, 4294967040
  %v11_b388 = or i64 %v4_b385, %v3_b37f.masked
  store i64 %v11_b388, i64* @rcx, align 8
  %v11_b38a = icmp eq i32 %v3_b376, 3
  %v11_b390 = icmp eq i32 %v3_b376, 9
  %v1_b396 = zext i1 %v11_b390 to i8
  %v3_b396 = zext i1 %v11_b38a to i8
  %v4_b396 = or i8 %v3_b396, %v1_b396
  %v5_b396 = icmp eq i8 %v4_b396, 0
  %v10_b396 = zext i8 %v4_b396 to i64
  %v12_b396 = and i64 %v4_b376, 4294967040
  %v13_b396 = or i64 %v10_b396, %v12_b396
  store i64 %v13_b396, i64* @rdx, align 8
  %v1_b398 = icmp eq i1 %v5_b396, false
  %.pre = trunc i64 %v4_b385 to i8
  br i1 %v1_b398, label %dec_label_pc_b39e, label %dec_label_pc_b39a

dec_label_pc_b39a:                                ; preds = %dec_label_pc_b370
  %v5_b39a = icmp eq i8 %.pre, 0
  %v1_b39c = icmp eq i1 %v5_b39a, false
  br i1 %v1_b39c, label %dec_label_pc_b3e0, label %dec_label_pc_b39e

dec_label_pc_b39e:                                ; preds = %dec_label_pc_b370, %dec_label_pc_b39a
  %v5_b39e = icmp eq i8 %.pre, 0
  %v1_b3a0 = icmp eq i1 %v5_b39e, false
  br i1 %v1_b3a0, label %dec_label_pc_b3b0, label %dec_label_pc_b3a2

dec_label_pc_b3a2:                                ; preds = %dec_label_pc_b39e
  br i1 %v5_b396, label %dec_label_pc_b3b0, label %dec_label_pc_b3ab

dec_label_pc_b3ab:                                ; preds = %dec_label_pc_b3a2
  ret i64 1

dec_label_pc_b3b0:                                ; preds = %dec_label_pc_b3a2, %dec_label_pc_b39e
  %v1_b3b0 = add i64 %v0_b376, 112
  %v2_b3b0 = inttoptr i64 %v1_b3b0 to i64*
  %v3_b3b0 = load i64, i64* %v2_b3b0, align 8
  %v1_b3b4 = add i64 %v0_b370, 112
  %v2_b3b4 = inttoptr i64 %v1_b3b4 to i64*
  %v3_b3b4 = load i64, i64* %v2_b3b4, align 8
  %v8_b3b8 = icmp sgt i64 %v3_b3b4, %v3_b3b0
  br i1 %v8_b3b8, label %dec_label_pc_b3e0, label %dec_label_pc_b3ba

dec_label_pc_b3ba:                                ; preds = %dec_label_pc_b3b0
  %v5_b3ba = icmp slt i64 %v3_b3b4, %v3_b3b0
  br i1 %v5_b3ba, label %dec_label_pc_b3d0, label %dec_label_pc_b3bc

dec_label_pc_b3bc:                                ; preds = %dec_label_pc_b3ba
  %v1_b3bc = add i64 %v0_b376, 120
  %v2_b3bc = inttoptr i64 %v1_b3bc to i64*
  %v3_b3bc = load i64, i64* %v2_b3bc, align 8
  %v1_b3c0 = trunc i64 %v3_b3bc to i32
  %v3_b3c0 = add i64 %v0_b370, 120
  %v4_b3c0 = inttoptr i64 %v3_b3c0 to i32*
  %v5_b3c0 = load i32, i32* %v4_b3c0, align 4
  %v6_b3c0 = sub i32 %v1_b3c0, %v5_b3c0
  %v22_b3c0 = zext i32 %v6_b3c0 to i64
  ret i64 %v22_b3c0

dec_label_pc_b3d0:                                ; preds = %dec_label_pc_b3ba
  ret i64 1

dec_label_pc_b3e0:                                ; preds = %dec_label_pc_b3b0, %dec_label_pc_b39a
  ret i64 4294967295
}

define i64 @function_b3f0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b3f0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b3f0 = load i64, i64* @rdi, align 8
  %v1_b3f0 = add i64 %v0_b3f0, 168
  %v2_b3f0 = inttoptr i64 %v1_b3f0 to i32*
  %v3_b3f0 = load i32, i32* %v2_b3f0, align 4
  %v4_b3f0 = zext i32 %v3_b3f0 to i64
  %v0_b3f6 = load i64, i64* @rsi, align 8
  %v1_b3f6 = add i64 %v0_b3f6, 168
  %v2_b3f6 = inttoptr i64 %v1_b3f6 to i32*
  %v3_b3f6 = load i32, i32* %v2_b3f6, align 4
  %v4_b3f6 = zext i32 %v3_b3f6 to i64
  %v11_b3fc = icmp eq i32 %v3_b3f0, 3
  %v1_b3ff = zext i1 %v11_b3fc to i64
  %v2_b3ff = load i64, i64* @rcx, align 8
  %v11_b402 = icmp eq i32 %v3_b3f0, 9
  %v1_b405 = zext i1 %v11_b402 to i64
  %v3_b405 = and i64 %v4_b3f0, 4294967040
  %v4_b3ff = or i64 %v3_b405, %v1_b405
  %v4_b405 = or i64 %v4_b3ff, %v1_b3ff
  %v3_b3ff.masked = and i64 %v2_b3ff, 4294967040
  %v11_b408 = or i64 %v4_b405, %v3_b3ff.masked
  store i64 %v11_b408, i64* @rcx, align 8
  %v11_b40a = icmp eq i32 %v3_b3f6, 3
  %v11_b410 = icmp eq i32 %v3_b3f6, 9
  %v1_b416 = zext i1 %v11_b410 to i8
  %v3_b416 = zext i1 %v11_b40a to i8
  %v4_b416 = or i8 %v3_b416, %v1_b416
  %v5_b416 = icmp eq i8 %v4_b416, 0
  %v10_b416 = zext i8 %v4_b416 to i64
  %v12_b416 = and i64 %v4_b3f6, 4294967040
  %v13_b416 = or i64 %v10_b416, %v12_b416
  store i64 %v13_b416, i64* @rdx, align 8
  %v1_b418 = icmp eq i1 %v5_b416, false
  %.pre = trunc i64 %v4_b405 to i8
  br i1 %v1_b418, label %dec_label_pc_b41e, label %dec_label_pc_b41a

dec_label_pc_b41a:                                ; preds = %dec_label_pc_b3f0
  %v5_b41a = icmp eq i8 %.pre, 0
  %v1_b41c = icmp eq i1 %v5_b41a, false
  br i1 %v1_b41c, label %dec_label_pc_b470, label %dec_label_pc_b41e

dec_label_pc_b41e:                                ; preds = %dec_label_pc_b3f0, %dec_label_pc_b41a
  %v5_b41e = icmp eq i8 %.pre, 0
  %v1_b420 = icmp eq i1 %v5_b41e, false
  br i1 %v1_b420, label %dec_label_pc_b430, label %dec_label_pc_b422

dec_label_pc_b422:                                ; preds = %dec_label_pc_b41e
  br i1 %v5_b416, label %dec_label_pc_b430, label %dec_label_pc_b42b

dec_label_pc_b42b:                                ; preds = %dec_label_pc_b422
  ret i64 1

dec_label_pc_b430:                                ; preds = %dec_label_pc_b422, %dec_label_pc_b41e
  %v1_b430 = add i64 %v0_b3f6, 128
  %v2_b430 = inttoptr i64 %v1_b430 to i64*
  %v3_b430 = load i64, i64* %v2_b430, align 8
  %v1_b437 = add i64 %v0_b3f0, 128
  %v2_b437 = inttoptr i64 %v1_b437 to i64*
  %v3_b437 = load i64, i64* %v2_b437, align 8
  %v8_b43e = icmp sgt i64 %v3_b437, %v3_b430
  br i1 %v8_b43e, label %dec_label_pc_b470, label %dec_label_pc_b440

dec_label_pc_b440:                                ; preds = %dec_label_pc_b430
  %v5_b440 = icmp slt i64 %v3_b437, %v3_b430
  br i1 %v5_b440, label %dec_label_pc_b460, label %dec_label_pc_b442

dec_label_pc_b442:                                ; preds = %dec_label_pc_b440
  %v1_b442 = add i64 %v0_b3f6, 136
  %v2_b442 = inttoptr i64 %v1_b442 to i64*
  %v3_b442 = load i64, i64* %v2_b442, align 8
  %v1_b449 = trunc i64 %v3_b442 to i32
  %v3_b449 = add i64 %v0_b3f0, 136
  %v4_b449 = inttoptr i64 %v3_b449 to i32*
  %v5_b449 = load i32, i32* %v4_b449, align 4
  %v6_b449 = sub i32 %v1_b449, %v5_b449
  %v22_b449 = zext i32 %v6_b449 to i64
  ret i64 %v22_b449

dec_label_pc_b460:                                ; preds = %dec_label_pc_b440
  ret i64 1

dec_label_pc_b470:                                ; preds = %dec_label_pc_b430, %dec_label_pc_b41a
  ret i64 4294967295
}

define i64 @function_b480(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b480:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b480 = load i64, i64* @rdi, align 8
  %v1_b480 = add i64 %v0_b480, 168
  %v2_b480 = inttoptr i64 %v1_b480 to i32*
  %v3_b480 = load i32, i32* %v2_b480, align 4
  %v4_b480 = zext i32 %v3_b480 to i64
  %v0_b486 = load i64, i64* @rsi, align 8
  %v1_b486 = add i64 %v0_b486, 168
  %v2_b486 = inttoptr i64 %v1_b486 to i32*
  %v3_b486 = load i32, i32* %v2_b486, align 4
  %v4_b486 = zext i32 %v3_b486 to i64
  store i64 %v0_b486, i64* @r8, align 8
  %v11_b48f = icmp eq i32 %v3_b480, 3
  %v1_b492 = zext i1 %v11_b48f to i64
  %v2_b492 = load i64, i64* @rcx, align 8
  %v11_b495 = icmp eq i32 %v3_b480, 9
  %v1_b498 = zext i1 %v11_b495 to i64
  %v3_b498 = and i64 %v4_b480, 4294967040
  %v4_b492 = or i64 %v3_b498, %v1_b498
  %v4_b498 = or i64 %v4_b492, %v1_b492
  %v3_b492.masked = and i64 %v2_b492, 4294967040
  %v11_b49b = or i64 %v4_b498, %v3_b492.masked
  store i64 %v11_b49b, i64* @rcx, align 8
  %v11_b49d = icmp eq i32 %v3_b486, 3
  %v11_b4a3 = icmp eq i32 %v3_b486, 9
  %v1_b4a9 = zext i1 %v11_b4a3 to i8
  %v3_b4a9 = zext i1 %v11_b49d to i8
  %v4_b4a9 = or i8 %v3_b4a9, %v1_b4a9
  %v5_b4a9 = icmp eq i8 %v4_b4a9, 0
  %v10_b4a9 = zext i8 %v4_b4a9 to i64
  %v12_b4a9 = and i64 %v4_b486, 4294967040
  %v13_b4a9 = or i64 %v10_b4a9, %v12_b4a9
  store i64 %v13_b4a9, i64* @rdx, align 8
  %v1_b4ab = icmp eq i1 %v5_b4a9, false
  %.pre = trunc i64 %v4_b498 to i8
  br i1 %v1_b4ab, label %dec_label_pc_b4b1, label %dec_label_pc_b4ad

dec_label_pc_b4ad:                                ; preds = %dec_label_pc_b480
  %v5_b4ad = icmp eq i8 %.pre, 0
  %v1_b4af = icmp eq i1 %v5_b4ad, false
  br i1 %v1_b4af, label %dec_label_pc_b4f0, label %dec_label_pc_b4b1

dec_label_pc_b4b1:                                ; preds = %dec_label_pc_b480, %dec_label_pc_b4ad
  %v5_b4b1 = icmp eq i8 %.pre, 0
  %v1_b4b3 = icmp eq i1 %v5_b4b1, false
  br i1 %v1_b4b3, label %dec_label_pc_b4c0, label %dec_label_pc_b4b5

dec_label_pc_b4b5:                                ; preds = %dec_label_pc_b4b1
  br i1 %v5_b4a9, label %dec_label_pc_b4c0, label %dec_label_pc_b4be

dec_label_pc_b4be:                                ; preds = %dec_label_pc_b4cc, %dec_label_pc_b4b5
  %v0_b4be = phi i64 [ %v22_b4d0, %dec_label_pc_b4cc ], [ 1, %dec_label_pc_b4b5 ]
  ret i64 %v0_b4be

dec_label_pc_b4c0:                                ; preds = %dec_label_pc_b4b5, %dec_label_pc_b4b1
  %v1_b4c0 = add i64 %v0_b480, 112
  %v2_b4c0 = inttoptr i64 %v1_b4c0 to i64*
  %v3_b4c0 = load i64, i64* %v2_b4c0, align 8
  %v1_b4c4 = add i64 %v0_b486, 112
  %v2_b4c4 = inttoptr i64 %v1_b4c4 to i64*
  %v3_b4c4 = load i64, i64* %v2_b4c4, align 8
  %v8_b4c8 = icmp sgt i64 %v3_b4c4, %v3_b4c0
  br i1 %v8_b4c8, label %dec_label_pc_b4f0, label %dec_label_pc_b4ca

dec_label_pc_b4ca:                                ; preds = %dec_label_pc_b4c0
  %v5_b4ca = icmp slt i64 %v3_b4c4, %v3_b4c0
  br i1 %v5_b4ca, label %dec_label_pc_b4e8, label %dec_label_pc_b4cc

dec_label_pc_b4cc:                                ; preds = %dec_label_pc_b4ca
  %v1_b4cc = add i64 %v0_b480, 120
  %v2_b4cc = inttoptr i64 %v1_b4cc to i64*
  %v3_b4cc = load i64, i64* %v2_b4cc, align 8
  %v1_b4d0 = trunc i64 %v3_b4cc to i32
  %v3_b4d0 = add i64 %v0_b486, 120
  %v4_b4d0 = inttoptr i64 %v3_b4d0 to i32*
  %v5_b4d0 = load i32, i32* %v4_b4d0, align 4
  %v6_b4d0 = sub i32 %v1_b4d0, %v5_b4d0
  %v16_b4d0 = icmp eq i32 %v6_b4d0, 0
  %v22_b4d0 = zext i32 %v6_b4d0 to i64
  %v1_b4d4 = icmp eq i1 %v16_b4d0, false
  br i1 %v1_b4d4, label %dec_label_pc_b4be, label %dec_label_pc_b4d6

dec_label_pc_b4d6:                                ; preds = %dec_label_pc_b4cc
  store i64 %v0_b480, i64* @rsi, align 8
  ret i64 %v22_b4d0

dec_label_pc_b4e8:                                ; preds = %dec_label_pc_b4ca
  ret i64 1

dec_label_pc_b4f0:                                ; preds = %dec_label_pc_b4c0, %dec_label_pc_b4ad
  ret i64 4294967295
}

define i64 @function_b500(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b500:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b500 = load i64, i64* @rdi, align 8
  %v1_b500 = add i64 %v0_b500, 168
  %v2_b500 = inttoptr i64 %v1_b500 to i32*
  %v3_b500 = load i32, i32* %v2_b500, align 4
  %v4_b500 = zext i32 %v3_b500 to i64
  %v0_b506 = load i64, i64* @rsi, align 8
  %v1_b506 = add i64 %v0_b506, 168
  %v2_b506 = inttoptr i64 %v1_b506 to i32*
  %v3_b506 = load i32, i32* %v2_b506, align 4
  %v4_b506 = zext i32 %v3_b506 to i64
  %v11_b50c = icmp eq i32 %v3_b500, 3
  %v1_b50f = zext i1 %v11_b50c to i64
  %v2_b50f = load i64, i64* @rcx, align 8
  %v11_b512 = icmp eq i32 %v3_b500, 9
  %v1_b515 = zext i1 %v11_b512 to i64
  %v3_b515 = and i64 %v4_b500, 4294967040
  %v4_b50f = or i64 %v3_b515, %v1_b515
  %v4_b515 = or i64 %v4_b50f, %v1_b50f
  %v3_b50f.masked = and i64 %v2_b50f, 4294967040
  %v11_b518 = or i64 %v4_b515, %v3_b50f.masked
  store i64 %v11_b518, i64* @rcx, align 8
  %v11_b51a = icmp eq i32 %v3_b506, 3
  %v11_b520 = icmp eq i32 %v3_b506, 9
  %v1_b526 = zext i1 %v11_b520 to i8
  %v3_b526 = zext i1 %v11_b51a to i8
  %v4_b526 = or i8 %v3_b526, %v1_b526
  %v5_b526 = icmp eq i8 %v4_b526, 0
  %v10_b526 = zext i8 %v4_b526 to i64
  %v12_b526 = and i64 %v4_b506, 4294967040
  %v13_b526 = or i64 %v10_b526, %v12_b526
  store i64 %v13_b526, i64* @rdx, align 8
  %v1_b528 = icmp eq i1 %v5_b526, false
  %.pre = trunc i64 %v4_b515 to i8
  br i1 %v1_b528, label %dec_label_pc_b52e, label %dec_label_pc_b52a

dec_label_pc_b52a:                                ; preds = %dec_label_pc_b500
  %v5_b52a = icmp eq i8 %.pre, 0
  %v1_b52c = icmp eq i1 %v5_b52a, false
  br i1 %v1_b52c, label %dec_label_pc_b570, label %dec_label_pc_b52e

dec_label_pc_b52e:                                ; preds = %dec_label_pc_b500, %dec_label_pc_b52a
  %v5_b52e = icmp eq i8 %.pre, 0
  %v1_b530 = icmp eq i1 %v5_b52e, false
  br i1 %v1_b530, label %dec_label_pc_b540, label %dec_label_pc_b532

dec_label_pc_b532:                                ; preds = %dec_label_pc_b52e
  br i1 %v5_b526, label %dec_label_pc_b540, label %dec_label_pc_b53b

dec_label_pc_b53b:                                ; preds = %dec_label_pc_b532
  ret i64 1

dec_label_pc_b540:                                ; preds = %dec_label_pc_b532, %dec_label_pc_b52e
  %v1_b540 = add i64 %v0_b506, 96
  %v2_b540 = inttoptr i64 %v1_b540 to i64*
  %v3_b540 = load i64, i64* %v2_b540, align 8
  %v1_b544 = add i64 %v0_b500, 96
  %v2_b544 = inttoptr i64 %v1_b544 to i64*
  %v3_b544 = load i64, i64* %v2_b544, align 8
  %v8_b548 = icmp sgt i64 %v3_b544, %v3_b540
  br i1 %v8_b548, label %dec_label_pc_b570, label %dec_label_pc_b54a

dec_label_pc_b54a:                                ; preds = %dec_label_pc_b540
  %v5_b54a = icmp slt i64 %v3_b544, %v3_b540
  br i1 %v5_b54a, label %dec_label_pc_b560, label %dec_label_pc_b54c

dec_label_pc_b54c:                                ; preds = %dec_label_pc_b54a
  %v1_b54c = add i64 %v0_b506, 104
  %v2_b54c = inttoptr i64 %v1_b54c to i64*
  %v3_b54c = load i64, i64* %v2_b54c, align 8
  %v1_b550 = trunc i64 %v3_b54c to i32
  %v3_b550 = add i64 %v0_b500, 104
  %v4_b550 = inttoptr i64 %v3_b550 to i32*
  %v5_b550 = load i32, i32* %v4_b550, align 4
  %v6_b550 = sub i32 %v1_b550, %v5_b550
  %v22_b550 = zext i32 %v6_b550 to i64
  ret i64 %v22_b550

dec_label_pc_b560:                                ; preds = %dec_label_pc_b54a
  ret i64 1

dec_label_pc_b570:                                ; preds = %dec_label_pc_b540, %dec_label_pc_b52a
  ret i64 4294967295
}

define i64 @function_b580(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b580:
  %r12.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_b580 = load i64, i64* %r12.global-to-local, align 8
  %v0_b583 = load i64, i64* @rsi, align 8
  %v0_b586 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_b586, i64* %stack_var_-24, align 8
  %v0_b587 = load i64, i64* @rdi, align 8
  store i64 %v0_b587, i64* %r12.global-to-local, align 8
  store i64 %v0_b583, i64* @rdi, align 8
  store i64 46, i64* @rsi, align 8
  %v1_b593 = inttoptr i64 %v0_b583 to i8*
  %v5_b593 = call i8* @strrchr(i8* %v1_b593, i32 46)
  %v7_b593 = ptrtoint i8* %v5_b593 to i64
  store i64 %v0_b583, i64* @rdi, align 8
  store i64 46, i64* @rsi, align 8
  store i64 %v7_b593, i64* %rbx.global-to-local, align 8
  %v5_b5a4 = call i8* @strrchr(i8* %v1_b593, i32 46)
  %v6_b5a4 = ptrtoint i8* %v5_b5a4 to i64
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @rdx, align 8
  %v1_b5b0 = icmp eq i8* %v5_b5a4, null
  %v3_b5b3 = select i1 %v1_b5b0, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v6_b5a4
  %v1_b5b7 = icmp eq i8* %v5_b593, null
  %v3_b5ba = select i1 %v1_b5b7, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v7_b593
  store i64 %v3_b5b3, i64* @rsi, align 8
  store i64 %v3_b5ba, i64* @rdi, align 8
  %v4_b5c9 = trunc i64 %v3_b5b3 to i32
  %v5_b5c9 = icmp eq i32 %v4_b5c9, 0
  %v1_b5cb = icmp eq i1 %v5_b5c9, false
  %v2_b5e0 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_b5e0, i64* %rbx.global-to-local, align 8
  br i1 %v1_b5cb, label %dec_label_pc_b5e0, label %dec_label_pc_b5cd

dec_label_pc_b5cd:                                ; preds = %dec_label_pc_b580
  store i64 %v3_b5ba, i64* @rsi, align 8
  store i64 %v3_b5ba, i64* @rdi, align 8
  store i64 %v0_b580, i64* %r12.global-to-local, align 8
  ret i64 %v3_b5b3

dec_label_pc_b5e0:                                ; preds = %dec_label_pc_b580
  store i64 %v0_b580, i64* %r12.global-to-local, align 8
  ret i64 %v3_b5b3
}

define i64 @function_b5f0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b5f0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_b5f0 = load i64, i64* %r12.global-to-local, align 8
  %v0_b5f2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_b5f3 = load i64, i64* @rdi, align 8
  store i64 %v0_b5f3, i64* %rbp.global-to-local, align 8
  %v0_b5f6 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_b5f6, i64* %stack_var_-24, align 8
  %v0_b5fa = load i64, i64* @rsi, align 8
  store i64 %v0_b5fa, i64* %r12.global-to-local, align 8
  store i64 46, i64* @rsi, align 8
  %v1_b602 = inttoptr i64 %v0_b5f3 to i8*
  %v5_b602 = call i8* @strrchr(i8* %v1_b602, i32 46)
  %v7_b602 = ptrtoint i8* %v5_b602 to i64
  store i64 46, i64* @rdi, align 8
  store i64 46, i64* @rsi, align 8
  store i64 %v7_b602, i64* %rbx.global-to-local, align 8
  %v6_b613 = call i8* @strrchr(i8* inttoptr (i64 46 to i8*), i32 46)
  %v7_b613 = ptrtoint i8* %v6_b613 to i64
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @rdx, align 8
  %v1_b61f = icmp eq i8* %v6_b613, null
  %v3_b622 = select i1 %v1_b61f, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v7_b613
  %v1_b626 = icmp eq i8* %v5_b602, null
  %v3_b629 = select i1 %v1_b626, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v7_b602
  store i64 %v3_b622, i64* @rsi, align 8
  store i64 %v3_b629, i64* @rdi, align 8
  %v2_b650 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_b650, i64* %rbx.global-to-local, align 8
  store i64 %v0_b5f2, i64* %rbp.global-to-local, align 8
  store i64 %v0_b5f0, i64* %r12.global-to-local, align 8
  ret i64 %v3_b622
}

define i64 @function_b660(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b660:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b660 = load i64, i64* @rdi, align 8
  %v1_b660 = add i64 %v0_b660, 168
  %v2_b660 = inttoptr i64 %v1_b660 to i32*
  %v3_b660 = load i32, i32* %v2_b660, align 4
  %v4_b660 = zext i32 %v3_b660 to i64
  %v0_b666 = load i64, i64* @rsi, align 8
  %v1_b666 = add i64 %v0_b666, 168
  %v2_b666 = inttoptr i64 %v1_b666 to i32*
  %v3_b666 = load i32, i32* %v2_b666, align 4
  %v4_b666 = zext i32 %v3_b666 to i64
  %v11_b66c = icmp eq i32 %v3_b660, 3
  %v1_b66f = zext i1 %v11_b66c to i64
  %v2_b66f = load i64, i64* @rcx, align 8
  %v11_b672 = icmp eq i32 %v3_b660, 9
  %v1_b675 = zext i1 %v11_b672 to i64
  %v3_b675 = and i64 %v4_b660, 4294967040
  %v4_b66f = or i64 %v3_b675, %v1_b675
  %v4_b675 = or i64 %v4_b66f, %v1_b66f
  %v3_b66f.masked = and i64 %v2_b66f, 4294967040
  %v11_b678 = or i64 %v4_b675, %v3_b66f.masked
  store i64 %v11_b678, i64* @rcx, align 8
  %v11_b67a = icmp eq i32 %v3_b666, 3
  %v11_b680 = icmp eq i32 %v3_b666, 9
  %v1_b686 = zext i1 %v11_b680 to i8
  %v3_b686 = zext i1 %v11_b67a to i8
  %v4_b686 = or i8 %v3_b686, %v1_b686
  %v5_b686 = icmp eq i8 %v4_b686, 0
  %v10_b686 = zext i8 %v4_b686 to i64
  %v12_b686 = and i64 %v4_b666, 4294967040
  %v13_b686 = or i64 %v10_b686, %v12_b686
  store i64 %v13_b686, i64* @rdx, align 8
  %v1_b688 = icmp eq i1 %v5_b686, false
  %.pre = trunc i64 %v4_b675 to i8
  br i1 %v1_b688, label %dec_label_pc_b68e, label %dec_label_pc_b68a

dec_label_pc_b68a:                                ; preds = %dec_label_pc_b660
  %v5_b68a = icmp eq i8 %.pre, 0
  %v1_b68c = icmp eq i1 %v5_b68a, false
  br i1 %v1_b68c, label %dec_label_pc_b6e0, label %dec_label_pc_b68e

dec_label_pc_b68e:                                ; preds = %dec_label_pc_b660, %dec_label_pc_b68a
  %v5_b68e = icmp eq i8 %.pre, 0
  %v1_b690 = icmp eq i1 %v5_b68e, false
  br i1 %v1_b690, label %dec_label_pc_b6a0, label %dec_label_pc_b692

dec_label_pc_b692:                                ; preds = %dec_label_pc_b68e
  br i1 %v5_b686, label %dec_label_pc_b6a0, label %dec_label_pc_b69b

dec_label_pc_b69b:                                ; preds = %dec_label_pc_b6b2, %dec_label_pc_b692
  %v0_b69b = phi i64 [ %v22_b6b9, %dec_label_pc_b6b2 ], [ 1, %dec_label_pc_b692 ]
  ret i64 %v0_b69b

dec_label_pc_b6a0:                                ; preds = %dec_label_pc_b692, %dec_label_pc_b68e
  %v1_b6a0 = add i64 %v0_b666, 128
  %v2_b6a0 = inttoptr i64 %v1_b6a0 to i64*
  %v3_b6a0 = load i64, i64* %v2_b6a0, align 8
  %v1_b6a7 = add i64 %v0_b660, 128
  %v2_b6a7 = inttoptr i64 %v1_b6a7 to i64*
  %v3_b6a7 = load i64, i64* %v2_b6a7, align 8
  %v8_b6ae = icmp sgt i64 %v3_b6a7, %v3_b6a0
  br i1 %v8_b6ae, label %dec_label_pc_b6e0, label %dec_label_pc_b6b0

dec_label_pc_b6b0:                                ; preds = %dec_label_pc_b6a0
  %v5_b6b0 = icmp slt i64 %v3_b6a7, %v3_b6a0
  br i1 %v5_b6b0, label %dec_label_pc_b6d0, label %dec_label_pc_b6b2

dec_label_pc_b6b2:                                ; preds = %dec_label_pc_b6b0
  %v1_b6b2 = add i64 %v0_b666, 136
  %v2_b6b2 = inttoptr i64 %v1_b6b2 to i64*
  %v3_b6b2 = load i64, i64* %v2_b6b2, align 8
  %v1_b6b9 = trunc i64 %v3_b6b2 to i32
  %v3_b6b9 = add i64 %v0_b660, 136
  %v4_b6b9 = inttoptr i64 %v3_b6b9 to i32*
  %v5_b6b9 = load i32, i32* %v4_b6b9, align 4
  %v6_b6b9 = sub i32 %v1_b6b9, %v5_b6b9
  %v16_b6b9 = icmp eq i32 %v6_b6b9, 0
  %v22_b6b9 = zext i32 %v6_b6b9 to i64
  %v1_b6bf = icmp eq i1 %v16_b6b9, false
  br i1 %v1_b6bf, label %dec_label_pc_b69b, label %dec_label_pc_b6c1

dec_label_pc_b6c1:                                ; preds = %dec_label_pc_b6b2
  %v1_b6c7 = inttoptr i64 %v0_b660 to i8*
  %v3_b6c7 = inttoptr i64 %v0_b666 to i8*
  %v4_b6c7 = call i32 @strcmp(i8* %v1_b6c7, i8* %v3_b6c7)
  %v6_b6c7 = sext i32 %v4_b6c7 to i64
  ret i64 %v6_b6c7

dec_label_pc_b6d0:                                ; preds = %dec_label_pc_b6b0
  ret i64 1

dec_label_pc_b6e0:                                ; preds = %dec_label_pc_b6a0, %dec_label_pc_b68a
  ret i64 4294967295
}

define i64 @function_b6f0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b6f0:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b6f0 = load i64, i64* @rdi, align 8
  %v1_b6f0 = add i64 %v0_b6f0, 168
  %v2_b6f0 = inttoptr i64 %v1_b6f0 to i32*
  %v3_b6f0 = load i32, i32* %v2_b6f0, align 4
  %v4_b6f0 = zext i32 %v3_b6f0 to i64
  %v0_b6f6 = load i64, i64* @rsi, align 8
  %v1_b6f6 = add i64 %v0_b6f6, 168
  %v2_b6f6 = inttoptr i64 %v1_b6f6 to i32*
  %v3_b6f6 = load i32, i32* %v2_b6f6, align 4
  %v4_b6f6 = zext i32 %v3_b6f6 to i64
  %v11_b6fc = icmp eq i32 %v3_b6f0, 3
  %v1_b6ff = zext i1 %v11_b6fc to i64
  %v2_b6ff = load i64, i64* @rcx, align 8
  %v11_b702 = icmp eq i32 %v3_b6f0, 9
  %v1_b705 = zext i1 %v11_b702 to i64
  %v3_b705 = and i64 %v4_b6f0, 4294967040
  %v4_b6ff = or i64 %v3_b705, %v1_b705
  %v4_b705 = or i64 %v4_b6ff, %v1_b6ff
  %v3_b6ff.masked = and i64 %v2_b6ff, 4294967040
  %v11_b708 = or i64 %v4_b705, %v3_b6ff.masked
  store i64 %v11_b708, i64* @rcx, align 8
  %v11_b70a = icmp eq i32 %v3_b6f6, 3
  %v11_b710 = icmp eq i32 %v3_b6f6, 9
  %v1_b716 = zext i1 %v11_b710 to i8
  %v3_b716 = zext i1 %v11_b70a to i8
  %v4_b716 = or i8 %v3_b716, %v1_b716
  %v5_b716 = icmp eq i8 %v4_b716, 0
  %v10_b716 = zext i8 %v4_b716 to i64
  %v12_b716 = and i64 %v4_b6f6, 4294967040
  %v13_b716 = or i64 %v10_b716, %v12_b716
  store i64 %v13_b716, i64* @rdx, align 8
  %v1_b718 = icmp eq i1 %v5_b716, false
  %.pre = trunc i64 %v4_b705 to i8
  br i1 %v1_b718, label %dec_label_pc_b71e, label %dec_label_pc_b71a

dec_label_pc_b71a:                                ; preds = %dec_label_pc_b6f0
  %v5_b71a = icmp eq i8 %.pre, 0
  %v1_b71c = icmp eq i1 %v5_b71a, false
  br i1 %v1_b71c, label %dec_label_pc_b760, label %dec_label_pc_b71e

dec_label_pc_b71e:                                ; preds = %dec_label_pc_b6f0, %dec_label_pc_b71a
  %v5_b71e = icmp eq i8 %.pre, 0
  %v1_b720 = icmp eq i1 %v5_b71e, false
  br i1 %v1_b720, label %dec_label_pc_b730, label %dec_label_pc_b722

dec_label_pc_b722:                                ; preds = %dec_label_pc_b71e
  br i1 %v5_b716, label %dec_label_pc_b730, label %dec_label_pc_b72b

dec_label_pc_b72b:                                ; preds = %dec_label_pc_b73c, %dec_label_pc_b722
  %v0_b72b = phi i64 [ %v22_b740, %dec_label_pc_b73c ], [ 1, %dec_label_pc_b722 ]
  ret i64 %v0_b72b

dec_label_pc_b730:                                ; preds = %dec_label_pc_b722, %dec_label_pc_b71e
  %v1_b730 = add i64 %v0_b6f6, 96
  %v2_b730 = inttoptr i64 %v1_b730 to i64*
  %v3_b730 = load i64, i64* %v2_b730, align 8
  %v1_b734 = add i64 %v0_b6f0, 96
  %v2_b734 = inttoptr i64 %v1_b734 to i64*
  %v3_b734 = load i64, i64* %v2_b734, align 8
  %v8_b738 = icmp sgt i64 %v3_b734, %v3_b730
  br i1 %v8_b738, label %dec_label_pc_b760, label %dec_label_pc_b73a

dec_label_pc_b73a:                                ; preds = %dec_label_pc_b730
  %v5_b73a = icmp slt i64 %v3_b734, %v3_b730
  br i1 %v5_b73a, label %dec_label_pc_b750, label %dec_label_pc_b73c

dec_label_pc_b73c:                                ; preds = %dec_label_pc_b73a
  %v1_b73c = add i64 %v0_b6f6, 104
  %v2_b73c = inttoptr i64 %v1_b73c to i64*
  %v3_b73c = load i64, i64* %v2_b73c, align 8
  %v1_b740 = trunc i64 %v3_b73c to i32
  %v3_b740 = add i64 %v0_b6f0, 104
  %v4_b740 = inttoptr i64 %v3_b740 to i32*
  %v5_b740 = load i32, i32* %v4_b740, align 4
  %v6_b740 = sub i32 %v1_b740, %v5_b740
  %v16_b740 = icmp eq i32 %v6_b740, 0
  %v22_b740 = zext i32 %v6_b740 to i64
  %v1_b743 = icmp eq i1 %v16_b740, false
  br i1 %v1_b743, label %dec_label_pc_b72b, label %dec_label_pc_b745

dec_label_pc_b745:                                ; preds = %dec_label_pc_b73c
  %v1_b74b = inttoptr i64 %v0_b6f0 to i8*
  %v3_b74b = inttoptr i64 %v0_b6f6 to i8*
  %v4_b74b = call i32 @strcmp(i8* %v1_b74b, i8* %v3_b74b)
  %v6_b74b = sext i32 %v4_b74b to i64
  ret i64 %v6_b74b

dec_label_pc_b750:                                ; preds = %dec_label_pc_b73a
  ret i64 1

dec_label_pc_b760:                                ; preds = %dec_label_pc_b730, %dec_label_pc_b71a
  ret i64 4294967295
}

define i64 @function_b770(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b770:
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_b770 = load i64, i64* @rdi, align 8
  %v1_b770 = add i64 %v0_b770, 168
  %v2_b770 = inttoptr i64 %v1_b770 to i32*
  %v3_b770 = load i32, i32* %v2_b770, align 4
  %v4_b770 = zext i32 %v3_b770 to i64
  %v0_b776 = load i64, i64* @rsi, align 8
  %v1_b776 = add i64 %v0_b776, 168
  %v2_b776 = inttoptr i64 %v1_b776 to i32*
  %v3_b776 = load i32, i32* %v2_b776, align 4
  %v4_b776 = zext i32 %v3_b776 to i64
  store i64 %v0_b776, i64* @r8, align 8
  %v11_b77f = icmp eq i32 %v3_b770, 3
  %v1_b782 = zext i1 %v11_b77f to i64
  %v2_b782 = load i64, i64* @rcx, align 8
  %v11_b785 = icmp eq i32 %v3_b770, 9
  %v1_b788 = zext i1 %v11_b785 to i64
  %v3_b788 = and i64 %v4_b770, 4294967040
  %v4_b782 = or i64 %v3_b788, %v1_b788
  %v4_b788 = or i64 %v4_b782, %v1_b782
  %v3_b782.masked = and i64 %v2_b782, 4294967040
  %v11_b78b = or i64 %v4_b788, %v3_b782.masked
  store i64 %v11_b78b, i64* @rcx, align 8
  %v11_b78d = icmp eq i32 %v3_b776, 3
  %v11_b793 = icmp eq i32 %v3_b776, 9
  %v1_b799 = zext i1 %v11_b793 to i8
  %v3_b799 = zext i1 %v11_b78d to i8
  %v4_b799 = or i8 %v3_b799, %v1_b799
  %v5_b799 = icmp eq i8 %v4_b799, 0
  %v10_b799 = zext i8 %v4_b799 to i64
  %v12_b799 = and i64 %v4_b776, 4294967040
  %v13_b799 = or i64 %v10_b799, %v12_b799
  store i64 %v13_b799, i64* @rdx, align 8
  %v1_b79b = icmp eq i1 %v5_b799, false
  %.pre = trunc i64 %v4_b788 to i8
  br i1 %v1_b79b, label %dec_label_pc_b7a1, label %dec_label_pc_b79d

dec_label_pc_b79d:                                ; preds = %dec_label_pc_b770
  %v5_b79d = icmp eq i8 %.pre, 0
  %v1_b79f = icmp eq i1 %v5_b79d, false
  br i1 %v1_b79f, label %dec_label_pc_b7e0, label %dec_label_pc_b7a1

dec_label_pc_b7a1:                                ; preds = %dec_label_pc_b770, %dec_label_pc_b79d
  %v5_b7a1 = icmp eq i8 %.pre, 0
  %v1_b7a3 = icmp eq i1 %v5_b7a1, false
  br i1 %v1_b7a3, label %dec_label_pc_b7b0, label %dec_label_pc_b7a5

dec_label_pc_b7a5:                                ; preds = %dec_label_pc_b7a1
  br i1 %v5_b799, label %dec_label_pc_b7b0, label %dec_label_pc_b7ae

dec_label_pc_b7ae:                                ; preds = %dec_label_pc_b7bc, %dec_label_pc_b7a5
  %v0_b7ae = phi i64 [ %v22_b7c0, %dec_label_pc_b7bc ], [ 1, %dec_label_pc_b7a5 ]
  ret i64 %v0_b7ae

dec_label_pc_b7b0:                                ; preds = %dec_label_pc_b7a5, %dec_label_pc_b7a1
  %v1_b7b0 = add i64 %v0_b770, 112
  %v2_b7b0 = inttoptr i64 %v1_b7b0 to i64*
  %v3_b7b0 = load i64, i64* %v2_b7b0, align 8
  %v1_b7b4 = add i64 %v0_b776, 112
  %v2_b7b4 = inttoptr i64 %v1_b7b4 to i64*
  %v3_b7b4 = load i64, i64* %v2_b7b4, align 8
  %v8_b7b8 = icmp sgt i64 %v3_b7b4, %v3_b7b0
  br i1 %v8_b7b8, label %dec_label_pc_b7e0, label %dec_label_pc_b7ba

dec_label_pc_b7ba:                                ; preds = %dec_label_pc_b7b0
  %v5_b7ba = icmp slt i64 %v3_b7b4, %v3_b7b0
  br i1 %v5_b7ba, label %dec_label_pc_b7d8, label %dec_label_pc_b7bc

dec_label_pc_b7bc:                                ; preds = %dec_label_pc_b7ba
  %v1_b7bc = add i64 %v0_b770, 120
  %v2_b7bc = inttoptr i64 %v1_b7bc to i64*
  %v3_b7bc = load i64, i64* %v2_b7bc, align 8
  %v1_b7c0 = trunc i64 %v3_b7bc to i32
  %v3_b7c0 = add i64 %v0_b776, 120
  %v4_b7c0 = inttoptr i64 %v3_b7c0 to i32*
  %v5_b7c0 = load i32, i32* %v4_b7c0, align 4
  %v6_b7c0 = sub i32 %v1_b7c0, %v5_b7c0
  %v16_b7c0 = icmp eq i32 %v6_b7c0, 0
  %v22_b7c0 = zext i32 %v6_b7c0 to i64
  %v1_b7c4 = icmp eq i1 %v16_b7c0, false
  br i1 %v1_b7c4, label %dec_label_pc_b7ae, label %dec_label_pc_b7c6

dec_label_pc_b7c6:                                ; preds = %dec_label_pc_b7bc
  store i64 %v0_b770, i64* @rsi, align 8
  %v1_b7cc = inttoptr i64 %v0_b770 to i8*
  %v4_b7cc = call i32 @strcmp(i8* %v1_b7cc, i8* %v1_b7cc)
  %v6_b7cc = sext i32 %v4_b7cc to i64
  ret i64 %v6_b7cc

dec_label_pc_b7d8:                                ; preds = %dec_label_pc_b7ba
  ret i64 1

dec_label_pc_b7e0:                                ; preds = %dec_label_pc_b7b0, %dec_label_pc_b79d
  ret i64 4294967295
}

define i64 @function_b7f0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b7f0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_b7f0 = load i64, i64* %r12.global-to-local, align 8
  %v0_b7f2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_b7f3 = load i64, i64* @rdi, align 8
  store i64 %v0_b7f3, i64* %r12.global-to-local, align 8
  %v0_b7f6 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_b7f6, i64* %stack_var_-24, align 8
  %v2_b7f7 = load i64, i64* @rsi, align 8
  store i64 %v2_b7f7, i64* %rbp.global-to-local, align 8
  store i64 46, i64* @rsi, align 8
  store i64 %v2_b7f7, i64* @rdi, align 8
  %v1_b802 = inttoptr i64 %v2_b7f7 to i8*
  %v5_b802 = call i8* @strrchr(i8* %v1_b802, i32 46)
  %v7_b802 = ptrtoint i8* %v5_b802 to i64
  store i64 %v2_b7f7, i64* %r12.global-to-local, align 8
  store i64 46, i64* @rsi, align 8
  store i64 %v7_b802, i64* %rbx.global-to-local, align 8
  store i64 %v2_b7f7, i64* @rdi, align 8
  %v5_b816 = call i8* @strrchr(i8* %v1_b802, i32 46)
  %v1_b81b = icmp eq i8* %v5_b816, null
  br i1 %v1_b81b, label %dec_label_pc_b850, label %dec_label_pc_b820

dec_label_pc_b820:                                ; preds = %dec_label_pc_b7f0
  %v6_b816 = ptrtoint i8* %v5_b816 to i64
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @rdx, align 8
  %v1_b827 = icmp eq i8* %v5_b802, null
  store i64 %v6_b816, i64* @rsi, align 8
  %v3_b82d = select i1 %v1_b827, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v7_b802
  store i64 %v3_b82d, i64* %rbx.global-to-local, align 8
  %v1_b831 = inttoptr i64 %v3_b82d to i8*
  store i64 %v3_b82d, i64* @rdi, align 8
  %v6_b834 = call i32 @strcmp(i8* %v1_b831, i8* nonnull %v5_b816)
  %v5_b839 = icmp eq i32 %v6_b834, 0
  %v1_b83b = icmp eq i1 %v5_b839, false
  br i1 %v1_b83b, label %dec_label_pc_b86b, label %dec_label_pc_b83d

dec_label_pc_b83d:                                ; preds = %dec_label_pc_b85c, %dec_label_pc_b850, %dec_label_pc_b820
  %v2_b83d = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_b83d, i64* %rbx.global-to-local, align 8
  %v0_b83e = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_b83e, i64* @rsi, align 8
  %v0_b841 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_b841, i64* @rdi, align 8
  store i64 %v0_b7f2, i64* %rbp.global-to-local, align 8
  store i64 %v0_b7f0, i64* %r12.global-to-local, align 8
  %v1_b847 = inttoptr i64 %v0_b841 to i8*
  %v3_b847 = inttoptr i64 %v0_b83e to i8*
  %v4_b847 = call i32 @strcmp(i8* %v1_b847, i8* %v3_b847)
  %v6_b847 = sext i32 %v4_b847 to i64
  ret i64 %v6_b847

dec_label_pc_b850:                                ; preds = %dec_label_pc_b7f0
  %v1_b850 = icmp eq i8* %v5_b802, null
  br i1 %v1_b850, label %dec_label_pc_b83d, label %dec_label_pc_b85c

dec_label_pc_b85c:                                ; preds = %dec_label_pc_b850
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @rsi, align 8
  store i64 %v7_b802, i64* @rdi, align 8
  %v6_b862 = call i32 @strcmp(i8* nonnull %v5_b802, i8* bitcast (i8** @global_var_17c4a.6 to i8*))
  %v5_b867 = icmp eq i32 %v6_b862, 0
  br i1 %v5_b867, label %dec_label_pc_b83d, label %dec_label_pc_b86b

dec_label_pc_b86b:                                ; preds = %dec_label_pc_b85c, %dec_label_pc_b820
  %v0_b86f.in = phi i32 [ %v6_b862, %dec_label_pc_b85c ], [ %v6_b834, %dec_label_pc_b820 ]
  %v0_b86f = sext i32 %v0_b86f.in to i64
  %v2_b86b = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_b86b, i64* %rbx.global-to-local, align 8
  store i64 %v0_b7f2, i64* %rbp.global-to-local, align 8
  store i64 %v0_b7f0, i64* %r12.global-to-local, align 8
  ret i64 %v0_b86f
}

define i64 @function_b870(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_b870:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_b870 = load i64, i64* %r12.global-to-local, align 8
  %v0_b872 = load i64, i64* %rbp.global-to-local, align 8
  %v0_b873 = load i64, i64* @rsi, align 8
  store i64 %v0_b873, i64* %r12.global-to-local, align 8
  %v0_b876 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_b876, i64* %stack_var_-24, align 8
  %v2_b877 = load i64, i64* @rdi, align 8
  store i64 %v2_b877, i64* %rbp.global-to-local, align 8
  store i64 46, i64* @rsi, align 8
  %v1_b882 = inttoptr i64 %v2_b877 to i8*
  %v5_b882 = call i8* @strrchr(i8* %v1_b882, i32 46)
  %v7_b882 = ptrtoint i8* %v5_b882 to i64
  store i64 46, i64* %r12.global-to-local, align 8
  store i64 46, i64* @rsi, align 8
  store i64 %v7_b882, i64* %rbx.global-to-local, align 8
  store i64 46, i64* @rdi, align 8
  %v6_b896 = call i8* @strrchr(i8* inttoptr (i64 46 to i8*), i32 46)
  %v1_b89b = icmp eq i8* %v6_b896, null
  br i1 %v1_b89b, label %dec_label_pc_b8d0, label %dec_label_pc_b8a0

dec_label_pc_b8a0:                                ; preds = %dec_label_pc_b870
  %v7_b896 = ptrtoint i8* %v6_b896 to i64
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @rdx, align 8
  %v1_b8a7 = icmp eq i8* %v5_b882, null
  store i64 %v7_b896, i64* @rsi, align 8
  %v3_b8ad = select i1 %v1_b8a7, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v7_b882
  store i64 %v3_b8ad, i64* %rbx.global-to-local, align 8
  %v1_b8b1 = inttoptr i64 %v3_b8ad to i8*
  store i64 %v3_b8ad, i64* @rdi, align 8
  %v6_b8b4 = call i32 @strcmp(i8* %v1_b8b1, i8* nonnull %v6_b896)
  %v5_b8b9 = icmp eq i32 %v6_b8b4, 0
  %v1_b8bb = icmp eq i1 %v5_b8b9, false
  br i1 %v1_b8bb, label %dec_label_pc_b8eb, label %dec_label_pc_b8bd

dec_label_pc_b8bd:                                ; preds = %dec_label_pc_b8dc, %dec_label_pc_b8d0, %dec_label_pc_b8a0
  %v2_b8bd = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_b8bd, i64* %rbx.global-to-local, align 8
  %v0_b8be = load i64, i64* %r12.global-to-local, align 8
  %v1_b8be = inttoptr i64 %v0_b8be to i8*
  store i64 %v0_b8be, i64* @rsi, align 8
  %v0_b8c1 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_b8c1, i64* @rdi, align 8
  store i64 %v0_b872, i64* %rbp.global-to-local, align 8
  store i64 %v0_b870, i64* %r12.global-to-local, align 8
  %v1_b8c7 = inttoptr i64 %v0_b8c1 to i8*
  %v5_b8c7 = call i32 @strcmp(i8* %v1_b8c7, i8* %v1_b8be)
  %v7_b8c7 = sext i32 %v5_b8c7 to i64
  ret i64 %v7_b8c7

dec_label_pc_b8d0:                                ; preds = %dec_label_pc_b870
  %v1_b8d0 = icmp eq i8* %v5_b882, null
  br i1 %v1_b8d0, label %dec_label_pc_b8bd, label %dec_label_pc_b8dc

dec_label_pc_b8dc:                                ; preds = %dec_label_pc_b8d0
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @rsi, align 8
  store i64 %v7_b882, i64* @rdi, align 8
  %v6_b8e2 = call i32 @strcmp(i8* nonnull %v5_b882, i8* bitcast (i8** @global_var_17c4a.6 to i8*))
  %v5_b8e7 = icmp eq i32 %v6_b8e2, 0
  br i1 %v5_b8e7, label %dec_label_pc_b8bd, label %dec_label_pc_b8eb

dec_label_pc_b8eb:                                ; preds = %dec_label_pc_b8dc, %dec_label_pc_b8a0
  %v0_b8ef.in = phi i32 [ %v6_b8e2, %dec_label_pc_b8dc ], [ %v6_b8b4, %dec_label_pc_b8a0 ]
  %v0_b8ef = sext i32 %v0_b8ef.in to i64
  %v2_b8eb = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_b8eb, i64* %rbx.global-to-local, align 8
  store i64 %v0_b872, i64* %rbp.global-to-local, align 8
  store i64 %v0_b870, i64* %r12.global-to-local, align 8
  ret i64 %v0_b8ef
}

define i64 @function_b8f0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b8f0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_b8f0 = load i64, i64* @rdi, align 8
  %v1_b8f0 = add i64 %v0_b8f0, 168
  %v2_b8f0 = inttoptr i64 %v1_b8f0 to i32*
  %v3_b8f0 = load i32, i32* %v2_b8f0, align 4
  %v4_b8f0 = zext i32 %v3_b8f0 to i64
  %v0_b8f6 = load i64, i64* @rsi, align 8
  %v1_b8f6 = add i64 %v0_b8f6, 168
  %v2_b8f6 = inttoptr i64 %v1_b8f6 to i32*
  %v3_b8f6 = load i32, i32* %v2_b8f6, align 4
  %v4_b8f6 = zext i32 %v3_b8f6 to i64
  %v11_b8fc = icmp eq i32 %v3_b8f0, 3
  %v1_b8ff = zext i1 %v11_b8fc to i64
  %v2_b8ff = load i64, i64* @rcx, align 8
  %v11_b902 = icmp eq i32 %v3_b8f0, 9
  %v1_b905 = zext i1 %v11_b902 to i64
  %v3_b905 = and i64 %v4_b8f0, 4294967040
  %v4_b8ff = or i64 %v3_b905, %v1_b905
  %v4_b905 = or i64 %v4_b8ff, %v1_b8ff
  %v3_b8ff.masked = and i64 %v2_b8ff, 4294967040
  %v11_b908 = or i64 %v4_b905, %v3_b8ff.masked
  store i64 %v11_b908, i64* @rcx, align 8
  %v11_b90a = icmp eq i32 %v3_b8f6, 3
  %v11_b910 = icmp eq i32 %v3_b8f6, 9
  %v1_b916 = zext i1 %v11_b910 to i8
  %v3_b916 = zext i1 %v11_b90a to i8
  %v4_b916 = or i8 %v3_b916, %v1_b916
  %v5_b916 = icmp eq i8 %v4_b916, 0
  %v10_b916 = zext i8 %v4_b916 to i64
  %v12_b916 = and i64 %v4_b8f6, 4294967040
  %v13_b916 = or i64 %v10_b916, %v12_b916
  store i64 %v13_b916, i64* @rdx, align 8
  %v1_b918 = icmp eq i1 %v5_b916, false
  %.pre = trunc i64 %v4_b905 to i8
  br i1 %v1_b918, label %dec_label_pc_b91e, label %dec_label_pc_b91a

dec_label_pc_b91a:                                ; preds = %dec_label_pc_b8f0
  %v5_b91a = icmp eq i8 %.pre, 0
  %v1_b91c = icmp eq i1 %v5_b91a, false
  br i1 %v1_b91c, label %dec_label_pc_b998, label %dec_label_pc_b91e

dec_label_pc_b91e:                                ; preds = %dec_label_pc_b8f0, %dec_label_pc_b91a
  %v5_b91e = icmp eq i8 %.pre, 0
  %v1_b920 = icmp eq i1 %v5_b91e, false
  br i1 %v1_b920, label %dec_label_pc_b930, label %dec_label_pc_b922

dec_label_pc_b922:                                ; preds = %dec_label_pc_b91e
  br i1 %v5_b916, label %dec_label_pc_b930, label %dec_label_pc_b92b

dec_label_pc_b92b:                                ; preds = %dec_label_pc_b922
  ret i64 1

dec_label_pc_b930:                                ; preds = %dec_label_pc_b922, %dec_label_pc_b91e
  %v0_b930 = load i64, i64* %r12.global-to-local, align 8
  %v0_b932 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_b8f0, i64* %rbp.global-to-local, align 8
  %v0_b936 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_b936, i64* %stack_var_-24, align 8
  store i64 %v0_b8f6, i64* %rbx.global-to-local, align 8
  store i64 46, i64* @rsi, align 8
  store i64 46, i64* @rdi, align 8
  %v6_b942 = call i8* @strrchr(i8* inttoptr (i64 46 to i8*), i32 46)
  %v8_b942 = ptrtoint i8* %v6_b942 to i64
  store i64 46, i64* @rdi, align 8
  store i64 46, i64* @rsi, align 8
  store i64 %v8_b942, i64* %r12.global-to-local, align 8
  %v6_b953 = call i8* @strrchr(i8* inttoptr (i64 46 to i8*), i32 46)
  %v7_b953 = ptrtoint i8* %v6_b953 to i64
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @rdx, align 8
  %v1_b95f = icmp eq i8* %v6_b953, null
  %v3_b962 = select i1 %v1_b95f, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v7_b953
  %v1_b966 = icmp eq i8* %v6_b942, null
  %v3_b969 = select i1 %v1_b966, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v8_b942
  store i64 %v3_b969, i64* %r12.global-to-local, align 8
  store i64 %v3_b962, i64* @rsi, align 8
  store i64 %v3_b969, i64* @rdi, align 8
  %v4_b978 = trunc i64 %v3_b962 to i32
  %v5_b978 = icmp eq i32 %v4_b978, 0
  %v1_b97a = icmp eq i1 %v5_b978, false
  br i1 %v1_b97a, label %dec_label_pc_b990, label %dec_label_pc_b97c

dec_label_pc_b97c:                                ; preds = %dec_label_pc_b930
  store i64 %v3_b969, i64* @rsi, align 8
  store i64 %v3_b969, i64* @rdi, align 8
  %v2_b983 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_b983, i64* %rbx.global-to-local, align 8
  store i64 %v0_b932, i64* %rbp.global-to-local, align 8
  store i64 %v0_b930, i64* %r12.global-to-local, align 8
  ret i64 %v3_b962

dec_label_pc_b990:                                ; preds = %dec_label_pc_b930
  %v2_b990 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_b990, i64* %rbx.global-to-local, align 8
  store i64 %v0_b932, i64* %rbp.global-to-local, align 8
  store i64 %v0_b930, i64* %r12.global-to-local, align 8
  ret i64 %v3_b962

dec_label_pc_b998:                                ; preds = %dec_label_pc_b91a
  ret i64 4294967295
}

define i64 @function_b9a0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_b9a0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_b9a0 = load i64, i64* @rdi, align 8
  %v1_b9a0 = add i64 %v0_b9a0, 168
  %v2_b9a0 = inttoptr i64 %v1_b9a0 to i32*
  %v3_b9a0 = load i32, i32* %v2_b9a0, align 4
  %v4_b9a0 = zext i32 %v3_b9a0 to i64
  %v0_b9a6 = load i64, i64* @rsi, align 8
  %v1_b9a6 = add i64 %v0_b9a6, 168
  %v2_b9a6 = inttoptr i64 %v1_b9a6 to i32*
  %v3_b9a6 = load i32, i32* %v2_b9a6, align 4
  %v4_b9a6 = zext i32 %v3_b9a6 to i64
  %v11_b9ac = icmp eq i32 %v3_b9a0, 3
  %v1_b9af = zext i1 %v11_b9ac to i64
  %v2_b9af = load i64, i64* @rcx, align 8
  %v11_b9b2 = icmp eq i32 %v3_b9a0, 9
  %v1_b9b5 = zext i1 %v11_b9b2 to i64
  %v3_b9b5 = and i64 %v4_b9a0, 4294967040
  %v4_b9af = or i64 %v3_b9b5, %v1_b9b5
  %v4_b9b5 = or i64 %v4_b9af, %v1_b9af
  %v3_b9af.masked = and i64 %v2_b9af, 4294967040
  %v11_b9b8 = or i64 %v4_b9b5, %v3_b9af.masked
  store i64 %v11_b9b8, i64* @rcx, align 8
  %v11_b9ba = icmp eq i32 %v3_b9a6, 3
  %v11_b9c0 = icmp eq i32 %v3_b9a6, 9
  %v1_b9c6 = zext i1 %v11_b9c0 to i8
  %v3_b9c6 = zext i1 %v11_b9ba to i8
  %v4_b9c6 = or i8 %v3_b9c6, %v1_b9c6
  %v5_b9c6 = icmp eq i8 %v4_b9c6, 0
  %v10_b9c6 = zext i8 %v4_b9c6 to i64
  %v12_b9c6 = and i64 %v4_b9a6, 4294967040
  %v13_b9c6 = or i64 %v10_b9c6, %v12_b9c6
  store i64 %v13_b9c6, i64* @rdx, align 8
  %v1_b9c8 = icmp eq i1 %v5_b9c6, false
  %.pre = trunc i64 %v4_b9b5 to i8
  br i1 %v1_b9c8, label %dec_label_pc_b9ce, label %dec_label_pc_b9ca

dec_label_pc_b9ca:                                ; preds = %dec_label_pc_b9a0
  %v5_b9ca = icmp eq i8 %.pre, 0
  %v1_b9cc = icmp eq i1 %v5_b9ca, false
  br i1 %v1_b9cc, label %dec_label_pc_ba48, label %dec_label_pc_b9ce

dec_label_pc_b9ce:                                ; preds = %dec_label_pc_b9a0, %dec_label_pc_b9ca
  %v5_b9ce = icmp eq i8 %.pre, 0
  %v1_b9d0 = icmp eq i1 %v5_b9ce, false
  br i1 %v1_b9d0, label %dec_label_pc_b9e0, label %dec_label_pc_b9d2

dec_label_pc_b9d2:                                ; preds = %dec_label_pc_b9ce
  br i1 %v5_b9c6, label %dec_label_pc_b9e0, label %dec_label_pc_b9db

dec_label_pc_b9db:                                ; preds = %dec_label_pc_b9d2
  ret i64 1

dec_label_pc_b9e0:                                ; preds = %dec_label_pc_b9d2, %dec_label_pc_b9ce
  %v0_b9e0 = load i64, i64* %r12.global-to-local, align 8
  %v0_b9e2 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_b9a6, i64* %rbp.global-to-local, align 8
  %v0_b9e6 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_b9e6, i64* %stack_var_-24, align 8
  store i64 %v0_b9a0, i64* %rbx.global-to-local, align 8
  store i64 46, i64* @rsi, align 8
  %v1_b9f2 = inttoptr i64 %v0_b9a0 to i8*
  %v5_b9f2 = call i8* @strrchr(i8* %v1_b9f2, i32 46)
  %v7_b9f2 = ptrtoint i8* %v5_b9f2 to i64
  store i64 46, i64* @rdi, align 8
  store i64 46, i64* @rsi, align 8
  store i64 %v7_b9f2, i64* %r12.global-to-local, align 8
  %v6_ba03 = call i8* @strrchr(i8* inttoptr (i64 46 to i8*), i32 46)
  %v7_ba03 = ptrtoint i8* %v6_ba03 to i64
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @rdx, align 8
  %v1_ba0f = icmp eq i8* %v6_ba03, null
  %v3_ba12 = select i1 %v1_ba0f, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v7_ba03
  %v1_ba16 = icmp eq i8* %v5_b9f2, null
  %v3_ba19 = select i1 %v1_ba16, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v7_b9f2
  store i64 %v3_ba12, i64* @rsi, align 8
  store i64 %v3_ba19, i64* @rdi, align 8
  %v2_ba40 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_ba40, i64* %rbx.global-to-local, align 8
  store i64 %v0_b9e2, i64* %rbp.global-to-local, align 8
  store i64 %v0_b9e0, i64* %r12.global-to-local, align 8
  ret i64 %v3_ba12

dec_label_pc_ba48:                                ; preds = %dec_label_pc_b9ca
  ret i64 4294967295
}

define i64 @function_ba50(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_ba50:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_ba50 = load i64, i64* @rdi, align 8
  %v1_ba50 = add i64 %v0_ba50, 168
  %v2_ba50 = inttoptr i64 %v1_ba50 to i32*
  %v3_ba50 = load i32, i32* %v2_ba50, align 4
  %v4_ba50 = zext i32 %v3_ba50 to i64
  %v0_ba56 = load i64, i64* @rsi, align 8
  %v1_ba56 = add i64 %v0_ba56, 168
  %v2_ba56 = inttoptr i64 %v1_ba56 to i32*
  %v3_ba56 = load i32, i32* %v2_ba56, align 4
  %v4_ba56 = zext i32 %v3_ba56 to i64
  %v11_ba5c = icmp eq i32 %v3_ba50, 3
  %v1_ba5f = zext i1 %v11_ba5c to i64
  %v2_ba5f = load i64, i64* @rcx, align 8
  %v11_ba62 = icmp eq i32 %v3_ba50, 9
  %v1_ba65 = zext i1 %v11_ba62 to i64
  %v3_ba65 = and i64 %v4_ba50, 4294967040
  %v4_ba5f = or i64 %v3_ba65, %v1_ba65
  %v4_ba65 = or i64 %v4_ba5f, %v1_ba5f
  %v3_ba5f.masked = and i64 %v2_ba5f, 4294967040
  %v11_ba68 = or i64 %v4_ba65, %v3_ba5f.masked
  store i64 %v11_ba68, i64* @rcx, align 8
  %v11_ba6a = icmp eq i32 %v3_ba56, 3
  %v11_ba70 = icmp eq i32 %v3_ba56, 9
  %v1_ba76 = zext i1 %v11_ba70 to i8
  %v3_ba76 = zext i1 %v11_ba6a to i8
  %v4_ba76 = or i8 %v3_ba76, %v1_ba76
  %v5_ba76 = icmp eq i8 %v4_ba76, 0
  %v10_ba76 = zext i8 %v4_ba76 to i64
  %v12_ba76 = and i64 %v4_ba56, 4294967040
  %v13_ba76 = or i64 %v10_ba76, %v12_ba76
  store i64 %v13_ba76, i64* @rdx, align 8
  %v1_ba78 = icmp eq i1 %v5_ba76, false
  %.pre = trunc i64 %v4_ba65 to i8
  br i1 %v1_ba78, label %dec_label_pc_ba82, label %dec_label_pc_ba7a

dec_label_pc_ba7a:                                ; preds = %dec_label_pc_ba50
  %v5_ba7a = icmp eq i8 %.pre, 0
  %v1_ba7c = icmp eq i1 %v5_ba7a, false
  br i1 %v1_ba7c, label %dec_label_pc_bb10, label %dec_label_pc_ba82

dec_label_pc_ba82:                                ; preds = %dec_label_pc_ba50, %dec_label_pc_ba7a
  %v5_ba82 = icmp eq i8 %.pre, 0
  %v1_ba84 = icmp eq i1 %v5_ba82, false
  br i1 %v1_ba84, label %dec_label_pc_ba98, label %dec_label_pc_ba86

dec_label_pc_ba86:                                ; preds = %dec_label_pc_ba82
  br i1 %v5_ba76, label %dec_label_pc_ba98, label %dec_label_pc_ba8f

dec_label_pc_ba8f:                                ; preds = %dec_label_pc_ba86
  ret i64 1

dec_label_pc_ba98:                                ; preds = %dec_label_pc_ba86, %dec_label_pc_ba82
  %v0_ba98 = load i64, i64* %r12.global-to-local, align 8
  %v0_ba9a = load i64, i64* %rbp.global-to-local, align 8
  %v0_ba9b = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_ba9b, i64* %stack_var_-24, align 8
  store i64 %v0_ba50, i64* %r12.global-to-local, align 8
  store i64 %v0_ba56, i64* %rbx.global-to-local, align 8
  store i64 46, i64* @rsi, align 8
  %v1_baaa = inttoptr i64 %v0_ba50 to i8*
  %v5_baaa = call i8* @strrchr(i8* %v1_baaa, i32 46)
  %v7_baaa = ptrtoint i8* %v5_baaa to i64
  store i64 46, i64* %rbx.global-to-local, align 8
  store i64 46, i64* @rsi, align 8
  store i64 %v7_baaa, i64* %rbp.global-to-local, align 8
  store i64 46, i64* @rdi, align 8
  %v6_babd = call i8* @strrchr(i8* inttoptr (i64 46 to i8*), i32 46)
  %v1_bac2 = icmp eq i8* %v6_babd, null
  br i1 %v1_bac2, label %dec_label_pc_bb00, label %dec_label_pc_bac7

dec_label_pc_bac7:                                ; preds = %dec_label_pc_ba98
  %v8_babd = ptrtoint i8* %v6_babd to i64
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @rdx, align 8
  %v0_bace = load i64, i64* %rbp.global-to-local, align 8
  %v1_bace = icmp eq i64 %v0_bace, 0
  %v3_bad1 = select i1 %v1_bace, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v0_bace
  store i64 %v3_bad1, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_bad5

dec_label_pc_bad5:                                ; preds = %dec_label_pc_bb00, %dec_label_pc_bac7
  %v0_bad8 = phi i64 [ %v0_bb00, %dec_label_pc_bb00 ], [ %v3_bad1, %dec_label_pc_bac7 ]
  %v0_bad5 = phi i64 [ ptrtoint (i8** @global_var_17c4a.6 to i64), %dec_label_pc_bb00 ], [ %v8_babd, %dec_label_pc_bac7 ]
  %v1_bad5 = inttoptr i64 %v0_bad5 to i8*
  store i64 %v0_bad5, i64* @rsi, align 8
  %v1_bad8 = inttoptr i64 %v0_bad8 to i8*
  store i64 %v0_bad8, i64* @rdi, align 8
  %v6_badb = call i32 @strcmp(i8* %v1_bad8, i8* %v1_bad5)
  %v5_bae0 = icmp eq i32 %v6_badb, 0
  %v1_bae2 = icmp eq i1 %v5_bae0, false
  br i1 %v1_bae2, label %dec_label_pc_baf8, label %dec_label_pc_bae4

dec_label_pc_bae4:                                ; preds = %dec_label_pc_bb00, %dec_label_pc_bad5
  %v0_bae4 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bae4 = inttoptr i64 %v0_bae4 to i8*
  store i64 %v0_bae4, i64* @rsi, align 8
  %v0_bae7 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_bae7, i64* @rdi, align 8
  %v2_baea = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_baea, i64* %rbx.global-to-local, align 8
  store i64 %v0_ba9a, i64* %rbp.global-to-local, align 8
  store i64 %v0_ba98, i64* %r12.global-to-local, align 8
  %v1_baee = inttoptr i64 %v0_bae7 to i8*
  %v5_baee = call i32 @strcmp(i8* %v1_baee, i8* %v1_bae4)
  %v7_baee = sext i32 %v5_baee to i64
  ret i64 %v7_baee

dec_label_pc_baf8:                                ; preds = %dec_label_pc_bad5
  %v8_badb = sext i32 %v6_badb to i64
  %v2_baf8 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_baf8, i64* %rbx.global-to-local, align 8
  store i64 %v0_ba9a, i64* %rbp.global-to-local, align 8
  store i64 %v0_ba98, i64* %r12.global-to-local, align 8
  ret i64 %v8_badb

dec_label_pc_bb00:                                ; preds = %dec_label_pc_ba98
  %v0_bb00 = load i64, i64* %rbp.global-to-local, align 8
  %v1_bb00 = icmp eq i64 %v0_bb00, 0
  %v1_bb0a = icmp eq i1 %v1_bb00, false
  br i1 %v1_bb0a, label %dec_label_pc_bad5, label %dec_label_pc_bae4

dec_label_pc_bb10:                                ; preds = %dec_label_pc_ba7a
  ret i64 4294967295
}

define i64 @function_bb20(i32 %arg1) local_unnamed_addr {
dec_label_pc_bb20:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  %tmp411 = sext i32 %arg1 to i64
  store i64 %tmp411, i64* @rdi, align 8
  %stack_var_-152 = alloca i8*, align 8
  %v0_bb23 = load i64, i64* @rdi, align 8
  store i64 %v0_bb23, i64* %r12.global-to-local, align 8
  store i64 5, i64* @rdx, align 8
  %v15_bb2c = ptrtoint i8** %stack_var_-152 to i64
  %v0_bb30 = load i64, i64* @global_var_221400.340, align 8
  store i64 %v0_bb30, i64* %rbx.global-to-local, align 8
  %v0_bb37 = call i64 @__readfsqword(i64 40)
  %v0_bb47 = load i64, i64* @rdi, align 8
  %v4_bb47 = trunc i64 %v0_bb47 to i32
  %v5_bb47 = icmp eq i32 %v4_bb47, 0
  br i1 %v5_bb47, label %dec_label_pc_bb7a, label %dec_label_pc_bb4b

dec_label_pc_bb4b:                                ; preds = %dec_label_pc_bb20
  store i64 ptrtoint ([39 x i8]* @global_var_18228.341 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bb54 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @global_var_18228.341, i64 0, i64 0), i32 5)
  %v11_bb54 = ptrtoint i8* %v9_bb54 to i64
  %v0_bb59 = load %_IO_FILE*, %_IO_FILE** @global_var_2202c0.221, align 8
  %v1_bb59 = ptrtoint %_IO_FILE* %v0_bb59 to i64
  store i64 %v1_bb59, i64* @rdi, align 8
  store i64 %v11_bb54, i64* @rdx, align 8
  %v0_bb63 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_bb63, i64* @rcx, align 8
  store i64 1, i64* @rsi, align 8
  %v9_bb6d = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v0_bb59, i32 1, i8* %v9_bb54)
  br label %dec_label_pc_bb72

dec_label_pc_bb72:                                ; preds = %dec_label_pc_c0db, %dec_label_pc_bb4b
  %v0_bb72 = load i64, i64* %r12.global-to-local, align 8
  %v1_bb72 = trunc i64 %v0_bb72 to i32
  store i64 %v0_bb72, i64* @rdi, align 8
  call void @exit(i32 %v1_bb72)
  unreachable

dec_label_pc_bb7a:                                ; preds = %dec_label_pc_bb20
  store i64 ptrtoint ([33 x i8]* @global_var_18250.342 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_17d82.68 to i64), i64* %rbp.global-to-local, align 8
  %v9_bb8a = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @global_var_18250.342, i64 0, i64 0), i32 5)
  %v11_bb8a = ptrtoint i8* %v9_bb8a to i64
  %v0_bb8f = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_bb8f, i64* @rdx, align 8
  store i64 %v11_bb8a, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v6_bb9c = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %v9_bb8a)
  %v0_bba1 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bba1 = ptrtoint %_IO_FILE* %v0_bba1 to i64
  store i64 %v1_bba1, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([144 x i8]* @global_var_18278.343 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bbb6 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @global_var_18278.343, i64 0, i64 0), i32 5)
  %v11_bbb6 = ptrtoint i8* %v9_bbb6 to i64
  %v0_bbbb = load i64, i64* %rbx.global-to-local, align 8
  %v1_bbbb = inttoptr i64 %v0_bbbb to %_IO_FILE*
  store i64 %v0_bbbb, i64* @rsi, align 8
  store i64 %v11_bbb6, i64* @rdi, align 8
  %v6_bbc1 = call i32 @fputs_unlocked(i8* %v9_bbb6, %_IO_FILE* %v1_bbbb)
  %v0_bbc6 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bbc6 = ptrtoint %_IO_FILE* %v0_bbc6 to i64
  store i64 %v1_bbc6, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([75 x i8]* @global_var_18308.344 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bbdb = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @global_var_18308.344, i64 0, i64 0), i32 5)
  %v11_bbdb = ptrtoint i8* %v9_bbdb to i64
  %v0_bbe0 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bbe0 = inttoptr i64 %v0_bbe0 to %_IO_FILE*
  store i64 %v0_bbe0, i64* @rsi, align 8
  store i64 %v11_bbdb, i64* @rdi, align 8
  %v6_bbe6 = call i32 @fputs_unlocked(i8* %v9_bbdb, %_IO_FILE* %v1_bbe0)
  %v0_bbeb = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bbeb = ptrtoint %_IO_FILE* %v0_bbeb to i64
  store i64 %v1_bbeb, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([271 x i8]* @global_var_18358.345 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bc00 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([271 x i8], [271 x i8]* @global_var_18358.345, i64 0, i64 0), i32 5)
  %v11_bc00 = ptrtoint i8* %v9_bc00 to i64
  %v0_bc05 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bc05 = inttoptr i64 %v0_bc05 to %_IO_FILE*
  store i64 %v0_bc05, i64* @rsi, align 8
  store i64 %v11_bc00, i64* @rdi, align 8
  %v6_bc0b = call i32 @fputs_unlocked(i8* %v9_bc00, %_IO_FILE* %v1_bc05)
  %v0_bc10 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bc10 = ptrtoint %_IO_FILE* %v0_bc10 to i64
  store i64 %v1_bc10, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([582 x i8]* @global_var_18468.346 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bc25 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([582 x i8], [582 x i8]* @global_var_18468.346, i64 0, i64 0), i32 5)
  %v11_bc25 = ptrtoint i8* %v9_bc25 to i64
  %v0_bc2a = load i64, i64* %rbx.global-to-local, align 8
  %v1_bc2a = inttoptr i64 %v0_bc2a to %_IO_FILE*
  store i64 %v0_bc2a, i64* @rsi, align 8
  store i64 %v11_bc25, i64* @rdi, align 8
  %v6_bc30 = call i32 @fputs_unlocked(i8* %v9_bc25, %_IO_FILE* %v1_bc2a)
  %v0_bc35 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bc35 = ptrtoint %_IO_FILE* %v0_bc35 to i64
  store i64 %v1_bc35, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([367 x i8]* @global_var_186b0.347 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bc4a = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([367 x i8], [367 x i8]* @global_var_186b0.347, i64 0, i64 0), i32 5)
  %v11_bc4a = ptrtoint i8* %v9_bc4a to i64
  %v0_bc4f = load i64, i64* %rbx.global-to-local, align 8
  %v1_bc4f = inttoptr i64 %v0_bc4f to %_IO_FILE*
  store i64 %v0_bc4f, i64* @rsi, align 8
  store i64 %v11_bc4a, i64* @rdi, align 8
  %v6_bc55 = call i32 @fputs_unlocked(i8* %v9_bc4a, %_IO_FILE* %v1_bc4f)
  %v0_bc5a = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bc5a = ptrtoint %_IO_FILE* %v0_bc5a to i64
  store i64 %v1_bc5a, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([419 x i8]* @global_var_18820.348 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bc6f = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([419 x i8], [419 x i8]* @global_var_18820.348, i64 0, i64 0), i32 5)
  %v11_bc6f = ptrtoint i8* %v9_bc6f to i64
  %v0_bc74 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bc74 = inttoptr i64 %v0_bc74 to %_IO_FILE*
  store i64 %v0_bc74, i64* @rsi, align 8
  store i64 %v11_bc6f, i64* @rdi, align 8
  %v6_bc7a = call i32 @fputs_unlocked(i8* %v9_bc6f, %_IO_FILE* %v1_bc74)
  %v0_bc7f = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bc7f = ptrtoint %_IO_FILE* %v0_bc7f to i64
  store i64 %v1_bc7f, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([61 x i8]* @global_var_189c8.349 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bc94 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @global_var_189c8.349, i64 0, i64 0), i32 5)
  %v11_bc94 = ptrtoint i8* %v9_bc94 to i64
  %v0_bc99 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bc99 = inttoptr i64 %v0_bc99 to %_IO_FILE*
  store i64 %v0_bc99, i64* @rsi, align 8
  store i64 %v11_bc94, i64* @rdi, align 8
  %v6_bc9f = call i32 @fputs_unlocked(i8* %v9_bc94, %_IO_FILE* %v1_bc99)
  %v0_bca4 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bca4 = ptrtoint %_IO_FILE* %v0_bca4 to i64
  store i64 %v1_bca4, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([245 x i8]* @global_var_18a08.350 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bcb9 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([245 x i8], [245 x i8]* @global_var_18a08.350, i64 0, i64 0), i32 5)
  %v11_bcb9 = ptrtoint i8* %v9_bcb9 to i64
  %v0_bcbe = load i64, i64* %rbx.global-to-local, align 8
  %v1_bcbe = inttoptr i64 %v0_bcbe to %_IO_FILE*
  store i64 %v0_bcbe, i64* @rsi, align 8
  store i64 %v11_bcb9, i64* @rdi, align 8
  %v6_bcc4 = call i32 @fputs_unlocked(i8* %v9_bcb9, %_IO_FILE* %v1_bcbe)
  %v0_bcc9 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bcc9 = ptrtoint %_IO_FILE* %v0_bcc9 to i64
  store i64 %v1_bcc9, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([269 x i8]* @global_var_18b00.351 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bcde = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([269 x i8], [269 x i8]* @global_var_18b00.351, i64 0, i64 0), i32 5)
  %v11_bcde = ptrtoint i8* %v9_bcde to i64
  %v0_bce3 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bce3 = inttoptr i64 %v0_bce3 to %_IO_FILE*
  store i64 %v0_bce3, i64* @rsi, align 8
  store i64 %v11_bcde, i64* @rdi, align 8
  %v6_bce9 = call i32 @fputs_unlocked(i8* %v9_bcde, %_IO_FILE* %v1_bce3)
  %v0_bcee = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bcee = ptrtoint %_IO_FILE* %v0_bcee to i64
  store i64 %v1_bcee, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([422 x i8]* @global_var_18c10.352 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bd03 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([422 x i8], [422 x i8]* @global_var_18c10.352, i64 0, i64 0), i32 5)
  %v11_bd03 = ptrtoint i8* %v9_bd03 to i64
  %v0_bd08 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bd08 = inttoptr i64 %v0_bd08 to %_IO_FILE*
  store i64 %v0_bd08, i64* @rsi, align 8
  store i64 %v11_bd03, i64* @rdi, align 8
  %v6_bd0e = call i32 @fputs_unlocked(i8* %v9_bd03, %_IO_FILE* %v1_bd08)
  %v0_bd13 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bd13 = ptrtoint %_IO_FILE* %v0_bd13 to i64
  store i64 %v1_bd13, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([145 x i8]* @global_var_18db8.353 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bd28 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([145 x i8], [145 x i8]* @global_var_18db8.353, i64 0, i64 0), i32 5)
  %v11_bd28 = ptrtoint i8* %v9_bd28 to i64
  %v0_bd2d = load i64, i64* %rbx.global-to-local, align 8
  %v1_bd2d = inttoptr i64 %v0_bd2d to %_IO_FILE*
  store i64 %v0_bd2d, i64* @rsi, align 8
  store i64 %v11_bd28, i64* @rdi, align 8
  %v6_bd33 = call i32 @fputs_unlocked(i8* %v9_bd28, %_IO_FILE* %v1_bd2d)
  %v0_bd38 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bd38 = ptrtoint %_IO_FILE* %v0_bd38 to i64
  store i64 %v1_bd38, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([426 x i8]* @global_var_18e50.354 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bd4d = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([426 x i8], [426 x i8]* @global_var_18e50.354, i64 0, i64 0), i32 5)
  %v11_bd4d = ptrtoint i8* %v9_bd4d to i64
  %v0_bd52 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bd52 = inttoptr i64 %v0_bd52 to %_IO_FILE*
  store i64 %v0_bd52, i64* @rsi, align 8
  store i64 %v11_bd4d, i64* @rdi, align 8
  %v6_bd58 = call i32 @fputs_unlocked(i8* %v9_bd4d, %_IO_FILE* %v1_bd52)
  %v0_bd5d = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bd5d = ptrtoint %_IO_FILE* %v0_bd5d to i64
  store i64 %v1_bd5d, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([359 x i8]* @global_var_19000.355 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bd72 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([359 x i8], [359 x i8]* @global_var_19000.355, i64 0, i64 0), i32 5)
  %v11_bd72 = ptrtoint i8* %v9_bd72 to i64
  %v0_bd77 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bd77 = inttoptr i64 %v0_bd77 to %_IO_FILE*
  store i64 %v0_bd77, i64* @rsi, align 8
  store i64 %v11_bd72, i64* @rdi, align 8
  %v6_bd7d = call i32 @fputs_unlocked(i8* %v9_bd72, %_IO_FILE* %v1_bd77)
  %v0_bd82 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bd82 = ptrtoint %_IO_FILE* %v0_bd82 to i64
  store i64 %v1_bd82, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([303 x i8]* @global_var_19168.356 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bd97 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([303 x i8], [303 x i8]* @global_var_19168.356, i64 0, i64 0), i32 5)
  %v11_bd97 = ptrtoint i8* %v9_bd97 to i64
  %v0_bd9c = load i64, i64* %rbx.global-to-local, align 8
  %v1_bd9c = inttoptr i64 %v0_bd9c to %_IO_FILE*
  store i64 %v0_bd9c, i64* @rsi, align 8
  store i64 %v11_bd97, i64* @rdi, align 8
  %v6_bda2 = call i32 @fputs_unlocked(i8* %v9_bd97, %_IO_FILE* %v1_bd9c)
  %v0_bda7 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bda7 = ptrtoint %_IO_FILE* %v0_bda7 to i64
  store i64 %v1_bda7, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([507 x i8]* @global_var_19298.357 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bdbc = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([507 x i8], [507 x i8]* @global_var_19298.357, i64 0, i64 0), i32 5)
  %v11_bdbc = ptrtoint i8* %v9_bdbc to i64
  %v0_bdc1 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bdc1 = inttoptr i64 %v0_bdc1 to %_IO_FILE*
  store i64 %v0_bdc1, i64* @rsi, align 8
  store i64 %v11_bdbc, i64* @rdi, align 8
  %v6_bdc7 = call i32 @fputs_unlocked(i8* %v9_bdbc, %_IO_FILE* %v1_bdc1)
  %v0_bdcc = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bdcc = ptrtoint %_IO_FILE* %v0_bdcc to i64
  store i64 %v1_bdcc, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([197 x i8]* @global_var_19498.358 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bde1 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([197 x i8], [197 x i8]* @global_var_19498.358, i64 0, i64 0), i32 5)
  %v11_bde1 = ptrtoint i8* %v9_bde1 to i64
  %v0_bde6 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bde6 = inttoptr i64 %v0_bde6 to %_IO_FILE*
  store i64 %v0_bde6, i64* @rsi, align 8
  store i64 %v11_bde1, i64* @rdi, align 8
  %v6_bdec = call i32 @fputs_unlocked(i8* %v9_bde1, %_IO_FILE* %v1_bde6)
  %v0_bdf1 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bdf1 = ptrtoint %_IO_FILE* %v0_bdf1 to i64
  store i64 %v1_bdf1, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([519 x i8]* @global_var_19560.359 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_be06 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([519 x i8], [519 x i8]* @global_var_19560.359, i64 0, i64 0), i32 5)
  %v11_be06 = ptrtoint i8* %v9_be06 to i64
  %v0_be0b = load i64, i64* %rbx.global-to-local, align 8
  %v1_be0b = inttoptr i64 %v0_be0b to %_IO_FILE*
  store i64 %v0_be0b, i64* @rsi, align 8
  store i64 %v11_be06, i64* @rdi, align 8
  %v6_be11 = call i32 @fputs_unlocked(i8* %v9_be06, %_IO_FILE* %v1_be0b)
  %v0_be16 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_be16 = ptrtoint %_IO_FILE* %v0_be16 to i64
  store i64 %v1_be16, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([531 x i8]* @global_var_19768.360 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_be2b = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([531 x i8], [531 x i8]* @global_var_19768.360, i64 0, i64 0), i32 5)
  %v11_be2b = ptrtoint i8* %v9_be2b to i64
  %v0_be30 = load i64, i64* %rbx.global-to-local, align 8
  %v1_be30 = inttoptr i64 %v0_be30 to %_IO_FILE*
  store i64 %v0_be30, i64* @rsi, align 8
  store i64 %v11_be2b, i64* @rdi, align 8
  %v6_be36 = call i32 @fputs_unlocked(i8* %v9_be2b, %_IO_FILE* %v1_be30)
  %v0_be3b = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_be3b = ptrtoint %_IO_FILE* %v0_be3b to i64
  store i64 %v1_be3b, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([142 x i8]* @global_var_19980.361 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_be50 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @global_var_19980.361, i64 0, i64 0), i32 5)
  %v11_be50 = ptrtoint i8* %v9_be50 to i64
  %v0_be55 = load i64, i64* %rbx.global-to-local, align 8
  %v1_be55 = inttoptr i64 %v0_be55 to %_IO_FILE*
  store i64 %v0_be55, i64* @rsi, align 8
  store i64 %v11_be50, i64* @rdi, align 8
  %v6_be5b = call i32 @fputs_unlocked(i8* %v9_be50, %_IO_FILE* %v1_be55)
  %v0_be60 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_be60 = ptrtoint %_IO_FILE* %v0_be60 to i64
  store i64 %v1_be60, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([372 x i8]* @global_var_19a10.362 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_be75 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([372 x i8], [372 x i8]* @global_var_19a10.362, i64 0, i64 0), i32 5)
  %v11_be75 = ptrtoint i8* %v9_be75 to i64
  %v0_be7a = load i64, i64* %rbx.global-to-local, align 8
  %v1_be7a = inttoptr i64 %v0_be7a to %_IO_FILE*
  store i64 %v0_be7a, i64* @rsi, align 8
  store i64 %v11_be75, i64* @rdi, align 8
  %v6_be80 = call i32 @fputs_unlocked(i8* %v9_be75, %_IO_FILE* %v1_be7a)
  %v0_be85 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_be85 = ptrtoint %_IO_FILE* %v0_be85 to i64
  store i64 %v1_be85, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([363 x i8]* @global_var_19b88.363 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_be9a = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([363 x i8], [363 x i8]* @global_var_19b88.363, i64 0, i64 0), i32 5)
  %v11_be9a = ptrtoint i8* %v9_be9a to i64
  %v0_be9f = load i64, i64* %rbx.global-to-local, align 8
  %v1_be9f = inttoptr i64 %v0_be9f to %_IO_FILE*
  store i64 %v0_be9f, i64* @rsi, align 8
  store i64 %v11_be9a, i64* @rdi, align 8
  %v6_bea5 = call i32 @fputs_unlocked(i8* %v9_be9a, %_IO_FILE* %v1_be9f)
  %v0_beaa = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_beaa = ptrtoint %_IO_FILE* %v0_beaa to i64
  store i64 %v1_beaa, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([45 x i8]* @global_var_19cf8.364 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bebf = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @global_var_19cf8.364, i64 0, i64 0), i32 5)
  %v11_bebf = ptrtoint i8* %v9_bebf to i64
  %v0_bec4 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bec4 = inttoptr i64 %v0_bec4 to %_IO_FILE*
  store i64 %v0_bec4, i64* @rsi, align 8
  store i64 %v11_bebf, i64* @rdi, align 8
  %v6_beca = call i32 @fputs_unlocked(i8* %v9_bebf, %_IO_FILE* %v1_bec4)
  %v0_becf = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_becf = ptrtoint %_IO_FILE* %v0_becf to i64
  store i64 %v1_becf, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([54 x i8]* @global_var_19d28.365 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bee4 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @global_var_19d28.365, i64 0, i64 0), i32 5)
  %v11_bee4 = ptrtoint i8* %v9_bee4 to i64
  %v0_bee9 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bee9 = inttoptr i64 %v0_bee9 to %_IO_FILE*
  store i64 %v0_bee9, i64* @rsi, align 8
  store i64 %v11_bee4, i64* @rdi, align 8
  %v6_beef = call i32 @fputs_unlocked(i8* %v9_bee4, %_IO_FILE* %v1_bee9)
  %v0_bef4 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bef4 = ptrtoint %_IO_FILE* %v0_bef4 to i64
  store i64 %v1_bef4, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([153 x i8]* @global_var_19d60.366 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bf09 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([153 x i8], [153 x i8]* @global_var_19d60.366, i64 0, i64 0), i32 5)
  %v11_bf09 = ptrtoint i8* %v9_bf09 to i64
  %v0_bf0e = load i64, i64* %rbx.global-to-local, align 8
  %v1_bf0e = inttoptr i64 %v0_bf0e to %_IO_FILE*
  store i64 %v0_bf0e, i64* @rsi, align 8
  store i64 %v11_bf09, i64* @rdi, align 8
  %v6_bf14 = call i32 @fputs_unlocked(i8* %v9_bf09, %_IO_FILE* %v1_bf0e)
  %v0_bf19 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bf19 = ptrtoint %_IO_FILE* %v0_bf19 to i64
  store i64 %v1_bf19, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([286 x i8]* @global_var_19e00.367 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_bf2e = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([286 x i8], [286 x i8]* @global_var_19e00.367, i64 0, i64 0), i32 5)
  %v11_bf2e = ptrtoint i8* %v9_bf2e to i64
  %v0_bf33 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bf33 = inttoptr i64 %v0_bf33 to %_IO_FILE*
  store i64 %v0_bf33, i64* @rsi, align 8
  store i64 %v11_bf2e, i64* @rdi, align 8
  %v6_bf39 = call i32 @fputs_unlocked(i8* %v9_bf2e, %_IO_FILE* %v1_bf33)
  %v0_bf3e = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_bf3e = ptrtoint %_IO_FILE* %v0_bf3e to i64
  store i64 %v1_bf3e, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([152 x i8]* @global_var_19f20.368 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_bf53 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([152 x i8], [152 x i8]* @global_var_19f20.368, i64 0, i64 0), i32 5)
  %v11_bf53 = ptrtoint i8* %v9_bf53 to i64
  %v0_bf58 = load i64, i64* %rbx.global-to-local, align 8
  %v1_bf58 = inttoptr i64 %v0_bf58 to %_IO_FILE*
  store i64 %v0_bf58, i64* @rsi, align 8
  store i64 %v11_bf53, i64* @rdi, align 8
  %v6_bf5e = call i32 @fputs_unlocked(i8* %v9_bf53, %_IO_FILE* %v1_bf58)
  %v0_bf63 = load i32, i32* @global_var_2201e0.13, align 4
  %v11_bf69 = icmp eq i32 %v0_bf63, 1
  br i1 %v11_bf69, label %dec_label_pc_bf83, label %dec_label_pc_bf6e

dec_label_pc_bf6e:                                ; preds = %dec_label_pc_bb7a
  %v11_bf6e = icmp eq i32 %v0_bf63, 2
  %v3_bf7f = select i1 %v11_bf6e, i64 ptrtoint ([4 x i8]* @global_var_17cff.70 to i64), i64 ptrtoint ([5 x i8]* @global_var_17cfe.69 to i64)
  store i64 %v3_bf7f, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_bf83

dec_label_pc_bf83:                                ; preds = %dec_label_pc_bf6e, %dec_label_pc_bb7a
  store i64 ptrtoint (i8** @global_var_1813d.371 to i64), i64* @rsi, align 8
  store i64 %v15_bb2c, i64* %rbx.global-to-local, align 8
  store i8* bitcast (i8** @global_var_1813d.371 to i8*), i8** %stack_var_-152, align 8
  store i64 ptrtoint ([10 x i8]* @global_var_17d56.374 to i64), i64* @rcx, align 8
  br label %dec_label_pc_c024

dec_label_pc_c018:                                ; preds = %dec_label_pc_c024
  %v1_c018 = add i64 %v0_c018, 16
  store i64 %v1_c018, i64* %rbx.global-to-local, align 8
  %v1_c01c = inttoptr i64 %v1_c018 to i64*
  %v2_c01c = load i64, i64* %v1_c01c, align 8
  store i64 %v2_c01c, i64* @rsi, align 8
  %v1_c01f = icmp eq i64 %v2_c01c, 0
  br i1 %v1_c01f, label %dec_label_pc_c030, label %dec_label_pc_c024

dec_label_pc_c024:                                ; preds = %dec_label_pc_c018, %dec_label_pc_bf83
  %v3_c027 = phi i64 [ %v2_c01c, %dec_label_pc_c018 ], [ ptrtoint (i8** @global_var_1813d.371 to i64), %dec_label_pc_bf83 ]
  %v0_c024 = load i64, i64* %rbp.global-to-local, align 8
  %v1_c024 = inttoptr i64 %v0_c024 to i8*
  store i64 %v0_c024, i64* @rdi, align 8
  %v4_c027 = inttoptr i64 %v3_c027 to i8*
  %v5_c027 = call i32 @strcmp(i8* %v1_c024, i8* %v4_c027)
  %v5_c02c = icmp eq i32 %v5_c027, 0
  %v1_c02e = icmp eq i1 %v5_c02c, false
  %v0_c018 = load i64, i64* %rbx.global-to-local, align 8
  br i1 %v1_c02e, label %dec_label_pc_c018, label %dec_label_pc_c030

dec_label_pc_c030:                                ; preds = %dec_label_pc_c024, %dec_label_pc_c018
  %v0_c030 = phi i64 [ %v1_c018, %dec_label_pc_c018 ], [ %v0_c018, %dec_label_pc_c024 ]
  %v1_c030 = add i64 %v0_c030, 8
  %v2_c030 = inttoptr i64 %v1_c030 to i64*
  %v3_c030 = load i64, i64* %v2_c030, align 8
  store i64 %v3_c030, i64* %rbx.global-to-local, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 ptrtoint ([23 x i8]* @global_var_17d60.377 to i64), i64* @rsi, align 8
  %v1_c042 = icmp eq i64 %v3_c030, 0
  %v9_c108 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @global_var_17d60.377, i64 0, i64 0), i32 5)
  %v11_c108 = ptrtoint i8* %v9_c108 to i64
  store i64 ptrtoint ([39 x i8]* @global_var_19fb8.378 to i64), i64* @rcx, align 8
  store i64 ptrtoint ([14 x i8]* @global_var_17d77.74 to i64), i64* @rdx, align 8
  store i64 %v11_c108, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v6_c125 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %v9_c108)
  store i64 0, i64* @rsi, align 8
  store i64 5, i64* @rdi, align 8
  %v5_c131 = call i8* @setlocale(i32 5, i8* null)
  %v6_c131 = ptrtoint i8* %v5_c131 to i64
  %v2_c136 = icmp eq i8* %v5_c131, null
  br i1 %v1_c042, label %dec_label_pc_c108, label %dec_label_pc_c04b

dec_label_pc_c04b:                                ; preds = %dec_label_pc_c030
  br i1 %v2_c136, label %dec_label_pc_c09a, label %dec_label_pc_c07e

dec_label_pc_c07e:                                ; preds = %dec_label_pc_c04b
  store i64 ptrtoint ([4 x i8]* @global_var_17d85.379 to i64), i64* @rsi, align 8
  store i64 3, i64* @rdx, align 8
  store i64 %v6_c131, i64* @rdi, align 8
  %v8_c08d = call i32 @strncmp(i8* nonnull %v5_c131, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_17d85.379, i64 0, i64 0), i32 3)
  %v5_c092 = icmp eq i32 %v8_c08d, 0
  %v1_c094 = icmp eq i1 %v5_c092, false
  br i1 %v1_c094, label %dec_label_pc_c191, label %dec_label_pc_c09a

dec_label_pc_c09a:                                ; preds = %dec_label_pc_c191, %dec_label_pc_c07e, %dec_label_pc_c04b
  store i64 ptrtoint ([31 x i8]* @global_var_1a028.380 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_c0a8 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @global_var_1a028.380, i64 0, i64 0), i32 5)
  %v11_c0a8 = ptrtoint i8* %v9_c0a8 to i64
  store i64 ptrtoint ([39 x i8]* @global_var_19fb8.378 to i64), i64* @rdx, align 8
  %v0_c0b4 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_c0b4, i64* @rcx, align 8
  store i64 %v11_c0a8, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v5_c0c1 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %v9_c0a8)
  %v1_c0c6 = load i64, i64* %rbx.global-to-local, align 8
  %v12_c0c6 = icmp eq i64 %v0_c0b4, %v1_c0c6
  store i64 ptrtoint ([12 x i8]* @global_var_17d1d.381 to i64), i64* @rcx, align 8
  %v3_c0d7 = select i1 %v12_c0c6, i64 ptrtoint ([12 x i8]* @global_var_17d1d.381 to i64), i64 ptrtoint (i8** @global_var_17c4a.6 to i64)
  store i64 %v3_c0d7, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_c0db

dec_label_pc_c0db:                                ; preds = %dec_label_pc_c153, %dec_label_pc_c09a
  store i64 ptrtoint ([51 x i8]* @global_var_1a048.382 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_c0e9 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @global_var_1a048.382, i64 0, i64 0), i32 5)
  %v11_c0e9 = ptrtoint i8* %v9_c0e9 to i64
  %v0_c0ee = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_c0ee, i64* @rcx, align 8
  store i64 %v11_c0e9, i64* @rsi, align 8
  %v0_c0f4 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_c0f4, i64* @rdx, align 8
  store i64 1, i64* @rdi, align 8
  %v6_c0fe = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %v9_c0e9)
  br label %dec_label_pc_bb72

dec_label_pc_c108:                                ; preds = %dec_label_pc_c030
  br i1 %v2_c136, label %dec_label_pc_c153, label %dec_label_pc_c13b

dec_label_pc_c13b:                                ; preds = %dec_label_pc_c108
  store i64 ptrtoint ([4 x i8]* @global_var_17d85.379 to i64), i64* @rsi, align 8
  store i64 3, i64* @rdx, align 8
  store i64 %v6_c131, i64* @rdi, align 8
  %v8_c14a = call i32 @strncmp(i8* nonnull %v5_c131, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_17d85.379, i64 0, i64 0), i32 3)
  %v5_c14f = icmp eq i32 %v8_c14a, 0
  %v1_c151 = icmp eq i1 %v5_c14f, false
  br i1 %v1_c151, label %dec_label_pc_c18e, label %dec_label_pc_c153

dec_label_pc_c153:                                ; preds = %dec_label_pc_c13b, %dec_label_pc_c108
  store i64 ptrtoint ([31 x i8]* @global_var_1a028.380 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v0_c161 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_c161, i64* %rbx.global-to-local, align 8
  %v9_c164 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @global_var_1a028.380, i64 0, i64 0), i32 5)
  %v11_c164 = ptrtoint i8* %v9_c164 to i64
  store i64 ptrtoint ([39 x i8]* @global_var_19fb8.378 to i64), i64* @rdx, align 8
  store i64 %v0_c161, i64* @rcx, align 8
  store i64 %v11_c164, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  store i64 ptrtoint ([12 x i8]* @global_var_17d1d.381 to i64), i64* %rbp.global-to-local, align 8
  %v5_c184 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %v9_c164)
  br label %dec_label_pc_c0db

dec_label_pc_c18e:                                ; preds = %dec_label_pc_c13b
  %v0_c18e = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_c18e, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_c191

dec_label_pc_c191:                                ; preds = %dec_label_pc_c18e, %dec_label_pc_c07e
  store i64 ptrtoint ([69 x i8]* @global_var_19fe0.383 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_c19f = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @global_var_19fe0.383, i64 0, i64 0), i32 5)
  %v11_c19f = ptrtoint i8* %v9_c19f to i64
  %v0_c1a4 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_c1a4, i64* @rdx, align 8
  store i64 %v11_c19f, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v5_c1b1 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %v9_c19f)
  br label %dec_label_pc_c09a
}

define i64 @function_c1c0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c1c0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_c1cd = load i64, i64* @rdi, align 8
  store i64 %v0_c1cd, i64* %r13.global-to-local, align 8
  %v0_c1d2 = load i64, i64* @rsi, align 8
  %v1_c1d2 = add i64 %v0_c1d2, 1
  store i64 %v1_c1d2, i64* %rbx.global-to-local, align 8
  store i64 4611686018427387903, i64* %r14.global-to-local, align 8
  store i64 9223372036854775806, i64* %r15.global-to-local, align 8
  %v5_c1ee = icmp ult i64 %v0_c1d2, ptrtoint (i1* @global_var_401.384 to i64)
  %v1_c1f5 = icmp eq i1 %v5_c1ee, false
  %v4_c1f5 = select i1 %v1_c1f5, i64 ptrtoint (i1* @global_var_401.384 to i64), i64 %v1_c1d2
  br label %dec_label_pc_c200

dec_label_pc_c200:                                ; preds = %dec_label_pc_c260, %dec_label_pc_c1c0
  %storemerge = phi i64 [ %v4_c1f5, %dec_label_pc_c1c0 ], [ 9223372036854775807, %dec_label_pc_c260 ]
  store i64 %storemerge, i64* %rbx.global-to-local, align 8
  %v1_c200 = trunc i64 %storemerge to i32
  store i64 %storemerge, i64* @rdi, align 8
  %v3_c203 = call i64* @malloc(i32 %v1_c200)
  %v5_c203 = ptrtoint i64* %v3_c203 to i64
  %v1_c208 = icmp eq i64* %v3_c203, null
  store i64 %v5_c203, i64* %rbp.global-to-local, align 8
  br i1 %v1_c208, label %dec_label_pc_c24b, label %dec_label_pc_c210

dec_label_pc_c210:                                ; preds = %dec_label_pc_c200, %dec_label_pc_c238
  %v0_c213 = phi i64 [ %v5_c23e, %dec_label_pc_c238 ], [ %v5_c203, %dec_label_pc_c200 ]
  %v0_c210 = load i64, i64* %rbx.global-to-local, align 8
  %v1_c210 = trunc i64 %v0_c210 to i32
  store i64 %v0_c210, i64* @rdx, align 8
  %v1_c213 = inttoptr i64 %v0_c213 to i8*
  store i64 %v0_c213, i64* @rsi, align 8
  %v0_c216 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_c216, i64* @rdi, align 8
  %v1_c219 = inttoptr i64 %v0_c216 to i8*
  %v8_c219 = call i32 @readlink(i8* %v1_c219, i8* %v1_c213, i32 %v1_c210)
  %v9_c219 = sext i32 %v8_c219 to i64
  %v2_c21e = icmp slt i32 %v8_c219, 0
  store i64 %v9_c219, i64* %r12.global-to-local, align 8
  br i1 %v2_c21e, label %dec_label_pc_c278, label %dec_label_pc_c226

dec_label_pc_c226:                                ; preds = %dec_label_pc_c278.dec_label_pc_c226_crit_edge, %dec_label_pc_c210
  %v1_c290 = phi i64 [ %v1_c226.pre, %dec_label_pc_c278.dec_label_pc_c226_crit_edge ], [ %v9_c219, %dec_label_pc_c210 ]
  %v0_c226 = load i64, i64* %rbx.global-to-local, align 8
  %tmp44 = icmp ugt i64 %v0_c226, %v1_c290
  %v0_c22b = load i64, i64* %rbp.global-to-local, align 8
  br i1 %tmp44, label %dec_label_pc_c290, label %dec_label_pc_c22b

dec_label_pc_c22b:                                ; preds = %dec_label_pc_c226
  store i64 %v0_c22b, i64* @rdi, align 8
  %v1_c22e = inttoptr i64 %v0_c22b to i64*
  call void @free(i64* %v1_c22e)
  %v0_c233 = load i64, i64* %rbx.global-to-local, align 8
  %v1_c233 = load i64, i64* %r14.global-to-local, align 8
  %tmp45 = icmp ugt i64 %v0_c233, %v1_c233
  br i1 %tmp45, label %dec_label_pc_c260, label %dec_label_pc_c238

dec_label_pc_c238:                                ; preds = %dec_label_pc_c22b
  %v2_c238 = mul i64 %v0_c233, 2
  store i64 %v2_c238, i64* %rbx.global-to-local, align 8
  %v1_c23b = trunc i64 %v2_c238 to i32
  store i64 %v2_c238, i64* @rdi, align 8
  %v3_c23e = call i64* @malloc(i32 %v1_c23b)
  %v5_c23e = ptrtoint i64* %v3_c23e to i64
  %v1_c243 = icmp eq i64* %v3_c23e, null
  store i64 %v5_c23e, i64* %rbp.global-to-local, align 8
  %v1_c249 = icmp eq i1 %v1_c243, false
  br i1 %v1_c249, label %dec_label_pc_c210, label %dec_label_pc_c24b

dec_label_pc_c24b:                                ; preds = %dec_label_pc_c200, %dec_label_pc_c238, %dec_label_pc_c2a0, %dec_label_pc_c290, %dec_label_pc_c282
  %v0_c24f = load i64, i64* %rbp.global-to-local, align 8
  ret i64 %v0_c24f

dec_label_pc_c260:                                ; preds = %dec_label_pc_c22b
  %v1_c260 = load i64, i64* %r15.global-to-local, align 8
  %tmp46 = icmp ugt i64 %v0_c233, %v1_c260
  br i1 %tmp46, label %dec_label_pc_c2a0, label %dec_label_pc_c200

dec_label_pc_c278:                                ; preds = %dec_label_pc_c210
  %v0_c278 = call i32* @__errno_location()
  %v2_c27d = load i32, i32* %v0_c278, align 4
  %v12_c27d = icmp eq i32 %v2_c27d, 34
  br i1 %v12_c27d, label %dec_label_pc_c278.dec_label_pc_c226_crit_edge, label %dec_label_pc_c282

dec_label_pc_c278.dec_label_pc_c226_crit_edge:    ; preds = %dec_label_pc_c278
  %v1_c226.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_c226

dec_label_pc_c282:                                ; preds = %dec_label_pc_c278
  %v0_c282 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_c282, i64* @rdi, align 8
  store i64 0, i64* %rbp.global-to-local, align 8
  %v1_c287 = inttoptr i64 %v0_c282 to i64*
  call void @free(i64* %v1_c287)
  br label %dec_label_pc_c24b

dec_label_pc_c290:                                ; preds = %dec_label_pc_c226
  %v3_c290 = add i64 %v0_c22b, %v1_c290
  %v4_c290 = inttoptr i64 %v3_c290 to i8*
  store i8 0, i8* %v4_c290, align 1
  br label %dec_label_pc_c24b

dec_label_pc_c2a0:                                ; preds = %dec_label_pc_c260
  %v0_c2a0 = call i32* @__errno_location()
  store i64 0, i64* %rbp.global-to-local, align 8
  store i32 12, i32* %v0_c2a0, align 4
  br label %dec_label_pc_c24b
}

define i64 @function_c2b0() local_unnamed_addr {
dec_label_pc_c2b0:
  store i64 1, i64* @rdi, align 8
  %v3_c2b5 = call i64 @function_bb20(i32 1)
  ret i64 %v3_c2b5
}

define i64 @function_c2c0(i64 %arg1, i8** %arg2, i64* %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_c2c0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  %tmp25 = ptrtoint i64* %arg3 to i64
  store i64 %tmp25, i64* @rdx, align 8
  %tmp26 = ptrtoint i8** %arg2 to i64
  store i64 %tmp26, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-88 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_c2c4 = load i64, i64* @rsi, align 8
  store i64 %v0_c2c4, i64* %r15.global-to-local, align 8
  %v0_c2cb = load i64, i64* @rcx, align 8
  store i64 %v0_c2cb, i64* %r13.global-to-local, align 8
  %v0_c2cf = load i64, i64* @rbx, align 8
  store i64 %v0_c2cf, i64* %stack_var_-48, align 8
  %v0_c2d0 = load i64, i64* @rdx, align 8
  store i64 %v0_c2d0, i64* %rbp.global-to-local, align 8
  %v1_c2e1 = inttoptr i64 %arg1 to i8*
  %v2_c2e1 = call i32 @strlen(i8* %v1_c2e1)
  %v4_c2e1 = sext i32 %v2_c2e1 to i64
  %v2_c2e6 = load i64, i64* @rsi, align 8
  store i64 %v2_c2e6, i64* %r14.global-to-local, align 8
  store i64 -1, i64* %stack_var_-88, align 8
  %v1_c2f1 = icmp eq i64 %v2_c2e6, 0
  br i1 %v1_c2f1, label %dec_label_pc_c3ad, label %dec_label_pc_c2fa

dec_label_pc_c2fa:                                ; preds = %dec_label_pc_c2c0
  store i64 %v4_c2e1, i64* %r12.global-to-local, align 8
  store i64 0, i64* %rbx.global-to-local, align 8
  %v1_c315 = icmp eq i64 %v0_c2d0, 0
  br label %dec_label_pc_c357.outer

dec_label_pc_c310:                                ; preds = %dec_label_pc_c378
  br i1 %v1_c315, label %dec_label_pc_c347, label %dec_label_pc_c31e

dec_label_pc_c31e:                                ; preds = %dec_label_pc_c310
  %v0_c322 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_c322, i64* @rdx, align 8
  %v0_c325 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_c325, i64* @rsi, align 8
  %v4_c328 = mul i64 %v0_c322, %v2_c378
  %v2_c32c = add i64 %v4_c328, %v0_c2d0
  store i64 %v2_c32c, i64* @rdi, align 8
  %v1_c32f = inttoptr i64 %v2_c32c to i64*
  %v3_c32f = inttoptr i64 %v0_c325 to i64*
  %v5_c32f = trunc i64 %v0_c322 to i32
  %v6_c32f = call i32 @memcmp(i64* %v1_c32f, i64* %v3_c32f, i32 %v5_c32f)
  %v5_c334 = icmp eq i32 %v6_c32f, 0
  store i64 1, i64* @rcx, align 8
  %v1_c340 = icmp eq i1 %v5_c334, false
  %tmp41 = select i1 %v1_c340, i32 1, i32 %stack_var_-65.1.ph
  br label %dec_label_pc_c347

dec_label_pc_c347:                                ; preds = %dec_label_pc_c357, %dec_label_pc_c310, %dec_label_pc_c31e
  %stack_var_-65.0 = phi i32 [ %tmp41, %dec_label_pc_c31e ], [ 1, %dec_label_pc_c310 ], [ %stack_var_-65.1.ph, %dec_label_pc_c357 ]
  %v0_c347 = load i64, i64* %rbx.global-to-local, align 8
  %v1_c347 = add i64 %v0_c347, 1
  store i64 %v1_c347, i64* %rbx.global-to-local, align 8
  %v0_c34b = load i64, i64* %rbp.global-to-local, align 8
  %v1_c34b = load i64, i64* %r13.global-to-local, align 8
  %v2_c34b = add i64 %v1_c34b, %v0_c34b
  store i64 %v2_c34b, i64* %rbp.global-to-local, align 8
  %v0_c34e = load i64, i64* %r15.global-to-local, align 8
  %v2_c34e = mul i64 %v1_c347, 8
  %v3_c34e = add i64 %v0_c34e, %v2_c34e
  %v4_c34e = inttoptr i64 %v3_c34e to i64*
  %v5_c34e = load i64, i64* %v4_c34e, align 8
  store i64 %v5_c34e, i64* %r14.global-to-local, align 8
  %v1_c352 = icmp eq i64 %v5_c34e, 0
  br i1 %v1_c352, label %dec_label_pc_c398.loopexit3, label %dec_label_pc_c347.dec_label_pc_c357.outer_crit_edge

dec_label_pc_c347.dec_label_pc_c357.outer_crit_edge: ; preds = %dec_label_pc_c347
  %v0_c35c.pre.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_c357.outer

dec_label_pc_c357.outer:                          ; preds = %dec_label_pc_c347.dec_label_pc_c357.outer_crit_edge, %dec_label_pc_c2fa
  %v0_c35c.pre = phi i64 [ %v0_c35c.pre.pre, %dec_label_pc_c347.dec_label_pc_c357.outer_crit_edge ], [ %v4_c2e1, %dec_label_pc_c2fa ]
  %v0_c35f10 = phi i64 [ %v5_c34e, %dec_label_pc_c347.dec_label_pc_c357.outer_crit_edge ], [ %v2_c2e6, %dec_label_pc_c2fa ]
  %stack_var_-65.1.ph = phi i32 [ %stack_var_-65.0, %dec_label_pc_c347.dec_label_pc_c357.outer_crit_edge ], [ 0, %dec_label_pc_c2fa ]
  br label %dec_label_pc_c357

dec_label_pc_c357:                                ; preds = %dec_label_pc_c357.outer, %dec_label_pc_c37f
  %v0_c35f = phi i64 [ %v0_c35f10, %dec_label_pc_c357.outer ], [ %v5_c38a, %dec_label_pc_c37f ]
  %v0_c35c = phi i64 [ %v0_c35c.pre, %dec_label_pc_c357.outer ], [ %v1_c373, %dec_label_pc_c37f ]
  store i64 %arg1, i64* @rsi, align 8
  %v1_c35c = trunc i64 %v0_c35c to i32
  store i64 %v0_c35c, i64* @rdx, align 8
  store i64 %v0_c35f, i64* @rdi, align 8
  %tmp42 = inttoptr i64 %v0_c35f to i8*
  %v8_c362 = call i32 @strncmp(i8* %tmp42, i8* %v1_c2e1, i32 %v1_c35c)
  %v5_c367 = icmp eq i32 %v8_c362, 0
  %v1_c369 = icmp eq i1 %v5_c367, false
  br i1 %v1_c369, label %dec_label_pc_c347, label %dec_label_pc_c36b

dec_label_pc_c36b:                                ; preds = %dec_label_pc_c357
  %v0_c36b = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_c36b, i64* @rdi, align 8
  %tmp43 = inttoptr i64 %v0_c36b to i8*
  %v3_c36e = call i32 @strlen(i8* %tmp43)
  %v5_c36e = sext i32 %v3_c36e to i64
  %v1_c373 = load i64, i64* %r12.global-to-local, align 8
  %v12_c373 = icmp eq i64 %v5_c36e, %v1_c373
  br i1 %v12_c373, label %dec_label_pc_c3d0, label %dec_label_pc_c378

dec_label_pc_c378:                                ; preds = %dec_label_pc_c36b
  %v2_c378 = load i64, i64* %stack_var_-88, align 8
  %v12_c378 = icmp eq i64 %v2_c378, -1
  %v1_c37d = icmp eq i1 %v12_c378, false
  br i1 %v1_c37d, label %dec_label_pc_c310, label %dec_label_pc_c37f

dec_label_pc_c37f:                                ; preds = %dec_label_pc_c378
  %v0_c37f = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_c37f, i64* %stack_var_-88, align 8
  %v1_c383 = add i64 %v0_c37f, 1
  store i64 %v1_c383, i64* %rbx.global-to-local, align 8
  %v0_c387 = load i64, i64* %rbp.global-to-local, align 8
  %v1_c387 = load i64, i64* %r13.global-to-local, align 8
  %v2_c387 = add i64 %v1_c387, %v0_c387
  store i64 %v2_c387, i64* %rbp.global-to-local, align 8
  %v0_c38a = load i64, i64* %r15.global-to-local, align 8
  %v2_c38a = mul i64 %v1_c383, 8
  %v3_c38a = add i64 %v0_c38a, %v2_c38a
  %v4_c38a = inttoptr i64 %v3_c38a to i64*
  %v5_c38a = load i64, i64* %v4_c38a, align 8
  store i64 %v5_c38a, i64* %r14.global-to-local, align 8
  %v1_c38e = icmp eq i64 %v5_c38a, 0
  %v1_c391 = icmp eq i1 %v1_c38e, false
  br i1 %v1_c391, label %dec_label_pc_c357, label %dec_label_pc_c398

dec_label_pc_c398.loopexit3:                      ; preds = %dec_label_pc_c347
  %v4_c3a4.pre = load i64, i64* %stack_var_-88, align 8
  br label %dec_label_pc_c398

dec_label_pc_c398:                                ; preds = %dec_label_pc_c37f, %dec_label_pc_c398.loopexit3
  %v4_c3a4 = phi i64 [ %v4_c3a4.pre, %dec_label_pc_c398.loopexit3 ], [ %v0_c37f, %dec_label_pc_c37f ]
  %stack_var_-65.2 = phi i32 [ %stack_var_-65.0, %dec_label_pc_c398.loopexit3 ], [ %stack_var_-65.1.ph, %dec_label_pc_c37f ]
  %v4_c398 = trunc i32 %stack_var_-65.2 to i8
  %v11_c398 = icmp eq i8 %v4_c398, 0
  %v5_c3a4 = select i1 %v11_c398, i64 %v4_c3a4, i64 -2
  store i64 %v5_c3a4, i64* %stack_var_-88, align 8
  br label %dec_label_pc_c3ad

dec_label_pc_c3ad:                                ; preds = %dec_label_pc_c3d0, %dec_label_pc_c398, %dec_label_pc_c2c0
  %v2_c3ad = phi i64 [ %v0_c3d0, %dec_label_pc_c3d0 ], [ %v5_c3a4, %dec_label_pc_c398 ], [ -1, %dec_label_pc_c2c0 ]
  %v2_c3b5 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_c3b5, i64* @rbx, align 8
  ret i64 %v2_c3ad

dec_label_pc_c3d0:                                ; preds = %dec_label_pc_c36b
  %v0_c3d0 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_c3d0, i64* %stack_var_-88, align 8
  br label %dec_label_pc_c3ad
}

define i64 @function_c3e0(i8* %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_c3e0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  %tmp30 = ptrtoint i8* %arg1 to i64
  store i64 %tmp30, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_c3e0 = load i64, i64* @rdx, align 8
  %v10_c3e0 = icmp eq i64 %v0_c3e0, -1
  store i64 5, i64* @rdx, align 8
  %v0_c3ec = load i64, i64* @rsi, align 8
  store i64 %v0_c3ec, i64* %r12.global-to-local, align 8
  %v0_c3ef = load i64, i64* @rbx, align 8
  store i64 %v0_c3ef, i64* %stack_var_-24, align 8
  %v0_c3f0 = load i64, i64* @rdi, align 8
  store i64 %v0_c3f0, i64* %rbp.global-to-local, align 8
  br i1 %v10_c3e0, label %dec_label_pc_c440, label %dec_label_pc_c3f5

dec_label_pc_c3f5:                                ; preds = %dec_label_pc_c3e0
  store i64 ptrtoint ([29 x i8]* @global_var_1a2c0.385 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v9_c3fe = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @global_var_1a2c0.385, i64 0, i64 0), i32 5)
  br label %dec_label_pc_c406

dec_label_pc_c406:                                ; preds = %dec_label_pc_c440, %dec_label_pc_c3f5
  %v9_c449.sink = phi i8* [ %v9_c449, %dec_label_pc_c440 ], [ %v9_c3fe, %dec_label_pc_c3f5 ]
  %v11_c449 = ptrtoint i8* %v9_c449.sink to i64
  store i64 %v11_c449, i64* @rax, align 8
  store i64 %v11_c449, i64* %rbx.global-to-local, align 8
  %v0_c406 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_c406, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v4_c40e = call i64 @function_13cc0(i64 1, i64 %v0_c406)
  %v0_c413 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_c413, i64* @rdx, align 8
  store i64 %v4_c40e, i64* %rbp.global-to-local, align 8
  store i64 8, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v6_c420 = call i64 @function_138f0(i32 0, i64 8, i64 %v0_c413)
  store i64 %v4_c40e, i64* @r8, align 8
  %v0_c428 = load i64, i64* %rbx.global-to-local, align 8
  %v1_c428 = inttoptr i64 %v0_c428 to i8*
  store i64 %v0_c428, i64* @rdx, align 8
  store i64 %v6_c420, i64* @rcx, align 8
  %v2_c42e = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_c42e, i64* @rbx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %v1_c428)
  ret i64 ptrtoint (i32* @0 to i64)

dec_label_pc_c440:                                ; preds = %dec_label_pc_c3e0
  store i64 ptrtoint ([27 x i8]* @global_var_1a2a5.386 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v9_c449 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @global_var_1a2a5.386, i64 0, i64 0), i32 5)
  br label %dec_label_pc_c406
}

define i64 @function_c460(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_c460:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_c464 = load i64, i64* @rdi, align 8
  store i64 %v0_c464, i64* %r14.global-to-local, align 8
  store i64 0, i64* @rdi, align 8
  %v0_c46e = load i64, i64* @rbx, align 8
  store i64 %v0_c46e, i64* %stack_var_-48, align 8
  %v0_c46f = load i64, i64* @rsi, align 8
  store i64 %v0_c46f, i64* %rbp.global-to-local, align 8
  store i64 ptrtoint ([21 x i8]* @global_var_1a2dd.387 to i64), i64* @rsi, align 8
  %v0_c479 = load i64, i64* @rdx, align 8
  store i64 %v0_c479, i64* %r12.global-to-local, align 8
  store i64 5, i64* @rdx, align 8
  %v0_c485 = load %_IO_FILE*, %_IO_FILE** @global_var_2202c0.221, align 8
  %v1_c485 = ptrtoint %_IO_FILE* %v0_c485 to i64
  store i64 %v1_c485, i64* %rbx.global-to-local, align 8
  %v9_c48c = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @global_var_1a2dd.387, i64 0, i64 0), i32 5)
  %v11_c48c = ptrtoint i8* %v9_c48c to i64
  store i64 %v11_c48c, i64* %rax.global-to-local, align 8
  store i64 %v11_c48c, i64* @rdi, align 8
  store i64 %v1_c485, i64* @rsi, align 8
  %v6_c497 = call i32 @fputs_unlocked(i8* %v9_c48c, %_IO_FILE* %v0_c485)
  %v8_c497 = sext i32 %v6_c497 to i64
  store i64 %v8_c497, i64* @rax, align 8
  store i64 %v11_c48c, i64* %r15.global-to-local, align 8
  %v1_c49f = icmp eq i8* %v9_c48c, null
  br i1 %v1_c49f, label %dec_label_pc_c538, label %dec_label_pc_c4a8

dec_label_pc_c4a8:                                ; preds = %dec_label_pc_c460
  store i64 0, i64* %r13.global-to-local, align 8
  store i64 0, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_c4e8

dec_label_pc_c4b0:                                ; preds = %dec_label_pc_c4ed.dec_label_pc_c4b0_crit_edge, %dec_label_pc_c4e8
  %v0_c4b3 = phi i64 [ %v0_c4b3.pre, %dec_label_pc_c4ed.dec_label_pc_c4b0_crit_edge ], [ 0, %dec_label_pc_c4e8 ]
  %v0_c4b0 = phi i64 [ %v0_c4b0.pre, %dec_label_pc_c4ed.dec_label_pc_c4b0_crit_edge ], [ %v0_c4b08, %dec_label_pc_c4e8 ]
  store i64 %v0_c4b0, i64* @rdi, align 8
  %v1_c4b3 = add i64 %v0_c4b3, 1
  store i64 %v1_c4b3, i64* %rbx.global-to-local, align 8
  %v0_c4b7 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_c4b7, i64* %r13.global-to-local, align 8
  %v1_c4ba = call i64 @function_13ce0(i64 %v0_c4b0)
  %v0_c4bf = load %_IO_FILE*, %_IO_FILE** @global_var_2202c0.221, align 8
  %v1_c4bf = ptrtoint %_IO_FILE* %v0_c4bf to i64
  store i64 %v1_c4bf, i64* @rdi, align 8
  store i64 ptrtoint ([8 x i8]* @global_var_1a2f2.388 to i64), i64* @rdx, align 8
  %v1_c4cd = inttoptr i64 %v1_c4ba to i8*
  store i64 %v1_c4ba, i64* @rcx, align 8
  store i64 1, i64* @rsi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_c4d7 = load i64, i64* %rbp.global-to-local, align 8
  %v1_c4d7 = load i64, i64* %r12.global-to-local, align 8
  %v2_c4d7 = add i64 %v1_c4d7, %v0_c4d7
  store i64 %v2_c4d7, i64* %rbp.global-to-local, align 8
  %v12_c4da = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v0_c4bf, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_1a2f2.388, i64 0, i64 0), i8* %v1_c4cd)
  %v14_c4da = sext i32 %v12_c4da to i64
  store i64 %v14_c4da, i64* @rax, align 8
  %v0_c4df = load i64, i64* %r14.global-to-local, align 8
  %v1_c4df = load i64, i64* %rbx.global-to-local, align 8
  %v2_c4df = mul i64 %v1_c4df, 8
  %v3_c4df = add i64 %v2_c4df, %v0_c4df
  %v4_c4df = inttoptr i64 %v3_c4df to i64*
  %v5_c4df = load i64, i64* %v4_c4df, align 8
  store i64 %v5_c4df, i64* %r15.global-to-local, align 8
  %v1_c4e3 = icmp eq i64 %v5_c4df, 0
  br i1 %v1_c4e3, label %dec_label_pc_c538, label %dec_label_pc_c4e8

dec_label_pc_c4e8:                                ; preds = %dec_label_pc_c4b0, %dec_label_pc_c4ff, %dec_label_pc_c4a8
  %v0_c4b08 = phi i64 [ %v11_c48c, %dec_label_pc_c4a8 ], [ %v5_c52b, %dec_label_pc_c4ff ], [ %v5_c4df, %dec_label_pc_c4b0 ]
  %v0_c4e8 = phi i64 [ 0, %dec_label_pc_c4a8 ], [ %v1_c52b, %dec_label_pc_c4ff ], [ %v1_c4df, %dec_label_pc_c4b0 ]
  %v1_c4e8 = icmp eq i64 %v0_c4e8, 0
  br i1 %v1_c4e8, label %dec_label_pc_c4b0, label %dec_label_pc_c4ed

dec_label_pc_c4ed:                                ; preds = %dec_label_pc_c4e8
  %v0_c4ed = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_c4ed, i64* @rdx, align 8
  %v0_c4f0 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_c4f0, i64* @rsi, align 8
  %v0_c4f3 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_c4f3, i64* @rdi, align 8
  %v1_c4f6 = inttoptr i64 %v0_c4f3 to i64*
  %v3_c4f6 = inttoptr i64 %v0_c4f0 to i64*
  %v5_c4f6 = trunc i64 %v0_c4ed to i32
  %v6_c4f6 = call i32 @memcmp(i64* %v1_c4f6, i64* %v3_c4f6, i32 %v5_c4f6)
  %v8_c4f6 = sext i32 %v6_c4f6 to i64
  store i64 %v8_c4f6, i64* @rax, align 8
  %v5_c4fb = icmp eq i32 %v6_c4f6, 0
  %v1_c4fd = icmp eq i1 %v5_c4fb, false
  %v0_c4b0.pre = load i64, i64* %r15.global-to-local, align 8
  br i1 %v1_c4fd, label %dec_label_pc_c4ed.dec_label_pc_c4b0_crit_edge, label %dec_label_pc_c4ff

dec_label_pc_c4ed.dec_label_pc_c4b0_crit_edge:    ; preds = %dec_label_pc_c4ed
  %v0_c4b3.pre = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_c4b0

dec_label_pc_c4ff:                                ; preds = %dec_label_pc_c4ed
  store i64 %v0_c4b0.pre, i64* @rdi, align 8
  %v0_c502 = load i64, i64* %rbx.global-to-local, align 8
  %v1_c502 = add i64 %v0_c502, 1
  store i64 %v1_c502, i64* %rbx.global-to-local, align 8
  %v0_c506 = load i64, i64* %rbp.global-to-local, align 8
  %v1_c506 = load i64, i64* %r12.global-to-local, align 8
  %v2_c506 = add i64 %v1_c506, %v0_c506
  store i64 %v2_c506, i64* %rbp.global-to-local, align 8
  %v1_c509 = call i64 @function_13ce0(i64 %v0_c4b0.pre)
  %v0_c50e = load %_IO_FILE*, %_IO_FILE** @global_var_2202c0.221, align 8
  %v1_c50e = ptrtoint %_IO_FILE* %v0_c50e to i64
  store i64 %v1_c50e, i64* @rdi, align 8
  store i64 ptrtoint ([5 x i8]* @global_var_1a2fa.389 to i64), i64* @rdx, align 8
  %v1_c51c = inttoptr i64 %v1_c509 to i8*
  store i64 %v1_c509, i64* @rcx, align 8
  store i64 1, i64* @rsi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v12_c526 = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v0_c50e, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_1a2fa.389, i64 0, i64 0), i8* %v1_c51c)
  %v14_c526 = sext i32 %v12_c526 to i64
  store i64 %v14_c526, i64* @rax, align 8
  %v0_c52b = load i64, i64* %r14.global-to-local, align 8
  %v1_c52b = load i64, i64* %rbx.global-to-local, align 8
  %v2_c52b = mul i64 %v1_c52b, 8
  %v3_c52b = add i64 %v2_c52b, %v0_c52b
  %v4_c52b = inttoptr i64 %v3_c52b to i64*
  %v5_c52b = load i64, i64* %v4_c52b, align 8
  store i64 %v5_c52b, i64* %r15.global-to-local, align 8
  %v1_c52f = icmp eq i64 %v5_c52b, 0
  %v1_c532 = icmp eq i1 %v1_c52f, false
  br i1 %v1_c532, label %dec_label_pc_c4e8, label %dec_label_pc_c538

dec_label_pc_c538:                                ; preds = %dec_label_pc_c4ff, %dec_label_pc_c4b0, %dec_label_pc_c460
  %v0_c538 = load %_IO_FILE*, %_IO_FILE** @global_var_2202c0.221, align 8
  %v1_c538 = ptrtoint %_IO_FILE* %v0_c538 to i64
  store i64 %v1_c538, i64* @rdi, align 8
  %v2_c53f = add i64 %v1_c538, 40
  %v3_c53f = inttoptr i64 %v2_c53f to i64*
  %v4_c53f = load i64, i64* %v3_c53f, align 8
  store i64 %v4_c53f, i64* %rax.global-to-local, align 8
  %v3_c543 = add i64 %v1_c538, 48
  %v4_c543 = inttoptr i64 %v3_c543 to i64*
  %v5_c543 = load i64, i64* %v4_c543, align 8
  %v11_c543 = icmp ult i64 %v4_c53f, %v5_c543
  %v1_c547 = icmp eq i1 %v11_c543, false
  br i1 %v1_c547, label %dec_label_pc_c568, label %dec_label_pc_c549

dec_label_pc_c549:                                ; preds = %dec_label_pc_c538
  %v1_c549 = add i64 %v4_c53f, 1
  store i64 %v1_c549, i64* @rdx, align 8
  store i64 %v1_c549, i64* %v3_c53f, align 8
  %v0_c551 = load i64, i64* %rax.global-to-local, align 8
  %v1_c551 = inttoptr i64 %v0_c551 to i8*
  store i8 10, i8* %v1_c551, align 1
  %v2_c558 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_c558, i64* %rbx.global-to-local, align 8
  %v0_c562 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_c562

dec_label_pc_c568:                                ; preds = %dec_label_pc_c538
  store i64 10, i64* @rsi, align 8
  %v2_c571 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_c571, i64* %rbx.global-to-local, align 8
  %v6_c57b = call i32 @__overflow(%_IO_FILE* %v0_c538, i32 10)
  %v8_c57b = sext i32 %v6_c57b to i64
  store i64 %v8_c57b, i64* %rax.global-to-local, align 8
  ret i64 %v8_c57b
}

define i64 @function_c580(i8* %arg1, i64 %arg2, i8** %arg3, i64* %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_c580:
  store i64 %arg5, i64* @r8, align 8
  %tmp14 = ptrtoint i64* %arg4 to i64
  store i64 %tmp14, i64* @rcx, align 8
  %tmp15 = ptrtoint i8** %arg3 to i64
  store i64 %tmp15, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  %tmp16 = ptrtoint i8* %arg1 to i64
  store i64 %tmp16, i64* @rdi, align 8
  %v0_c584 = load i64, i64* @rdi, align 8
  store i64 %v0_c584, i64* @r14, align 8
  %v0_c58b = load i64, i64* @rsi, align 8
  store i64 %v0_c58b, i64* @r12, align 8
  %v0_c590 = load i64, i64* @rcx, align 8
  store i64 %v0_c590, i64* @rbp, align 8
  %v0_c593 = load i64, i64* @rdx, align 8
  store i64 %v0_c593, i64* @rbx, align 8
  %v0_c596 = load i64, i64* @r8, align 8
  store i64 %v0_c596, i64* @rcx, align 8
  store i64 %v0_c590, i64* @rdx, align 8
  %v1_c5a0 = inttoptr i64 %v0_c593 to i8**
  store i64 %v0_c593, i64* @rsi, align 8
  store i64 %v0_c58b, i64* @rdi, align 8
  store i64 %v0_c596, i64* @r15, align 8
  %v5_c5ac = inttoptr i64 %v0_c590 to i64*
  %v7_c5ac = call i64 @function_c2c0(i64 %v0_c58b, i8** %v1_c5a0, i64* %v5_c5ac, i64 %v0_c596)
  %v2_c5b1 = icmp slt i64 %v7_c5ac, 0
  br i1 %v2_c5b1, label %dec_label_pc_c5c5, label %dec_label_pc_c5b6

dec_label_pc_c5b6:                                ; preds = %dec_label_pc_c5c5, %dec_label_pc_c580
  %v0_c5c4 = phi i64 [ -1, %dec_label_pc_c5c5 ], [ %v7_c5ac, %dec_label_pc_c580 ]
  ret i64 %v0_c5c4

dec_label_pc_c5c5:                                ; preds = %dec_label_pc_c580
  store i64 %v7_c5ac, i64* @rdx, align 8
  %v0_c5c8 = load i64, i64* @r12, align 8
  store i64 %v0_c5c8, i64* @rsi, align 8
  %v0_c5cb = load i64, i64* @r14, align 8
  %v1_c5cb = inttoptr i64 %v0_c5cb to i8*
  store i64 %v0_c5cb, i64* @rdi, align 8
  %v5_c5ce = call i64 @function_c3e0(i8* %v1_c5cb, i64 %v0_c5c8, i64 %v7_c5ac)
  %v0_c5d3 = load i64, i64* @r15, align 8
  store i64 %v0_c5d3, i64* @rdx, align 8
  %v0_c5d6 = load i64, i64* @rbp, align 8
  store i64 %v0_c5d6, i64* @rsi, align 8
  %v0_c5d9 = load i64, i64* @rbx, align 8
  store i64 %v0_c5d9, i64* @rdi, align 8
  %v4_c5dc = call i64 @function_c460(i64 %v0_c5d9, i64 %v0_c5d6, i64 %v0_c5d3)
  br label %dec_label_pc_c5b6
}

define i64 @function_c5f0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_c5f0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-40 = alloca i64, align 8
  %v0_c5f0 = load i64, i64* %r14.global-to-local, align 8
  %v0_c5f2 = load i64, i64* %r13.global-to-local, align 8
  %v0_c5f4 = load i64, i64* %r12.global-to-local, align 8
  %v0_c5f6 = load i64, i64* %rbp.global-to-local, align 8
  %v0_c5f7 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_c5f7, i64* %stack_var_-40, align 8
  %v2_c5f8 = load i64, i64* @rsi, align 8
  store i64 %v2_c5f8, i64* %r14.global-to-local, align 8
  %v1_c5fb = icmp eq i64 %v2_c5f8, 0
  br i1 %v1_c5fb, label %dec_label_pc_c631, label %dec_label_pc_c600

dec_label_pc_c600:                                ; preds = %dec_label_pc_c5f0
  %v0_c600 = load i64, i64* @rcx, align 8
  store i64 %v0_c600, i64* %r12.global-to-local, align 8
  %v0_c603 = load i64, i64* @rdi, align 8
  store i64 %v0_c603, i64* %r13.global-to-local, align 8
  %v0_c606 = load i64, i64* @rdx, align 8
  store i64 %v0_c606, i64* %rbp.global-to-local, align 8
  %v1_c609 = add i64 %v2_c5f8, 8
  store i64 %v1_c609, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_c61f

dec_label_pc_c610:                                ; preds = %dec_label_pc_c61f
  %v0_c610 = load i64, i64* %rbx.global-to-local, align 8
  %v1_c610 = inttoptr i64 %v0_c610 to i64*
  %v2_c610 = load i64, i64* %v1_c610, align 8
  store i64 %v2_c610, i64* %r14.global-to-local, align 8
  %v0_c613 = load i64, i64* %rbp.global-to-local, align 8
  %v1_c613 = load i64, i64* %r12.global-to-local, align 8
  %v2_c613 = add i64 %v1_c613, %v0_c613
  store i64 %v2_c613, i64* %rbp.global-to-local, align 8
  %v1_c616 = add i64 %v0_c610, 8
  store i64 %v1_c616, i64* %rbx.global-to-local, align 8
  %v1_c61a = icmp eq i64 %v2_c610, 0
  br i1 %v1_c61a, label %dec_label_pc_c631.loopexit, label %dec_label_pc_c610.dec_label_pc_c61f_crit_edge

dec_label_pc_c610.dec_label_pc_c61f_crit_edge:    ; preds = %dec_label_pc_c610
  %v0_c625.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_c61f

dec_label_pc_c61f:                                ; preds = %dec_label_pc_c610.dec_label_pc_c61f_crit_edge, %dec_label_pc_c600
  %v0_c625 = phi i64 [ %v0_c625.pre, %dec_label_pc_c610.dec_label_pc_c61f_crit_edge ], [ %v0_c603, %dec_label_pc_c600 ]
  %v0_c622 = phi i64 [ %v2_c613, %dec_label_pc_c610.dec_label_pc_c61f_crit_edge ], [ %v0_c606, %dec_label_pc_c600 ]
  %v0_c61f = phi i64 [ %v1_c613, %dec_label_pc_c610.dec_label_pc_c61f_crit_edge ], [ %v0_c600, %dec_label_pc_c600 ]
  store i64 %v0_c61f, i64* @rdx, align 8
  store i64 %v0_c622, i64* @rsi, align 8
  store i64 %v0_c625, i64* @rdi, align 8
  %v1_c628 = inttoptr i64 %v0_c625 to i64*
  %v3_c628 = inttoptr i64 %v0_c622 to i64*
  %v5_c628 = trunc i64 %v0_c61f to i32
  %v6_c628 = call i32 @memcmp(i64* %v1_c628, i64* %v3_c628, i32 %v5_c628)
  %v5_c62d = icmp eq i32 %v6_c628, 0
  %v1_c62f = icmp eq i1 %v5_c62d, false
  br i1 %v1_c62f, label %dec_label_pc_c610, label %dec_label_pc_c61f.dec_label_pc_c631.loopexit_crit_edge

dec_label_pc_c61f.dec_label_pc_c631.loopexit_crit_edge: ; preds = %dec_label_pc_c61f
  %v0_c632.pre.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_c631.loopexit

dec_label_pc_c631.loopexit:                       ; preds = %dec_label_pc_c610, %dec_label_pc_c61f.dec_label_pc_c631.loopexit_crit_edge
  %v0_c632.pre = phi i64 [ %v0_c632.pre.pre, %dec_label_pc_c61f.dec_label_pc_c631.loopexit_crit_edge ], [ 0, %dec_label_pc_c610 ]
  %v2_c631.pre = load i64, i64* %stack_var_-40, align 8
  br label %dec_label_pc_c631

dec_label_pc_c631:                                ; preds = %dec_label_pc_c631.loopexit, %dec_label_pc_c5f0
  %v0_c632 = phi i64 [ %v0_c632.pre, %dec_label_pc_c631.loopexit ], [ 0, %dec_label_pc_c5f0 ]
  %v2_c631 = phi i64 [ %v2_c631.pre, %dec_label_pc_c631.loopexit ], [ %v0_c5f7, %dec_label_pc_c5f0 ]
  store i64 %v2_c631, i64* %rbx.global-to-local, align 8
  store i64 %v0_c5f6, i64* %rbp.global-to-local, align 8
  store i64 %v0_c5f4, i64* %r12.global-to-local, align 8
  store i64 %v0_c5f2, i64* %r13.global-to-local, align 8
  store i64 %v0_c5f0, i64* %r14.global-to-local, align 8
  ret i64 %v0_c632
}

define i64 @function_c640(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_c640:
  %r12.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %tmp224 = call i64 @__decompiler_undefined_function_0()
  %tmp227 = call i32 @__decompiler_undefined_function_2()
  %stack_var_-216 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_c640 = load i64, i64* @r15, align 8
  %v0_c642 = load i64, i64* @r14, align 8
  %v0_c644 = load i64, i64* @r13, align 8
  %v0_c646 = load i64, i64* @r12, align 8
  %v0_c648 = load i64, i64* @rbp, align 8
  %v0_c649 = load i64, i64* @rbx, align 8
  store i64 %v0_c649, i64* %stack_var_-48, align 8
  store i1 false, i1* %zf.global-to-local, align 1
  %v0_c651 = call i64 @__readfsqword(i64 40)
  %v0_c664 = load i64, i64* @rsi, align 8
  %v1_c666 = trunc i64 %v0_c664 to i32
  %v2_c666 = and i32 %v1_c666, 4
  %v3_c666 = icmp eq i32 %v2_c666, 0
  %v9_c666 = zext i32 %v2_c666 to i64
  %v1_c669 = icmp eq i1 %v3_c666, false
  %v2_c66e = urem i32 %v1_c666, 4
  %v3_c66e = icmp eq i32 %v2_c66e, 0
  %v9_c66e = zext i32 %v2_c66e to i64
  store i64 %v9_c66e, i64* @rsi, align 8
  %v2_c675 = add nsw i64 %v9_c66e, -1
  store i64 %v2_c675, i64* %rax.global-to-local, align 8
  %v4_c67c = trunc i64 %v2_c675 to i32
  %v5_c67c = and i32 %v4_c67c, %v2_c66e
  %v6_c67c = icmp eq i32 %v5_c67c, 0
  store i1 %v6_c67c, i1* %zf.global-to-local, align 1
  %v1_c67e = icmp eq i1 %v6_c67c, false
  br i1 %v1_c67e, label %dec_label_pc_cbd0, label %dec_label_pc_c684

dec_label_pc_c684:                                ; preds = %dec_label_pc_c640
  %v0_c684 = load i64, i64* @rdi, align 8
  %v1_c684 = icmp eq i64 %v0_c684, 0
  store i1 %v1_c684, i1* %zf.global-to-local, align 1
  %v3_c684 = trunc i64 %v0_c684 to i8
  store i64 %v0_c684, i64* @r14, align 8
  br i1 %v1_c684, label %dec_label_pc_cbd0, label %dec_label_pc_c690

dec_label_pc_c690:                                ; preds = %dec_label_pc_c684
  %v3_c690 = urem i64 %v0_c684, 256
  store i64 %v3_c690, i64* %rax.global-to-local, align 8
  %v5_c693 = icmp eq i8 %v3_c684, 0
  store i1 %v5_c693, i1* %zf.global-to-local, align 1
  br i1 %v5_c693, label %dec_label_pc_cc10, label %dec_label_pc_c69b

dec_label_pc_c69b:                                ; preds = %dec_label_pc_c690
  %v11_c69b = icmp eq i8 %v3_c684, 47
  store i1 %v11_c69b, i1* %zf.global-to-local, align 1
  br i1 %v11_c69b, label %dec_label_pc_cb60, label %dec_label_pc_c6a3

dec_label_pc_c6a3:                                ; preds = %dec_label_pc_c69b
  %v4_c6a3 = call i64 @function_14840(i64 %v0_c684, i32 %v2_c66e)
  store i64 %v4_c6a3, i64* %rax.global-to-local, align 8
  %v1_c6a8 = icmp eq i64 %v4_c6a3, 0
  store i1 %v1_c6a8, i1* %zf.global-to-local, align 1
  store i64 %v4_c6a3, i64* @rbp, align 8
  br i1 %v1_c6a8, label %dec_label_pc_c860, label %dec_label_pc_c6b4

dec_label_pc_c6b4:                                ; preds = %dec_label_pc_c6a3
  %v1_c6b4 = inttoptr i64 %v4_c6a3 to i8*
  store i64 %v4_c6a3, i64* @rdi, align 8
  %v3_c6b7 = call i32 @strlen(i8* %v1_c6b4)
  %v5_c6b7 = sext i32 %v3_c6b7 to i64
  store i64 %v5_c6b7, i64* %rax.global-to-local, align 8
  %v10_c6bc = icmp eq i64 %v5_c6b7, ptrtoint (i32* @global_var_fff.310 to i64)
  store i1 %v10_c6bc, i1* %zf.global-to-local, align 1
  store i64 %v5_c6b7, i64* %r15.global-to-local, align 8
  %tmp387 = icmp ugt i64 %v5_c6b7, ptrtoint (i32* @global_var_fff.310 to i64)
  %v0_cb80 = load i64, i64* @rbp, align 8
  br i1 %tmp387, label %dec_label_pc_c6cb, label %dec_label_pc_cb80

dec_label_pc_c6cb:                                ; preds = %dec_label_pc_c6b4
  %v2_c6cb = add i64 %v0_cb80, %v5_c6b7
  %v12_c6cb = icmp eq i64 %v2_c6cb, 0
  store i1 %v12_c6cb, i1* %zf.global-to-local, align 1
  store i64 %v2_c6cb, i64* @r15, align 8
  store i64 %v2_c6cb, i64* @rbx, align 8
  br label %dec_label_pc_c6d1

dec_label_pc_c6d1:                                ; preds = %dec_label_pc_cb80, %dec_label_pc_cb60, %dec_label_pc_c6cb
  %v2_c6d1 = ptrtoint i64* %stack_var_-216 to i64
  store i64 %v2_c6d1, i64* %rax.global-to-local, align 8
  %v0_c6d6 = load i64, i64* @r14, align 8
  %v1_c6fb73 = inttoptr i64 %v0_c6d6 to i8*
  %v2_c6fb74 = load i8, i8* %v1_c6fb73, align 1
  %v3_c6fb75 = zext i8 %v2_c6fb74 to i64
  store i64 %v3_c6fb75, i64* %rax.global-to-local, align 8
  %v5_c6ff76 = icmp eq i8 %v2_c6fb74, 0
  store i1 %v5_c6ff76, i1* %zf.global-to-local, align 1
  br i1 %v5_c6ff76, label %dec_label_pc_c80f, label %dec_label_pc_c710.preheader.lr.ph

dec_label_pc_c710.preheader.lr.ph:                ; preds = %dec_label_pc_c6d1
  %v13_c7c8 = icmp eq i32 %v2_c66e, 2
  %v4_c894 = bitcast i64* %stack_var_-216 to %stat*
  %v1_c7fa = icmp eq i1 %v13_c7c8, false
  %v10_c7db = icmp eq i1 %v1_c669, false
  %v11_c8cd = icmp eq i32 %v2_c66e, 1
  %v1_c8d0 = icmp eq i1 %v11_c8cd, false
  br label %dec_label_pc_c710.preheader

dec_label_pc_c710.preheader:                      ; preds = %dec_label_pc_c710.preheader.lr.ph, %dec_label_pc_c6fb.backedge
  %stack_var_-248.082 = phi i64 [ %v0_c6d6, %dec_label_pc_c710.preheader.lr.ph ], [ %stack_var_-248.1, %dec_label_pc_c6fb.backedge ]
  %v0_c718136 = phi i64 [ %v0_c6d6, %dec_label_pc_c710.preheader.lr.ph ], [ %v0_c6fb, %dec_label_pc_c6fb.backedge ]
  %v0_c710134 = phi i64 [ %v3_c6fb75, %dec_label_pc_c710.preheader.lr.ph ], [ %v3_c6fb, %dec_label_pc_c6fb.backedge ]
  %stack_var_-192.086 = phi i32 [ %tmp227, %dec_label_pc_c710.preheader.lr.ph ], [ %stack_var_-192.1, %dec_label_pc_c6fb.backedge ]
  %stack_var_-240.085 = phi i64 [ 0, %dec_label_pc_c710.preheader.lr.ph ], [ %stack_var_-240.1, %dec_label_pc_c6fb.backedge ]
  %stack_var_-232.084 = phi i64 [ 0, %dec_label_pc_c710.preheader.lr.ph ], [ %stack_var_-232.1, %dec_label_pc_c6fb.backedge ]
  %stack_var_-264.083 = phi i64 [ 0, %dec_label_pc_c710.preheader.lr.ph ], [ %stack_var_-264.1, %dec_label_pc_c6fb.backedge ]
  br label %dec_label_pc_c710

dec_label_pc_c710:                                ; preds = %dec_label_pc_c710.preheader, %dec_label_pc_c800
  %v0_c718135 = phi i64 [ %v0_c800, %dec_label_pc_c800 ], [ %v0_c718136, %dec_label_pc_c710.preheader ]
  %v0_c710 = phi i64 [ %v3_c803, %dec_label_pc_c800 ], [ %v0_c710134, %dec_label_pc_c710.preheader ]
  %stack_var_-248.1 = phi i64 [ %stack_var_-248.2, %dec_label_pc_c800 ], [ %stack_var_-248.082, %dec_label_pc_c710.preheader ]
  %stack_var_-264.1 = phi i64 [ %stack_var_-264.2, %dec_label_pc_c800 ], [ %stack_var_-264.083, %dec_label_pc_c710.preheader ]
  %stack_var_-232.1 = phi i64 [ %stack_var_-232.2, %dec_label_pc_c800 ], [ %stack_var_-232.084, %dec_label_pc_c710.preheader ]
  %stack_var_-240.1 = phi i64 [ %stack_var_-240.2, %dec_label_pc_c800 ], [ %stack_var_-240.085, %dec_label_pc_c710.preheader ]
  %stack_var_-192.1 = phi i32 [ %stack_var_-192.3, %dec_label_pc_c800 ], [ %stack_var_-192.086, %dec_label_pc_c710.preheader ]
  %v1_c710 = trunc i64 %v0_c710 to i8
  %v11_c710 = icmp eq i8 %v1_c710, 47
  store i1 %v11_c710, i1* %zf.global-to-local, align 1
  %v1_c712 = icmp eq i1 %v11_c710, false
  br i1 %v1_c712, label %dec_label_pc_c72c, label %dec_label_pc_c718

dec_label_pc_c718:                                ; preds = %dec_label_pc_c710, %dec_label_pc_c718
  %v0_c718 = phi i64 [ %v1_c718, %dec_label_pc_c718 ], [ %v0_c718135, %dec_label_pc_c710 ]
  %v1_c718 = add i64 %v0_c718, 1
  %v10_c718 = icmp eq i64 %v1_c718, 0
  store i1 %v10_c718, i1* %zf.global-to-local, align 1
  store i64 %v1_c718, i64* @r14, align 8
  %v1_c71c = inttoptr i64 %v1_c718 to i8*
  %v2_c71c = load i8, i8* %v1_c71c, align 1
  %v3_c71c = zext i8 %v2_c71c to i64
  store i64 %v3_c71c, i64* %rax.global-to-local, align 8
  %v11_c720 = icmp eq i8 %v2_c71c, 47
  store i1 %v11_c720, i1* %zf.global-to-local, align 1
  br i1 %v11_c720, label %dec_label_pc_c718, label %dec_label_pc_c724

dec_label_pc_c724:                                ; preds = %dec_label_pc_c718
  %v5_c724 = icmp eq i8 %v2_c71c, 0
  store i1 %v5_c724, i1* %zf.global-to-local, align 1
  br i1 %v5_c724, label %dec_label_pc_c9f0, label %dec_label_pc_c72c

dec_label_pc_c72c:                                ; preds = %dec_label_pc_c724, %dec_label_pc_c710
  %v0_c769143 = phi i64 [ %v3_c71c, %dec_label_pc_c724 ], [ %v0_c710, %dec_label_pc_c710 ]
  %v0_c72c = phi i64 [ %v1_c718, %dec_label_pc_c724 ], [ %v0_c718135, %dec_label_pc_c710 ]
  br label %dec_label_pc_c73d

dec_label_pc_c738:                                ; preds = %dec_label_pc_c73d
  %v11_c738 = icmp eq i8 %v2_c741, 47
  store i1 %v11_c738, i1* %zf.global-to-local, align 1
  br i1 %v11_c738, label %dec_label_pc_c74a, label %dec_label_pc_c73d

dec_label_pc_c73d:                                ; preds = %dec_label_pc_c738, %dec_label_pc_c72c
  %v0_c73d = phi i64 [ %v1_c73d, %dec_label_pc_c738 ], [ %v0_c72c, %dec_label_pc_c72c ]
  %v1_c73d = add i64 %v0_c73d, 1
  %v10_c73d = icmp eq i64 %v1_c73d, 0
  store i1 %v10_c73d, i1* %zf.global-to-local, align 1
  store i64 %v1_c73d, i64* @r13, align 8
  %v1_c741 = inttoptr i64 %v1_c73d to i8*
  %v2_c741 = load i8, i8* %v1_c741, align 1
  %v3_c741 = zext i8 %v2_c741 to i64
  store i64 %v3_c741, i64* @rdx, align 8
  %v5_c746 = icmp eq i8 %v2_c741, 0
  store i1 %v5_c746, i1* %zf.global-to-local, align 1
  %v1_c748 = icmp eq i1 %v5_c746, false
  br i1 %v1_c748, label %dec_label_pc_c738, label %dec_label_pc_c74a

dec_label_pc_c74a:                                ; preds = %dec_label_pc_c738, %dec_label_pc_c73d, %dec_label_pc_c9f0
  %v0_c930 = phi i64 [ %v3_c71c, %dec_label_pc_c9f0 ], [ %v0_c769143, %dec_label_pc_c73d ], [ %v0_c769143, %dec_label_pc_c738 ]
  %v0_c6fb = phi i64 [ %v1_c718, %dec_label_pc_c9f0 ], [ %v1_c73d, %dec_label_pc_c73d ], [ %v1_c73d, %dec_label_pc_c738 ]
  %v0_ca00 = phi i64 [ %v1_c718, %dec_label_pc_c9f0 ], [ %v0_c72c, %dec_label_pc_c73d ], [ %v0_c72c, %dec_label_pc_c738 ]
  %v2_c74a = sub i64 %v0_c6fb, %v0_ca00
  %v12_c74a = icmp eq i64 %v2_c74a, 0
  store i1 %v12_c74a, i1* %zf.global-to-local, align 1
  br i1 %v12_c74a, label %dec_label_pc_c80f, label %dec_label_pc_c753

dec_label_pc_c753:                                ; preds = %dec_label_pc_c74a
  store i64 %v2_c74a, i64* @r12, align 8
  %v10_c759 = icmp eq i64 %v2_c74a, 1
  store i1 %v10_c759, i1* %zf.global-to-local, align 1
  br i1 %v10_c759, label %dec_label_pc_c930, label %dec_label_pc_c763

dec_label_pc_c763:                                ; preds = %dec_label_pc_c753
  %v10_c763 = icmp eq i64 %v2_c74a, 2
  store i1 %v10_c763, i1* %zf.global-to-local, align 1
  %v1_c767 = icmp eq i1 %v10_c763, false
  br i1 %v1_c767, label %dec_label_pc_c771, label %dec_label_pc_c769

dec_label_pc_c769:                                ; preds = %dec_label_pc_c763
  %v1_c769 = trunc i64 %v0_c930 to i8
  %v11_c769 = icmp eq i8 %v1_c769, 46
  store i1 %v11_c769, i1* %zf.global-to-local, align 1
  br i1 %v11_c769, label %dec_label_pc_ca00, label %dec_label_pc_c771

dec_label_pc_c771:                                ; preds = %dec_label_pc_ca00, %dec_label_pc_c930, %dec_label_pc_c769, %dec_label_pc_c763
  %v0_c771 = load i64, i64* @r15, align 8
  %v1_c771 = add i64 %v0_c771, -1
  %v2_c771 = inttoptr i64 %v1_c771 to i8*
  %v3_c771 = load i8, i8* %v2_c771, align 1
  %v13_c771 = icmp eq i8 %v3_c771, 47
  store i1 %v13_c771, i1* %zf.global-to-local, align 1
  br i1 %v13_c771, label %dec_label_pc_c780, label %dec_label_pc_c778

dec_label_pc_c778:                                ; preds = %dec_label_pc_c771
  %v1_c778 = inttoptr i64 %v0_c771 to i8*
  store i8 47, i8* %v1_c778, align 1
  %v0_c77c = load i64, i64* @r15, align 8
  %v1_c77c = add i64 %v0_c77c, 1
  %v10_c77c = icmp eq i64 %v1_c77c, 0
  store i1 %v10_c77c, i1* %zf.global-to-local, align 1
  store i64 %v1_c77c, i64* @r15, align 8
  %v1_c780.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_c780

dec_label_pc_c780:                                ; preds = %dec_label_pc_c778, %dec_label_pc_c771
  %v0_c79e = phi i64 [ %v1_c780.pre, %dec_label_pc_c778 ], [ %v2_c74a, %dec_label_pc_c771 ]
  %v0_c78c = phi i64 [ %v1_c77c, %dec_label_pc_c778 ], [ %v0_c771, %dec_label_pc_c771 ]
  %v3_c780 = add i64 %v0_c78c, %v0_c79e
  store i64 %v3_c780, i64* %rax.global-to-local, align 8
  %v0_c784 = load i64, i64* @rbx, align 8
  %v12_c784 = icmp eq i64 %v0_c784, %v3_c780
  store i1 %v12_c784, i1* %zf.global-to-local, align 1
  %tmp388 = icmp ugt i64 %v0_c784, %v3_c780
  br i1 %tmp388, label %dec_label_pc_c7ba, label %dec_label_pc_c789

dec_label_pc_c789:                                ; preds = %dec_label_pc_c780
  %v1_c789 = load i64, i64* @rbp, align 8
  %v2_c789 = sub i64 %v0_c784, %v1_c789
  %v2_c78c = sub i64 %v0_c78c, %v1_c789
  store i64 %v2_c78c, i64* %r15.global-to-local, align 8
  store i64 %v1_c789, i64* @rdi, align 8
  %v3_c792 = add i64 %v0_c79e, 1
  %v4_c792 = add i64 %v3_c792, %v2_c789
  store i64 %v4_c792, i64* %rax.global-to-local, align 8
  %v1_c797 = add i64 %v2_c789, ptrtoint (i1* @global_var_1000.390 to i64)
  %v1_c79e = sub i64 %v0_c79e, ptrtoint (i1* @global_var_1000.390 to i64)
  %v5_c79e = xor i64 %v0_c79e, ptrtoint (i1* @global_var_1000.390 to i64)
  %v6_c79e = xor i64 %v1_c79e, %v0_c79e
  %v7_c79e = and i64 %v6_c79e, %v5_c79e
  %v8_c79e = icmp slt i64 %v7_c79e, 0
  %v9_c79e = icmp eq i64 %v1_c79e, 0
  store i1 %v9_c79e, i1* %zf.global-to-local, align 1
  %v10_c79e = icmp slt i64 %v1_c79e, 0
  %v2_c7a5 = icmp eq i1 %v10_c79e, %v8_c79e
  %v5_c7a5 = select i1 %v2_c7a5, i64 %v4_c792, i64 %v1_c797
  store i64 %v5_c7a5, i64* @rbx, align 8
  store i64 %v5_c7a5, i64* @rsi, align 8
  %v2_c7ac = call i64 @function_144e0(i64 %v1_c789, i64 %v5_c7a5)
  store i64 %v2_c7ac, i64* %rax.global-to-local, align 8
  store i64 %v2_c7ac, i64* @rbp, align 8
  %v0_c7b4 = load i64, i64* @rbx, align 8
  %v2_c7b4 = add i64 %v0_c7b4, %v2_c7ac
  store i64 %v2_c7b4, i64* @rbx, align 8
  %v0_c7b7 = load i64, i64* %r15.global-to-local, align 8
  %v2_c7b7 = add i64 %v0_c7b7, %v2_c7ac
  %v12_c7b7 = icmp eq i64 %v2_c7b7, 0
  store i1 %v12_c7b7, i1* %zf.global-to-local, align 1
  store i64 %v2_c7b7, i64* @r15, align 8
  %v0_c7bd.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_c7ba

dec_label_pc_c7ba:                                ; preds = %dec_label_pc_c780, %dec_label_pc_c789
  %v0_c7bd = phi i64 [ %v0_c79e, %dec_label_pc_c780 ], [ %v0_c7bd.pre, %dec_label_pc_c789 ]
  %v0_c7ba = phi i64 [ %v0_c78c, %dec_label_pc_c780 ], [ %v2_c7b7, %dec_label_pc_c789 ]
  store i64 %v0_c7ba, i64* @rdi, align 8
  store i64 %v0_c7bd, i64* @rdx, align 8
  %v0_c7c0 = load i64, i64* @r14, align 8
  store i64 %v0_c7c0, i64* @rsi, align 8
  %v1_c7c3 = inttoptr i64 %v0_c7ba to i64*
  %v3_c7c3 = inttoptr i64 %v0_c7c0 to i64*
  %v5_c7c3 = trunc i64 %v0_c7bd to i32
  %v6_c7c3 = call i64* @memcpy(i64* %v1_c7c3, i64* %v3_c7c3, i32 %v5_c7c3)
  %v8_c7c3 = ptrtoint i64* %v6_c7c3 to i64
  store i64 %v8_c7c3, i64* %rax.global-to-local, align 8
  store i1 %v13_c7c8, i1* %zf.global-to-local, align 1
  %v0_c7cd = load i64, i64* @r15, align 8
  %v1_c7cd = load i64, i64* @r12, align 8
  %v3_c7cd = add i64 %v1_c7cd, %v0_c7cd
  store i64 %v3_c7cd, i64* @r15, align 8
  %v1_c7d1 = inttoptr i64 %v3_c7cd to i8*
  store i8 0, i8* %v1_c7d1, align 1
  %v0_c7d5 = load i1, i1* %zf.global-to-local, align 1
  %v1_c7d5 = icmp eq i1 %v0_c7d5, false
  br i1 %v1_c7d5, label %dec_label_pc_c890, label %dec_label_pc_c7db

dec_label_pc_c7db:                                ; preds = %dec_label_pc_c7ba
  store i1 %v10_c7db, i1* %zf.global-to-local, align 1
  br i1 %v10_c7db, label %dec_label_pc_c890, label %dec_label_pc_c7ee

dec_label_pc_c7ee:                                ; preds = %dec_label_pc_c7db, %dec_label_pc_c8cd, %dec_label_pc_c950
  %stack_var_-192.2 = phi i32 [ %stack_var_-192.1, %dec_label_pc_c950 ], [ 0, %dec_label_pc_c8cd ], [ 0, %dec_label_pc_c7db ]
  %v0_c7ee = load i64, i64* @r13, align 8
  %v1_c7ee = inttoptr i64 %v0_c7ee to i8*
  %v2_c7ee = load i8, i8* %v1_c7ee, align 1
  %v9_c7ee = icmp eq i8 %v2_c7ee, 0
  store i1 %v9_c7ee, i1* %zf.global-to-local, align 1
  br i1 %v9_c7ee, label %dec_label_pc_c800, label %dec_label_pc_c7f5

dec_label_pc_c7f5:                                ; preds = %dec_label_pc_c7ee
  store i1 %v13_c7c8, i1* %zf.global-to-local, align 1
  br i1 %v1_c7fa, label %dec_label_pc_cc57, label %dec_label_pc_c800

dec_label_pc_c800:                                ; preds = %dec_label_pc_ca43, %dec_label_pc_ca36, %dec_label_pc_c930, %dec_label_pc_cbf3, %dec_label_pc_cb19, %dec_label_pc_c998, %dec_label_pc_c950, %dec_label_pc_c8f5, %dec_label_pc_c7f5, %dec_label_pc_c7ee
  %stack_var_-248.2 = phi i64 [ %stack_var_-248.1, %dec_label_pc_cbf3 ], [ %v0_cb01, %dec_label_pc_cb19 ], [ %stack_var_-248.1, %dec_label_pc_c998 ], [ %stack_var_-248.1, %dec_label_pc_c950 ], [ %stack_var_-248.1, %dec_label_pc_c7ee ], [ %stack_var_-248.1, %dec_label_pc_c7f5 ], [ %stack_var_-248.1, %dec_label_pc_c8f5 ], [ %stack_var_-248.1, %dec_label_pc_c930 ], [ %stack_var_-248.1, %dec_label_pc_ca36 ], [ %stack_var_-248.1, %dec_label_pc_ca43 ]
  %stack_var_-264.2 = phi i64 [ %stack_var_-264.4, %dec_label_pc_cbf3 ], [ %stack_var_-264.4, %dec_label_pc_cb19 ], [ %stack_var_-264.4, %dec_label_pc_c998 ], [ %stack_var_-264.1, %dec_label_pc_c950 ], [ %stack_var_-264.1, %dec_label_pc_c7ee ], [ %stack_var_-264.1, %dec_label_pc_c7f5 ], [ %stack_var_-264.1, %dec_label_pc_c8f5 ], [ %stack_var_-264.1, %dec_label_pc_c930 ], [ %stack_var_-264.1, %dec_label_pc_ca36 ], [ %stack_var_-264.1, %dec_label_pc_ca43 ]
  %stack_var_-232.2 = phi i64 [ %stack_var_-232.1, %dec_label_pc_cbf3 ], [ %stack_var_-232.3, %dec_label_pc_cb19 ], [ %stack_var_-232.1, %dec_label_pc_c998 ], [ %stack_var_-232.1, %dec_label_pc_c950 ], [ %stack_var_-232.1, %dec_label_pc_c7ee ], [ %stack_var_-232.1, %dec_label_pc_c7f5 ], [ %stack_var_-232.1, %dec_label_pc_c8f5 ], [ %stack_var_-232.1, %dec_label_pc_c930 ], [ %stack_var_-232.1, %dec_label_pc_ca36 ], [ %stack_var_-232.1, %dec_label_pc_ca43 ]
  %stack_var_-240.2 = phi i64 [ %stack_var_-240.1, %dec_label_pc_cbf3 ], [ %stack_var_-240.4, %dec_label_pc_cb19 ], [ %stack_var_-240.1, %dec_label_pc_c998 ], [ %stack_var_-240.1, %dec_label_pc_c950 ], [ %stack_var_-240.1, %dec_label_pc_c7ee ], [ %stack_var_-240.1, %dec_label_pc_c7f5 ], [ %stack_var_-240.1, %dec_label_pc_c8f5 ], [ %stack_var_-240.1, %dec_label_pc_c930 ], [ %stack_var_-240.1, %dec_label_pc_ca36 ], [ %stack_var_-240.1, %dec_label_pc_ca43 ]
  %stack_var_-192.3 = phi i32 [ %stack_var_-192.1, %dec_label_pc_cbf3 ], [ %stack_var_-192.1, %dec_label_pc_cb19 ], [ %stack_var_-192.1, %dec_label_pc_c998 ], [ %stack_var_-192.1, %dec_label_pc_c950 ], [ %stack_var_-192.2, %dec_label_pc_c7ee ], [ %stack_var_-192.2, %dec_label_pc_c7f5 ], [ %stack_var_-192.1, %dec_label_pc_c8f5 ], [ %stack_var_-192.1, %dec_label_pc_c930 ], [ %stack_var_-192.1, %dec_label_pc_ca36 ], [ %stack_var_-192.1, %dec_label_pc_ca43 ]
  %v0_c800 = load i64, i64* @r13, align 8
  store i64 %v0_c800, i64* @r14, align 8
  %v1_c803 = inttoptr i64 %v0_c800 to i8*
  %v2_c803 = load i8, i8* %v1_c803, align 1
  %v3_c803 = zext i8 %v2_c803 to i64
  store i64 %v3_c803, i64* %rax.global-to-local, align 8
  %v5_c807 = icmp eq i8 %v2_c803, 0
  store i1 %v5_c807, i1* %zf.global-to-local, align 1
  %v1_c809 = icmp eq i1 %v5_c807, false
  br i1 %v1_c809, label %dec_label_pc_c710, label %dec_label_pc_c80f

dec_label_pc_c80f:                                ; preds = %dec_label_pc_c6fb.backedge, %dec_label_pc_c800, %dec_label_pc_c74a, %dec_label_pc_c6d1
  %stack_var_-264.3 = phi i64 [ 0, %dec_label_pc_c6d1 ], [ %stack_var_-264.1, %dec_label_pc_c74a ], [ %stack_var_-264.2, %dec_label_pc_c800 ], [ %stack_var_-264.1, %dec_label_pc_c6fb.backedge ]
  %stack_var_-240.3 = phi i64 [ 0, %dec_label_pc_c6d1 ], [ %stack_var_-240.1, %dec_label_pc_c74a ], [ %stack_var_-240.2, %dec_label_pc_c800 ], [ %stack_var_-240.1, %dec_label_pc_c6fb.backedge ]
  %v0_c80f = load i64, i64* @rbp, align 8
  %v1_c80f = add i64 %v0_c80f, 1
  store i64 %v1_c80f, i64* %rax.global-to-local, align 8
  %v0_c813 = load i64, i64* @r15, align 8
  %v12_c813 = icmp eq i64 %v0_c813, %v1_c80f
  store i1 %v12_c813, i1* %zf.global-to-local, align 1
  %tmp389 = icmp ugt i64 %v0_c813, %v1_c80f
  br i1 %tmp389, label %dec_label_pc_c818, label %dec_label_pc_c823

dec_label_pc_c818:                                ; preds = %dec_label_pc_c80f
  %v1_c818 = add i64 %v0_c813, -1
  %v2_c818 = inttoptr i64 %v1_c818 to i8*
  %v3_c818 = load i8, i8* %v2_c818, align 1
  %v13_c818 = icmp eq i8 %v3_c818, 47
  store i1 %v13_c818, i1* %zf.global-to-local, align 1
  %v1_c81d = icmp eq i1 %v13_c818, false
  br i1 %v1_c81d, label %dec_label_pc_c823, label %dec_label_pc_c81f

dec_label_pc_c81f:                                ; preds = %dec_label_pc_c818
  %v10_c81f = icmp eq i64 %v1_c818, 0
  store i1 %v10_c81f, i1* %zf.global-to-local, align 1
  store i64 %v1_c818, i64* @r15, align 8
  br label %dec_label_pc_c823

dec_label_pc_c823:                                ; preds = %dec_label_pc_c80f, %dec_label_pc_c81f, %dec_label_pc_c818
  %v0_c823 = phi i64 [ %v1_c818, %dec_label_pc_c81f ], [ %v0_c813, %dec_label_pc_c818 ], [ %v0_c813, %dec_label_pc_c80f ]
  %v1_c823 = add i64 %v0_c823, 1
  store i64 %v1_c823, i64* %rax.global-to-local, align 8
  %v1_c827 = inttoptr i64 %v0_c823 to i8*
  store i8 0, i8* %v1_c827, align 1
  %v0_c82b = load i64, i64* @rbx, align 8
  %v1_c82b = load i64, i64* %rax.global-to-local, align 8
  %v12_c82b = icmp eq i64 %v0_c82b, %v1_c82b
  store i1 %v12_c82b, i1* %zf.global-to-local, align 1
  br i1 %v12_c82b, label %dec_label_pc_c842, label %dec_label_pc_c830

dec_label_pc_c830:                                ; preds = %dec_label_pc_c823
  %v0_c830 = load i64, i64* @r15, align 8
  %v1_c830 = load i64, i64* @rbp, align 8
  %v2_c830 = sub i64 %v0_c830, %v1_c830
  %v12_c830 = icmp eq i64 %v2_c830, 0
  store i1 %v12_c830, i1* %zf.global-to-local, align 1
  store i64 %v2_c830, i64* @r15, align 8
  store i64 %v1_c830, i64* @rdi, align 8
  %v1_c836 = add i64 %v2_c830, 1
  store i64 %v1_c836, i64* @rsi, align 8
  %v2_c83a = call i64 @function_144e0(i64 %v1_c830, i64 %v1_c836)
  store i64 %v2_c83a, i64* %rax.global-to-local, align 8
  store i64 %v2_c83a, i64* @rbp, align 8
  br label %dec_label_pc_c842

dec_label_pc_c842:                                ; preds = %dec_label_pc_c830, %dec_label_pc_c823
  store i64 %stack_var_-240.3, i64* @rdi, align 8
  %v1_c847 = inttoptr i64 %stack_var_-240.3 to i64*
  call void @free(i64* %v1_c847)
  store i64 %stack_var_-264.3, i64* %rax.global-to-local, align 8
  %v1_c851 = icmp eq i64 %stack_var_-264.3, 0
  store i1 %v1_c851, i1* %zf.global-to-local, align 1
  br i1 %v1_c851, label %dec_label_pc_c860, label %dec_label_pc_c856

dec_label_pc_c856:                                ; preds = %dec_label_pc_c842
  store i64 %stack_var_-264.3, i64* @rdi, align 8
  %v1_c859 = call i64 @function_e350(i64 %stack_var_-264.3)
  store i64 %v1_c859, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_c860

dec_label_pc_c860:                                ; preds = %dec_label_pc_cc10, %dec_label_pc_cbd0, %dec_label_pc_c9dc, %dec_label_pc_c856, %dec_label_pc_c842, %dec_label_pc_c6a3
  store i64 %v0_c651, i64* @rcx, align 8
  %v1_c868 = call i64 @__readfsqword(i64 40)
  %v2_c868 = xor i64 %v1_c868, %v0_c651
  %v3_c868 = icmp eq i64 %v2_c868, 0
  store i1 %v3_c868, i1* %zf.global-to-local, align 1
  store i64 %v2_c868, i64* @rcx, align 8
  %v0_c871 = load i64, i64* @rbp, align 8
  store i64 %v0_c871, i64* %rax.global-to-local, align 8
  %v1_c874 = icmp eq i1 %v3_c868, false
  br i1 %v1_c874, label %dec_label_pc_cc71, label %dec_label_pc_c87a

dec_label_pc_c87a:                                ; preds = %dec_label_pc_c860
  %v0_c87a = load i64, i64* @rsp, align 8
  %v10_c87a = icmp eq i64 %v0_c87a, -232
  store i1 %v10_c87a, i1* %zf.global-to-local, align 1
  %v2_c881 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_c881, i64* @rbx, align 8
  store i64 %v0_c648, i64* @rbp, align 8
  store i64 %v0_c646, i64* @r12, align 8
  store i64 %v0_c644, i64* @r13, align 8
  store i64 %v0_c642, i64* @r14, align 8
  store i64 %v0_c640, i64* @r15, align 8
  ret i64 %v0_c871

dec_label_pc_c890:                                ; preds = %dec_label_pc_c7db, %dec_label_pc_c7ba
  store i64 %v9_c666, i64* %rax.global-to-local, align 8
  store i64 %v2_c6d1, i64* @rdx, align 8
  %v0_c899 = load i64, i64* @rbp, align 8
  %v1_c899 = inttoptr i64 %v0_c899 to i8*
  store i64 %v0_c899, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  store i1 %v3_c666, i1* %zf.global-to-local, align 1
  br i1 %v3_c666, label %dec_label_pc_c960, label %dec_label_pc_c8a9

dec_label_pc_c8a9:                                ; preds = %dec_label_pc_c890
  %v9_c8a9 = call i32 @__xstat(i32 1, i8* %v1_c899, %stat* %v4_c894)
  %v11_c8a9 = sext i32 %v9_c8a9 to i64
  store i64 %v11_c8a9, i64* %rax.global-to-local, align 8
  %v5_c8ae = icmp eq i32 %v9_c8a9, 0
  store i1 %v5_c8ae, i1* %zf.global-to-local, align 1
  %v1_c8b0 = icmp eq i1 %v5_c8ae, false
  %v2_c8b0 = zext i1 %v1_c8b0 to i64
  %v4_c8b0 = and i64 %v11_c8a9, -256
  %v5_c8b0 = or i64 %v2_c8b0, %v4_c8b0
  br label %dec_label_pc_c8b3

dec_label_pc_c8b3:                                ; preds = %dec_label_pc_c960, %dec_label_pc_c8a9
  %storemerge10 = phi i64 [ %v5_c967, %dec_label_pc_c960 ], [ %v5_c8b0, %dec_label_pc_c8a9 ]
  store i64 %storemerge10, i64* %rax.global-to-local, align 8
  %v4_c8b3 = trunc i64 %storemerge10 to i8
  %v5_c8b3 = icmp eq i8 %v4_c8b3, 0
  store i1 %v5_c8b3, i1* %zf.global-to-local, align 1
  br i1 %v5_c8b3, label %dec_label_pc_c940, label %dec_label_pc_c8bb

dec_label_pc_c8bb:                                ; preds = %dec_label_pc_c8b3
  %v0_c8bb = call i32* @__errno_location()
  %v2_c8bb = ptrtoint i32* %v0_c8bb to i64
  store i64 %v2_c8bb, i64* %rax.global-to-local, align 8
  store i64 %v2_c8bb, i64* @r14, align 8
  %v2_c8c3 = load i32, i32* %v0_c8bb, align 4
  %v3_c8c3 = zext i32 %v2_c8c3 to i64
  store i64 %v3_c8c3, i64* @rdx, align 8
  store i64 %v9_c66e, i64* %rax.global-to-local, align 8
  store i1 %v3_c66e, i1* %zf.global-to-local, align 1
  br i1 %v3_c66e, label %dec_label_pc_c8fe, label %dec_label_pc_c8cd

dec_label_pc_c8cd:                                ; preds = %dec_label_pc_c8bb
  store i1 %v11_c8cd, i1* %zf.global-to-local, align 1
  br i1 %v1_c8d0, label %dec_label_pc_c7ee, label %dec_label_pc_c8d6

dec_label_pc_c8d6:                                ; preds = %dec_label_pc_c8cd
  store i64 ptrtoint ([2 x i8]* @global_var_17f4d.291 to i64), i64* @rsi, align 8
  %v0_c8dd = load i64, i64* @r13, align 8
  store i64 %v0_c8dd, i64* @rdi, align 8
  %v1_c8e4 = inttoptr i64 %v0_c8dd to i8*
  %v5_c8e4 = call i32 @strspn(i8* %v1_c8e4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_var_17f4d.291, i64 0, i64 0))
  %v7_c8e4 = sext i32 %v5_c8e4 to i64
  store i64 %v7_c8e4, i64* %rax.global-to-local, align 8
  %v0_c8e9 = load i64, i64* @r13, align 8
  %v3_c8e9 = add i64 %v0_c8e9, %v7_c8e4
  %v4_c8e9 = inttoptr i64 %v3_c8e9 to i8*
  %v5_c8e9 = load i8, i8* %v4_c8e9, align 1
  %v12_c8e9 = icmp eq i8 %v5_c8e9, 0
  store i1 %v12_c8e9, i1* %zf.global-to-local, align 1
  store i64 %v3_c8c3, i64* @rdx, align 8
  %v1_c8f3 = icmp eq i1 %v12_c8e9, false
  br i1 %v1_c8f3, label %dec_label_pc_c8fe, label %dec_label_pc_c8f5

dec_label_pc_c8f5:                                ; preds = %dec_label_pc_c8d6
  %v11_c8f5 = icmp eq i32 %v2_c8c3, 2
  store i1 %v11_c8f5, i1* %zf.global-to-local, align 1
  br i1 %v11_c8f5, label %dec_label_pc_c800, label %dec_label_pc_c8fe

dec_label_pc_c8fe:                                ; preds = %dec_label_pc_c8f5, %dec_label_pc_c8d6, %dec_label_pc_c8bb
  %v0_c8fe = load i64, i64* @r14, align 8
  br label %dec_label_pc_c901

dec_label_pc_c901:                                ; preds = %dec_label_pc_cc57, %dec_label_pc_c8fe
  %v0_c906 = phi i64 [ %v3_c8c3, %dec_label_pc_c8fe ], [ 20, %dec_label_pc_cc57 ]
  %storemerge = phi i64 [ %v0_c8fe, %dec_label_pc_c8fe ], [ %v2_cc57, %dec_label_pc_cc57 ]
  store i64 %storemerge, i64* @r12, align 8
  store i64 %stack_var_-240.1, i64* @rdi, align 8
  %v1_c90a = inttoptr i64 %stack_var_-240.1 to i64*
  call void @free(i64* %v1_c90a)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_c90f = load i64, i64* @rbp, align 8
  store i64 %v0_c90f, i64* @rdi, align 8
  %v1_c912 = inttoptr i64 %v0_c90f to i64*
  call void @free(i64* %v1_c912)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v10_c917 = icmp eq i64 %stack_var_-264.1, 0
  store i1 %v10_c917, i1* %zf.global-to-local, align 1
  store i64 %v0_c906, i64* @rdx, align 8
  br i1 %v10_c917, label %dec_label_pc_c9dc, label %dec_label_pc_c9ca

dec_label_pc_c930:                                ; preds = %dec_label_pc_c753
  %v1_c930 = trunc i64 %v0_c930 to i8
  %v11_c930 = icmp eq i8 %v1_c930, 46
  store i1 %v11_c930, i1* %zf.global-to-local, align 1
  %v1_c932 = icmp eq i1 %v11_c930, false
  br i1 %v1_c932, label %dec_label_pc_c771, label %dec_label_pc_c800

dec_label_pc_c940:                                ; preds = %dec_label_pc_c8b3
  %v2_c944 = and i32 %stack_var_-192.1, 61440
  %v9_c944 = zext i32 %v2_c944 to i64
  store i64 %v9_c944, i64* %rax.global-to-local, align 8
  %v10_c949 = icmp eq i32 %v2_c944, 40960
  store i1 %v10_c949, i1* %zf.global-to-local, align 1
  br i1 %v10_c949, label %dec_label_pc_c970, label %dec_label_pc_c950

dec_label_pc_c950:                                ; preds = %dec_label_pc_c940
  %v10_c950 = icmp eq i32 %v2_c944, 16384
  store i1 %v10_c950, i1* %zf.global-to-local, align 1
  br i1 %v10_c950, label %dec_label_pc_c800, label %dec_label_pc_c7ee

dec_label_pc_c960:                                ; preds = %dec_label_pc_c890
  %v9_c960 = call i32 @__lxstat(i32 1, i8* %v1_c899, %stat* %v4_c894)
  %v11_c960 = sext i32 %v9_c960 to i64
  store i64 %v11_c960, i64* %rax.global-to-local, align 8
  %v5_c965 = icmp eq i32 %v9_c960, 0
  store i1 %v5_c965, i1* %zf.global-to-local, align 1
  %v1_c967 = icmp eq i1 %v5_c965, false
  %v2_c967 = zext i1 %v1_c967 to i64
  %v4_c967 = and i64 %v11_c960, -256
  %v5_c967 = or i64 %v2_c967, %v4_c967
  br label %dec_label_pc_c8b3

dec_label_pc_c970:                                ; preds = %dec_label_pc_c940
  %v10_c970 = icmp eq i64 %stack_var_-264.1, 0
  store i1 %v10_c970, i1* %zf.global-to-local, align 1
  br i1 %v10_c970, label %dec_label_pc_cb26, label %dec_label_pc_c97c

dec_label_pc_c97c:                                ; preds = %dec_label_pc_cb26, %dec_label_pc_c970
  %stack_var_-264.4 = phi i64 [ %v7_cb42, %dec_label_pc_cb26 ], [ %stack_var_-264.1, %dec_label_pc_c970 ]
  store i64 %v2_c6d1, i64* @rdx, align 8
  store i64 %stack_var_-248.1, i64* @rsi, align 8
  store i64 %stack_var_-264.4, i64* @rdi, align 8
  %v3_c98b = call i64 @function_d000(i64 %stack_var_-264.4, i64 %stack_var_-248.1, i64 %v2_c6d1)
  store i64 %v3_c98b, i64* @rax, align 8
  %v4_c990 = trunc i64 %v3_c98b to i8
  %v5_c990 = icmp eq i8 %v4_c990, 0
  store i1 %v5_c990, i1* %zf.global-to-local, align 1
  br i1 %v5_c990, label %dec_label_pc_ca50, label %dec_label_pc_c998

dec_label_pc_c998:                                ; preds = %dec_label_pc_c97c
  store i1 %v13_c7c8, i1* %zf.global-to-local, align 1
  br i1 %v13_c7c8, label %dec_label_pc_c800, label %dec_label_pc_c9a3

dec_label_pc_c9a3:                                ; preds = %dec_label_pc_c998
  %v0_c9a3 = call i32* @__errno_location()
  %v2_c9a3 = ptrtoint i32* %v0_c9a3 to i64
  store i64 %v2_c9a3, i64* %rax.global-to-local, align 8
  store i64 40, i64* @rdx, align 8
  br label %dec_label_pc_c9b0

dec_label_pc_c9b0:                                ; preds = %dec_label_pc_cbe2, %dec_label_pc_cbf3, %dec_label_pc_c9a3
  %v0_c9b5 = phi i64 [ 40, %dec_label_pc_c9a3 ], [ %v3_cbef, %dec_label_pc_cbf3 ], [ %v3_cbef, %dec_label_pc_cbe2 ]
  %storemerge8 = phi i64 [ %v2_c9a3, %dec_label_pc_c9a3 ], [ %v2_cbe2, %dec_label_pc_cbf3 ], [ %v2_cbe2, %dec_label_pc_cbe2 ]
  store i64 %storemerge8, i64* @r12, align 8
  store i64 %stack_var_-240.1, i64* @rdi, align 8
  %v1_c9b9 = inttoptr i64 %stack_var_-240.1 to i64*
  call void @free(i64* %v1_c9b9)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_c9be = load i64, i64* @rbp, align 8
  store i64 %v0_c9be, i64* @rdi, align 8
  %v1_c9c1 = inttoptr i64 %v0_c9be to i64*
  call void @free(i64* %v1_c9c1)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  store i64 %v0_c9b5, i64* @rdx, align 8
  br label %dec_label_pc_c9ca

dec_label_pc_c9ca:                                ; preds = %dec_label_pc_c901, %dec_label_pc_c9b0
  %v0_c9cf = phi i64 [ %v0_c9b5, %dec_label_pc_c9b0 ], [ %v0_c906, %dec_label_pc_c901 ]
  %stack_var_-264.5 = phi i64 [ %stack_var_-264.4, %dec_label_pc_c9b0 ], [ %stack_var_-264.1, %dec_label_pc_c901 ]
  store i64 %stack_var_-264.5, i64* @rdi, align 8
  %v1_c9d3 = call i64 @function_e350(i64 %stack_var_-264.5)
  store i64 %v1_c9d3, i64* %rax.global-to-local, align 8
  store i64 %v0_c9cf, i64* @rdx, align 8
  br label %dec_label_pc_c9dc

dec_label_pc_c9dc:                                ; preds = %dec_label_pc_c9ca, %dec_label_pc_c901
  %v0_c9dc = phi i64 [ %v0_c9cf, %dec_label_pc_c9ca ], [ %v0_c906, %dec_label_pc_c901 ]
  %v1_c9dc = trunc i64 %v0_c9dc to i32
  %v2_c9dc = load i64, i64* @r12, align 8
  %v3_c9dc = inttoptr i64 %v2_c9dc to i32*
  store i32 %v1_c9dc, i32* %v3_c9dc, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rbp, align 8
  br label %dec_label_pc_c860

dec_label_pc_c9f0:                                ; preds = %dec_label_pc_c724
  store i64 %v1_c718, i64* @r13, align 8
  br label %dec_label_pc_c74a

dec_label_pc_ca00:                                ; preds = %dec_label_pc_c769
  %v1_ca00 = add i64 %v0_ca00, 1
  %v2_ca00 = inttoptr i64 %v1_ca00 to i8*
  %v3_ca00 = load i8, i8* %v2_ca00, align 1
  %v13_ca00 = icmp eq i8 %v3_ca00, 46
  store i1 %v13_ca00, i1* %zf.global-to-local, align 1
  %v1_ca05 = icmp eq i1 %v13_ca00, false
  br i1 %v1_ca05, label %dec_label_pc_c771, label %dec_label_pc_ca0b

dec_label_pc_ca0b:                                ; preds = %dec_label_pc_ca00
  %v0_ca0b = load i64, i64* @rbp, align 8
  %v1_ca0b = add i64 %v0_ca0b, 1
  store i64 %v1_ca0b, i64* %rax.global-to-local, align 8
  store i64 %v0_c6fb, i64* @r14, align 8
  %v0_ca12 = load i64, i64* @r15, align 8
  %v12_ca12 = icmp eq i64 %v0_ca12, %v1_ca0b
  store i1 %v12_ca12, i1* %zf.global-to-local, align 1
  %tmp390 = icmp ugt i64 %v0_ca12, %v1_ca0b
  br i1 %tmp390, label %dec_label_pc_ca1b, label %dec_label_pc_c6fb.backedge

dec_label_pc_ca1b:                                ; preds = %dec_label_pc_ca0b
  %v1_ca1b = add i64 %v0_ca12, -1
  store i64 %v1_ca1b, i64* %rax.global-to-local, align 8
  %v7_ca1f = icmp ult i64 %v0_ca0b, %v1_ca1b
  %v12_ca1f = icmp eq i64 %v0_ca0b, %v1_ca1b
  store i1 %v12_ca1f, i1* %zf.global-to-local, align 1
  %v1_ca22 = icmp eq i1 %v7_ca1f, false
  br i1 %v1_ca22, label %dec_label_pc_cc69, label %dec_label_pc_ca28

dec_label_pc_ca28:                                ; preds = %dec_label_pc_ca1b
  %v1_ca28 = add i64 %v0_ca12, -2
  %v2_ca28 = inttoptr i64 %v1_ca28 to i8*
  %v3_ca28 = load i8, i8* %v2_ca28, align 1
  %v13_ca28 = icmp eq i8 %v3_ca28, 47
  store i1 %v13_ca28, i1* %zf.global-to-local, align 1
  store i64 %v1_ca1b, i64* @r15, align 8
  br i1 %v13_ca28, label %dec_label_pc_c6fb.backedge, label %dec_label_pc_ca36

dec_label_pc_ca36:                                ; preds = %dec_label_pc_ca28, %dec_label_pc_ca43
  %v0_ca36 = phi i64 [ %v1_ca36, %dec_label_pc_ca43 ], [ %v1_ca1b, %dec_label_pc_ca28 ]
  %v1_ca36 = add i64 %v0_ca36, -1
  store i64 %v1_ca36, i64* @r15, align 8
  %v12_ca3a = icmp eq i64 %v0_ca0b, %v1_ca36
  store i1 %v12_ca3a, i1* %zf.global-to-local, align 1
  br i1 %v12_ca3a, label %dec_label_pc_c800, label %dec_label_pc_ca43

dec_label_pc_ca43:                                ; preds = %dec_label_pc_ca36
  %v1_ca43 = add i64 %v0_ca36, -2
  %v2_ca43 = inttoptr i64 %v1_ca43 to i8*
  %v3_ca43 = load i8, i8* %v2_ca43, align 1
  %v13_ca43 = icmp eq i8 %v3_ca43, 47
  store i1 %v13_ca43, i1* %zf.global-to-local, align 1
  br i1 %v13_ca43, label %dec_label_pc_c800, label %dec_label_pc_ca36

dec_label_pc_ca50:                                ; preds = %dec_label_pc_c97c
  store i64 %v2_c6d1, i64* @rdx, align 8
  store i64 %stack_var_-248.1, i64* @rsi, align 8
  store i64 %stack_var_-264.4, i64* @rdi, align 8
  %v3_ca5f = call i64 @function_cf70(i64 %stack_var_-264.4, i64 %stack_var_-248.1, i64 %v2_c6d1)
  store i64 %v3_ca5f, i64* %rax.global-to-local, align 8
  %v0_ca69 = load i64, i64* @rbp, align 8
  store i64 %v0_ca69, i64* @rdi, align 8
  %v2_ca6c = call i64 @function_c1c0(i64 %v0_ca69, i64 %tmp224)
  store i64 %v2_ca6c, i64* %rax.global-to-local, align 8
  %v2_ca71 = icmp eq i64 %v2_ca6c, 0
  store i1 %v2_ca71, i1* %zf.global-to-local, align 1
  store i64 %v2_ca6c, i64* %r14.global-to-local, align 8
  br i1 %v2_ca71, label %dec_label_pc_cbe2, label %dec_label_pc_ca7d

dec_label_pc_ca7d:                                ; preds = %dec_label_pc_ca50
  %v3_ca6c = inttoptr i64 %v2_ca6c to i8*
  store i64 %v2_ca6c, i64* @rdi, align 8
  %v3_ca80 = call i32 @strlen(i8* %v3_ca6c)
  %v5_ca80 = sext i32 %v3_ca80 to i64
  store i64 %v5_ca80, i64* %rax.global-to-local, align 8
  %v0_ca85 = load i64, i64* @r13, align 8
  store i64 %v0_ca85, i64* @rdi, align 8
  store i64 %v5_ca80, i64* %r12.global-to-local, align 8
  %v1_ca90 = inttoptr i64 %v0_ca85 to i8*
  %v2_ca90 = call i32 @strlen(i8* %v1_ca90)
  %v4_ca90 = sext i32 %v2_ca90 to i64
  store i64 %v4_ca90, i64* %rax.global-to-local, align 8
  %v10_ca95 = icmp eq i64 %stack_var_-232.1, 0
  store i1 %v10_ca95, i1* %zf.global-to-local, align 1
  store i64 %v4_ca90, i64* @rdx, align 8
  %v0_ca9e = load i64, i64* %r12.global-to-local, align 8
  %v3_ca9e = add nsw i64 %v4_ca90, 1
  %v4_ca9e = add i64 %v0_ca9e, %v3_ca9e
  store i64 %v4_ca9e, i64* @rcx, align 8
  br i1 %v10_ca95, label %dec_label_pc_cb9f, label %dec_label_pc_caa9

dec_label_pc_caa9:                                ; preds = %dec_label_pc_ca7d
  %v10_caa9 = icmp ult i64 %stack_var_-232.1, %v4_ca9e
  %v15_caa9 = icmp eq i64 %stack_var_-232.1, %v4_ca9e
  store i1 %v15_caa9, i1* %zf.global-to-local, align 1
  %v1_caae = icmp eq i1 %v10_caa9, false
  br i1 %v1_caae, label %dec_label_pc_cad1, label %dec_label_pc_cab0

dec_label_pc_cab0:                                ; preds = %dec_label_pc_caa9
  store i64 %stack_var_-240.1, i64* @rdi, align 8
  store i64 %v4_ca9e, i64* @rsi, align 8
  %v2_cac2 = call i64 @function_144e0(i64 %stack_var_-240.1, i64 %v4_ca9e)
  store i64 %v2_cac2, i64* %rax.global-to-local, align 8
  store i64 %v4_ca90, i64* @rdx, align 8
  br label %dec_label_pc_cad1

dec_label_pc_cad1:                                ; preds = %dec_label_pc_cb9f, %dec_label_pc_cab0, %dec_label_pc_caa9
  %stack_var_-232.3 = phi i64 [ %v4_cbb0, %dec_label_pc_cb9f ], [ %stack_var_-232.1, %dec_label_pc_caa9 ], [ %v4_ca9e, %dec_label_pc_cab0 ]
  %stack_var_-240.4 = phi i64 [ %v1_cbbc, %dec_label_pc_cb9f ], [ %stack_var_-240.1, %dec_label_pc_caa9 ], [ %v2_cac2, %dec_label_pc_cab0 ]
  store i64 %stack_var_-240.4, i64* @r12, align 8
  %v16_cadb = trunc i64 %v3_ca9e to i32
  store i64 %v3_ca9e, i64* @rdx, align 8
  %v0_cadf = load i64, i64* @r13, align 8
  store i64 %v0_cadf, i64* @rsi, align 8
  %v2_cae2 = add i64 %stack_var_-240.4, %v5_ca80
  %v12_cae2 = icmp eq i64 %v2_cae2, 0
  store i1 %v12_cae2, i1* %zf.global-to-local, align 1
  store i64 %v2_cae2, i64* @rdi, align 8
  store i64 %stack_var_-240.4, i64* @r13, align 8
  %v1_cae8 = inttoptr i64 %v2_cae2 to i64*
  %v3_cae8 = inttoptr i64 %v0_cadf to i64*
  %v7_cae8 = call i64* @memmove(i64* %v1_cae8, i64* %v3_cae8, i32 %v16_cadb)
  %v9_cae8 = ptrtoint i64* %v7_cae8 to i64
  store i64 %v9_cae8, i64* %rax.global-to-local, align 8
  store i64 %v5_ca80, i64* @rdx, align 8
  %v0_caf2 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_caf2, i64* @rsi, align 8
  %v0_caf5 = load i64, i64* @r12, align 8
  store i64 %v0_caf5, i64* @rdi, align 8
  %v1_caf8 = inttoptr i64 %v0_caf5 to i64*
  %v3_caf8 = inttoptr i64 %v0_caf2 to i64*
  %v6_caf8 = call i64* @memcpy(i64* %v1_caf8, i64* %v3_caf8, i32 %v3_ca80)
  %v8_caf8 = ptrtoint i64* %v6_caf8 to i64
  store i64 %v8_caf8, i64* %rax.global-to-local, align 8
  %v0_cafd = load i64, i64* %r14.global-to-local, align 8
  %v1_cafd = inttoptr i64 %v0_cafd to i8*
  %v2_cafd = load i8, i8* %v1_cafd, align 1
  %v12_cafd = icmp eq i8 %v2_cafd, 47
  store i1 %v12_cafd, i1* %zf.global-to-local, align 1
  %v0_cb01 = load i64, i64* @r12, align 8
  %v0_cb06 = load i64, i64* @rbp, align 8
  %v1_cb06 = add i64 %v0_cb06, 1
  store i64 %v1_cb06, i64* %rax.global-to-local, align 8
  br i1 %v12_cafd, label %dec_label_pc_cc04, label %dec_label_pc_cb10

dec_label_pc_cb10:                                ; preds = %dec_label_pc_cad1
  %v0_cb10 = load i64, i64* @r15, align 8
  %v12_cb10 = icmp eq i64 %v0_cb10, %v1_cb06
  store i1 %v12_cb10, i1* %zf.global-to-local, align 1
  %tmp391 = icmp ugt i64 %v0_cb10, %v1_cb06
  br i1 %tmp391, label %dec_label_pc_cc22, label %dec_label_pc_cb19

dec_label_pc_cb19:                                ; preds = %dec_label_pc_cb10, %dec_label_pc_cc3d.preheader, %dec_label_pc_cc55, %dec_label_pc_cc4a, %dec_label_pc_cc32, %dec_label_pc_cc04
  %v0_cb19 = phi i64 [ %v0_cafd, %dec_label_pc_cb10 ], [ %v0_cafd, %dec_label_pc_cc32 ], [ %v0_cb19.pre, %dec_label_pc_cc04 ], [ %v0_cafd, %dec_label_pc_cc4a ], [ %v0_cafd, %dec_label_pc_cc55 ], [ %v0_cafd, %dec_label_pc_cc3d.preheader ]
  store i64 %v0_cb19, i64* @rdi, align 8
  %v1_cb1c = inttoptr i64 %v0_cb19 to i64*
  call void @free(i64* %v1_cb1c)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_c800

dec_label_pc_cb26:                                ; preds = %dec_label_pc_c970
  store i64 60448, i64* @r8, align 8
  store i64 60384, i64* @rcx, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rsi, align 8
  store i64 60272, i64* @rdx, align 8
  store i64 7, i64* @rdi, align 8
  %v7_cb42 = call i64 @function_e100(i64 7, i32 0, i64 60272, i64 60384, i64 60448)
  store i64 %v7_cb42, i64* %rax.global-to-local, align 8
  %v1_cb47 = icmp eq i64 %v7_cb42, 0
  store i1 %v1_cb47, i1* %zf.global-to-local, align 1
  %v1_cb4f = icmp eq i1 %v1_cb47, false
  br i1 %v1_cb4f, label %dec_label_pc_c97c, label %dec_label_pc_cb55

dec_label_pc_cb55:                                ; preds = %dec_label_pc_cb26
  %v1_cb55 = call i64 @function_146d0(i64 7)
  unreachable

dec_label_pc_cb60:                                ; preds = %dec_label_pc_c69b
  store i64 ptrtoint (i1* @global_var_1000.390 to i64), i64* @rdi, align 8
  %v2_cb65 = call i64 @function_14480(i64 sext (i1 ptrtoint (i1* @global_var_1000.390 to i1) to i64))
  store i64 %v2_cb65, i64* %rax.global-to-local, align 8
  store i64 %v2_cb65, i64* @rbp, align 8
  %v1_cb6d = add i64 %v2_cb65, ptrtoint (i1* @global_var_1000.390 to i64)
  store i64 %v1_cb6d, i64* @rbx, align 8
  %v1_cb74 = add i64 %v2_cb65, 1
  store i64 %v1_cb74, i64* @r15, align 8
  %v1_cb78 = inttoptr i64 %v2_cb65 to i8*
  store i8 47, i8* %v1_cb78, align 1
  br label %dec_label_pc_c6d1

dec_label_pc_cb80:                                ; preds = %dec_label_pc_c6b4
  store i64 %v0_cb80, i64* @rdi, align 8
  store i64 ptrtoint (i1* @global_var_1000.390 to i64), i64* @rsi, align 8
  %v3_cb88 = call i64 @function_144e0(i64 %v0_cb80, i64 sext (i1 ptrtoint (i1* @global_var_1000.390 to i1) to i64))
  store i64 %v3_cb88, i64* %rax.global-to-local, align 8
  store i64 %v3_cb88, i64* @rbp, align 8
  %v0_cb90 = load i64, i64* %r15.global-to-local, align 8
  %v2_cb90 = add i64 %v0_cb90, %v3_cb88
  %v12_cb90 = icmp eq i64 %v2_cb90, 0
  store i1 %v12_cb90, i1* %zf.global-to-local, align 1
  store i64 %v2_cb90, i64* @r15, align 8
  %v1_cb93 = add i64 %v3_cb88, ptrtoint (i1* @global_var_1000.390 to i64)
  store i64 %v1_cb93, i64* @rbx, align 8
  br label %dec_label_pc_c6d1

dec_label_pc_cb9f:                                ; preds = %dec_label_pc_ca7d
  %v4_cb9f = icmp ult i64 %v4_ca9e, ptrtoint (i1* @global_var_1000.390 to i64)
  %v9_cb9f = icmp eq i64 %v4_ca9e, ptrtoint (i1* @global_var_1000.390 to i64)
  store i1 %v9_cb9f, i1* %zf.global-to-local, align 1
  %v1_cbb0 = icmp eq i1 %v4_cb9f, false
  %v4_cbb0 = select i1 %v1_cbb0, i64 %v4_ca9e, i64 ptrtoint (i1* @global_var_1000.390 to i64)
  store i64 %v4_cbb0, i64* %rax.global-to-local, align 8
  store i64 %v4_cbb0, i64* @rdi, align 8
  %v1_cbbc = call i64 @function_14480(i64 %v4_cbb0)
  store i64 %v1_cbbc, i64* %rax.global-to-local, align 8
  store i64 %v4_ca90, i64* @rdx, align 8
  br label %dec_label_pc_cad1

dec_label_pc_cbd0:                                ; preds = %dec_label_pc_c684, %dec_label_pc_c640
  %v0_cbd0 = call i32* @__errno_location()
  %v2_cbd0 = ptrtoint i32* %v0_cbd0 to i64
  store i64 %v2_cbd0, i64* %rax.global-to-local, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rbp, align 8
  store i32 22, i32* %v0_cbd0, align 4
  br label %dec_label_pc_c860

dec_label_pc_cbe2:                                ; preds = %dec_label_pc_ca50
  %v0_cbe2 = call i32* @__errno_location()
  %v2_cbe2 = ptrtoint i32* %v0_cbe2 to i64
  store i64 %v2_cbe2, i64* %rax.global-to-local, align 8
  store i1 %v13_c7c8, i1* %zf.global-to-local, align 1
  store i64 %v2_cbe2, i64* @r14, align 8
  %v2_cbef = load i32, i32* %v0_cbe2, align 4
  %v3_cbef = zext i32 %v2_cbef to i64
  store i64 %v3_cbef, i64* @rdx, align 8
  br i1 %v1_c7fa, label %dec_label_pc_c9b0, label %dec_label_pc_cbf3

dec_label_pc_cbf3:                                ; preds = %dec_label_pc_cbe2
  %v11_cbf3 = icmp eq i32 %v2_cbef, 12
  store i1 %v11_cbf3, i1* %zf.global-to-local, align 1
  %v1_cbf6 = icmp eq i1 %v11_cbf3, false
  br i1 %v1_cbf6, label %dec_label_pc_c800, label %dec_label_pc_c9b0

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cad1
  %v1_cc04 = inttoptr i64 %v0_cb06 to i8*
  store i8 47, i8* %v1_cc04, align 1
  %v0_cc08 = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_cc08, i64* @r15, align 8
  %v0_cb19.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_cb19

dec_label_pc_cc10:                                ; preds = %dec_label_pc_c690
  %v0_cc10 = call i32* @__errno_location()
  %v2_cc10 = ptrtoint i32* %v0_cc10 to i64
  store i64 %v2_cc10, i64* %rax.global-to-local, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rbp, align 8
  store i32 2, i32* %v0_cc10, align 4
  br label %dec_label_pc_c860

dec_label_pc_cc22:                                ; preds = %dec_label_pc_cb10
  %v1_cc22 = add i64 %v0_cb10, -1
  store i64 %v1_cc22, i64* %rax.global-to-local, align 8
  %v7_cc26 = icmp ult i64 %v0_cb06, %v1_cc22
  %v12_cc26 = icmp eq i64 %v0_cb06, %v1_cc22
  store i1 %v12_cc26, i1* %zf.global-to-local, align 1
  %v1_cc29 = icmp eq i1 %v7_cc26, false
  br i1 %v1_cc29, label %dec_label_pc_cc32, label %dec_label_pc_cc2b

dec_label_pc_cc2b:                                ; preds = %dec_label_pc_cc22
  %v1_cc2b = add i64 %v0_cb10, -2
  %v2_cc2b = inttoptr i64 %v1_cc2b to i8*
  %v3_cc2b = load i8, i8* %v2_cc2b, align 1
  %v13_cc2b = icmp eq i8 %v3_cc2b, 47
  store i1 %v13_cc2b, i1* %zf.global-to-local, align 1
  %v1_cc30 = icmp eq i1 %v13_cc2b, false
  br i1 %v1_cc30, label %dec_label_pc_cc3d.preheader, label %dec_label_pc_cc32

dec_label_pc_cc3d.preheader:                      ; preds = %dec_label_pc_cc2b
  store i64 %v1_cc2b, i64* @r15, align 8
  %v12_cc41330 = icmp eq i64 %v0_cb06, %v1_cc2b
  store i1 %v12_cc41330, i1* %zf.global-to-local, align 1
  br i1 %v12_cc41330, label %dec_label_pc_cb19, label %dec_label_pc_cc4a

dec_label_pc_cc32:                                ; preds = %dec_label_pc_cc2b, %dec_label_pc_cc22
  store i64 %v1_cc22, i64* @r15, align 8
  br label %dec_label_pc_cb19

dec_label_pc_cc4a:                                ; preds = %dec_label_pc_cc3d.preheader, %dec_label_pc_cc55
  %v0_cc3d332 = phi i64 [ %v1_cc3d333, %dec_label_pc_cc55 ], [ %v1_cc22, %dec_label_pc_cc3d.preheader ]
  %v1_cc3d333 = phi i64 [ %v1_cc3d, %dec_label_pc_cc55 ], [ %v1_cc2b, %dec_label_pc_cc3d.preheader ]
  %v1_cc4a = add i64 %v0_cc3d332, -2
  %v2_cc4a = inttoptr i64 %v1_cc4a to i8*
  %v3_cc4a = load i8, i8* %v2_cc4a, align 1
  %v13_cc4a = icmp eq i8 %v3_cc4a, 47
  store i1 %v13_cc4a, i1* %zf.global-to-local, align 1
  br i1 %v13_cc4a, label %dec_label_pc_cb19, label %dec_label_pc_cc55

dec_label_pc_cc55:                                ; preds = %dec_label_pc_cc4a
  store i64 %v1_cc3d333, i64* %rax.global-to-local, align 8
  %v1_cc3d = add i64 %v1_cc3d333, -1
  store i64 %v1_cc3d, i64* @r15, align 8
  %v12_cc41 = icmp eq i64 %v0_cb06, %v1_cc3d
  store i1 %v12_cc41, i1* %zf.global-to-local, align 1
  br i1 %v12_cc41, label %dec_label_pc_cb19, label %dec_label_pc_cc4a

dec_label_pc_cc57:                                ; preds = %dec_label_pc_c7f5
  %v0_cc57 = call i32* @__errno_location()
  %v2_cc57 = ptrtoint i32* %v0_cc57 to i64
  store i64 %v2_cc57, i64* %rax.global-to-local, align 8
  store i64 20, i64* @rdx, align 8
  br label %dec_label_pc_c901

dec_label_pc_cc69:                                ; preds = %dec_label_pc_ca1b
  store i64 %v1_ca1b, i64* @r15, align 8
  br label %dec_label_pc_c6fb.backedge

dec_label_pc_c6fb.backedge:                       ; preds = %dec_label_pc_ca0b, %dec_label_pc_ca28, %dec_label_pc_cc69
  %v1_c6fb = inttoptr i64 %v0_c6fb to i8*
  %v2_c6fb = load i8, i8* %v1_c6fb, align 1
  %v3_c6fb = zext i8 %v2_c6fb to i64
  store i64 %v3_c6fb, i64* %rax.global-to-local, align 8
  %v5_c6ff = icmp eq i8 %v2_c6fb, 0
  store i1 %v5_c6ff, i1* %zf.global-to-local, align 1
  br i1 %v5_c6ff, label %dec_label_pc_c80f, label %dec_label_pc_c710.preheader

dec_label_pc_cc71:                                ; preds = %dec_label_pc_c860
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_cc80 = load i64, i64* @rdi, align 8
  %v1_cc80 = trunc i64 %v0_cc80 to i32
  store i32 %v1_cc80, i32* @global_var_2213d8.391, align 4
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_cc90(i64 %arg1) local_unnamed_addr {
dec_label_pc_cc90:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_cc90 = trunc i64 %arg1 to i8
  store i8 %v1_cc90, i8* @global_var_2213d0.392, align 1
  %v0_cc97 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_cc97
}

define i64 @function_cca0() local_unnamed_addr {
dec_label_pc_cca0:
  %rbp.global-to-local = alloca i64, align 8
  %v0_cca0 = load i64, i64* @rbp, align 8
  %v0_cca6 = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_cca6 = ptrtoint %_IO_FILE* %v0_cca6 to i64
  store i64 %v1_cca6, i64* @rdi, align 8
  %v2_ccad = call i64 @function_15c70(i64 %v1_cca6)
  %v4_ccb2 = trunc i64 %v2_ccad to i32
  %v5_ccb2 = icmp eq i32 %v4_ccb2, 0
  br i1 %v5_ccb2, label %dec_label_pc_cccc, label %dec_label_pc_ccb6

dec_label_pc_ccb6:                                ; preds = %dec_label_pc_cca0
  %v0_ccb6 = call i32* @__errno_location()
  %v2_ccb6 = ptrtoint i32* %v0_ccb6 to i64
  %v0_ccbb = load i8, i8* @global_var_2213d0.392, align 1
  %v7_ccbb = icmp eq i8 %v0_ccbb, 0
  store i64 %v2_ccb6, i64* @rbx, align 8
  br i1 %v7_ccbb, label %dec_label_pc_cce3, label %dec_label_pc_ccc7

dec_label_pc_ccc7:                                ; preds = %dec_label_pc_ccb6
  %v2_ccc7 = load i32, i32* %v0_ccb6, align 4
  %v11_ccc7 = icmp eq i32 %v2_ccc7, 32
  %v1_ccca = icmp eq i1 %v11_ccc7, false
  br i1 %v1_ccca, label %dec_label_pc_cce3, label %dec_label_pc_cccc

dec_label_pc_cccc:                                ; preds = %dec_label_pc_ccc7, %dec_label_pc_cca0
  %v0_cccc = load %_IO_FILE*, %_IO_FILE** @global_var_2202c0.221, align 8
  %v1_cccc = ptrtoint %_IO_FILE* %v0_cccc to i64
  store i64 %v1_cccc, i64* @rdi, align 8
  %v2_ccd3 = call i64 @function_15c70(i64 %v1_cccc)
  %v4_ccd8 = trunc i64 %v2_ccd3 to i32
  %v5_ccd8 = icmp eq i32 %v4_ccd8, 0
  %v1_ccda = icmp eq i1 %v5_ccd8, false
  br i1 %v1_ccda, label %dec_label_pc_cd22, label %dec_label_pc_ccdc

dec_label_pc_ccdc:                                ; preds = %dec_label_pc_cccc
  store i64 %v0_cca0, i64* %rbp.global-to-local, align 8
  ret i64 %v2_ccd3

dec_label_pc_cce3:                                ; preds = %dec_label_pc_ccc7, %dec_label_pc_ccb6
  store i64 ptrtoint ([12 x i8]* @global_var_1a2ff.393 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_ccf1 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_1a2ff.393, i64 0, i64 0), i32 5)
  %v11_ccf1 = ptrtoint i8* %v9_ccf1 to i64
  %v0_ccf6 = load i32, i32* @global_var_2213d8.391, align 4
  %v1_ccf6 = sext i32 %v0_ccf6 to i64
  store i64 %v1_ccf6, i64* @rdi, align 8
  store i64 %v11_ccf1, i64* %rbp.global-to-local, align 8
  %v2_cd00 = icmp eq i32 %v0_ccf6, 0
  br i1 %v2_cd00, label %dec_label_pc_cd2d, label %dec_label_pc_cd05

dec_label_pc_cd05:                                ; preds = %dec_label_pc_cce3
  %v2_cd05 = call i64 @function_13ae0(i64 %v1_ccf6)
  %v0_cd0a = load i64, i64* @rbx, align 8
  %v1_cd0a = inttoptr i64 %v0_cd0a to i32*
  %v2_cd0a = load i32, i32* %v1_cd0a, align 4
  %v3_cd0a = zext i32 %v2_cd0a to i64
  store i64 %v3_cd0a, i64* @rsi, align 8
  store i64 ptrtoint ([7 x i8]* @global_var_17dd8.124 to i64), i64* @rdx, align 8
  %v1_cd13 = inttoptr i64 %v2_cd05 to i8*
  store i64 %v2_cd05, i64* @rcx, align 8
  %v0_cd16 = load i64, i64* %rbp.global-to-local, align 8
  %v1_cd16 = inttoptr i64 %v0_cd16 to i8*
  store i64 %v0_cd16, i64* @r8, align 8
  store i64 0, i64* @rdi, align 8
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %v2_cd0a, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_17dd8.124, i64 0, i64 0), i8* %v1_cd13, i8* %v1_cd16)
  br label %dec_label_pc_cd22

dec_label_pc_cd22:                                ; preds = %dec_label_pc_cd2d, %dec_label_pc_cd05, %dec_label_pc_cccc
  %v0_cd22 = load i32, i32* @global_var_2201f8.9, align 4
  %v1_cd22 = zext i32 %v0_cd22 to i64
  store i64 %v1_cd22, i64* @rdi, align 8
  call void @_exit(i32 %v0_cd22)
  unreachable

dec_label_pc_cd2d:                                ; preds = %dec_label_pc_cce3
  %v0_cd2d = load i64, i64* @rbx, align 8
  %v1_cd2d = inttoptr i64 %v0_cd2d to i32*
  %v2_cd2d = load i32, i32* %v1_cd2d, align 4
  %v3_cd2d = zext i32 %v2_cd2d to i64
  store i64 %v3_cd2d, i64* @rsi, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_1a2fc.247 to i64), i64* @rdx, align 8
  store i64 %v11_ccf1, i64* @rcx, align 8
  store i64 0, i64* @rdi, align 8
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %v2_cd2d, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1a2fc.247, i64 0, i64 0), i8* %v9_ccf1)
  br label %dec_label_pc_cd22
}

define i64 @function_cd50(i64 %arg1) local_unnamed_addr {
dec_label_pc_cd50:
  store i64 %arg1, i64* @rdi, align 8
  %v2_cd5b = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v12_cd5b = icmp eq i8 %v2_cd5b, 47
  %v1_cd5e = zext i1 %v12_cd5b to i64
  %v1_cd62 = load i64, i64* @rsi, align 8
  %v2_cd62 = call i64 @function_ce10(i64 %arg1, i64 %v1_cd62)
  %v2_cd6a = sub i64 %v2_cd62, %arg1
  store i64 %v2_cd6a, i64* @rcx, align 8
  %tmp27 = icmp ugt i64 %v2_cd6a, %v1_cd5e
  br i1 %tmp27, label %dec_label_pc_cd72, label %dec_label_pc_cda0

dec_label_pc_cd72:                                ; preds = %dec_label_pc_cd50
  %v1_cd72 = add i64 %v2_cd62, -1
  %v2_cd72 = inttoptr i64 %v1_cd72 to i8*
  %v3_cd72 = load i8, i8* %v2_cd72, align 1
  %v13_cd72 = icmp eq i8 %v3_cd72, 47
  %v1_cd76 = add i64 %v2_cd6a, -1
  store i64 %v1_cd76, i64* @rdx, align 8
  br i1 %v13_cd72, label %dec_label_pc_cd8e.preheader, label %dec_label_pc_cda0

dec_label_pc_cd8e.preheader:                      ; preds = %dec_label_pc_cd72
  %v3_cd80 = add i64 %arg1, -1
  %v12_cd8e20 = icmp eq i64 %v1_cd5e, %v1_cd76
  %v1_cd9122 = icmp eq i1 %v12_cd8e20, false
  br i1 %v1_cd9122, label %dec_label_pc_cd80, label %dec_label_pc_cd93

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd8e.preheader, %dec_label_pc_cd8b
  %v0_cd9723 = phi i64 [ %v1_cd85, %dec_label_pc_cd8b ], [ %v1_cd76, %dec_label_pc_cd8e.preheader ]
  %v4_cd80 = add i64 %v3_cd80, %v0_cd9723
  %v5_cd80 = inttoptr i64 %v4_cd80 to i8*
  %v6_cd80 = load i8, i8* %v5_cd80, align 1
  %v16_cd80 = icmp eq i8 %v6_cd80, 47
  %v1_cd85 = add i64 %v0_cd9723, -1
  %v1_cd89 = icmp eq i1 %v16_cd80, false
  br i1 %v1_cd89, label %dec_label_pc_cd93, label %dec_label_pc_cd8b

dec_label_pc_cd8b:                                ; preds = %dec_label_pc_cd80
  store i64 %v1_cd85, i64* @rdx, align 8
  %v12_cd8e = icmp eq i64 %v1_cd5e, %v1_cd85
  %v1_cd91 = icmp eq i1 %v12_cd8e, false
  br i1 %v1_cd91, label %dec_label_pc_cd80, label %dec_label_pc_cd93

dec_label_pc_cd93:                                ; preds = %dec_label_pc_cd8b, %dec_label_pc_cd80, %dec_label_pc_cd8e.preheader
  %v0_cd97.lcssa = phi i64 [ %v1_cd76, %dec_label_pc_cd8e.preheader ], [ %v0_cd9723, %dec_label_pc_cd80 ], [ %v1_cd85, %dec_label_pc_cd8b ]
  ret i64 %v0_cd97.lcssa

dec_label_pc_cda0:                                ; preds = %dec_label_pc_cd50, %dec_label_pc_cd72
  store i64 %v2_cd6a, i64* @rdx, align 8
  ret i64 %v2_cd6a
}

define i64 @function_cdb0(i64 %arg1) local_unnamed_addr {
dec_label_pc_cdb0:
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_cdb0 = load i64, i64* @rbp, align 8
  %v0_cdb1 = load i64, i64* @rbx, align 8
  store i64 %v0_cdb1, i64* %stack_var_-16, align 8
  store i64 %arg1, i64* @rbp, align 8
  %v1_cdb9 = call i64 @function_cd50(i64 %arg1)
  %v1_cdbe = icmp eq i64 %v1_cdb9, 0
  store i64 %v1_cdb9, i64* %rbx.global-to-local, align 8
  %v1_cdc4 = zext i1 %v1_cdbe to i64
  %v3_cdc4 = and i64 %v1_cdb9, -256
  %v4_cdc4 = or i64 %v1_cdc4, %v3_cdc4
  %v3_cdca = add i64 %v1_cdb9, 1
  %v4_cdca = add i64 %v3_cdca, %v4_cdc4
  %v5_cdca = trunc i64 %v4_cdca to i32
  store i64 %v4_cdca, i64* @rdi, align 8
  %v3_cdcf = call i64* @malloc(i32 %v5_cdca)
  %v4_cdcf = ptrtoint i64* %v3_cdcf to i64
  %v1_cdd4 = icmp eq i64* %v3_cdcf, null
  store i64 %v4_cdcf, i64* @rcx, align 8
  br i1 %v1_cdd4, label %dec_label_pc_cdf6, label %dec_label_pc_cddc

dec_label_pc_cddc:                                ; preds = %dec_label_pc_cdb0
  %v0_cddc = load i64, i64* %rbx.global-to-local, align 8
  %v1_cddc = trunc i64 %v0_cddc to i32
  store i64 %v0_cddc, i64* @rdx, align 8
  %v0_cddf = load i64, i64* @rbp, align 8
  store i64 %v0_cddf, i64* @rsi, align 8
  store i64 %v4_cdcf, i64* @rdi, align 8
  %v3_cde5 = inttoptr i64 %v0_cddf to i64*
  %v7_cde5 = call i64* @memcpy(i64* nonnull %v3_cdcf, i64* %v3_cde5, i32 %v1_cddc)
  %v9_cde5 = ptrtoint i64* %v7_cde5 to i64
  %v0_cdea = load i64, i64* %rbx.global-to-local, align 8
  %v1_cdea = icmp eq i64 %v0_cdea, 0
  store i64 %v9_cde5, i64* @rcx, align 8
  br i1 %v1_cdea, label %dec_label_pc_ce00, label %dec_label_pc_cdf2

dec_label_pc_cdf2:                                ; preds = %dec_label_pc_ce00, %dec_label_pc_cddc
  %v1_cdf2 = phi i64 [ 1, %dec_label_pc_ce00 ], [ %v0_cdea, %dec_label_pc_cddc ]
  %v0_cdf2 = phi i64 [ %v0_cdf2.pre, %dec_label_pc_ce00 ], [ %v9_cde5, %dec_label_pc_cddc ]
  %v3_cdf2 = add i64 %v0_cdf2, %v1_cdf2
  %v4_cdf2 = inttoptr i64 %v3_cdf2 to i8*
  store i8 0, i8* %v4_cdf2, align 1
  %v0_cdfa.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_cdf6

dec_label_pc_cdf6:                                ; preds = %dec_label_pc_cdf2, %dec_label_pc_cdb0
  %v0_cdfa = phi i64 [ %v0_cdfa.pre, %dec_label_pc_cdf2 ], [ %v4_cdcf, %dec_label_pc_cdb0 ]
  %v2_cdfd = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_cdfd, i64* @rbx, align 8
  store i64 %v0_cdb0, i64* @rbp, align 8
  ret i64 %v0_cdfa

dec_label_pc_ce00:                                ; preds = %dec_label_pc_cddc
  %v1_ce00 = bitcast i64* %v7_cde5 to i8*
  store i8 46, i8* %v1_ce00, align 1
  store i64 1, i64* %rbx.global-to-local, align 8
  %v0_cdf2.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_cdf2
}

define i64 @function_ce10(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_ce10:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %tmp = trunc i64 %arg1 to i8
  %v3_ce10 = urem i64 %arg1, 256
  store i64 %v3_ce10, i64* @rdx, align 8
  %v11_ce16 = icmp eq i8 %tmp, 47
  %v1_ce19 = icmp eq i1 %v11_ce16, false
  br i1 %v1_ce19, label %dec_label_pc_ce2c, label %dec_label_pc_ce20

dec_label_pc_ce20:                                ; preds = %dec_label_pc_ce10, %dec_label_pc_ce20
  %v0_ce20 = phi i64 [ %v1_ce20, %dec_label_pc_ce20 ], [ %arg1, %dec_label_pc_ce10 ]
  %v1_ce20 = add i64 %v0_ce20, 1
  %v1_ce24 = inttoptr i64 %v1_ce20 to i8*
  %v2_ce24 = load i8, i8* %v1_ce24, align 1
  %v3_ce24 = zext i8 %v2_ce24 to i64
  store i64 %v3_ce24, i64* @rdx, align 8
  %v11_ce27 = icmp eq i8 %v2_ce24, 47
  br i1 %v11_ce27, label %dec_label_pc_ce20, label %dec_label_pc_ce2c

dec_label_pc_ce2c:                                ; preds = %dec_label_pc_ce20, %dec_label_pc_ce10
  %v0_ce30 = phi i64 [ %arg1, %dec_label_pc_ce10 ], [ %v1_ce20, %dec_label_pc_ce20 ]
  %v0_ce2c = phi i64 [ %v3_ce10, %dec_label_pc_ce10 ], [ %v3_ce24, %dec_label_pc_ce20 ]
  %v5_ce2c = icmp eq i64 %v0_ce2c, 0
  br i1 %v5_ce2c, label %dec_label_pc_ce6a, label %dec_label_pc_ce30

dec_label_pc_ce30:                                ; preds = %dec_label_pc_ce2c
  store i64 %v0_ce30, i64* @rcx, align 8
  store i64 0, i64* @rsi, align 8
  br label %dec_label_pc_ce55.outer

dec_label_pc_ce40:                                ; preds = %dec_label_pc_ce55
  %v4_ce40 = trunc i64 %v0_ce40 to i8
  %v5_ce40 = icmp eq i8 %v4_ce40, 0
  br i1 %v5_ce40, label %dec_label_pc_ce4a, label %dec_label_pc_ce45

dec_label_pc_ce45:                                ; preds = %dec_label_pc_ce40
  store i64 0, i64* @rsi, align 8
  br label %dec_label_pc_ce4a

dec_label_pc_ce4a:                                ; preds = %dec_label_pc_ce45, %dec_label_pc_ce40
  %v0_ce6a17 = phi i64 [ %v0_ce4a, %dec_label_pc_ce45 ], [ %v0_ce6a18.ph, %dec_label_pc_ce40 ]
  %v0_ce4014 = phi i64 [ 0, %dec_label_pc_ce45 ], [ %v0_ce40, %dec_label_pc_ce40 ]
  %v1_ce4a = add i64 %v0_ce4a, 1
  store i64 %v1_ce4a, i64* @rcx, align 8
  %v1_ce4e = inttoptr i64 %v1_ce4a to i8*
  %v2_ce4e = load i8, i8* %v1_ce4e, align 1
  %v3_ce4e = zext i8 %v2_ce4e to i64
  store i64 %v3_ce4e, i64* @rdx, align 8
  %v5_ce51 = icmp eq i8 %v2_ce4e, 0
  br i1 %v5_ce51, label %dec_label_pc_ce6a, label %dec_label_pc_ce55.outer

dec_label_pc_ce55.outer:                          ; preds = %dec_label_pc_ce4a, %dec_label_pc_ce30
  %v0_ce6a18.ph = phi i64 [ %v0_ce6a17, %dec_label_pc_ce4a ], [ %v0_ce30, %dec_label_pc_ce30 ]
  %v0_ce4a.ph = phi i64 [ %v1_ce4a, %dec_label_pc_ce4a ], [ %v0_ce30, %dec_label_pc_ce30 ]
  %v0_ce40.ph = phi i64 [ %v0_ce4014, %dec_label_pc_ce4a ], [ 0, %dec_label_pc_ce30 ]
  %v0_ce55.ph = phi i64 [ %v3_ce4e, %dec_label_pc_ce4a ], [ %v0_ce2c, %dec_label_pc_ce30 ]
  br label %dec_label_pc_ce55

dec_label_pc_ce55:                                ; preds = %dec_label_pc_ce55.outer, %dec_label_pc_ce5a
  %v0_ce40 = phi i64 [ 1, %dec_label_pc_ce5a ], [ %v0_ce40.ph, %dec_label_pc_ce55.outer ]
  %v0_ce4a = phi i64 [ %v1_ce5a, %dec_label_pc_ce5a ], [ %v0_ce4a.ph, %dec_label_pc_ce55.outer ]
  %v0_ce55 = phi i64 [ %v3_ce5e, %dec_label_pc_ce5a ], [ %v0_ce55.ph, %dec_label_pc_ce55.outer ]
  %v1_ce55 = trunc i64 %v0_ce55 to i8
  %v11_ce55 = icmp eq i8 %v1_ce55, 47
  %v1_ce58 = icmp eq i1 %v11_ce55, false
  br i1 %v1_ce58, label %dec_label_pc_ce40, label %dec_label_pc_ce5a

dec_label_pc_ce5a:                                ; preds = %dec_label_pc_ce55
  %v1_ce5a = add i64 %v0_ce4a, 1
  store i64 %v1_ce5a, i64* @rcx, align 8
  %v1_ce5e = inttoptr i64 %v1_ce5a to i8*
  %v2_ce5e = load i8, i8* %v1_ce5e, align 1
  %v3_ce5e = zext i8 %v2_ce5e to i64
  store i64 %v3_ce5e, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %v5_ce66 = icmp eq i8 %v2_ce5e, 0
  %v1_ce68 = icmp eq i1 %v5_ce66, false
  br i1 %v1_ce68, label %dec_label_pc_ce55, label %dec_label_pc_ce6a

dec_label_pc_ce6a:                                ; preds = %dec_label_pc_ce5a, %dec_label_pc_ce4a, %dec_label_pc_ce2c
  %v0_ce6a = phi i64 [ %v0_ce30, %dec_label_pc_ce2c ], [ %v0_ce6a18.ph, %dec_label_pc_ce5a ], [ %v0_ce6a17, %dec_label_pc_ce4a ]
  ret i64 %v0_ce6a
}

define i64 @function_ce70(i64 %arg1) local_unnamed_addr {
dec_label_pc_ce70:
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_ce70 = load i64, i64* @rbx, align 8
  store i64 %v0_ce70, i64* %stack_var_-8, align 8
  store i64 %arg1, i64* %rbx.global-to-local, align 8
  %v1_ce74 = inttoptr i64 %arg1 to i8*
  %v2_ce74 = call i32 @strlen(i8* %v1_ce74)
  %v4_ce74 = sext i32 %v2_ce74 to i64
  %v1_ce79 = add nsw i64 %v4_ce74, -1
  %v5_ce79 = icmp eq i32 %v2_ce74, 0
  %v10_ce79 = icmp eq i64 %v1_ce79, 0
  %v2_ce7d = or i1 %v5_ce79, %v10_ce79
  br i1 %v2_ce7d, label %dec_label_pc_ce8a, label %dec_label_pc_ce7f

dec_label_pc_ce7f:                                ; preds = %dec_label_pc_ce70
  %v0_ce7f = load i64, i64* %rbx.global-to-local, align 8
  %v3_ce7f = add i64 %v0_ce7f, -1
  %v4_ce7f = add i64 %v3_ce7f, %v4_ce74
  %v5_ce7f = inttoptr i64 %v4_ce7f to i8*
  %v6_ce7f = load i8, i8* %v5_ce7f, align 1
  %v16_ce7f = icmp eq i8 %v6_ce7f, 47
  store i64 %v1_ce79, i64* @rdx, align 8
  br i1 %v16_ce7f, label %dec_label_pc_ce98.preheader, label %dec_label_pc_ce8a

dec_label_pc_ce98.preheader:                      ; preds = %dec_label_pc_ce7f
  %v1_ce9810 = add nsw i64 %v4_ce74, -2
  %v10_ce9815 = icmp eq i64 %v1_ce9810, 0
  br i1 %v10_ce9815, label %dec_label_pc_ceb0, label %dec_label_pc_ce9e

dec_label_pc_ce8a:                                ; preds = %dec_label_pc_ce7f, %dec_label_pc_ce70
  %v2_ce8a = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_ce8a, i64* @rbx, align 8
  ret i64 %v4_ce74

dec_label_pc_ce90:                                ; preds = %dec_label_pc_ce9e
  store i64 %v1_ce9818, i64* @rdx, align 8
  %v1_ce98 = add i64 %v1_ce9818, -1
  %v10_ce98 = icmp eq i64 %v1_ce98, 0
  br i1 %v10_ce98, label %dec_label_pc_ceb0, label %dec_label_pc_ce9e

dec_label_pc_ce9e:                                ; preds = %dec_label_pc_ce98.preheader, %dec_label_pc_ce90
  %v0_cea917 = phi i64 [ %v1_ce9818, %dec_label_pc_ce90 ], [ %v1_ce79, %dec_label_pc_ce98.preheader ]
  %v1_ce9818 = phi i64 [ %v1_ce98, %dec_label_pc_ce90 ], [ %v1_ce9810, %dec_label_pc_ce98.preheader ]
  %v4_ce9e = add i64 %v0_cea917, %v3_ce7f
  %v5_ce9e = inttoptr i64 %v4_ce9e to i8*
  %v6_ce9e = load i8, i8* %v5_ce9e, align 1
  %v16_ce9e = icmp eq i8 %v6_ce9e, 47
  br i1 %v16_ce9e, label %dec_label_pc_ce90, label %dec_label_pc_cea9

dec_label_pc_cea9:                                ; preds = %dec_label_pc_ce9e
  %v2_ceac = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_ceac, i64* @rbx, align 8
  ret i64 %v0_cea917

dec_label_pc_ceb0:                                ; preds = %dec_label_pc_ce90, %dec_label_pc_ce98.preheader
  %v2_ceb5 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_ceb5, i64* @rbx, align 8
  ret i64 1
}

define i64 @function_cec0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_cec0:
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_cec0 = load i64, i64* @rsi, align 8
  %v1_cec0 = add i64 %v0_cec0, 24
  %v2_cec0 = inttoptr i64 %v1_cec0 to i32*
  %v3_cec0 = load i32, i32* %v2_cec0, align 4
  %v2_cec3 = and i32 %v3_cec0, 61440
  %v10_cec8 = icmp eq i32 %v2_cec3, 40960
  br i1 %v10_cec8, label %dec_label_pc_cf00, label %dec_label_pc_cecf

dec_label_pc_cecf:                                ; preds = %dec_label_pc_cec0
  %v0_cecf = load i64, i64* @rbp, align 8
  %v0_ced0 = load i64, i64* @rbx, align 8
  store i64 %v0_ced0, i64* %stack_var_-16, align 8
  store i64 %v0_cec0, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([24 x i8]* @global_var_1a30b.394 to i64), i64* @rsi, align 8
  store i64 0, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  store i64 %arg1, i64* %rbp.global-to-local, align 8
  %v1_cee6 = inttoptr i64 %arg1 to i8*
  %v10_cee6 = call i32 @getxattr(i8* %v1_cee6, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @global_var_1a30b.394, i64 0, i64 0), i64* null, i32 0)
  %v2_ceeb = icmp slt i32 %v10_cee6, 0
  br i1 %v2_ceeb, label %dec_label_pc_cf08, label %dec_label_pc_cef0

dec_label_pc_cef0:                                ; preds = %dec_label_pc_cecf
  %v1_ceeb = icmp eq i32 %v10_cee6, 0
  br i1 %v1_ceeb, label %dec_label_pc_cf28, label %dec_label_pc_cef7

dec_label_pc_cef7:                                ; preds = %dec_label_pc_cef0, %dec_label_pc_cf4f, %dec_label_pc_cf19
  %storemerge = phi i64 [ %v13_cf21, %dec_label_pc_cf19 ], [ 1, %dec_label_pc_cf4f ], [ 1, %dec_label_pc_cef0 ]
  %v2_cefb = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_cefb, i64* @rbx, align 8
  store i64 %v0_cecf, i64* @rbp, align 8
  ret i64 %storemerge

dec_label_pc_cf00:                                ; preds = %dec_label_pc_cec0
  ret i64 0

dec_label_pc_cf08:                                ; preds = %dec_label_pc_cecf
  %v0_cf08 = call i32* @__errno_location()
  %v2_cf0d = load i32, i32* %v0_cf08, align 4
  %v12_cf0d = icmp eq i32 %v2_cf0d, 61
  br i1 %v12_cf0d, label %dec_label_pc_cf28, label %dec_label_pc_cf12

dec_label_pc_cf12:                                ; preds = %dec_label_pc_cf08
  %v0_cf12 = call i32* @__errno_location()
  %v2_cf17 = load i32, i32* %v0_cf12, align 4
  %v3_cf17 = zext i32 %v2_cf17 to i64
  store i64 %v3_cf17, i64* @rdi, align 8
  br label %dec_label_pc_cf19

dec_label_pc_cf19:                                ; preds = %dec_label_pc_cf60, %dec_label_pc_cf12
  %v0_cf19 = phi i32 [ %v2_cf65, %dec_label_pc_cf60 ], [ %v2_cf17, %dec_label_pc_cf12 ]
  %v2_cf19 = call i64 @function_15c40(i32 %v0_cf19)
  %v2_cf21 = sub i64 0, %v2_cf19
  %v13_cf21 = and i64 %v2_cf21, 4294967295
  br label %dec_label_pc_cef7

dec_label_pc_cf28:                                ; preds = %dec_label_pc_cf08, %dec_label_pc_cef0
  %v0_cf28 = load i64, i64* %rbx.global-to-local, align 8
  %v1_cf28 = add i64 %v0_cf28, 24
  %v2_cf28 = inttoptr i64 %v1_cf28 to i32*
  %v3_cf28 = load i32, i32* %v2_cf28, align 4
  %v2_cf2b = and i32 %v3_cf28, 61440
  %v10_cf30 = icmp eq i32 %v2_cf2b, 16384
  %v1_cf35 = icmp eq i1 %v10_cf30, false
  br i1 %v1_cf35, label %dec_label_pc_cf53, label %dec_label_pc_cf37

dec_label_pc_cf37:                                ; preds = %dec_label_pc_cf28
  store i64 ptrtoint ([25 x i8]* @global_var_1a323.395 to i64), i64* @rsi, align 8
  store i64 0, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  %v0_cf42 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_cf42, i64* @rdi, align 8
  %v1_cf45 = inttoptr i64 %v0_cf42 to i8*
  %v10_cf45 = call i32 @getxattr(i8* %v1_cf45, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @global_var_1a323.395, i64 0, i64 0), i64* null, i32 0)
  %v2_cf4a = icmp slt i32 %v10_cf45, 0
  br i1 %v2_cf4a, label %dec_label_pc_cf60, label %dec_label_pc_cf4f

dec_label_pc_cf4f:                                ; preds = %dec_label_pc_cf37
  %v1_cf4a = icmp eq i32 %v10_cf45, 0
  %v1_cf4f = icmp eq i1 %v1_cf4a, false
  br i1 %v1_cf4f, label %dec_label_pc_cef7, label %dec_label_pc_cf53

dec_label_pc_cf53:                                ; preds = %dec_label_pc_cf60, %dec_label_pc_cf28, %dec_label_pc_cf4f
  %v2_cf57 = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_cf57, i64* @rbx, align 8
  store i64 %v0_cecf, i64* @rbp, align 8
  ret i64 0

dec_label_pc_cf60:                                ; preds = %dec_label_pc_cf37
  %v0_cf60 = call i32* @__errno_location()
  %v2_cf65 = load i32, i32* %v0_cf60, align 4
  %v3_cf65 = zext i32 %v2_cf65 to i64
  store i64 %v3_cf65, i64* @rdi, align 8
  %v11_cf67 = icmp eq i32 %v2_cf65, 61
  %v1_cf6a = icmp eq i1 %v11_cf67, false
  br i1 %v1_cf6a, label %dec_label_pc_cf19, label %dec_label_pc_cf53
}

define i64 @function_cf70(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_cf70:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-32 = alloca i64, align 8
  %v1_cf70 = icmp eq i64 %arg1, 0
  br i1 %v1_cf70, label %dec_label_pc_cff0, label %dec_label_pc_cf75

dec_label_pc_cf75:                                ; preds = %dec_label_pc_cf70
  %v0_cf75 = load i64, i64* @r13, align 8
  %v0_cf77 = load i64, i64* @r12, align 8
  store i64 %arg1, i64* @r13, align 8
  %v0_cf7c = load i64, i64* @rbp, align 8
  %v0_cf7d = load i64, i64* @rbx, align 8
  store i64 %v0_cf7d, i64* %stack_var_-32, align 8
  %v0_cf7e = load i64, i64* @rsi, align 8
  store i64 %v0_cf7e, i64* @r12, align 8
  store i64 24, i64* @rdi, align 8
  %v0_cf86 = load i64, i64* @rdx, align 8
  store i64 %v0_cf86, i64* @rbp, align 8
  %v1_cf8d = call i64 @function_14480(i64 24)
  %v0_cf92 = load i64, i64* @r12, align 8
  store i64 %v0_cf92, i64* @rdi, align 8
  store i64 %v1_cf8d, i64* @rbx, align 8
  %v1_cf98 = call i64 @function_146b0(i64 %v0_cf92)
  %v1_cf9d = load i64, i64* @rbx, align 8
  %v2_cf9d = inttoptr i64 %v1_cf9d to i64*
  store i64 %v1_cf98, i64* %v2_cf9d, align 8
  %v0_cfa0 = load i64, i64* @rbp, align 8
  %v1_cfa0 = add i64 %v0_cfa0, 8
  %v2_cfa0 = inttoptr i64 %v1_cfa0 to i64*
  %v3_cfa0 = load i64, i64* %v2_cfa0, align 8
  %v0_cfa4 = load i64, i64* @rbx, align 8
  store i64 %v0_cfa4, i64* @rsi, align 8
  %v0_cfa7 = load i64, i64* @r13, align 8
  store i64 %v0_cfa7, i64* @rdi, align 8
  %v2_cfaa = add i64 %v0_cfa4, 8
  %v3_cfaa = inttoptr i64 %v2_cfaa to i64*
  store i64 %v3_cfa0, i64* %v3_cfaa, align 8
  %v2_cfae = load i64, i64* @rdx, align 8
  %v1_cfb2 = load i64, i64* @rbx, align 8
  %v2_cfb2 = add i64 %v1_cfb2, 16
  %v3_cfb2 = inttoptr i64 %v2_cfb2 to i64*
  store i64 %v2_cfae, i64* %v3_cfb2, align 8
  %v2_cfb6 = call i64 @function_e900(i64 %v0_cfa7, i64 %v0_cfa4)
  %v1_cfbb = icmp eq i64 %v2_cfb6, 0
  br i1 %v1_cfbb, label %dec_label_pc_cff2, label %dec_label_pc_cfc0

dec_label_pc_cfc0:                                ; preds = %dec_label_pc_cf75
  %v0_cfc0 = load i64, i64* @rbx, align 8
  %v12_cfc0 = icmp eq i64 %v0_cfc0, %v2_cfb6
  br i1 %v12_cfc0, label %dec_label_pc_cfe0, label %dec_label_pc_cfc5

dec_label_pc_cfc5:                                ; preds = %dec_label_pc_cfc0
  store i64 %v0_cfc0, i64* @rdi, align 8
  %v2_cfcc = load i64, i64* %stack_var_-32, align 8
  store i64 %v2_cfcc, i64* @rbx, align 8
  store i64 %v0_cf7c, i64* @rbp, align 8
  store i64 %v0_cf77, i64* @r12, align 8
  store i64 %v0_cf75, i64* @r13, align 8
  %v1_cfd2 = call i64 @function_ec20(i64 %v0_cfc0)
  ret i64 %v1_cfd2

dec_label_pc_cfe0:                                ; preds = %dec_label_pc_cfc0
  %v2_cfe4 = load i64, i64* %stack_var_-32, align 8
  store i64 %v2_cfe4, i64* @rbx, align 8
  store i64 %v0_cf7c, i64* @rbp, align 8
  store i64 %v0_cf77, i64* @r12, align 8
  store i64 %v0_cf75, i64* @r13, align 8
  ret i64 %v2_cfb6

dec_label_pc_cff0:                                ; preds = %dec_label_pc_cf70
  %v0_cff0 = load i64, i64* @rax, align 8
  ret i64 %v0_cff0

dec_label_pc_cff2:                                ; preds = %dec_label_pc_cf75
  %v1_cff2 = call i64 @function_146d0(i64 %v0_cfa7)
  unreachable
}

define i64 @function_d000(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_d000:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-40 = alloca i64, align 8
  %v0_d004 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v1_d014 = icmp eq i64 %arg1, 0
  br i1 %v1_d014, label %dec_label_pc_d03c, label %dec_label_pc_d019

dec_label_pc_d019:                                ; preds = %dec_label_pc_d000
  %v16_d000 = ptrtoint i64* %stack_var_-40 to i64
  %v0_d019 = load i64, i64* @rdx, align 8
  %v0_d01d = load i64, i64* @rsi, align 8
  store i64 %v0_d01d, i64* %stack_var_-40, align 8
  store i64 %v16_d000, i64* @rsi, align 8
  store i64 %v0_d019, i64* @rax, align 8
  %v3_d031 = call i64 @function_de90(i64 %arg1, i64* nonnull %stack_var_-40)
  %v1_d036 = icmp eq i64 %v3_d031, 0
  %v1_d039 = icmp eq i1 %v1_d036, false
  %v2_d039 = zext i1 %v1_d039 to i64
  %v4_d039 = and i64 %v3_d031, -256
  %v5_d039 = or i64 %v2_d039, %v4_d039
  store i64 %v5_d039, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_d03c

dec_label_pc_d03c:                                ; preds = %dec_label_pc_d019, %dec_label_pc_d000
  store i64 %v0_d004, i64* @rcx, align 8
  %v1_d041 = call i64 @__readfsqword(i64 40)
  %v2_d041 = xor i64 %v1_d041, %v0_d004
  %v3_d041 = icmp eq i64 %v2_d041, 0
  store i64 %v2_d041, i64* @rcx, align 8
  %v1_d04a = icmp eq i1 %v3_d041, false
  br i1 %v1_d04a, label %dec_label_pc_d051, label %dec_label_pc_d04c

dec_label_pc_d04c:                                ; preds = %dec_label_pc_d03c
  %v0_d050 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_d050

dec_label_pc_d051:                                ; preds = %dec_label_pc_d03c
  call void @__stack_chk_fail()
  store i64 45, i64* %rax.global-to-local, align 8
  %v1_d067 = trunc i64 %arg1 to i32
  %v2_d067 = and i32 %v1_d067, 61440
  %v9_d067 = zext i32 %v2_d067 to i64
  store i64 %v9_d067, i64* @rdx, align 8
  %v10_d06d = icmp eq i32 %v2_d067, 32768
  br i1 %v10_d06d, label %dec_label_pc_d0d0, label %dec_label_pc_d075

dec_label_pc_d075:                                ; preds = %dec_label_pc_d051
  %v10_d075 = icmp eq i32 %v2_d067, 16384
  store i64 100, i64* %rax.global-to-local, align 8
  br i1 %v10_d075, label %dec_label_pc_d0d0, label %dec_label_pc_d082

dec_label_pc_d082:                                ; preds = %dec_label_pc_d075
  %v10_d082 = icmp eq i32 %v2_d067, 24576
  store i64 98, i64* %rax.global-to-local, align 8
  br i1 %v10_d082, label %dec_label_pc_d0d0, label %dec_label_pc_d08f

dec_label_pc_d08f:                                ; preds = %dec_label_pc_d082
  %v10_d08f = icmp eq i32 %v2_d067, 8192
  store i64 99, i64* %rax.global-to-local, align 8
  br i1 %v10_d08f, label %dec_label_pc_d0d0, label %dec_label_pc_d09c

dec_label_pc_d09c:                                ; preds = %dec_label_pc_d08f
  %v10_d09c = icmp eq i32 %v2_d067, 40960
  store i64 108, i64* %rax.global-to-local, align 8
  br i1 %v10_d09c, label %dec_label_pc_d0d0, label %dec_label_pc_d0a9

dec_label_pc_d0a9:                                ; preds = %dec_label_pc_d09c
  %v10_d0a9 = icmp eq i32 %v2_d067, 4096
  store i64 112, i64* %rax.global-to-local, align 8
  br i1 %v10_d0a9, label %dec_label_pc_d0d0, label %dec_label_pc_d0b6

dec_label_pc_d0b6:                                ; preds = %dec_label_pc_d0a9
  %v10_d0b6 = icmp eq i32 %v2_d067, 49152
  store i64 63, i64* @rdx, align 8
  %v1_d0c6 = icmp eq i1 %v10_d0b6, false
  %v7_d0c6 = select i1 %v1_d0c6, i64 63, i64 115
  store i64 %v7_d0c6, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_d0d0

dec_label_pc_d0d0:                                ; preds = %dec_label_pc_d0b6, %dec_label_pc_d0a9, %dec_label_pc_d09c, %dec_label_pc_d08f, %dec_label_pc_d082, %dec_label_pc_d075, %dec_label_pc_d051
  %v0_d0d0 = phi i64 [ %v7_d0c6, %dec_label_pc_d0b6 ], [ 112, %dec_label_pc_d0a9 ], [ 108, %dec_label_pc_d09c ], [ 99, %dec_label_pc_d08f ], [ 98, %dec_label_pc_d082 ], [ 100, %dec_label_pc_d075 ], [ 45, %dec_label_pc_d051 ]
  store i64 %v0_d0d0, i64* %stack_var_-40, align 8
  %v2_d188 = urem i32 %v1_d067, 2
  %v3_d188 = icmp eq i32 %v2_d188, 0
  %v36_d18e = select i1 %v3_d188, i64 4294967295, i64 0
  store i64 %v36_d18e, i64* %rax.global-to-local, align 8
  %v2_d190 = and i32 %v1_d067, 512
  %v3_d190 = icmp eq i32 %v2_d190, 0
  %v9_d190 = zext i32 %v2_d190 to i64
  store i64 %v9_d190, i64* @rdi, align 8
  br i1 %v3_d190, label %dec_label_pc_d1c0, label %dec_label_pc_d198

dec_label_pc_d198:                                ; preds = %dec_label_pc_d0d0
  store i64 32, i64* %rax.global-to-local, align 8
  ret i64 32

dec_label_pc_d1c0:                                ; preds = %dec_label_pc_d0d0
  store i64 32, i64* %rax.global-to-local, align 8
  ret i64 32
}

define i64 @function_d1f0(i64 %arg1) local_unnamed_addr {
dec_label_pc_d1f0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_d1f0 = add i64 %arg1, 24
  %v2_d1f0 = inttoptr i64 %v1_d1f0 to i32*
  %v3_d1f0 = load i32, i32* %v2_d1f0, align 4
  %v4_d1f0 = zext i32 %v3_d1f0 to i64
  store i64 %v4_d1f0, i64* @rdi, align 8
  %v0_d1f3 = load i64, i64* @rax, align 8
  ret i64 %v0_d1f3
}

define i64 @function_d200(i64 %arg1, i64 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d200:
  %tmp6 = sext i32 %arg3 to i64
  store i64 %tmp6, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v4_d204 = call i64 @function_d220(i64 %arg1, i64 %arg2, i64 %tmp6)
  %v1_d209 = icmp eq i64 %v4_d204, 0
  br i1 %v1_d209, label %dec_label_pc_d213, label %dec_label_pc_d20e

dec_label_pc_d20e:                                ; preds = %dec_label_pc_d200
  ret i64 %v4_d204

dec_label_pc_d213:                                ; preds = %dec_label_pc_d200
  %v1_d213 = call i64 @function_146d0(i64 %arg1)
  unreachable
}

define i64 @function_d220(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_d220:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_d224 = load i64, i64* @rdx, align 8
  store i64 %arg1, i64* %r14.global-to-local, align 8
  %v0_d22f = load i64, i64* @rbx, align 8
  store i64 %v0_d22f, i64* %stack_var_-48, align 8
  store i64 %arg2, i64* %r12.global-to-local, align 8
  %v2_d237 = call i64 @function_ce10(i64 %arg1, i64 %arg2)
  store i64 %v2_d237, i64* %r13.global-to-local, align 8
  store i64 %v2_d237, i64* @rdi, align 8
  %v1_d245 = load i64, i64* %r14.global-to-local, align 8
  %v2_d245 = sub i64 %v2_d237, %v1_d245
  store i64 %v2_d245, i64* %rbp.global-to-local, align 8
  %v1_d248 = call i64 @function_ce70(i64 %v2_d237)
  %v2_d24d = add i64 %v2_d245, %v1_d248
  store i64 %v2_d24d, i64* %rbp.global-to-local, align 8
  %v1_d250 = icmp eq i64 %v1_d248, 0
  store i64 %v1_d248, i64* %rbx.global-to-local, align 8
  br i1 %v1_d250, label %dec_label_pc_d264, label %dec_label_pc_d258

dec_label_pc_d258:                                ; preds = %dec_label_pc_d220
  %v0_d258 = load i64, i64* %r13.global-to-local, align 8
  %v3_d258 = add i64 %v1_d248, -1
  %v4_d258 = add i64 %v3_d258, %v0_d258
  %v5_d258 = inttoptr i64 %v4_d258 to i8*
  %v6_d258 = load i8, i8* %v5_d258, align 1
  %v16_d258 = icmp eq i8 %v6_d258, 47
  %v1_d25e = icmp eq i1 %v16_d258, false
  %v2_d25e = zext i1 %v1_d25e to i64
  %v4_d25e = and i64 %v1_d248, -256
  %v5_d25e = or i64 %v2_d25e, %v4_d25e
  store i64 %v5_d25e, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_d264

dec_label_pc_d264:                                ; preds = %dec_label_pc_d258, %dec_label_pc_d220
  %v2_d264 = load i8, i8* bitcast (i64* @rsi to i8*), align 8
  %v11_d269 = icmp eq i8 %v2_d264, 47
  %v0_d2e0.pre = load i64, i64* %r12.global-to-local, align 8
  br i1 %v11_d269, label %dec_label_pc_d2e0, label %dec_label_pc_d271

dec_label_pc_d271:                                ; preds = %dec_label_pc_d2e0, %dec_label_pc_d264
  %v0_d271 = phi i64 [ %v0_d2e0.pre, %dec_label_pc_d264 ], [ %v1_d2e0, %dec_label_pc_d2e0 ]
  store i64 %v0_d271, i64* @rdi, align 8
  %v1_d274 = inttoptr i64 %v0_d271 to i8*
  %v2_d274 = call i32 @strlen(i8* %v1_d274)
  %v4_d274 = sext i32 %v2_d274 to i64
  %v0_d279 = load i64, i64* %rbx.global-to-local, align 8
  %v1_d279 = load i64, i64* %rbp.global-to-local, align 8
  %v3_d279 = add i64 %v0_d279, 1
  %v4_d279 = add i64 %v3_d279, %v1_d279
  store i64 %v4_d274, i64* %stack_var_-72, align 8
  %v2_d282 = add i64 %v4_d279, %v4_d274
  %v18_d282 = trunc i64 %v2_d282 to i32
  store i64 %v2_d282, i64* @rdi, align 8
  %v3_d285 = call i64* @malloc(i32 %v18_d282)
  %v4_d285 = ptrtoint i64* %v3_d285 to i64
  %v1_d28a = icmp eq i64* %v3_d285, null
  store i64 %v4_d285, i64* %r13.global-to-local, align 8
  br i1 %v1_d28a, label %dec_label_pc_d2ce, label %dec_label_pc_d292

dec_label_pc_d292:                                ; preds = %dec_label_pc_d271
  store i64 %v4_d285, i64* @rdi, align 8
  %v0_d295 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_d295, i64* @rdx, align 8
  %v0_d298 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_d298, i64* @rsi, align 8
  %v3_d29b = inttoptr i64 %v0_d298 to i64*
  %v5_d29b = trunc i64 %v0_d295 to i32
  %v6_d29b = call i64* @mempcpy(i64* nonnull %v3_d285, i64* %v3_d29b, i32 %v5_d29b)
  %v8_d29b = ptrtoint i64* %v6_d29b to i64
  %v1_d2a0 = icmp eq i64 %v0_d224, 0
  %v1_d2a3 = bitcast i64* %v6_d29b to i8*
  store i8 47, i8* %v1_d2a3, align 1
  %v1_d2a6 = load i64, i64* %rbx.global-to-local, align 8
  %v3_d2a6 = add i64 %v1_d2a6, %v8_d29b
  store i64 %v3_d2a6, i64* @rdi, align 8
  br i1 %v1_d2a0, label %dec_label_pc_d2bf, label %dec_label_pc_d2ac

dec_label_pc_d2ac:                                ; preds = %dec_label_pc_d292
  %v13_d2ae = icmp eq i8 %v2_d264, 47
  %v1_d2b6 = zext i1 %v13_d2ae to i64
  %v2_d2b9 = sub i64 %v3_d2a6, %v1_d2b6
  store i64 %v2_d2b9, i64* @rcx, align 8
  %v2_d2bc = inttoptr i64 %v0_d224 to i64*
  store i64 %v2_d2b9, i64* %v2_d2bc, align 8
  br label %dec_label_pc_d2bf

dec_label_pc_d2bf:                                ; preds = %dec_label_pc_d2ac, %dec_label_pc_d292
  %v2_d2bf = load i64, i64* %stack_var_-72, align 8
  %v3_d2bf = trunc i64 %v2_d2bf to i32
  store i64 %v2_d2bf, i64* @rdx, align 8
  %v0_d2c3 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_d2c3, i64* @rsi, align 8
  %v1_d2c6 = inttoptr i64 %v3_d2a6 to i64*
  %v3_d2c6 = inttoptr i64 %v0_d2c3 to i64*
  %v7_d2c6 = call i64* @mempcpy(i64* %v1_d2c6, i64* %v3_d2c6, i32 %v3_d2bf)
  %v1_d2cb = bitcast i64* %v7_d2c6 to i8*
  store i8 0, i8* %v1_d2cb, align 1
  %v0_d2d2.pre = load i64, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_d2ce

dec_label_pc_d2ce:                                ; preds = %dec_label_pc_d2bf, %dec_label_pc_d271
  %v0_d2d2 = phi i64 [ %v0_d2d2.pre, %dec_label_pc_d2bf ], [ %v4_d285, %dec_label_pc_d271 ]
  %v2_d2d5 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_d2d5, i64* @rbx, align 8
  ret i64 %v0_d2d2

dec_label_pc_d2e0:                                ; preds = %dec_label_pc_d264, %dec_label_pc_d2e0
  %v0_d2e0 = phi i64 [ %v1_d2e0, %dec_label_pc_d2e0 ], [ %v0_d2e0.pre, %dec_label_pc_d264 ]
  %v1_d2e0 = add i64 %v0_d2e0, 1
  store i64 %v1_d2e0, i64* %r12.global-to-local, align 8
  %v1_d2e4 = inttoptr i64 %v1_d2e0 to i8*
  %v2_d2e4 = load i8, i8* %v1_d2e4, align 1
  %v12_d2e4 = icmp eq i8 %v2_d2e4, 47
  %v1_d2e9 = icmp eq i1 %v12_d2e4, false
  br i1 %v1_d2e9, label %dec_label_pc_d271, label %dec_label_pc_d2e0
}

define i64 @function_d2f0(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_d2f0:
  %r10.global-to-local = alloca i64, align 8
  %r11.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  %tmp = ptrtoint i64* %arg1 to i64
  store i64 %tmp, i64* @rdi, align 8
  %v2_d2f0 = load i64, i64* @rdi, align 8
  store i64 %v2_d2f0, i64* @rsi, align 8
  %tmp20 = trunc i64 %v2_d2f0 to i8
  %v3_d2f3 = urem i64 %v2_d2f0, 256
  store i64 %v3_d2f3, i64* @rdx, align 8
  %v5_d2f6 = icmp eq i8 %tmp20, 0
  br i1 %v5_d2f6, label %dec_label_pc_d3b0, label %dec_label_pc_d2fe

dec_label_pc_d2fe:                                ; preds = %dec_label_pc_d2f0
  store i64 0, i64* @rcx, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  store i64 0, i64* @r8, align 8
  store i64 1, i64* %r11.global-to-local, align 8
  store i64 288230371923853311, i64* %r10.global-to-local, align 8
  br label %dec_label_pc_d34f

dec_label_pc_d320:                                ; preds = %dec_label_pc_d34f
  %v1_d323 = trunc i64 %v0_d33a to i32
  %v2_d323 = add i32 %v1_d323, -65
  %v17_d323 = zext i32 %v2_d323 to i64
  store i64 %v17_d323, i64* @rcx, align 8
  %tmp31 = icmp ult i32 %v2_d323, 58
  br i1 %tmp31, label %dec_label_pc_d32b, label %dec_label_pc_d338

dec_label_pc_d32b:                                ; preds = %dec_label_pc_d320
  %v0_d32b = load i64, i64* %r11.global-to-local, align 8
  %tmp32 = urem i32 %v2_d323, 64
  %v4_d32e = icmp eq i32 %tmp32, 0
  br i1 %v4_d32e, label %bb22, label %bb

bb:                                               ; preds = %dec_label_pc_d32b
  %v2_d32e = zext i32 %tmp32 to i64
  %v5_d32e = shl i64 %v0_d32b, %v2_d32e
  br label %bb22

bb22:                                             ; preds = %dec_label_pc_d32b, %bb
  %v0_d333 = phi i64 [ %v0_d32b, %dec_label_pc_d32b ], [ %v5_d32e, %bb ]
  store i64 0, i64* @rcx, align 8
  %v1_d333 = load i64, i64* %r10.global-to-local, align 8
  %v2_d333 = and i64 %v1_d333, %v0_d333
  %v3_d333 = icmp eq i64 %v2_d333, 0
  %v1_d336 = icmp eq i1 %v3_d333, false
  br i1 %v1_d336, label %dec_label_pc_d341, label %dec_label_pc_d338

dec_label_pc_d338:                                ; preds = %dec_label_pc_d320, %bb22
  store i64 0, i64* @rcx, align 8
  %v1_d33a = trunc i64 %v0_d33a to i8
  %v11_d33a = icmp eq i8 %v1_d33a, 126
  %v1_d33d = icmp eq i1 %v11_d33a, false
  %v2_d33d = load i64, i64* %rax.global-to-local, align 8
  %v3_d33d = load i64, i64* @r8, align 8
  %v4_d33d = select i1 %v1_d33d, i64 %v3_d33d, i64 %v2_d33d
  store i64 %v4_d33d, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_d341

dec_label_pc_d341:                                ; preds = %dec_label_pc_d3a0, %dec_label_pc_d35d, %dec_label_pc_d388, %dec_label_pc_d338, %bb22, %dec_label_pc_d362
  %v1_d341 = add i64 %v0_d341, 1
  store i64 %v1_d341, i64* @rsi, align 8
  %v1_d345 = load i64, i64* @rdi, align 8
  %v2_d345 = inttoptr i64 %v1_d345 to i64*
  store i64 %v1_d341, i64* %v2_d345, align 8
  %v0_d348 = load i64, i64* @rsi, align 8
  %v1_d348 = inttoptr i64 %v0_d348 to i8*
  %v2_d348 = load i8, i8* %v1_d348, align 1
  %v3_d348 = zext i8 %v2_d348 to i64
  store i64 %v3_d348, i64* @rdx, align 8
  %v5_d34b = icmp eq i8 %v2_d348, 0
  br i1 %v5_d34b, label %dec_label_pc_d381, label %dec_label_pc_d34f.backedge

dec_label_pc_d34f:                                ; preds = %dec_label_pc_d34f.backedge, %dec_label_pc_d2fe
  %v0_d341 = phi i64 [ %v0_d37312, %dec_label_pc_d34f.backedge ], [ %v2_d2f0, %dec_label_pc_d2fe ]
  %v0_d33a = phi i64 [ %v0_d32010, %dec_label_pc_d34f.backedge ], [ %v3_d2f3, %dec_label_pc_d2fe ]
  %v0_d34f = phi i64 [ %v0_d34f.pre, %dec_label_pc_d34f.backedge ], [ 0, %dec_label_pc_d2fe ]
  %v4_d34f = trunc i64 %v0_d34f to i8
  %v5_d34f = icmp eq i8 %v4_d34f, 0
  %v1_d351 = icmp eq i1 %v5_d34f, false
  br i1 %v1_d351, label %dec_label_pc_d320, label %dec_label_pc_d353

dec_label_pc_d353:                                ; preds = %dec_label_pc_d34f
  %v1_d353 = trunc i64 %v0_d33a to i8
  %v11_d353 = icmp eq i8 %v1_d353, 46
  br i1 %v11_d353, label %dec_label_pc_d388, label %dec_label_pc_d358

dec_label_pc_d358:                                ; preds = %dec_label_pc_d353
  %v10_d35b = icmp sgt i8 %v1_d353, 90
  br i1 %v10_d35b, label %dec_label_pc_d3a0, label %dec_label_pc_d35d

dec_label_pc_d35d:                                ; preds = %dec_label_pc_d358
  %v7_d360 = icmp slt i8 %v1_d353, 65
  br i1 %v7_d360, label %dec_label_pc_d362, label %dec_label_pc_d341

dec_label_pc_d362:                                ; preds = %dec_label_pc_d35d
  %v1_d362 = add nsw i64 %v0_d33a, 208
  %v1_d366 = trunc i64 %v1_d362 to i8
  %tmp33 = icmp ult i8 %v1_d366, 10
  br i1 %tmp33, label %dec_label_pc_d341, label %dec_label_pc_d36c

dec_label_pc_d36c:                                ; preds = %dec_label_pc_d3a0, %dec_label_pc_d362
  %v11_d36c = icmp eq i8 %v1_d353, 126
  %v1_d36f = icmp eq i1 %v11_d36c, false
  %v2_d36f = load i64, i64* %rax.global-to-local, align 8
  %v3_d36f = load i64, i64* @r8, align 8
  %v4_d36f = select i1 %v1_d36f, i64 %v3_d36f, i64 %v2_d36f
  store i64 %v4_d36f, i64* %rax.global-to-local, align 8
  %v1_d373 = add i64 %v0_d341, 1
  store i64 %v1_d373, i64* @rsi, align 8
  %v1_d377 = load i64, i64* @rdi, align 8
  %v2_d377 = inttoptr i64 %v1_d377 to i64*
  store i64 %v1_d373, i64* %v2_d377, align 8
  %v0_d37a = load i64, i64* @rsi, align 8
  %v1_d37a = inttoptr i64 %v0_d37a to i8*
  %v2_d37a = load i8, i8* %v1_d37a, align 1
  %v3_d37a = zext i8 %v2_d37a to i64
  store i64 %v3_d37a, i64* @rdx, align 8
  %v5_d37d = icmp eq i8 %v2_d37a, 0
  %v1_d37f = icmp eq i1 %v5_d37d, false
  br i1 %v1_d37f, label %dec_label_pc_d34f.backedge, label %dec_label_pc_d381

dec_label_pc_d34f.backedge:                       ; preds = %dec_label_pc_d36c, %dec_label_pc_d341
  %v0_d37312 = phi i64 [ %v0_d37a, %dec_label_pc_d36c ], [ %v0_d348, %dec_label_pc_d341 ]
  %v0_d32010 = phi i64 [ %v3_d37a, %dec_label_pc_d36c ], [ %v3_d348, %dec_label_pc_d341 ]
  %v0_d34f.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_d34f

dec_label_pc_d381:                                ; preds = %dec_label_pc_d341, %dec_label_pc_d36c
  %v0_d381 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_d381

dec_label_pc_d388:                                ; preds = %dec_label_pc_d353
  %v0_d388 = load i64, i64* %rax.global-to-local, align 8
  %v1_d388 = icmp eq i64 %v0_d388, 0
  store i64 1, i64* @rcx, align 8
  %v3_d390 = select i1 %v1_d388, i64 %v0_d341, i64 %v0_d388
  store i64 %v3_d390, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_d341

dec_label_pc_d3a0:                                ; preds = %dec_label_pc_d358
  %v1_d3a0 = add nsw i64 %v0_d33a, 159
  %v1_d3a4 = trunc i64 %v1_d3a0 to i8
  %tmp34 = icmp ult i8 %v1_d3a4, 26
  br i1 %tmp34, label %dec_label_pc_d341, label %dec_label_pc_d36c

dec_label_pc_d3b0:                                ; preds = %dec_label_pc_d2f0
  store i64 0, i64* %rax.global-to-local, align 8
  ret i64 0
}

define i64 @function_d3c0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d3c0:
  %r12.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-80 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_d3c9 = load i64, i64* @rbx, align 8
  store i64 %v0_d3c9, i64* %stack_var_-48, align 8
  %v0_d3ca = load i64, i64* @rsi, align 8
  store i64 %v0_d3ca, i64* %rbp.global-to-local, align 8
  %v0_d3cd = load i64, i64* @rdi, align 8
  store i64 %v0_d3cd, i64* %rbx.global-to-local, align 8
  %v0_d3d4 = call i64 @__readfsqword(i64 40)
  %v0_d3e4 = load i64, i64* @rdi, align 8
  %v1_d3e4 = inttoptr i64 %v0_d3e4 to i8*
  %v2_d3e4 = load i64, i64* @rsi, align 8
  %v3_d3e4 = inttoptr i64 %v2_d3e4 to i8*
  %v4_d3e4 = call i32 @strcmp(i8* %v1_d3e4, i8* %v3_d3e4)
  %v6_d3e4 = sext i32 %v4_d3e4 to i64
  %v5_d3e9 = icmp eq i32 %v4_d3e4, 0
  store i64 %v6_d3e4, i64* %r12.global-to-local, align 8
  br i1 %v5_d3e9, label %dec_label_pc_d618, label %dec_label_pc_d3f4

dec_label_pc_d3f4:                                ; preds = %dec_label_pc_d3c0
  %v2_d3f4 = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v5_d3f7 = icmp eq i8 %v2_d3f4, 0
  br i1 %v5_d3f7, label %dec_label_pc_d758, label %dec_label_pc_d3ff

dec_label_pc_d3ff:                                ; preds = %dec_label_pc_d3f4
  %v2_d3ff = load i8, i8* bitcast (i64* @rsi to i8*), align 8
  %v3_d3ff = zext i8 %v2_d3ff to i64
  store i64 %v3_d3ff, i64* @rdx, align 8
  %v5_d403 = icmp eq i8 %v2_d3ff, 0
  br i1 %v5_d403, label %dec_label_pc_d640, label %dec_label_pc_d40b

dec_label_pc_d40b:                                ; preds = %dec_label_pc_d3ff
  store i64 ptrtoint (i8** @global_var_1a33d.149 to i64), i64* @r8, align 8
  store i64 2, i64* @rcx, align 8
  %v0_d417 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_d417, i64* @rdi, align 8
  store i64 ptrtoint (i8** @global_var_1a33d.149 to i64), i64* @rsi, align 8
  br label %bb

bb:                                               ; preds = %bb120, %dec_label_pc_d40b
  %v24_d41d = phi i64 [ %v27_d41d, %bb120 ], [ %v0_d417, %dec_label_pc_d40b ]
  %v23_d41d = phi i64 [ %v28_d41d, %bb120 ], [ ptrtoint (i8** @global_var_1a33d.149 to i64), %dec_label_pc_d40b ]
  %v0_d41d = phi i64 [ %v29_d41d, %bb120 ], [ 2, %dec_label_pc_d40b ]
  %v0_d41f.pr = phi i1 [ true, %bb120 ], [ false, %dec_label_pc_d40b ]
  %v1_d41d = icmp eq i64 %v0_d41d, 0
  br i1 %v1_d41d, label %bb121, label %bb120

bb120:                                            ; preds = %bb
  %v3_d41d = inttoptr i64 %v23_d41d to i8*
  %v4_d41d = load i8, i8* %v3_d41d, align 1
  %v6_d41d = inttoptr i64 %v24_d41d to i8*
  %v7_d41d = load i8, i8* %v6_d41d, align 1
  %v18_d41d = icmp eq i8 %v4_d41d, %v7_d41d
  %v25_d41d = load i1, i1* @df, align 1
  %v26_d41d = select i1 %v25_d41d, i64 -1, i64 1
  %v27_d41d = add i64 %v26_d41d, %v24_d41d
  %v28_d41d = add i64 %v26_d41d, %v23_d41d
  store i64 %v27_d41d, i64* @rdi, align 8
  store i64 %v28_d41d, i64* @rsi, align 8
  %v29_d41d = add nsw i64 %v0_d41d, -1
  store i64 %v29_d41d, i64* @rcx, align 8
  br i1 %v18_d41d, label %bb, label %dec_label_pc_d425

bb121:                                            ; preds = %bb
  br i1 %v0_d41f.pr, label %dec_label_pc_d758, label %dec_label_pc_d425

dec_label_pc_d425:                                ; preds = %bb120, %bb121
  store i64 2, i64* @rcx, align 8
  store i64 ptrtoint (i8** @global_var_1a33d.149 to i64), i64* @rsi, align 8
  %v0_d42d = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_d42d, i64* @rdi, align 8
  br label %bb122

bb122:                                            ; preds = %bb123, %dec_label_pc_d425
  %v24_d430 = phi i64 [ %v27_d430, %bb123 ], [ %v0_d42d, %dec_label_pc_d425 ]
  %v23_d430 = phi i64 [ %v28_d430, %bb123 ], [ ptrtoint (i8** @global_var_1a33d.149 to i64), %dec_label_pc_d425 ]
  %v0_d430 = phi i64 [ %v29_d430, %bb123 ], [ 2, %dec_label_pc_d425 ]
  %v0_d432.pr = phi i1 [ true, %bb123 ], [ false, %dec_label_pc_d425 ]
  %v1_d430 = icmp eq i64 %v0_d430, 0
  br i1 %v1_d430, label %bb124, label %bb123

bb123:                                            ; preds = %bb122
  %v3_d430 = inttoptr i64 %v23_d430 to i8*
  %v4_d430 = load i8, i8* %v3_d430, align 1
  %v6_d430 = inttoptr i64 %v24_d430 to i8*
  %v7_d430 = load i8, i8* %v6_d430, align 1
  %v18_d430 = icmp eq i8 %v4_d430, %v7_d430
  %v25_d430 = load i1, i1* @df, align 1
  %v26_d430 = select i1 %v25_d430, i64 -1, i64 1
  %v27_d430 = add i64 %v26_d430, %v24_d430
  %v28_d430 = add i64 %v26_d430, %v23_d430
  store i64 %v27_d430, i64* @rdi, align 8
  store i64 %v28_d430, i64* @rsi, align 8
  %v29_d430 = add nsw i64 %v0_d430, -1
  store i64 %v29_d430, i64* @rcx, align 8
  br i1 %v18_d430, label %bb122, label %dec_label_pc_d438

bb124:                                            ; preds = %bb122
  br i1 %v0_d432.pr, label %dec_label_pc_d640, label %dec_label_pc_d438

dec_label_pc_d438:                                ; preds = %bb123, %bb124
  store i64 ptrtoint ([3 x i8]* @global_var_1a33c.396 to i64), i64* @r8, align 8
  store i64 3, i64* @rcx, align 8
  store i64 %v0_d417, i64* @rdi, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_1a33c.396 to i64), i64* @rsi, align 8
  br label %bb125

bb125:                                            ; preds = %bb126, %dec_label_pc_d438
  %v24_d44a = phi i64 [ %v27_d44a, %bb126 ], [ %v0_d417, %dec_label_pc_d438 ]
  %v23_d44a = phi i64 [ %v28_d44a, %bb126 ], [ ptrtoint ([3 x i8]* @global_var_1a33c.396 to i64), %dec_label_pc_d438 ]
  %v0_d44a = phi i64 [ %v29_d44a, %bb126 ], [ 3, %dec_label_pc_d438 ]
  %v0_d44c.pr = phi i1 [ true, %bb126 ], [ false, %dec_label_pc_d438 ]
  %v1_d44a = icmp eq i64 %v0_d44a, 0
  br i1 %v1_d44a, label %bb127, label %bb126

bb126:                                            ; preds = %bb125
  %v3_d44a = inttoptr i64 %v23_d44a to i8*
  %v4_d44a = load i8, i8* %v3_d44a, align 1
  %v6_d44a = inttoptr i64 %v24_d44a to i8*
  %v7_d44a = load i8, i8* %v6_d44a, align 1
  %v18_d44a = icmp eq i8 %v4_d44a, %v7_d44a
  %v25_d44a = load i1, i1* @df, align 1
  %v26_d44a = select i1 %v25_d44a, i64 -1, i64 1
  %v27_d44a = add i64 %v26_d44a, %v24_d44a
  %v28_d44a = add i64 %v26_d44a, %v23_d44a
  store i64 %v27_d44a, i64* @rdi, align 8
  store i64 %v28_d44a, i64* @rsi, align 8
  %v29_d44a = add nsw i64 %v0_d44a, -1
  store i64 %v29_d44a, i64* @rcx, align 8
  br i1 %v18_d44a, label %bb125, label %dec_label_pc_d452

bb127:                                            ; preds = %bb125
  br i1 %v0_d44c.pr, label %dec_label_pc_d758, label %dec_label_pc_d452

dec_label_pc_d452:                                ; preds = %bb126, %bb127
  store i64 3, i64* @rcx, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_1a33c.396 to i64), i64* @rsi, align 8
  store i64 %v0_d42d, i64* @rdi, align 8
  br label %bb128

bb128:                                            ; preds = %bb129, %dec_label_pc_d452
  %v24_d45d = phi i64 [ %v27_d45d, %bb129 ], [ %v0_d42d, %dec_label_pc_d452 ]
  %v23_d45d = phi i64 [ %v28_d45d, %bb129 ], [ ptrtoint ([3 x i8]* @global_var_1a33c.396 to i64), %dec_label_pc_d452 ]
  %v0_d45d = phi i64 [ %v29_d45d, %bb129 ], [ 3, %dec_label_pc_d452 ]
  %v0_d45f.pr = phi i1 [ true, %bb129 ], [ false, %dec_label_pc_d452 ]
  %v1_d45d = icmp eq i64 %v0_d45d, 0
  br i1 %v1_d45d, label %bb130, label %bb129

bb129:                                            ; preds = %bb128
  %v3_d45d = inttoptr i64 %v23_d45d to i8*
  %v4_d45d = load i8, i8* %v3_d45d, align 1
  %v6_d45d = inttoptr i64 %v24_d45d to i8*
  %v7_d45d = load i8, i8* %v6_d45d, align 1
  %v18_d45d = icmp eq i8 %v4_d45d, %v7_d45d
  %v25_d45d = load i1, i1* @df, align 1
  %v26_d45d = select i1 %v25_d45d, i64 -1, i64 1
  %v27_d45d = add i64 %v26_d45d, %v24_d45d
  %v28_d45d = add i64 %v26_d45d, %v23_d45d
  store i64 %v27_d45d, i64* @rdi, align 8
  store i64 %v28_d45d, i64* @rsi, align 8
  %v29_d45d = add nsw i64 %v0_d45d, -1
  store i64 %v29_d45d, i64* @rcx, align 8
  br i1 %v18_d45d, label %bb128, label %dec_label_pc_d465

bb130:                                            ; preds = %bb128
  br i1 %v0_d45f.pr, label %dec_label_pc_d640, label %dec_label_pc_d465

dec_label_pc_d465:                                ; preds = %bb129, %bb130
  %v4_d485 = phi i64 [ 0, %bb130 ], [ %v29_d45d, %bb129 ]
  %v2_d485 = phi i64 [ %v23_d45d, %bb130 ], [ %v28_d45d, %bb129 ]
  %v11_d465 = icmp eq i8 %v2_d3f4, 46
  br i1 %v11_d465, label %dec_label_pc_d740, label %dec_label_pc_d46d

dec_label_pc_d46d:                                ; preds = %dec_label_pc_d465
  %v11_d46d = icmp eq i8 %v2_d3ff, 46
  br i1 %v11_d46d, label %dec_label_pc_d640, label %dec_label_pc_d476

dec_label_pc_d476:                                ; preds = %dec_label_pc_d740, %dec_label_pc_d46d
  %v0_d480 = phi i64 [ %v1_d744, %dec_label_pc_d740 ], [ %v0_d42d, %dec_label_pc_d46d ]
  %v0_d47b = phi i64 [ %v1_d740, %dec_label_pc_d740 ], [ %v0_d417, %dec_label_pc_d46d ]
  %v2_d476 = ptrtoint i64* %stack_var_-80 to i64
  store i64 %v2_d476, i64* @rdi, align 8
  store i64 %v0_d47b, i64* %stack_var_-80, align 8
  store i64 %v0_d480, i64* %stack_var_-72, align 8
  %v6_d485 = call i64 @function_d2f0(i64* nonnull %stack_var_-80, i64 %v2_d485, i64 %v3_d3ff, i64 %v4_d485, i64 ptrtoint ([3 x i8]* @global_var_1a33c.396 to i64))
  %v2_d48a = ptrtoint i64* %stack_var_-72 to i64
  store i64 %v2_d48a, i64* @rdi, align 8
  %v2_d492 = load i64, i64* @rsi, align 8
  %v3_d492 = load i64, i64* @rdx, align 8
  %v4_d492 = load i64, i64* @rcx, align 8
  %v5_d492 = load i64, i64* @r8, align 8
  %v6_d492 = call i64 @function_d2f0(i64* nonnull %stack_var_-72, i64 %v2_d492, i64 %v3_d492, i64 %v4_d492, i64 %v5_d492)
  %v1_d497 = icmp eq i64 %v6_d485, 0
  br i1 %v1_d497, label %dec_label_pc_d6b0, label %dec_label_pc_d4a0

dec_label_pc_d4a0:                                ; preds = %dec_label_pc_d476
  %v1_d4a0 = load i64, i64* %rbx.global-to-local, align 8
  %v2_d4a0 = sub i64 %v6_d485, %v1_d4a0
  store i64 %v2_d4a0, i64* @r13, align 8
  %v1_d4a3 = icmp eq i64 %v6_d492, 0
  br i1 %v1_d4a3, label %dec_label_pc_d7c3, label %dec_label_pc_d4ac

dec_label_pc_d4ac:                                ; preds = %dec_label_pc_d6b0, %dec_label_pc_d4a0
  %v0_d4b239 = phi i64 [ %v2_d6b5, %dec_label_pc_d6b0 ], [ %v2_d4a0, %dec_label_pc_d4a0 ]
  %v1_d4ac = load i64, i64* %rbp.global-to-local, align 8
  %v2_d4ac = sub i64 %v6_d492, %v1_d4ac
  br label %dec_label_pc_d4b2

dec_label_pc_d4b2:                                ; preds = %dec_label_pc_d7c3, %dec_label_pc_d4ac
  %v0_d793 = phi i64 [ %v1_d7c8, %dec_label_pc_d7c3 ], [ %v1_d4ac, %dec_label_pc_d4ac ]
  %v0_d790 = phi i64 [ %v0_d4b2.pre, %dec_label_pc_d7c3 ], [ %v0_d4b239, %dec_label_pc_d4ac ]
  %storemerge = phi i64 [ %v2_d7c8, %dec_label_pc_d7c3 ], [ %v2_d4ac, %dec_label_pc_d4ac ]
  store i64 %storemerge, i64* %r14.global-to-local, align 8
  %v12_d4b2 = icmp eq i64 %v0_d790, %storemerge
  br i1 %v12_d4b2, label %dec_label_pc_d790, label %dec_label_pc_d4bb

dec_label_pc_d4bb:                                ; preds = %dec_label_pc_d790.dec_label_pc_d4bb_crit_edge, %dec_label_pc_d6c1, %dec_label_pc_d4b2
  %v0_d4cf.pre = phi i64 [ %v0_d4cf.pre.pre, %dec_label_pc_d790.dec_label_pc_d4bb_crit_edge ], [ %v0_d4cf.pre103, %dec_label_pc_d6c1 ], [ %v0_d790, %dec_label_pc_d4b2 ]
  store i64 0, i64* @rsi, align 8
  store i64 0, i64* @rdx, align 8
  br label %dec_label_pc_d4cf

dec_label_pc_d4cf:                                ; preds = %dec_label_pc_d5fe, %dec_label_pc_d4bb
  %v0_d4dd = phi i64 [ %v3_d5e9, %dec_label_pc_d5fe ], [ 0, %dec_label_pc_d4bb ]
  %v1_d4e4 = phi i64 [ %v0_d5d9, %dec_label_pc_d5fe ], [ 0, %dec_label_pc_d4bb ]
  %tmp199 = icmp ugt i64 %v0_d4cf.pre, %v1_d4e4
  br i1 %tmp199, label %dec_label_pc_d4dd, label %dec_label_pc_d4d4

dec_label_pc_d4d4:                                ; preds = %dec_label_pc_d4cf
  %v0_d4d4 = load i64, i64* %r14.global-to-local, align 8
  %tmp200 = icmp ugt i64 %v0_d4d4, %v0_d4dd
  br i1 %tmp200, label %dec_label_pc_d4dd, label %dec_label_pc_d618

dec_label_pc_d4dd:                                ; preds = %dec_label_pc_d4d4, %dec_label_pc_d4cf
  %v0_d4e0 = load i64, i64* %rbp.global-to-local, align 8
  %v2_d4e4 = sub i64 %v0_d4dd, %v1_d4e4
  %v3_d4e7 = add i64 %v2_d4e4, %v0_d4cf.pre
  %v3_d4ec = add i64 %v0_d4e0, %v2_d4e4
  %v3_d76e = add i64 %v3_d4ec, %v0_d4cf.pre
  %v4_d76e = inttoptr i64 %v3_d76e to i8*
  br label %dec_label_pc_d500

dec_label_pc_d500:                                ; preds = %dec_label_pc_d58b, %dec_label_pc_d4dd
  %v0_d58f = phi i64 [ %v1_d58f, %dec_label_pc_d58b ], [ %v0_d4dd, %dec_label_pc_d4dd ]
  %v1_d6e0 = phi i64 [ %v1_d58b, %dec_label_pc_d58b ], [ %v1_d4e4, %dec_label_pc_d4dd ]
  %v12_d500 = icmp eq i64 %v0_d4cf.pre, %v1_d6e0
  %tmp201 = icmp ugt i64 %v0_d4cf.pre, %v1_d6e0
  br i1 %tmp201, label %dec_label_pc_d505, label %dec_label_pc_d510

dec_label_pc_d505:                                ; preds = %dec_label_pc_d500
  %v0_d505 = load i64, i64* %rbx.global-to-local, align 8
  %v3_d505 = add i64 %v0_d505, %v1_d6e0
  %v4_d505 = inttoptr i64 %v3_d505 to i8*
  %v5_d505 = load i8, i8* %v4_d505, align 1
  %v2_d509 = add i8 %v5_d505, -48
  %tmp202 = icmp ult i8 %v2_d509, 10
  br i1 %tmp202, label %dec_label_pc_d510, label %dec_label_pc_d52a

dec_label_pc_d510:                                ; preds = %dec_label_pc_d500, %dec_label_pc_d505
  %v0_d510 = load i64, i64* %r14.global-to-local, align 8
  %v3_d513 = add i64 %v1_d6e0, %v3_d4ec
  %v4_d513 = inttoptr i64 %v3_d513 to i8*
  %v5_d513 = load i8, i8* %v4_d513, align 1
  %v6_d513 = sext i8 %v5_d513 to i64
  %tmp203 = icmp ugt i64 %v0_d510, %v0_d58f
  br i1 %tmp203, label %dec_label_pc_d51e, label %dec_label_pc_d6e0

dec_label_pc_d51e:                                ; preds = %dec_label_pc_d510
  %v1_d51e = add nsw i64 %v6_d513, -48
  store i64 %v1_d51e, i64* @rcx, align 8
  %v1_d521 = trunc i64 %v1_d51e to i8
  %tmp204 = icmp ult i8 %v1_d521, 10
  br i1 %tmp204, label %dec_label_pc_d6e0, label %dec_label_pc_d52a

dec_label_pc_d52a:                                ; preds = %dec_label_pc_d505, %dec_label_pc_d51e
  br i1 %v12_d500, label %dec_label_pc_d763, label %dec_label_pc_d533

dec_label_pc_d533:                                ; preds = %dec_label_pc_d52a
  %v0_d533 = load i64, i64* %rbx.global-to-local, align 8
  %v3_d533 = add i64 %v0_d533, %v1_d6e0
  %v4_d533 = inttoptr i64 %v3_d533 to i8*
  %v5_d533 = load i8, i8* %v4_d533, align 1
  %v6_d533 = zext i8 %v5_d533 to i64
  %v1_d537 = add nsw i64 %v6_d533, -48
  store i64 %v1_d537, i64* @rcx, align 8
  %v1_d53a = trunc i64 %v1_d537 to i8
  %tmp205 = icmp ult i8 %v1_d53a, 10
  br i1 %tmp205, label %dec_label_pc_d6d0, label %dec_label_pc_d543

dec_label_pc_d543:                                ; preds = %dec_label_pc_d533
  store i64 %v6_d533, i64* @r8, align 8
  %v1_d547 = add nsw i64 %v6_d533, -65
  store i64 %v1_d547, i64* @rcx, align 8
  %v1_d54b = trunc i64 %v1_d547 to i32
  %tmp206 = icmp ult i32 %v1_d54b, 58
  br i1 %tmp206, label %dec_label_pc_d550, label %dec_label_pc_d55b

dec_label_pc_d550:                                ; preds = %dec_label_pc_d543
  %v2_d553 = urem i64 %v1_d547, 64
  %v4_d553 = icmp eq i64 %v2_d553, 0
  br i1 %v4_d553, label %bb138, label %bb137

bb137:                                            ; preds = %dec_label_pc_d550
  %v5_d553 = shl i64 1, %v2_d553
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_d550, %bb137
  %storemerge198 = phi i64 [ %v5_d553, %bb137 ], [ 1, %dec_label_pc_d550 ]
  %v0_d556 = phi i64 [ %v5_d553, %bb137 ], [ 1, %dec_label_pc_d550 ]
  store i64 %storemerge198, i64* @rdi, align 8
  %v2_d556 = urem i64 %v0_d556, 288230371923853312
  %v3_d556 = icmp eq i64 %v2_d556, 0
  %v1_d559 = icmp eq i1 %v3_d556, false
  br i1 %v1_d559, label %dec_label_pc_d56a, label %dec_label_pc_d55b

dec_label_pc_d55b:                                ; preds = %dec_label_pc_d543, %bb138
  %v2_d55b = or i64 %v6_d533, 256
  store i64 %v2_d55b, i64* @r8, align 8
  %v11_d562 = icmp eq i8 %v5_d533, 126
  br i1 %v11_d562, label %dec_label_pc_d650, label %dec_label_pc_d56a

dec_label_pc_d56a:                                ; preds = %dec_label_pc_d6d0, %dec_label_pc_d55b, %bb138
  %v2_d58282 = phi i64 [ 0, %dec_label_pc_d6d0 ], [ %v2_d55b, %dec_label_pc_d55b ], [ %v6_d533, %bb138 ]
  %v0_d56a = load i64, i64* %r14.global-to-local, align 8
  %v12_d56a = icmp eq i64 %v0_d56a, %v0_d58f
  br i1 %v12_d56a, label %dec_label_pc_d580, label %dec_label_pc_d56f

dec_label_pc_d56f:                                ; preds = %dec_label_pc_d56a
  %v3_d56f = add i64 %v1_d6e0, %v3_d4ec
  %v4_d56f = inttoptr i64 %v3_d56f to i8*
  %v5_d56f = load i8, i8* %v4_d56f, align 1
  %v6_d56f = zext i8 %v5_d56f to i64
  %v1_d574 = add nsw i64 %v6_d56f, -48
  store i64 %v1_d574, i64* @rcx, align 8
  %v1_d577 = trunc i64 %v1_d574 to i8
  %tmp207 = icmp ult i8 %v1_d577, 10
  br i1 %tmp207, label %dec_label_pc_d580, label %dec_label_pc_d678

dec_label_pc_d580:                                ; preds = %dec_label_pc_d56f, %dec_label_pc_d56a
  store i64 0, i64* @rdi, align 8
  br label %dec_label_pc_d582

dec_label_pc_d582:                                ; preds = %dec_label_pc_d692, %bb152, %dec_label_pc_d580
  %v2_d582 = phi i64 [ %v2_d58281, %dec_label_pc_d692 ], [ %v2_d58281, %bb152 ], [ %v2_d58282, %dec_label_pc_d580 ]
  %v0_d582 = phi i64 [ %v6_d69f, %dec_label_pc_d692 ], [ %v0_d698, %bb152 ], [ 0, %dec_label_pc_d580 ]
  %v1_d582 = trunc i64 %v0_d582 to i32
  %v3_d582 = trunc i64 %v2_d582 to i32
  %v14_d582 = icmp eq i32 %v1_d582, %v3_d582
  %v1_d585 = icmp eq i1 %v14_d582, false
  br i1 %v1_d585, label %dec_label_pc_d718, label %dec_label_pc_d58b

dec_label_pc_d58b:                                ; preds = %dec_label_pc_d76e, %dec_label_pc_d763, %dec_label_pc_d582
  %v1_d58b = add i64 %v1_d6e0, 1
  store i64 %v1_d58b, i64* @rdx, align 8
  %v1_d58f = add i64 %v0_d58f, 1
  store i64 %v1_d58f, i64* @rsi, align 8
  br label %dec_label_pc_d500

dec_label_pc_d5a0:                                ; preds = %dec_label_pc_d5a9.preheader, %dec_label_pc_d5a0
  %v0_d5a0181 = phi i64 [ %v1_d5a0, %dec_label_pc_d5a0 ], [ %v0_d58f, %dec_label_pc_d5a9.preheader ]
  %v1_d5a0 = add i64 %v0_d5a0181, 1
  store i64 %v1_d5a0, i64* @rsi, align 8
  %v3_d5a4 = add i64 %v1_d5a0, %v0_d4e0
  %v4_d5a4 = inttoptr i64 %v3_d5a4 to i8*
  %v5_d5a4 = load i8, i8* %v4_d5a4, align 1
  %v6_d5a4 = sext i8 %v5_d5a4 to i64
  %v10_d5a9 = icmp eq i8 %v5_d5a4, 48
  br i1 %v10_d5a9, label %dec_label_pc_d5a0, label %dec_label_pc_d5ad

dec_label_pc_d5ad:                                ; preds = %dec_label_pc_d5a0, %dec_label_pc_d5a9.preheader
  %v0_d5a0.lcssa = phi i64 [ %v0_d58f, %dec_label_pc_d5a9.preheader ], [ %v1_d5a0, %dec_label_pc_d5a0 ]
  %v0_d5a9.lcssa = phi i64 [ %v6_d513, %dec_label_pc_d5a9.preheader ], [ %v6_d5a4, %dec_label_pc_d5a0 ]
  %v2_d5ad = sub i64 %v0_d5a0.lcssa, %v1_d5ad
  store i64 %v2_d5ad, i64* @rsi, align 8
  store i64 0, i64* @r8, align 8
  %v3_d5b6 = add i64 %v2_d5ad, %v0_d4e0
  br label %dec_label_pc_d5e6

dec_label_pc_d5c0:                                ; preds = %dec_label_pc_d5e6
  %v1_d5c0 = add nsw i64 %v2_d5d6, -48
  store i64 %v1_d5c0, i64* @rsi, align 8
  %v1_d5c3 = trunc i64 %v1_d5c0 to i8
  %tmp208 = icmp ult i8 %v1_d5c3, 10
  br i1 %tmp208, label %dec_label_pc_d5cd, label %dec_label_pc_d730

dec_label_pc_d5cd:                                ; preds = %dec_label_pc_d5c0
  %v4_d5cd = trunc i64 %v0_d5cd to i32
  %v5_d5cd = icmp eq i32 %v4_d5cd, 0
  %v1_d5d0 = icmp eq i1 %v5_d5cd, false
  br i1 %v1_d5d0, label %dec_label_pc_d5d9, label %dec_label_pc_d5d2

dec_label_pc_d5d2:                                ; preds = %dec_label_pc_d5cd
  %v4_d5d6 = sub nsw i64 %v0_d5d2, %v2_d5d6
  %v20_d5d6 = and i64 %v4_d5d6, 4294967295
  store i64 %v20_d5d6, i64* @r8, align 8
  br label %dec_label_pc_d5d9

dec_label_pc_d5d9:                                ; preds = %dec_label_pc_d5d2, %dec_label_pc_d5cd
  %v0_d5fe97 = phi i64 [ %v20_d5d6, %dec_label_pc_d5d2 ], [ %v0_d5cd, %dec_label_pc_d5cd ]
  %v1_d5d9 = add i64 %v0_d5d9, 1
  store i64 %v1_d5d9, i64* @rdx, align 8
  %v3_d5dd = add i64 %v1_d5d9, %v0_d6e0
  %v4_d5dd = inttoptr i64 %v3_d5dd to i8*
  %v5_d5dd = load i8, i8* %v4_d5dd, align 1
  %v6_d5dd = zext i8 %v5_d5dd to i64
  store i64 %v6_d5dd, i64* @rcx, align 8
  %v3_d5e1 = add i64 %v1_d5d9, %v3_d5b6
  %v4_d5e1 = inttoptr i64 %v3_d5e1 to i8*
  %v5_d5e1 = load i8, i8* %v4_d5e1, align 1
  %v6_d5e1 = sext i8 %v5_d5e1 to i64
  br label %dec_label_pc_d5e6

dec_label_pc_d5e6:                                ; preds = %dec_label_pc_d5d9, %dec_label_pc_d5ad
  %v0_d5cd = phi i64 [ %v0_d5fe97, %dec_label_pc_d5d9 ], [ 0, %dec_label_pc_d5ad ]
  %v2_d5d6 = phi i64 [ %v6_d5e1, %dec_label_pc_d5d9 ], [ %v0_d5a9.lcssa, %dec_label_pc_d5ad ]
  %v0_d5d9 = phi i64 [ %v1_d5d9, %dec_label_pc_d5d9 ], [ %v1_d5ad, %dec_label_pc_d5ad ]
  %v0_d5d2 = phi i64 [ %v6_d5dd, %dec_label_pc_d5d9 ], [ %v0_d5e692, %dec_label_pc_d5ad ]
  %v1_d5e6 = add nsw i64 %v0_d5d2, -48
  store i64 %v1_d5e6, i64* @rdi, align 8
  %v3_d5e9 = add i64 %v0_d5d9, %v2_d5ad
  store i64 %v3_d5e9, i64* @rsi, align 8
  %v1_d5ed = trunc i64 %v1_d5e6 to i8
  %tmp209 = icmp ult i8 %v1_d5ed, 10
  br i1 %tmp209, label %dec_label_pc_d5c0, label %dec_label_pc_d5f3

dec_label_pc_d5f3:                                ; preds = %dec_label_pc_d5e6
  %v1_d5f3 = trunc i64 %v2_d5d6 to i8
  %v2_d5f3 = add i8 %v1_d5f3, -48
  %tmp210 = icmp ult i8 %v2_d5f3, 10
  br i1 %tmp210, label %dec_label_pc_d7b3, label %dec_label_pc_d5fe

dec_label_pc_d5fe:                                ; preds = %dec_label_pc_d5f3
  %v4_d5fe = trunc i64 %v0_d5cd to i32
  %v5_d5fe = icmp eq i32 %v4_d5fe, 0
  br i1 %v5_d5fe, label %dec_label_pc_d4cf, label %dec_label_pc_d610

dec_label_pc_d610:                                ; preds = %dec_label_pc_d5fe, %dec_label_pc_d7b3, %dec_label_pc_d730, %dec_label_pc_d718
  %v0_d610 = phi i64 [ 4294967295, %dec_label_pc_d7b3 ], [ 1, %dec_label_pc_d730 ], [ %v20_d718, %dec_label_pc_d718 ], [ %v0_d5cd, %dec_label_pc_d5fe ]
  store i64 %v0_d610, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_d618

dec_label_pc_d618:                                ; preds = %dec_label_pc_d4d4, %dec_label_pc_d718, %dec_label_pc_d758, %dec_label_pc_d610, %dec_label_pc_d640, %dec_label_pc_d3c0
  store i64 %v0_d3d4, i64* %rbx.global-to-local, align 8
  %v1_d61d = call i64 @__readfsqword(i64 40)
  %v2_d61d = xor i64 %v1_d61d, %v0_d3d4
  %v3_d61d = icmp eq i64 %v2_d61d, 0
  store i64 %v2_d61d, i64* %rbx.global-to-local, align 8
  %v1_d629 = icmp eq i1 %v3_d61d, false
  br i1 %v1_d629, label %dec_label_pc_d7be, label %dec_label_pc_d62f

dec_label_pc_d62f:                                ; preds = %dec_label_pc_d618
  %v0_d626 = load i64, i64* %r12.global-to-local, align 8
  %v2_d633 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_d633, i64* %rbx.global-to-local, align 8
  ret i64 %v0_d626

dec_label_pc_d640:                                ; preds = %dec_label_pc_d46d, %bb130, %bb124, %dec_label_pc_d3ff
  store i64 1, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_d618

dec_label_pc_d650:                                ; preds = %dec_label_pc_d55b
  %v3_d650 = add i64 %v1_d6e0, %v2_d4e4
  %v0_d654 = load i64, i64* %r14.global-to-local, align 8
  %v12_d654 = icmp eq i64 %v0_d654, %v3_d650
  br i1 %v12_d654, label %dec_label_pc_d710, label %dec_label_pc_d65d

dec_label_pc_d65d:                                ; preds = %dec_label_pc_d650
  %v3_d65d = add i64 %v1_d6e0, %v3_d4ec
  %v4_d65d = inttoptr i64 %v3_d65d to i8*
  %v5_d65d = load i8, i8* %v4_d65d, align 1
  %v6_d65d = zext i8 %v5_d65d to i64
  %v1_d662 = add nsw i64 %v6_d65d, -48
  store i64 %v1_d662, i64* @rcx, align 8
  %v1_d665 = trunc i64 %v1_d662 to i8
  %tmp211 = icmp ult i8 %v1_d665, 10
  br i1 %tmp211, label %dec_label_pc_d710, label %dec_label_pc_d66e

dec_label_pc_d66e:                                ; preds = %dec_label_pc_d65d
  store i64 4294967295, i64* @r8, align 8
  br label %dec_label_pc_d678

dec_label_pc_d678:                                ; preds = %dec_label_pc_d56f, %dec_label_pc_d77f, %dec_label_pc_d66e
  %v2_d58281 = phi i64 [ %v2_d58282, %dec_label_pc_d56f ], [ 0, %dec_label_pc_d77f ], [ 4294967295, %dec_label_pc_d66e ]
  %v0_d698 = phi i64 [ %v6_d56f, %dec_label_pc_d56f ], [ %v6_d76e, %dec_label_pc_d77f ], [ %v6_d65d, %dec_label_pc_d66e ]
  store i64 %v0_d698, i64* @rdi, align 8
  %v1_d67b = add nsw i64 %v0_d698, -65
  store i64 %v1_d67b, i64* @rcx, align 8
  %v1_d67e = trunc i64 %v1_d67b to i32
  %tmp212 = icmp ult i32 %v1_d67e, 58
  br i1 %tmp212, label %dec_label_pc_d683, label %dec_label_pc_d692

dec_label_pc_d683:                                ; preds = %dec_label_pc_d678
  %v2_d686 = urem i64 %v1_d67b, 64
  %v4_d686 = icmp eq i64 %v2_d686, 0
  br i1 %v4_d686, label %bb152, label %bb151

bb151:                                            ; preds = %dec_label_pc_d683
  %v5_d686 = shl i64 1, %v2_d686
  br label %bb152

bb152:                                            ; preds = %dec_label_pc_d683, %bb151
  %storemerge197 = phi i64 [ %v5_d686, %bb151 ], [ 1, %dec_label_pc_d683 ]
  %v0_d689 = phi i64 [ %v5_d686, %bb151 ], [ 1, %dec_label_pc_d683 ]
  store i64 %storemerge197, i64* %rbp.global-to-local, align 8
  %v2_d689 = urem i64 %v0_d689, 288230371923853312
  %v3_d689 = icmp eq i64 %v2_d689, 0
  %v1_d68c = icmp eq i1 %v3_d689, false
  br i1 %v1_d68c, label %dec_label_pc_d582, label %dec_label_pc_d692

dec_label_pc_d692:                                ; preds = %dec_label_pc_d678, %bb152
  %v2_d692 = or i64 %v0_d698, 256
  %v11_d698 = icmp eq i64 %v0_d698, 126
  %v6_d69f = select i1 %v11_d698, i64 4294967295, i64 %v2_d692
  store i64 %v6_d69f, i64* @rdi, align 8
  br label %dec_label_pc_d582

dec_label_pc_d6b0:                                ; preds = %dec_label_pc_d476
  %v3_d6b0 = load i64, i64* %stack_var_-80, align 8
  %v1_d6b5 = load i64, i64* %rbx.global-to-local, align 8
  %v2_d6b5 = sub i64 %v3_d6b0, %v1_d6b5
  store i64 %v2_d6b5, i64* @r13, align 8
  %v1_d6b8 = icmp eq i64 %v6_d492, 0
  %v1_d6bb = icmp eq i1 %v1_d6b8, false
  br i1 %v1_d6bb, label %dec_label_pc_d4ac, label %dec_label_pc_d6c1

dec_label_pc_d6c1:                                ; preds = %dec_label_pc_d7a6, %dec_label_pc_d6b0
  %v0_d4cf.pre103 = phi i64 [ %v2_d7ab, %dec_label_pc_d7a6 ], [ %v2_d6b5, %dec_label_pc_d6b0 ]
  %v3_d6c1 = load i64, i64* %stack_var_-72, align 8
  %v1_d6c6 = load i64, i64* %rbp.global-to-local, align 8
  %v2_d6c6 = sub i64 %v3_d6c1, %v1_d6c6
  store i64 %v2_d6c6, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_d4bb

dec_label_pc_d6d0:                                ; preds = %dec_label_pc_d533
  store i64 0, i64* @r8, align 8
  br label %dec_label_pc_d56a

dec_label_pc_d6e0:                                ; preds = %dec_label_pc_d510, %dec_label_pc_d51e
  %v0_d6e0 = load i64, i64* %rbx.global-to-local, align 8
  %v3_d6e0 = add i64 %v0_d6e0, %v1_d6e0
  %v4_d6e0 = inttoptr i64 %v3_d6e0 to i8*
  %v5_d6e0 = load i8, i8* %v4_d6e0, align 1
  %v6_d6e0 = zext i8 %v5_d6e0 to i64
  store i64 %v6_d6e0, i64* @rcx, align 8
  store i64 %v0_d4e0, i64* %rbp.global-to-local, align 8
  %v10_d6e8 = icmp eq i8 %v5_d6e0, 48
  %v1_d6eb = icmp eq i1 %v10_d6e8, false
  br i1 %v1_d6eb, label %dec_label_pc_d5a9.preheader, label %dec_label_pc_d6f8

dec_label_pc_d6f8:                                ; preds = %dec_label_pc_d6e0, %dec_label_pc_d6f8
  %v0_d6f8 = phi i64 [ %v1_d6f8, %dec_label_pc_d6f8 ], [ %v1_d6e0, %dec_label_pc_d6e0 ]
  %v1_d6f8 = add i64 %v0_d6f8, 1
  store i64 %v1_d6f8, i64* @rdx, align 8
  %v3_d6fc = add i64 %v1_d6f8, %v0_d6e0
  %v4_d6fc = inttoptr i64 %v3_d6fc to i8*
  %v5_d6fc = load i8, i8* %v4_d6fc, align 1
  %v6_d6fc = zext i8 %v5_d6fc to i64
  store i64 %v6_d6fc, i64* @rcx, align 8
  %v10_d700 = icmp eq i8 %v5_d6fc, 48
  br i1 %v10_d700, label %dec_label_pc_d6f8, label %dec_label_pc_d5a9.preheader

dec_label_pc_d5a9.preheader:                      ; preds = %dec_label_pc_d6f8, %dec_label_pc_d6e0
  %v0_d5e692 = phi i64 [ %v6_d6e0, %dec_label_pc_d6e0 ], [ %v6_d6fc, %dec_label_pc_d6f8 ]
  %v1_d5ad = phi i64 [ %v1_d6e0, %dec_label_pc_d6e0 ], [ %v1_d6f8, %dec_label_pc_d6f8 ]
  %v10_d5a9179 = icmp eq i8 %v5_d513, 48
  br i1 %v10_d5a9179, label %dec_label_pc_d5a0, label %dec_label_pc_d5ad

dec_label_pc_d710:                                ; preds = %dec_label_pc_d65d, %dec_label_pc_d650
  store i64 0, i64* @rdi, align 8
  store i64 4294967295, i64* @r8, align 8
  br label %dec_label_pc_d718

dec_label_pc_d718:                                ; preds = %dec_label_pc_d582, %dec_label_pc_d710
  %v2_d718 = phi i64 [ 0, %dec_label_pc_d710 ], [ %v0_d582, %dec_label_pc_d582 ]
  %v0_d718 = phi i64 [ 4294967295, %dec_label_pc_d710 ], [ %v2_d582, %dec_label_pc_d582 ]
  %v1_d718 = trunc i64 %v0_d718 to i32
  %v3_d718 = trunc i64 %v2_d718 to i32
  %v4_d718 = sub i32 %v1_d718, %v3_d718
  %v14_d718 = icmp eq i32 %v4_d718, 0
  %v20_d718 = zext i32 %v4_d718 to i64
  store i64 %v20_d718, i64* @r8, align 8
  %v1_d71b = icmp eq i1 %v14_d718, false
  br i1 %v1_d71b, label %dec_label_pc_d610, label %dec_label_pc_d618

dec_label_pc_d730:                                ; preds = %dec_label_pc_d5c0
  store i64 1, i64* @r8, align 8
  br label %dec_label_pc_d610

dec_label_pc_d740:                                ; preds = %dec_label_pc_d465
  %v1_d740 = add i64 %v0_d417, 1
  store i64 %v1_d740, i64* %rbx.global-to-local, align 8
  %v1_d744 = add i64 %v0_d42d, 1
  store i64 %v1_d744, i64* %rbp.global-to-local, align 8
  %v11_d748 = icmp eq i8 %v2_d3ff, 46
  br i1 %v11_d748, label %dec_label_pc_d476, label %dec_label_pc_d758

dec_label_pc_d758:                                ; preds = %dec_label_pc_d740, %bb127, %bb121, %dec_label_pc_d3f4
  store i64 4294967295, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_d618

dec_label_pc_d763:                                ; preds = %dec_label_pc_d52a
  %v0_d763 = load i64, i64* %r14.global-to-local, align 8
  %v15_d763 = icmp eq i64 %v0_d763, %v3_d4e7
  br i1 %v15_d763, label %dec_label_pc_d58b, label %dec_label_pc_d76e

dec_label_pc_d76e:                                ; preds = %dec_label_pc_d763
  %v5_d76e = load i8, i8* %v4_d76e, align 1
  %v6_d76e = zext i8 %v5_d76e to i64
  %v1_d773 = add nsw i64 %v6_d76e, -48
  store i64 %v1_d773, i64* @rcx, align 8
  %v1_d776 = trunc i64 %v1_d773 to i8
  %tmp213 = icmp ult i8 %v1_d776, 10
  br i1 %tmp213, label %dec_label_pc_d58b, label %dec_label_pc_d77f

dec_label_pc_d77f:                                ; preds = %dec_label_pc_d76e
  store i64 0, i64* @r8, align 8
  br label %dec_label_pc_d678

dec_label_pc_d790:                                ; preds = %dec_label_pc_d4b2
  store i64 %v0_d790, i64* @rdx, align 8
  store i64 %v0_d793, i64* @rsi, align 8
  %v0_d796 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_d796, i64* @rdi, align 8
  %v1_d799 = inttoptr i64 %v0_d796 to i8*
  %v3_d799 = inttoptr i64 %v0_d793 to i8*
  %v5_d799 = trunc i64 %v0_d790 to i32
  %v6_d799 = call i32 @strncmp(i8* %v1_d799, i8* %v3_d799, i32 %v5_d799)
  %v5_d79e = icmp eq i32 %v6_d799, 0
  %v1_d7a0 = icmp eq i1 %v5_d79e, false
  br i1 %v1_d7a0, label %dec_label_pc_d790.dec_label_pc_d4bb_crit_edge, label %dec_label_pc_d7a6

dec_label_pc_d790.dec_label_pc_d4bb_crit_edge:    ; preds = %dec_label_pc_d790
  %v0_d4cf.pre.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_d4bb

dec_label_pc_d7a6:                                ; preds = %dec_label_pc_d790
  %v3_d7a6 = load i64, i64* %stack_var_-80, align 8
  %v1_d7ab = load i64, i64* %rbx.global-to-local, align 8
  %v2_d7ab = sub i64 %v3_d7a6, %v1_d7ab
  store i64 %v2_d7ab, i64* @r13, align 8
  br label %dec_label_pc_d6c1

dec_label_pc_d7b3:                                ; preds = %dec_label_pc_d5f3
  store i64 4294967295, i64* @r8, align 8
  br label %dec_label_pc_d610

dec_label_pc_d7be:                                ; preds = %dec_label_pc_d618
  call void @__stack_chk_fail()
  %v0_d4b2.pre.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_d7c3

dec_label_pc_d7c3:                                ; preds = %dec_label_pc_d7be, %dec_label_pc_d4a0
  %v0_d4b2.pre = phi i64 [ %v0_d4b2.pre.pre, %dec_label_pc_d7be ], [ %v2_d4a0, %dec_label_pc_d4a0 ]
  %v3_d7c3 = load i64, i64* %stack_var_-72, align 8
  store i64 %v3_d7c3, i64* %r14.global-to-local, align 8
  %v1_d7c8 = load i64, i64* %rbp.global-to-local, align 8
  %v2_d7c8 = sub i64 %v3_d7c3, %v1_d7c8
  br label %dec_label_pc_d4b2
}

define i64 @function_d7d0(i64* %arg1) local_unnamed_addr {
dec_label_pc_d7d0:
  %tmp11 = ptrtoint i64* %arg1 to i64
  store i64 %tmp11, i64* @rdi, align 8
  %tmp13 = call i128 @__decompiler_undefined_function_12()
  %stack_var_-40 = alloca i64, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_d7d0 = load i64, i64* @rbx, align 8
  store i64 %v0_d7d0, i64* %stack_var_-8, align 8
  %v0_d7d1 = load i64, i64* @rdi, align 8
  store i64 %v0_d7d1, i64* @rsi, align 8
  store i64 %v0_d7d1, i64* @rbx, align 8
  store i64 0, i64* @rdi, align 8
  %v0_d7dd = call i64 @__readfsqword(i64 40)
  %v4_d7ed = inttoptr i64 %v0_d7d1 to %timespec*
  %v5_d7ed = call i32 @clock_gettime(i32 0, %timespec* %v4_d7ed)
  %v5_d7f2 = icmp eq i32 %v5_d7ed, 0
  br i1 %v5_d7f2, label %dec_label_pc_d814, label %dec_label_pc_d7f6

dec_label_pc_d7f6:                                ; preds = %dec_label_pc_d7d0
  %v15_d7d9 = ptrtoint i64* %stack_var_-40 to i64
  %tmp19 = bitcast i64* %stack_var_-40 to %timeval*
  store i64 %v15_d7d9, i64* @rdi, align 8
  store i64 0, i64* @rsi, align 8
  %v6_d7fb = call i32 @gettimeofday(%timeval* %tmp19, %timezone* null)
  %v2_d800 = load i64, i64* %stack_var_-40, align 8
  %v1_d804 = load i64, i64* @rbx, align 8
  %v2_d804 = inttoptr i64 %v1_d804 to i64*
  store i64 %v2_d800, i64* %v2_d804, align 8
  %v7_d807 = mul i128 %tmp13, ptrtoint (i128* @global_var_3e8.397 to i128)
  %v8_d807 = trunc i128 %v7_d807 to i64
  %v1_d810 = load i64, i64* @rbx, align 8
  %v2_d810 = add i64 %v1_d810, 8
  %v3_d810 = inttoptr i64 %v2_d810 to i64*
  store i64 %v8_d807, i64* %v3_d810, align 8
  br label %dec_label_pc_d814

dec_label_pc_d814:                                ; preds = %dec_label_pc_d7f6, %dec_label_pc_d7d0
  %v1_d819 = call i64 @__readfsqword(i64 40)
  %v2_d819 = xor i64 %v1_d819, %v0_d7dd
  %v3_d819 = icmp eq i64 %v2_d819, 0
  %v1_d822 = icmp eq i1 %v3_d819, false
  br i1 %v1_d822, label %dec_label_pc_d82a, label %dec_label_pc_d824

dec_label_pc_d824:                                ; preds = %dec_label_pc_d814
  %v2_d828 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_d828, i64* @rbx, align 8
  ret i64 %v2_d819

dec_label_pc_d82a:                                ; preds = %dec_label_pc_d814
  call void @__stack_chk_fail()
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_d830(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d830:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 0, i64* @rsi, align 8
  %v1_d836 = trunc i64 %arg1 to i32
  %v5_d836 = call i8* @setlocale(i32 %v1_d836, i8* null)
  %v7_d836 = ptrtoint i8* %v5_d836 to i64
  store i64 %v7_d836, i64* @rdx, align 8
  %v2_d843 = icmp eq i8* %v5_d836, null
  br i1 %v2_d843, label %dec_label_pc_d867, label %dec_label_pc_d848

dec_label_pc_d848:                                ; preds = %dec_label_pc_d830
  store i64 ptrtoint (i8** @global_var_1a33f.398 to i64), i64* @rdi, align 8
  store i64 2, i64* @rcx, align 8
  store i64 %v7_d836, i64* @rsi, align 8
  br label %bb

bb:                                               ; preds = %bb23, %dec_label_pc_d848
  %v0_d8597 = phi i1 [ %v13_d857, %bb23 ], [ false, %dec_label_pc_d848 ]
  %v24_d857 = phi i64 [ %v27_d857, %bb23 ], [ ptrtoint (i8** @global_var_1a33f.398 to i64), %dec_label_pc_d848 ]
  %v23_d857 = phi i64 [ %v28_d857, %bb23 ], [ %v7_d836, %dec_label_pc_d848 ]
  %v0_d857 = phi i64 [ %v29_d857, %bb23 ], [ 2, %dec_label_pc_d848 ]
  %v1_d8599 = phi i1 [ true, %bb23 ], [ false, %dec_label_pc_d848 ]
  %v1_d857 = icmp eq i64 %v0_d857, 0
  br i1 %v1_d857, label %bb24, label %bb23

bb23:                                             ; preds = %bb
  %v3_d857 = inttoptr i64 %v23_d857 to i8*
  %v4_d857 = load i8, i8* %v3_d857, align 1
  %v6_d857 = inttoptr i64 %v24_d857 to i8*
  %v7_d857 = load i8, i8* %v6_d857, align 1
  %v13_d857 = icmp ult i8 %v4_d857, %v7_d857
  %v18_d857 = icmp eq i8 %v4_d857, %v7_d857
  %v25_d857 = load i1, i1* @df, align 1
  %v26_d857 = select i1 %v25_d857, i64 -1, i64 1
  %v27_d857 = add i64 %v26_d857, %v24_d857
  %v28_d857 = add i64 %v26_d857, %v23_d857
  store i64 %v27_d857, i64* @rdi, align 8
  store i64 %v28_d857, i64* @rsi, align 8
  %v29_d857 = add nsw i64 %v0_d857, -1
  store i64 %v29_d857, i64* @rcx, align 8
  br i1 %v18_d857, label %bb, label %bb24

bb24:                                             ; preds = %bb, %bb23
  %v2_d85d = phi i64 [ 0, %bb ], [ %v29_d857, %bb23 ]
  %v5_d859 = phi i64 [ %v23_d857, %bb ], [ %v28_d857, %bb23 ]
  %v1_d859 = phi i1 [ %v1_d8599, %bb ], [ false, %bb23 ]
  %v0_d85d = phi i1 [ %v0_d8597, %bb ], [ %v13_d857, %bb23 ]
  %v2_d859 = or i1 %v1_d859, %v0_d85d
  %v3_d859 = icmp ne i1 %v2_d859, true
  %v4_d859 = zext i1 %v3_d859 to i64
  %v6_d859 = and i64 %v5_d859, -256
  %v7_d859 = or i64 %v4_d859, %v6_d859
  store i64 %v7_d859, i64* @rsi, align 8
  %v1_d85d = zext i1 %v0_d85d to i64
  %v3_d85d = and i64 %v2_d85d, -256
  %v4_d85d = or i64 %v1_d85d, %v3_d85d
  store i64 %v4_d85d, i64* @rcx, align 8
  %v14_d862 = icmp eq i1 %v3_d859, %v0_d85d
  %v1_d865 = icmp eq i1 %v14_d862, false
  br i1 %v1_d865, label %dec_label_pc_d870, label %dec_label_pc_d867

dec_label_pc_d867:                                ; preds = %bb24, %dec_label_pc_d830
  %v0_d86b = phi i64 [ 0, %bb24 ], [ 1, %dec_label_pc_d830 ]
  ret i64 %v0_d86b

dec_label_pc_d870:                                ; preds = %bb24
  store i64 ptrtoint ([6 x i8]* @global_var_1a341.399 to i64), i64* @rdi, align 8
  store i64 6, i64* @rcx, align 8
  store i64 %v7_d836, i64* @rsi, align 8
  br label %bb26

bb26:                                             ; preds = %bb27, %dec_label_pc_d870
  %v24_d87f = phi i64 [ %v27_d87f, %bb27 ], [ ptrtoint ([6 x i8]* @global_var_1a341.399 to i64), %dec_label_pc_d870 ]
  %v23_d87f = phi i64 [ %v28_d87f, %bb27 ], [ %v7_d836, %dec_label_pc_d870 ]
  %v0_d87f = phi i64 [ %v29_d87f, %bb27 ], [ 6, %dec_label_pc_d870 ]
  %v0_d88115 = phi i1 [ true, %bb27 ], [ false, %dec_label_pc_d870 ]
  %v1_d87f = icmp eq i64 %v0_d87f, 0
  br i1 %v1_d87f, label %bb28, label %bb27

bb27:                                             ; preds = %bb26
  %v3_d87f = inttoptr i64 %v23_d87f to i8*
  %v4_d87f = load i8, i8* %v3_d87f, align 1
  %v6_d87f = inttoptr i64 %v24_d87f to i8*
  %v7_d87f = load i8, i8* %v6_d87f, align 1
  %v18_d87f = icmp eq i8 %v4_d87f, %v7_d87f
  %v25_d87f = load i1, i1* @df, align 1
  %v26_d87f = select i1 %v25_d87f, i64 -1, i64 1
  %v27_d87f = add i64 %v26_d87f, %v24_d87f
  %v28_d87f = add i64 %v26_d87f, %v23_d87f
  store i64 %v27_d87f, i64* @rdi, align 8
  store i64 %v28_d87f, i64* @rsi, align 8
  %v29_d87f = add nsw i64 %v0_d87f, -1
  store i64 %v29_d87f, i64* @rcx, align 8
  br i1 %v18_d87f, label %bb26, label %bb28

bb28:                                             ; preds = %bb26, %bb27
  %v0_d881 = phi i1 [ %v0_d88115, %bb26 ], [ false, %bb27 ]
  %v1_d881 = icmp eq i1 %v0_d881, false
  %v2_d881 = zext i1 %v1_d881 to i64
  ret i64 %v2_d881
}

define i64 @function_d890(i64 %arg1) local_unnamed_addr {
dec_label_pc_d890:
  %v5_d890 = icmp ult i64 %arg1, 10
  %v3_d8a3 = select i1 %v5_d890, i64 10, i64 %arg1
  %v1_d8a7 = or i64 %v3_d8a3, 1
  store i64 %v1_d8a7, i64* @rdi, align 8
  %v10_d8ab = icmp eq i64 %v1_d8a7, -1
  br i1 %v10_d8ab, label %dec_label_pc_d91f, label %dec_label_pc_d8b8

dec_label_pc_d8b8:                                ; preds = %dec_label_pc_d890, %dec_label_pc_d915
  %v0_d8ff = phi i64 [ %v1_d915, %dec_label_pc_d915 ], [ %v1_d8a7, %dec_label_pc_d890 ]
  %tmp34 = icmp ult i64 %v0_d8ff, 10
  br i1 %tmp34, label %dec_label_pc_d910, label %dec_label_pc_d8d7

dec_label_pc_d8d7:                                ; preds = %dec_label_pc_d8b8
  br i1 undef, label %dec_label_pc_d915, label %dec_label_pc_d8dc

dec_label_pc_d8dc:                                ; preds = %dec_label_pc_d8d7
  store i64 16, i64* @r8, align 8
  store i64 9, i64* @rsi, align 8
  br label %dec_label_pc_d8f9

dec_label_pc_d8f0:                                ; preds = %dec_label_pc_d8f9
  %v1_d8f0 = add i64 %v0_d8f0, 8
  store i64 %v1_d8f0, i64* @r8, align 8
  %v1_d8f4 = icmp eq i64 %tmp35, 0
  br i1 %v1_d8f4, label %dec_label_pc_d915.loopexit, label %dec_label_pc_d8f9

dec_label_pc_d8f9:                                ; preds = %dec_label_pc_d8f0, %dec_label_pc_d8dc
  %v0_d8f0 = phi i64 [ %v1_d8f0, %dec_label_pc_d8f0 ], [ 16, %dec_label_pc_d8dc ]
  %v2_d9059 = phi i64 [ %v2_d905, %dec_label_pc_d8f0 ], [ 9, %dec_label_pc_d8dc ]
  %v0_d9024 = phi i64 [ %v1_d8f9, %dec_label_pc_d8f0 ], [ 3, %dec_label_pc_d8dc ]
  %v1_d8f9 = add i64 %v0_d9024, 2
  %tmp35 = urem i64 %v0_d8ff, %v1_d8f9
  %v2_d905 = add i64 %v2_d9059, %v0_d8f0
  %v7_d908 = icmp ult i64 %v2_d905, %v0_d8ff
  br i1 %v7_d908, label %dec_label_pc_d8f0, label %dec_label_pc_d910.loopexit

dec_label_pc_d910.loopexit:                       ; preds = %dec_label_pc_d8f9
  store i64 %v2_d905, i64* @rsi, align 8
  br label %dec_label_pc_d910

dec_label_pc_d910:                                ; preds = %dec_label_pc_d910.loopexit, %dec_label_pc_d8b8
  %.lcssa620 = phi i64 [ %tmp35, %dec_label_pc_d910.loopexit ], [ undef, %dec_label_pc_d8b8 ]
  %.lcssa821 = phi i64 [ %tmp35, %dec_label_pc_d910.loopexit ], [ undef, %dec_label_pc_d8b8 ]
  %v1_d8f9.lcssa514 = phi i64 [ %v1_d8f9, %dec_label_pc_d910.loopexit ], [ undef, %dec_label_pc_d8b8 ]
  %v1_d910 = icmp eq i64 %.lcssa821, 0
  %v1_d913 = icmp eq i1 %v1_d910, false
  br i1 %v1_d913, label %dec_label_pc_d91f.loopexit, label %dec_label_pc_d915

dec_label_pc_d915.loopexit:                       ; preds = %dec_label_pc_d8f0
  store i64 %v2_d905, i64* @rsi, align 8
  br label %dec_label_pc_d915

dec_label_pc_d915:                                ; preds = %dec_label_pc_d915.loopexit, %dec_label_pc_d910, %dec_label_pc_d8d7
  %.lcssa619 = phi i64 [ 0, %dec_label_pc_d915.loopexit ], [ %.lcssa620, %dec_label_pc_d910 ], [ undef, %dec_label_pc_d8d7 ]
  %v1_d8f9.lcssa513 = phi i64 [ %v1_d8f9, %dec_label_pc_d915.loopexit ], [ %v1_d8f9.lcssa514, %dec_label_pc_d910 ], [ 0, %dec_label_pc_d8d7 ]
  %v1_d915 = add i64 %v0_d8ff, 2
  store i64 %v1_d915, i64* @rdi, align 8
  %v10_d919 = icmp eq i64 %v0_d8ff, -3
  %v1_d91d = icmp eq i1 %v10_d919, false
  br i1 %v1_d91d, label %dec_label_pc_d8b8, label %dec_label_pc_d91f.loopexit

dec_label_pc_d91f.loopexit:                       ; preds = %dec_label_pc_d910, %dec_label_pc_d915
  %v0_d91f31 = phi i64 [ %v0_d8ff, %dec_label_pc_d910 ], [ %v1_d915, %dec_label_pc_d915 ]
  %.lcssa618 = phi i64 [ %.lcssa620, %dec_label_pc_d910 ], [ %.lcssa619, %dec_label_pc_d915 ]
  %v1_d8f9.lcssa512 = phi i64 [ %v1_d8f9.lcssa514, %dec_label_pc_d910 ], [ %v1_d8f9.lcssa513, %dec_label_pc_d915 ]
  store i64 %v1_d8f9.lcssa512, i64* @rcx, align 8
  store i64 %.lcssa618, i64* @rdx, align 8
  br label %dec_label_pc_d91f

dec_label_pc_d91f:                                ; preds = %dec_label_pc_d91f.loopexit, %dec_label_pc_d890
  %v0_d91f = phi i64 [ %v0_d91f31, %dec_label_pc_d91f.loopexit ], [ %v1_d8a7, %dec_label_pc_d890 ]
  ret i64 %v0_d91f
}

define i64 @function_d930(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_d930:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_d935 = udiv i64 %arg1, 8
  %v2_d935 = mul i64 %arg1, 2305843009213693952
  %v3_d935 = or i64 %v1_d935, %v2_d935
  %tmp235 = urem i64 %v3_d935, %arg2
  store i64 %tmp235, i64* @rdx, align 8
  ret i64 %tmp235
}

define i64 @function_d940(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d940:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v12_d940 = icmp eq i64 %arg1, %arg2
  %v1_d943 = zext i1 %v12_d940 to i64
  %v2_d943 = load i64, i64* %rax.global-to-local, align 8
  %v3_d943 = and i64 %v2_d943, -256
  %v4_d943 = or i64 %v3_d943, %v1_d943
  store i64 %v4_d943, i64* %rax.global-to-local, align 8
  ret i64 %v4_d943
}

define i64 @function_d950(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_d950:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_d950 = load i64, i64* @rbx, align 8
  %v0_d951 = load i64, i64* @rdi, align 8
  store i64 %v0_d951, i64* @rbx, align 8
  %v0_d954 = load i64, i64* @rsi, align 8
  store i64 %v0_d954, i64* @rdi, align 8
  %v1_d957 = add i64 %v0_d951, 16
  %v2_d957 = inttoptr i64 %v1_d957 to i64*
  %v3_d957 = load i64, i64* %v2_d957, align 8
  store i64 %v3_d957, i64* @rsi, align 8
  %v3_d95e = load i64, i64* %v2_d957, align 8
  %v4_d95e = load i64, i64* @rax, align 8
  %tmp2 = icmp ugt i64 %v3_d95e, %v4_d95e
  br i1 %tmp2, label %dec_label_pc_d964, label %dec_label_pc_d96d

dec_label_pc_d964:                                ; preds = %dec_label_pc_d950
  %v2_d964 = mul i64 %v4_d95e, 16
  %v4_d968 = add i64 %v2_d964, %v0_d954
  store i64 %v0_d950, i64* @rbx, align 8
  ret i64 %v4_d968

dec_label_pc_d96d:                                ; preds = %dec_label_pc_d950
  call void @abort()
  unreachable
}

define i64 @function_d980(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_d980:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-40 = alloca i64, align 8
  %v0_d980 = load i64, i64* %r14.global-to-local, align 8
  %v0_d982 = load i64, i64* %r13.global-to-local, align 8
  %v0_d984 = load i64, i64* @rdx, align 8
  store i64 %v0_d984, i64* %r14.global-to-local, align 8
  %v0_d987 = load i64, i64* %r12.global-to-local, align 8
  %v0_d989 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %arg1, i64* %r12.global-to-local, align 8
  %v0_d98d = load i64, i64* @rbx, align 8
  store i64 %v0_d98d, i64* %stack_var_-40, align 8
  store i64 %arg2, i64* %rbp.global-to-local, align 8
  %v0_d991 = load i64, i64* @rcx, align 8
  store i64 %v0_d991, i64* %r13.global-to-local, align 8
  %v2_d994 = call i64 @function_d950(i64 %arg1, i64 %arg2)
  store i64 %v2_d994, i64* %rax.global-to-local, align 8
  %v1_d999 = load i64, i64* %r14.global-to-local, align 8
  %v2_d999 = inttoptr i64 %v1_d999 to i64*
  store i64 %v2_d994, i64* %v2_d999, align 8
  %v0_d99c = load i64, i64* %rax.global-to-local, align 8
  %v1_d99c = inttoptr i64 %v0_d99c to i64*
  %v2_d99c = load i64, i64* %v1_d99c, align 8
  store i64 %v2_d99c, i64* @rsi, align 8
  %v1_d99f = icmp eq i64 %v2_d99c, 0
  br i1 %v1_d99f, label %dec_label_pc_da90, label %dec_label_pc_d9a8

dec_label_pc_d9a8:                                ; preds = %dec_label_pc_d980
  %v1_d9a8 = load i64, i64* %rbp.global-to-local, align 8
  %v12_d9a8 = icmp eq i64 %v2_d99c, %v1_d9a8
  store i64 %v0_d99c, i64* %rbx.global-to-local, align 8
  br i1 %v12_d9a8, label %dec_label_pc_da43, label %dec_label_pc_d9b4

dec_label_pc_d9b4:                                ; preds = %dec_label_pc_d9a8
  store i64 %v1_d9a8, i64* @rdi, align 8
  %v4_d9bc = trunc i64 %v0_d99c to i8
  %v5_d9bc = icmp eq i8 %v4_d9bc, 0
  %v1_d9be = icmp eq i1 %v5_d9bc, false
  br i1 %v1_d9be, label %dec_label_pc_da40, label %dec_label_pc_d9c4

dec_label_pc_d9c4:                                ; preds = %dec_label_pc_d9b4
  %v1_d9c4 = add i64 %v0_d99c, 8
  %v2_d9c4 = inttoptr i64 %v1_d9c4 to i64*
  %v3_d9c4 = load i64, i64* %v2_d9c4, align 8
  store i64 %v3_d9c4, i64* %rax.global-to-local, align 8
  %v1_d9c8 = icmp eq i64 %v3_d9c4, 0
  br i1 %v1_d9c8, label %dec_label_pc_da90, label %dec_label_pc_d9d1

dec_label_pc_d9d1:                                ; preds = %dec_label_pc_d9c4
  %v1_d9d1 = inttoptr i64 %v3_d9c4 to i64*
  %v2_d9d1 = load i64, i64* %v1_d9d1, align 8
  store i64 %v2_d9d1, i64* @rsi, align 8
  %v12_d9d4 = icmp eq i64 %v1_d9a8, %v2_d9d1
  %v1_d9d7 = icmp eq i1 %v12_d9d4, false
  br i1 %v1_d9d7, label %dec_label_pc_d9f9, label %dec_label_pc_da0c

dec_label_pc_d9e0:                                ; preds = %dec_label_pc_d9f9
  store i64 %v3_d9e0, i64* %rbx.global-to-local, align 8
  %v1_d9e4 = add i64 %v3_d9e0, 8
  %v2_d9e4 = inttoptr i64 %v1_d9e4 to i64*
  %v3_d9e4 = load i64, i64* %v2_d9e4, align 8
  store i64 %v3_d9e4, i64* %rax.global-to-local, align 8
  %v1_d9e8 = icmp eq i64 %v3_d9e4, 0
  br i1 %v1_d9e8, label %dec_label_pc_da90.loopexit, label %dec_label_pc_d9f1

dec_label_pc_d9f1:                                ; preds = %dec_label_pc_d9e0
  %v1_d9f1 = inttoptr i64 %v3_d9e4 to i64*
  %v2_d9f1 = load i64, i64* %v1_d9f1, align 8
  store i64 %v2_d9f1, i64* @rsi, align 8
  %v12_d9f4 = icmp eq i64 %v2_d9f1, %v1_d9a8
  br i1 %v12_d9f4, label %dec_label_pc_da0c.loopexit, label %dec_label_pc_d9f9

dec_label_pc_d9f9:                                ; preds = %dec_label_pc_d9d1, %dec_label_pc_d9f1
  %v0_d9e0 = phi i64 [ %v3_d9e0, %dec_label_pc_d9f1 ], [ %v0_d99c, %dec_label_pc_d9d1 ]
  %v0_da01 = phi i64 [ %v3_d9e4, %dec_label_pc_d9f1 ], [ %v3_d9c4, %dec_label_pc_d9d1 ]
  store i64 %v1_d9a8, i64* @rdi, align 8
  %v4_da01 = trunc i64 %v0_da01 to i8
  %v5_da01 = icmp eq i8 %v4_da01, 0
  %v1_d9e0 = add i64 %v0_d9e0, 8
  %v2_d9e0 = inttoptr i64 %v1_d9e0 to i64*
  %v3_d9e0 = load i64, i64* %v2_d9e0, align 8
  br i1 %v5_da01, label %dec_label_pc_d9e0, label %dec_label_pc_da05

dec_label_pc_da05:                                ; preds = %dec_label_pc_d9f9
  store i64 %v3_d9e0, i64* %rax.global-to-local, align 8
  %v1_da09 = inttoptr i64 %v3_d9e0 to i64*
  %v2_da09 = load i64, i64* %v1_da09, align 8
  store i64 %v2_da09, i64* @rsi, align 8
  br label %dec_label_pc_da0c

dec_label_pc_da0c.loopexit:                       ; preds = %dec_label_pc_d9f1
  br label %dec_label_pc_da0c

dec_label_pc_da0c:                                ; preds = %dec_label_pc_da0c.loopexit, %dec_label_pc_d9d1, %dec_label_pc_da05
  %v0_da11 = phi i64 [ %v3_d9e4, %dec_label_pc_da0c.loopexit ], [ %v3_d9c4, %dec_label_pc_d9d1 ], [ %v3_d9e0, %dec_label_pc_da05 ]
  %v1_da15 = phi i64 [ %v3_d9e0, %dec_label_pc_da0c.loopexit ], [ %v0_d99c, %dec_label_pc_d9d1 ], [ %v0_d9e0, %dec_label_pc_da05 ]
  %v0_da0c = load i64, i64* %r13.global-to-local, align 8
  %v4_da0c = trunc i64 %v0_da0c to i8
  %v5_da0c = icmp eq i8 %v4_da0c, 0
  br i1 %v5_da0c, label %dec_label_pc_da2e, label %dec_label_pc_da11

dec_label_pc_da11:                                ; preds = %dec_label_pc_da0c
  %v1_da11 = add i64 %v0_da11, 8
  %v2_da11 = inttoptr i64 %v1_da11 to i64*
  %v3_da11 = load i64, i64* %v2_da11, align 8
  store i64 %v3_da11, i64* @rdx, align 8
  %v2_da15 = add i64 %v1_da15, 8
  %v3_da15 = inttoptr i64 %v2_da15 to i64*
  store i64 %v3_da11, i64* %v3_da15, align 8
  %v0_da19 = load i64, i64* %rax.global-to-local, align 8
  %v1_da19 = inttoptr i64 %v0_da19 to i64*
  store i64 0, i64* %v1_da19, align 8
  %v0_da20 = load i64, i64* %r12.global-to-local, align 8
  %v1_da20 = add i64 %v0_da20, 72
  %v2_da20 = inttoptr i64 %v1_da20 to i64*
  %v3_da20 = load i64, i64* %v2_da20, align 8
  store i64 %v3_da20, i64* @rdx, align 8
  %v1_da25 = load i64, i64* %rax.global-to-local, align 8
  %v2_da25 = add i64 %v1_da25, 8
  %v3_da25 = inttoptr i64 %v2_da25 to i64*
  store i64 %v3_da20, i64* %v3_da25, align 8
  %v0_da29 = load i64, i64* %rax.global-to-local, align 8
  %v1_da29 = load i64, i64* %r12.global-to-local, align 8
  %v2_da29 = add i64 %v1_da29, 72
  %v3_da29 = inttoptr i64 %v2_da29 to i64*
  store i64 %v0_da29, i64* %v3_da29, align 8
  br label %dec_label_pc_da2e

dec_label_pc_da2e:                                ; preds = %dec_label_pc_da80, %dec_label_pc_da43, %dec_label_pc_da11, %dec_label_pc_da0c
  %v2_da2e = load i64, i64* %stack_var_-40, align 8
  store i64 %v2_da2e, i64* %rbx.global-to-local, align 8
  %v0_da2f = load i64, i64* @rsi, align 8
  store i64 %v0_da2f, i64* %rax.global-to-local, align 8
  store i64 %v0_d989, i64* %rbp.global-to-local, align 8
  store i64 %v0_d987, i64* %r12.global-to-local, align 8
  store i64 %v0_d982, i64* %r13.global-to-local, align 8
  store i64 %v0_d980, i64* %r14.global-to-local, align 8
  ret i64 %v0_da2f

dec_label_pc_da40:                                ; preds = %dec_label_pc_d9b4
  %v2_da40 = load i64, i64* %v1_d99c, align 8
  store i64 %v2_da40, i64* @rsi, align 8
  br label %dec_label_pc_da43

dec_label_pc_da43:                                ; preds = %dec_label_pc_da40, %dec_label_pc_d9a8
  %v0_da43 = load i64, i64* %r13.global-to-local, align 8
  %v4_da43 = trunc i64 %v0_da43 to i8
  %v5_da43 = icmp eq i8 %v4_da43, 0
  br i1 %v5_da43, label %dec_label_pc_da2e, label %dec_label_pc_da48

dec_label_pc_da48:                                ; preds = %dec_label_pc_da43
  %v1_da48 = add i64 %v0_d99c, 8
  %v2_da48 = inttoptr i64 %v1_da48 to i64*
  %v3_da48 = load i64, i64* %v2_da48, align 8
  store i64 %v3_da48, i64* %rax.global-to-local, align 8
  %v2_da4c = icmp eq i64 %v3_da48, 0
  br i1 %v2_da4c, label %dec_label_pc_da80, label %dec_label_pc_da51

dec_label_pc_da51:                                ; preds = %dec_label_pc_da48
  %v4_da48 = inttoptr i64 %v3_da48 to i128*
  %v3_da51 = load i128, i128* %v4_da48, align 8
  %v4_da51 = call i128 @__asm_movdqu(i128 %v3_da51)
  %v0_da55 = load i64, i64* %rbx.global-to-local, align 8
  %v1_da55 = inttoptr i64 %v0_da55 to i128*
  %v2_da55 = load i128, i128* %v1_da55, align 8
  call void @__asm_movups(i128 %v2_da55, i128 %v4_da51)
  %tmp266 = inttoptr i64 %v3_da48 to i64*
  store i64 0, i64* %tmp266, align 8
  %v0_da5f = load i64, i64* %r12.global-to-local, align 8
  %v1_da5f = add i64 %v0_da5f, 72
  %v2_da5f = inttoptr i64 %v1_da5f to i64*
  %v3_da5f = load i64, i64* %v2_da5f, align 8
  store i64 %v3_da5f, i64* @rdx, align 8
  %v3_da64 = add i64 %v3_da48, 8
  %v4_da64 = inttoptr i64 %v3_da64 to i64*
  store i64 %v3_da5f, i64* %v4_da64, align 8
  %v2_da68 = load i64, i64* %r12.global-to-local, align 8
  %v3_da68 = add i64 %v2_da68, 72
  %v4_da68 = inttoptr i64 %v3_da68 to i64*
  store i64 %v3_da48, i64* %v4_da68, align 8
  %v0_da6d = load i64, i64* @rsi, align 8
  store i64 %v0_da6d, i64* %rax.global-to-local, align 8
  %v2_da70 = load i64, i64* %stack_var_-40, align 8
  store i64 %v2_da70, i64* %rbx.global-to-local, align 8
  store i64 %v0_d989, i64* %rbp.global-to-local, align 8
  store i64 %v0_d987, i64* %r12.global-to-local, align 8
  store i64 %v0_d982, i64* %r13.global-to-local, align 8
  store i64 %v0_d980, i64* %r14.global-to-local, align 8
  ret i64 %v0_da6d

dec_label_pc_da80:                                ; preds = %dec_label_pc_da48
  store i64 0, i64* %v1_d99c, align 8
  br label %dec_label_pc_da2e

dec_label_pc_da90.loopexit:                       ; preds = %dec_label_pc_d9e0
  br label %dec_label_pc_da90

dec_label_pc_da90:                                ; preds = %dec_label_pc_da90.loopexit, %dec_label_pc_d9c4, %dec_label_pc_d980
  store i64 0, i64* @rsi, align 8
  %v2_da92 = load i64, i64* %stack_var_-40, align 8
  store i64 %v2_da92, i64* %rbx.global-to-local, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  store i64 %v0_d989, i64* %rbp.global-to-local, align 8
  store i64 %v0_d987, i64* %r12.global-to-local, align 8
  store i64 %v0_d982, i64* %r13.global-to-local, align 8
  store i64 %v0_d980, i64* %r14.global-to-local, align 8
  ret i64 0
}

define i64 @function_daa0(i64 %arg1) local_unnamed_addr {
dec_label_pc_daa0:
  %cf.global-to-local = alloca i1, align 1
  %rax.global-to-local = alloca i64, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rdx, align 8
  store i64 ptrtoint (i64* @global_var_1a3c0.400 to i64), i64* @rcx, align 8
  store i64 1, i64* %rax.global-to-local, align 8
  %v7_daaf = icmp ult i64 %arg1, ptrtoint (i64* @global_var_1a3c0.400 to i64)
  store i1 %v7_daaf, i1* %cf.global-to-local, align 1
  %v12_daaf = icmp eq i64 %arg1, ptrtoint (i64* @global_var_1a3c0.400 to i64)
  store i1 %v12_daaf, i1* %zf.global-to-local, align 1
  br i1 %v12_daaf, label %dec_label_pc_db15, label %dec_label_pc_dab4

dec_label_pc_dab4:                                ; preds = %dec_label_pc_daa0
  %v1_dab4 = add i64 %arg1, 8
  %v2_dab4 = inttoptr i64 %v1_dab4 to i32*
  %v3_dab4 = load i32, i32* %v2_dab4, align 4
  %v4_dab4 = call i128 @__asm_movss(i32 %v3_dab4)
  store i128 %v4_dab4, i128* @xmm0, align 8
  call void @__asm_ucomiss(i128 %v4_dab4, i32 1036831949)
  %v0_dac0 = load i1, i1* %cf.global-to-local, align 1
  %v1_dac0 = load i1, i1* %zf.global-to-local, align 1
  %v2_dac0 = or i1 %v0_dac0, %v1_dac0
  br i1 %v2_dac0, label %dec_label_pc_db10, label %dec_label_pc_dac2

dec_label_pc_dac2:                                ; preds = %dec_label_pc_dab4
  %v1_dac2 = call i128 @__asm_movss(i32 1063675494)
  store i128 %v1_dac2, i128* @xmm1, align 8
  call void @__asm_ucomiss.1(i128 %v1_dac2, i128 %v4_dab4)
  %v0_dacd = load i1, i1* %cf.global-to-local, align 1
  %v1_dacd = load i1, i1* %zf.global-to-local, align 1
  %v2_dacd = or i1 %v0_dacd, %v1_dacd
  br i1 %v2_dacd, label %dec_label_pc_db10, label %dec_label_pc_dacf

dec_label_pc_dacf:                                ; preds = %dec_label_pc_dac2
  %v0_dacf = load i64, i64* @rdx, align 8
  %v1_dacf = add i64 %v0_dacf, 12
  %v2_dacf = inttoptr i64 %v1_dacf to i32*
  %v3_dacf = load i32, i32* %v2_dacf, align 4
  %v4_dacf = call i128 @__asm_movss(i32 %v3_dacf)
  store i128 %v4_dacf, i128* @xmm1, align 8
  call void @__asm_ucomiss(i128 %v4_dacf, i32 1066192077)
  %v0_dadb = load i1, i1* %cf.global-to-local, align 1
  %v1_dadb = load i1, i1* %zf.global-to-local, align 1
  %v2_dadb = or i1 %v0_dadb, %v1_dadb
  br i1 %v2_dadb, label %dec_label_pc_db10, label %dec_label_pc_dadd

dec_label_pc_dadd:                                ; preds = %dec_label_pc_dacf
  %v2_dadd = load i32, i32* bitcast (i64* @rdi to i32*), align 8
  %v3_dadd = call i128 @__asm_movss(i32 %v2_dadd)
  store i128 %v3_dadd, i128* @xmm1, align 8
  call void @__asm_ucomiss(i128 %v3_dadd, i32 0)
  %v0_dae8 = load i1, i1* %cf.global-to-local, align 1
  br i1 %v0_dae8, label %dec_label_pc_db10, label %dec_label_pc_daea

dec_label_pc_daea:                                ; preds = %dec_label_pc_dadd
  %v2_daea = call i128 @__asm_addss.2(i128 %v3_dadd, i32 1036831949)
  store i128 %v2_daea, i128* @xmm1, align 8
  %v0_daf2 = load i64, i64* @rdx, align 8
  %v1_daf2 = add i64 %v0_daf2, 4
  %v2_daf2 = inttoptr i64 %v1_daf2 to i32*
  %v3_daf2 = load i32, i32* %v2_daf2, align 4
  %v4_daf2 = call i128 @__asm_movss(i32 %v3_daf2)
  call void @__asm_ucomiss.1(i128 %v4_daf2, i128 %v2_daea)
  %v0_dafa = load i1, i1* %cf.global-to-local, align 1
  %v1_dafa = load i1, i1* %zf.global-to-local, align 1
  %v2_dafa = or i1 %v0_dafa, %v1_dafa
  br i1 %v2_dafa, label %dec_label_pc_db10, label %dec_label_pc_dafc

dec_label_pc_dafc:                                ; preds = %dec_label_pc_daea
  %v1_dafc = call i128 @__asm_movss(i32 1065353216)
  call void @__asm_ucomiss.1(i128 %v1_dafc, i128 %v4_daf2)
  %v0_db07 = load i1, i1* %cf.global-to-local, align 1
  br i1 %v0_db07, label %dec_label_pc_db10, label %dec_label_pc_db09

dec_label_pc_db09:                                ; preds = %dec_label_pc_dafc
  call void @__asm_ucomiss.1(i128 %v4_dab4, i128 %v2_daea)
  %v0_db0c = load i1, i1* %cf.global-to-local, align 1
  %v1_db0c = load i1, i1* %zf.global-to-local, align 1
  %v2_db0c = or i1 %v0_db0c, %v1_db0c
  br i1 %v2_db0c, label %dec_label_pc_db10, label %dec_label_pc_db09.dec_label_pc_db15_crit_edge

dec_label_pc_db09.dec_label_pc_db15_crit_edge:    ; preds = %dec_label_pc_db09
  %v0_db15.pre = load i64, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_db15

dec_label_pc_db10:                                ; preds = %dec_label_pc_db09, %dec_label_pc_dafc, %dec_label_pc_daea, %dec_label_pc_dadd, %dec_label_pc_dacf, %dec_label_pc_dac2, %dec_label_pc_dab4
  %v0_db10 = load i64, i64* @rcx, align 8
  %v1_db10 = load i64, i64* @rdi, align 8
  %v2_db10 = inttoptr i64 %v1_db10 to i64*
  store i64 %v0_db10, i64* %v2_db10, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_db15

dec_label_pc_db15:                                ; preds = %dec_label_pc_db09.dec_label_pc_db15_crit_edge, %dec_label_pc_db10, %dec_label_pc_daa0
  %v0_db15 = phi i64 [ %v0_db15.pre, %dec_label_pc_db09.dec_label_pc_db15_crit_edge ], [ 0, %dec_label_pc_db10 ], [ 1, %dec_label_pc_daa0 ]
  ret i64 %v0_db15
}

define i64 @function_db20(i64* %arg1, i64 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_db20:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  %tmp22 = sext i32 %arg3 to i64
  store i64 %tmp22, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  %tmp23 = ptrtoint i64* %arg1 to i64
  store i64 %tmp23, i64* @rdi, align 8
  %v0_db29 = load i64, i64* @rbx, align 8
  %v2_db2e = load i64, i64* @rsi, align 8
  store i64 %v2_db2e, i64* %r12.global-to-local, align 8
  %v2_db31 = add i64 %v2_db2e, 8
  %v3_db31 = inttoptr i64 %v2_db31 to i64*
  %v4_db31 = load i64, i64* %v3_db31, align 8
  %v10_db31 = icmp ult i64 %v2_db2e, %v4_db31
  %v1_db35 = icmp eq i1 %v10_db31, false
  br i1 %v1_db35, label %dec_label_pc_dc18, label %dec_label_pc_db3b

dec_label_pc_db3b:                                ; preds = %dec_label_pc_db20
  %v0_db3b = load i64, i64* @rdi, align 8
  store i64 %v0_db3b, i64* %rbp.global-to-local, align 8
  store i64 %v2_db2e, i64* %r13.global-to-local, align 8
  %v0_db41 = load i64, i64* @rdx, align 8
  store i64 %v0_db41, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_db48

dec_label_pc_db48:                                ; preds = %dec_label_pc_dc0a, %dec_label_pc_db3b
  %v0_db55 = phi i64 [ %v1_dc0a, %dec_label_pc_dc0a ], [ %v2_db2e, %dec_label_pc_db3b ]
  %v1_db48 = inttoptr i64 %v0_db55 to i64*
  %v2_db48 = load i64, i64* %v1_db48, align 8
  store i64 %v2_db48, i64* %r15.global-to-local, align 8
  %v1_db4c = icmp eq i64 %v2_db48, 0
  br i1 %v1_db4c, label %dec_label_pc_dc0a, label %dec_label_pc_db55

dec_label_pc_db55:                                ; preds = %dec_label_pc_db48
  %v1_db55 = add i64 %v0_db55, 8
  %v2_db55 = inttoptr i64 %v1_db55 to i64*
  %v3_db55 = load i64, i64* %v2_db55, align 8
  store i64 %v3_db55, i64* @rbx, align 8
  %v1_db5a = icmp eq i64 %v3_db55, 0
  %v1_db5d = icmp eq i1 %v1_db5a, false
  br i1 %v1_db5d, label %dec_label_pc_db7c, label %dec_label_pc_dbbb

dec_label_pc_db68:                                ; preds = %dec_label_pc_db7c
  %v1_db68 = add i64 %v2_db85, 8
  %v2_db68 = inttoptr i64 %v1_db68 to i64*
  %v3_db68 = load i64, i64* %v2_db68, align 8
  store i64 %v3_db68, i64* @rcx, align 8
  %v1_db6c = icmp eq i64 %v3_db8e, 0
  store i64 %v3_db68, i64* %v2_db8e, align 8
  %v0_db73 = load i64, i64* @rbx, align 8
  %v1_db73 = load i64, i64* @rax, align 8
  %v2_db73 = add i64 %v1_db73, 8
  %v3_db73 = inttoptr i64 %v2_db73 to i64*
  store i64 %v0_db73, i64* %v3_db73, align 8
  store i64 %v3_db8e, i64* @rbx, align 8
  br i1 %v1_db6c, label %dec_label_pc_dbb7, label %dec_label_pc_db7c

dec_label_pc_db7c:                                ; preds = %dec_label_pc_db68, %dec_label_pc_db94, %dec_label_pc_db55
  %v0_db7c = phi i64 [ %v3_db55, %dec_label_pc_db55 ], [ %v3_db8e, %dec_label_pc_db94 ], [ %v3_db8e, %dec_label_pc_db68 ]
  %v1_db7c = inttoptr i64 %v0_db7c to i64*
  %v2_db7c = load i64, i64* %v1_db7c, align 8
  store i64 %v2_db7c, i64* %r15.global-to-local, align 8
  %v0_db7f = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_db7f, i64* @rdi, align 8
  store i64 %v2_db7c, i64* @rsi, align 8
  %v2_db85 = call i64 @function_d950(i64 %v0_db7f, i64 %v2_db7c)
  store i64 %v2_db85, i64* @rax, align 8
  %v1_db8a = inttoptr i64 %v2_db85 to i64*
  %v2_db8a = load i64, i64* %v1_db8a, align 8
  %v9_db8a = icmp eq i64 %v2_db8a, 0
  %v0_db8e = load i64, i64* @rbx, align 8
  %v1_db8e = add i64 %v0_db8e, 8
  %v2_db8e = inttoptr i64 %v1_db8e to i64*
  %v3_db8e = load i64, i64* %v2_db8e, align 8
  store i64 %v3_db8e, i64* @rdx, align 8
  %v1_db92 = icmp eq i1 %v9_db8a, false
  br i1 %v1_db92, label %dec_label_pc_db68, label %dec_label_pc_db94

dec_label_pc_db94:                                ; preds = %dec_label_pc_db7c
  %v0_db94 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_db94, i64* %v1_db8a, align 8
  %v0_db97 = load i64, i64* %rbp.global-to-local, align 8
  %v1_db97 = add i64 %v0_db97, 24
  %v2_db97 = inttoptr i64 %v1_db97 to i64*
  %v3_db97 = load i64, i64* %v2_db97, align 8
  %v4_db97 = add i64 %v3_db97, 1
  store i64 %v4_db97, i64* %v2_db97, align 8
  %v1_db9c = icmp eq i64 %v3_db8e, 0
  %v0_db9f = load i64, i64* @rbx, align 8
  %v1_db9f = inttoptr i64 %v0_db9f to i64*
  store i64 0, i64* %v1_db9f, align 8
  %v0_dba6 = load i64, i64* %rbp.global-to-local, align 8
  %v1_dba6 = add i64 %v0_dba6, 72
  %v2_dba6 = inttoptr i64 %v1_dba6 to i64*
  %v3_dba6 = load i64, i64* %v2_dba6, align 8
  store i64 %v3_dba6, i64* @rax, align 8
  %v1_dbaa = load i64, i64* @rbx, align 8
  %v2_dbaa = add i64 %v1_dbaa, 8
  %v3_dbaa = inttoptr i64 %v2_dbaa to i64*
  store i64 %v3_dba6, i64* %v3_dbaa, align 8
  %v0_dbae = load i64, i64* @rbx, align 8
  %v1_dbae = load i64, i64* %rbp.global-to-local, align 8
  %v2_dbae = add i64 %v1_dbae, 72
  %v3_dbae = inttoptr i64 %v2_dbae to i64*
  store i64 %v0_dbae, i64* %v3_dbae, align 8
  store i64 %v3_db8e, i64* @rbx, align 8
  %v1_dbb5 = icmp eq i1 %v1_db9c, false
  br i1 %v1_dbb5, label %dec_label_pc_db7c, label %dec_label_pc_dbb7

dec_label_pc_dbb7:                                ; preds = %dec_label_pc_db68, %dec_label_pc_db94
  %v0_dbb7 = load i64, i64* %r12.global-to-local, align 8
  %v1_dbb7 = inttoptr i64 %v0_dbb7 to i64*
  %v2_dbb7 = load i64, i64* %v1_dbb7, align 8
  store i64 %v2_dbb7, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_dbbb

dec_label_pc_dbbb:                                ; preds = %dec_label_pc_db55, %dec_label_pc_dbb7
  %v0_dbbe = phi i64 [ %v0_db55, %dec_label_pc_db55 ], [ %v0_dbb7, %dec_label_pc_dbb7 ]
  %v0_dbbb = load i64, i64* %r14.global-to-local, align 8
  %v4_dbbb = trunc i64 %v0_dbbb to i8
  %v5_dbbb = icmp eq i8 %v4_dbbb, 0
  %v1_dbbe = add i64 %v0_dbbe, 8
  %v2_dbbe = inttoptr i64 %v1_dbbe to i64*
  store i64 0, i64* %v2_dbbe, align 8
  %v1_dbc7 = icmp eq i1 %v5_dbbb, false
  br i1 %v1_dbc7, label %dec_label_pc_dc0a, label %dec_label_pc_dbc9

dec_label_pc_dbc9:                                ; preds = %dec_label_pc_dbbb
  %v0_dbc9 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_dbc9, i64* @rsi, align 8
  %v0_dbcc = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_dbcc, i64* @rdi, align 8
  %v2_dbcf = call i64 @function_d950(i64 %v0_dbcc, i64 %v0_dbc9)
  store i64 %v2_dbcf, i64* @rax, align 8
  %v1_dbd4 = inttoptr i64 %v2_dbcf to i64*
  %v2_dbd4 = load i64, i64* %v1_dbd4, align 8
  %v9_dbd4 = icmp eq i64 %v2_dbd4, 0
  store i64 %v2_dbcf, i64* %rbx.global-to-local, align 8
  br i1 %v9_dbd4, label %dec_label_pc_dc30, label %dec_label_pc_dbdd

dec_label_pc_dbdd:                                ; preds = %dec_label_pc_dbc9
  %v0_dbdd = load i64, i64* %rbp.global-to-local, align 8
  %v1_dbdd = add i64 %v0_dbdd, 72
  %v2_dbdd = inttoptr i64 %v1_dbdd to i64*
  %v3_dbdd = load i64, i64* %v2_dbdd, align 8
  store i64 %v3_dbdd, i64* @rax, align 8
  %v1_dbe1 = icmp eq i64 %v3_dbdd, 0
  br i1 %v1_dbe1, label %dec_label_pc_dc40, label %dec_label_pc_dbe6

dec_label_pc_dbe6:                                ; preds = %dec_label_pc_dbdd
  %v1_dbe6 = add i64 %v3_dbdd, 8
  %v2_dbe6 = inttoptr i64 %v1_dbe6 to i64*
  %v3_dbe6 = load i64, i64* %v2_dbe6, align 8
  store i64 %v3_dbe6, i64* @rdx, align 8
  store i64 %v3_dbe6, i64* %v2_dbdd, align 8
  %v1_dbf2.pre = load i64, i64* @rax, align 8
  br label %dec_label_pc_dbee

dec_label_pc_dbee:                                ; preds = %dec_label_pc_dc40, %dec_label_pc_dbe6
  %v1_dbf2 = phi i64 [ %v5_dc45, %dec_label_pc_dc40 ], [ %v1_dbf2.pre, %dec_label_pc_dbe6 ]
  %v0_dbee = load i64, i64* %rbx.global-to-local, align 8
  %v1_dbee = add i64 %v0_dbee, 8
  %v2_dbee = inttoptr i64 %v1_dbee to i64*
  %v3_dbee = load i64, i64* %v2_dbee, align 8
  store i64 %v3_dbee, i64* @rdx, align 8
  %v0_dbf2 = load i64, i64* %r15.global-to-local, align 8
  %v2_dbf2 = inttoptr i64 %v1_dbf2 to i64*
  store i64 %v0_dbf2, i64* %v2_dbf2, align 8
  %v0_dbf5 = load i64, i64* @rdx, align 8
  %v1_dbf5 = load i64, i64* @rax, align 8
  %v2_dbf5 = add i64 %v1_dbf5, 8
  %v3_dbf5 = inttoptr i64 %v2_dbf5 to i64*
  store i64 %v0_dbf5, i64* %v3_dbf5, align 8
  %v0_dbf9 = load i64, i64* @rax, align 8
  %v1_dbf9 = load i64, i64* %rbx.global-to-local, align 8
  %v2_dbf9 = add i64 %v1_dbf9, 8
  %v3_dbf9 = inttoptr i64 %v2_dbf9 to i64*
  store i64 %v0_dbf9, i64* %v3_dbf9, align 8
  br label %dec_label_pc_dbfd

dec_label_pc_dbfd:                                ; preds = %dec_label_pc_dc30, %dec_label_pc_dbee
  %v0_dbfd = load i64, i64* %r12.global-to-local, align 8
  %v1_dbfd = inttoptr i64 %v0_dbfd to i64*
  store i64 0, i64* %v1_dbfd, align 8
  %v0_dc05 = load i64, i64* %r13.global-to-local, align 8
  %v1_dc05 = add i64 %v0_dc05, 24
  %v2_dc05 = inttoptr i64 %v1_dc05 to i64*
  %v3_dc05 = load i64, i64* %v2_dc05, align 8
  %v4_dc05 = add i64 %v3_dc05, -1
  store i64 %v4_dc05, i64* %v2_dc05, align 8
  br label %dec_label_pc_dc0a

dec_label_pc_dc0a:                                ; preds = %dec_label_pc_dbfd, %dec_label_pc_dbbb, %dec_label_pc_db48
  %v0_dc0a = load i64, i64* %r12.global-to-local, align 8
  %v1_dc0a = add i64 %v0_dc0a, 16
  store i64 %v1_dc0a, i64* %r12.global-to-local, align 8
  %v0_dc0e = load i64, i64* %r13.global-to-local, align 8
  %v1_dc0e = add i64 %v0_dc0e, 8
  %v2_dc0e = inttoptr i64 %v1_dc0e to i64*
  %v3_dc0e = load i64, i64* %v2_dc0e, align 8
  %tmp35 = icmp ugt i64 %v3_dc0e, %v1_dc0a
  br i1 %tmp35, label %dec_label_pc_db48, label %dec_label_pc_dc18.loopexit

dec_label_pc_dc18.loopexit:                       ; preds = %dec_label_pc_dc0a
  br label %dec_label_pc_dc18

dec_label_pc_dc18:                                ; preds = %dec_label_pc_dc18.loopexit, %dec_label_pc_db20
  store i64 %v0_db29, i64* @rbx, align 8
  ret i64 1

dec_label_pc_dc30:                                ; preds = %dec_label_pc_dbc9
  %v0_dc30 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_dc30, i64* %v1_dbd4, align 8
  %v0_dc33 = load i64, i64* %rbp.global-to-local, align 8
  %v1_dc33 = add i64 %v0_dc33, 24
  %v2_dc33 = inttoptr i64 %v1_dc33 to i64*
  %v3_dc33 = load i64, i64* %v2_dc33, align 8
  %v4_dc33 = add i64 %v3_dc33, 1
  store i64 %v4_dc33, i64* %v2_dc33, align 8
  br label %dec_label_pc_dbfd

dec_label_pc_dc40:                                ; preds = %dec_label_pc_dbdd
  store i64 16, i64* @rdi, align 8
  %v3_dc45 = call i64* @malloc(i32 16)
  %v5_dc45 = ptrtoint i64* %v3_dc45 to i64
  store i64 %v5_dc45, i64* @rax, align 8
  %v1_dc4a = icmp eq i64* %v3_dc45, null
  %v1_dc4d = icmp eq i1 %v1_dc4a, false
  br i1 %v1_dc4d, label %dec_label_pc_dbee, label %dec_label_pc_dc4f

dec_label_pc_dc4f:                                ; preds = %dec_label_pc_dc40
  store i64 %v0_db29, i64* @rbx, align 8
  ret i64 0
}

define i64 @function_dc60(i64 %arg1) local_unnamed_addr {
dec_label_pc_dc60:
  store i64 %arg1, i64* @rdi, align 8
  %v1_dc60 = add i64 %arg1, 16
  %v2_dc60 = inttoptr i64 %v1_dc60 to i64*
  %v3_dc60 = load i64, i64* %v2_dc60, align 8
  ret i64 %v3_dc60
}

define i64 @function_dc70(i64 %arg1) local_unnamed_addr {
dec_label_pc_dc70:
  store i64 %arg1, i64* @rdi, align 8
  %v1_dc70 = add i64 %arg1, 24
  %v2_dc70 = inttoptr i64 %v1_dc70 to i64*
  %v3_dc70 = load i64, i64* %v2_dc70, align 8
  ret i64 %v3_dc70
}

define i64 @function_dc80(i64 %arg1) local_unnamed_addr {
dec_label_pc_dc80:
  store i64 %arg1, i64* @rdi, align 8
  %v1_dc80 = add i64 %arg1, 32
  %v2_dc80 = inttoptr i64 %v1_dc80 to i64*
  %v3_dc80 = load i64, i64* %v2_dc80, align 8
  ret i64 %v3_dc80
}

define i64 @function_dc90(i64 %arg1) local_unnamed_addr {
dec_label_pc_dc90:
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rsi, align 8
  %v1_dc93 = add i64 %arg1, 8
  %v2_dc93 = inttoptr i64 %v1_dc93 to i64*
  %v3_dc93 = load i64, i64* %v2_dc93, align 8
  store i64 %v3_dc93, i64* @rdi, align 8
  %v7_dc99 = icmp ugt i64 %v3_dc93, %arg1
  %v1_dc9c = icmp eq i1 %v7_dc99, false
  br i1 %v1_dc9c, label %dec_label_pc_dcd7, label %dec_label_pc_dca0

dec_label_pc_dca0:                                ; preds = %dec_label_pc_dc90, %dec_label_pc_dccc
  %v0_dcc5 = phi i64 [ %v0_dcd5, %dec_label_pc_dccc ], [ 0, %dec_label_pc_dc90 ]
  %v0_dccc = phi i64 [ %v1_dccc, %dec_label_pc_dccc ], [ %arg1, %dec_label_pc_dc90 ]
  %v1_dca0 = inttoptr i64 %v0_dccc to i64*
  %v2_dca0 = load i64, i64* %v1_dca0, align 8
  %v9_dca0 = icmp eq i64 %v2_dca0, 0
  br i1 %v9_dca0, label %dec_label_pc_dccc, label %dec_label_pc_dca6

dec_label_pc_dca6:                                ; preds = %dec_label_pc_dca0
  %v1_dca6 = add i64 %v0_dccc, 8
  %v2_dca6 = inttoptr i64 %v1_dca6 to i64*
  %v3_dca6 = load i64, i64* %v2_dca6, align 8
  store i64 %v3_dca6, i64* @rdx, align 8
  store i64 1, i64* @rcx, align 8
  %v1_dcaf = icmp eq i64 %v3_dca6, 0
  br i1 %v1_dcaf, label %dec_label_pc_dcc5, label %dec_label_pc_dcb8

dec_label_pc_dcb8:                                ; preds = %dec_label_pc_dca6, %dec_label_pc_dcb8
  %v0_dcbc = phi i64 [ %v1_dcbc, %dec_label_pc_dcb8 ], [ 1, %dec_label_pc_dca6 ]
  %v0_dcb8 = phi i64 [ %v3_dcb8, %dec_label_pc_dcb8 ], [ %v3_dca6, %dec_label_pc_dca6 ]
  %v1_dcb8 = add i64 %v0_dcb8, 8
  %v2_dcb8 = inttoptr i64 %v1_dcb8 to i64*
  %v3_dcb8 = load i64, i64* %v2_dcb8, align 8
  store i64 %v3_dcb8, i64* @rdx, align 8
  %v1_dcbc = add i64 %v0_dcbc, 1
  store i64 %v1_dcbc, i64* @rcx, align 8
  %v1_dcc0 = icmp eq i64 %v3_dcb8, 0
  %v1_dcc3 = icmp eq i1 %v1_dcc0, false
  br i1 %v1_dcc3, label %dec_label_pc_dcb8, label %dec_label_pc_dcc5

dec_label_pc_dcc5:                                ; preds = %dec_label_pc_dcb8, %dec_label_pc_dca6
  %v1_dcc5 = phi i64 [ 1, %dec_label_pc_dca6 ], [ %v1_dcbc, %dec_label_pc_dcb8 ]
  %v7_dcc5 = icmp ult i64 %v0_dcc5, %v1_dcc5
  %v3_dcc8 = select i1 %v7_dcc5, i64 %v1_dcc5, i64 %v0_dcc5
  br label %dec_label_pc_dccc

dec_label_pc_dccc:                                ; preds = %dec_label_pc_dcc5, %dec_label_pc_dca0
  %v0_dcd5 = phi i64 [ %v3_dcc8, %dec_label_pc_dcc5 ], [ %v0_dcc5, %dec_label_pc_dca0 ]
  %v1_dccc = add i64 %v0_dccc, 16
  store i64 %v1_dccc, i64* @rsi, align 8
  %v7_dcd0 = icmp ult i64 %v1_dccc, %v3_dc93
  br i1 %v7_dcd0, label %dec_label_pc_dca0, label %dec_label_pc_dcd5

dec_label_pc_dcd5:                                ; preds = %dec_label_pc_dccc
  ret i64 %v0_dcd5

dec_label_pc_dcd7:                                ; preds = %dec_label_pc_dc90
  ret i64 0
}

define i64 @function_dce0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_dce0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* @rcx, align 8
  %v1_dce3 = add i64 %arg1, 8
  %v2_dce3 = inttoptr i64 %v1_dce3 to i64*
  %v3_dce3 = load i64, i64* %v2_dce3, align 8
  store i64 %v3_dce3, i64* @r8, align 8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  %v7_dceb = icmp ugt i64 %v3_dce3, %arg1
  %v1_dcee = icmp eq i1 %v7_dceb, false
  br i1 %v1_dcee, label %dec_label_pc_dd26, label %dec_label_pc_dcf0

dec_label_pc_dcf0:                                ; preds = %dec_label_pc_dce0, %dec_label_pc_dd1d
  %v0_dcfe = phi i64 [ %v0_dcfe8, %dec_label_pc_dd1d ], [ 0, %dec_label_pc_dce0 ]
  %v0_dcfa = phi i64 [ %v0_dcfa6, %dec_label_pc_dd1d ], [ 0, %dec_label_pc_dce0 ]
  %v0_dd1d = phi i64 [ %v1_dd1d, %dec_label_pc_dd1d ], [ %arg1, %dec_label_pc_dce0 ]
  %v1_dcf0 = inttoptr i64 %v0_dd1d to i64*
  %v2_dcf0 = load i64, i64* %v1_dcf0, align 8
  %v9_dcf0 = icmp eq i64 %v2_dcf0, 0
  br i1 %v9_dcf0, label %dec_label_pc_dd1d, label %dec_label_pc_dcf6

dec_label_pc_dcf6:                                ; preds = %dec_label_pc_dcf0
  %v1_dcf6 = add i64 %v0_dd1d, 8
  %v2_dcf6 = inttoptr i64 %v1_dcf6 to i64*
  %v3_dcf6 = load i64, i64* %v2_dcf6, align 8
  %v1_dcfa = add i64 %v0_dcfa, 1
  store i64 %v1_dcfa, i64* @rsi, align 8
  %v1_dcfe = add i64 %v0_dcfe, 1
  store i64 %v1_dcfe, i64* @rdx, align 8
  %v1_dd02 = icmp eq i64 %v3_dcf6, 0
  br i1 %v1_dd02, label %dec_label_pc_dd1d, label %dec_label_pc_dd10

dec_label_pc_dd10:                                ; preds = %dec_label_pc_dcf6, %dec_label_pc_dd10
  %v0_dd14 = phi i64 [ %v1_dd14, %dec_label_pc_dd10 ], [ %v1_dcfe, %dec_label_pc_dcf6 ]
  %v0_dd10 = phi i64 [ %v3_dd10, %dec_label_pc_dd10 ], [ %v3_dcf6, %dec_label_pc_dcf6 ]
  %v1_dd10 = add i64 %v0_dd10, 8
  %v2_dd10 = inttoptr i64 %v1_dd10 to i64*
  %v3_dd10 = load i64, i64* %v2_dd10, align 8
  %v1_dd14 = add i64 %v0_dd14, 1
  store i64 %v1_dd14, i64* @rdx, align 8
  %v1_dd18 = icmp eq i64 %v3_dd10, 0
  %v1_dd1b = icmp eq i1 %v1_dd18, false
  br i1 %v1_dd1b, label %dec_label_pc_dd10, label %dec_label_pc_dd1d

dec_label_pc_dd1d:                                ; preds = %dec_label_pc_dd10, %dec_label_pc_dcf6, %dec_label_pc_dcf0
  %v0_dcfe8 = phi i64 [ %v1_dcfe, %dec_label_pc_dcf6 ], [ %v0_dcfe, %dec_label_pc_dcf0 ], [ %v1_dd14, %dec_label_pc_dd10 ]
  %v0_dcfa6 = phi i64 [ %v1_dcfa, %dec_label_pc_dcf6 ], [ %v0_dcfa, %dec_label_pc_dcf0 ], [ %v1_dcfa, %dec_label_pc_dd10 ]
  %v1_dd1d = add i64 %v0_dd1d, 16
  store i64 %v1_dd1d, i64* @rcx, align 8
  %v7_dd21 = icmp ult i64 %v1_dd1d, %v3_dce3
  br i1 %v7_dd21, label %dec_label_pc_dcf0, label %dec_label_pc_dd26.loopexit

dec_label_pc_dd26.loopexit:                       ; preds = %dec_label_pc_dd1d
  br label %dec_label_pc_dd26

dec_label_pc_dd26:                                ; preds = %dec_label_pc_dd26.loopexit, %dec_label_pc_dce0
  %v4_dd30 = phi i64 [ %v0_dcfe8, %dec_label_pc_dd26.loopexit ], [ 0, %dec_label_pc_dce0 ]
  %v4_dd28 = phi i64 [ %v0_dcfa6, %dec_label_pc_dd26.loopexit ], [ 0, %dec_label_pc_dce0 ]
  %v1_dd28 = add i64 %arg1, 24
  %v2_dd28 = inttoptr i64 %v1_dd28 to i64*
  %v3_dd28 = load i64, i64* %v2_dd28, align 8
  %v15_dd28 = icmp eq i64 %v3_dd28, %v4_dd28
  br i1 %v15_dd28, label %dec_label_pc_dd30, label %dec_label_pc_dd2e

dec_label_pc_dd2e:                                ; preds = %dec_label_pc_dd26
  ret i64 0

dec_label_pc_dd30:                                ; preds = %dec_label_pc_dd26
  %v1_dd30 = add i64 %arg1, 32
  %v2_dd30 = inttoptr i64 %v1_dd30 to i64*
  %v3_dd30 = load i64, i64* %v2_dd30, align 8
  %v15_dd30 = icmp eq i64 %v3_dd30, %v4_dd30
  %v1_dd34 = zext i1 %v15_dd30 to i64
  ret i64 %v1_dd34
}

define i64 @function_dd40(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_dd40:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  %sf.global-to-local = alloca i1, align 1
  %xmm0.global-to-local = alloca i128, align 8
  %xmm1.global-to-local = alloca i128, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_dd40 = load i64, i64* %r13.global-to-local, align 8
  %v0_dd42 = load i64, i64* %r12.global-to-local, align 8
  %v0_dd44 = load i64, i64* @rsi, align 8
  store i64 %v0_dd44, i64* %r12.global-to-local, align 8
  %v0_dd47 = load i64, i64* %rbp.global-to-local, align 8
  %v0_dd48 = load i64, i64* %rbx.global-to-local, align 8
  store i64 0, i64* %rbx.global-to-local, align 8
  %v2_dd4f = load i64, i64* @rdi, align 8
  store i64 %v2_dd4f, i64* @rsi, align 8
  %v1_dd52 = add i64 %v2_dd4f, 32
  %v2_dd52 = inttoptr i64 %v1_dd52 to i64*
  %v3_dd52 = load i64, i64* %v2_dd52, align 8
  %v4_dd52 = trunc i64 %v3_dd52 to i32
  store i64 %v3_dd52, i64* @rcx, align 8
  %v1_dd56 = add i64 %v2_dd4f, 16
  %v2_dd56 = inttoptr i64 %v1_dd56 to i64*
  %v3_dd56 = load i64, i64* %v2_dd56, align 8
  %v4_dd56 = trunc i64 %v3_dd56 to i32
  store i64 %v3_dd56, i64* %rbp.global-to-local, align 8
  %v1_dd5a = add i64 %v2_dd4f, 24
  %v2_dd5a = inttoptr i64 %v1_dd5a to i64*
  %v3_dd5a = load i64, i64* %v2_dd5a, align 8
  %v4_dd5a = trunc i64 %v3_dd5a to i32
  store i64 %v3_dd5a, i64* %r13.global-to-local, align 8
  %v1_dd5e = add i64 %v2_dd4f, 8
  %v2_dd5e = inttoptr i64 %v1_dd5e to i64*
  %v3_dd5e = load i64, i64* %v2_dd5e, align 8
  store i64 %v3_dd5e, i64* @rdi, align 8
  %v2_dd62 = sub i64 %v2_dd4f, %v3_dd5e
  %v7_dd62 = icmp ult i64 %v2_dd4f, %v3_dd5e
  %v13_dd62 = icmp slt i64 %v2_dd62, 0
  store i1 %v13_dd62, i1* %sf.global-to-local, align 1
  %v1_dd65 = icmp eq i1 %v7_dd62, false
  br i1 %v1_dd65, label %dec_label_pc_dda5, label %dec_label_pc_dd70

dec_label_pc_dd70:                                ; preds = %dec_label_pc_dd40, %dec_label_pc_dd9c
  %v0_dd95 = phi i64 [ %v0_dd9513, %dec_label_pc_dd9c ], [ 0, %dec_label_pc_dd40 ]
  %v0_dd9c = phi i64 [ %v1_dd9c, %dec_label_pc_dd9c ], [ %v2_dd4f, %dec_label_pc_dd40 ]
  %v1_dd70 = inttoptr i64 %v0_dd9c to i64*
  %v2_dd70 = load i64, i64* %v1_dd70, align 8
  %v9_dd70 = icmp eq i64 %v2_dd70, 0
  br i1 %v9_dd70, label %dec_label_pc_dd9c, label %dec_label_pc_dd76

dec_label_pc_dd76:                                ; preds = %dec_label_pc_dd70
  %v1_dd76 = add i64 %v0_dd9c, 8
  %v2_dd76 = inttoptr i64 %v1_dd76 to i64*
  %v3_dd76 = load i64, i64* %v2_dd76, align 8
  store i64 1, i64* @rdx, align 8
  %v1_dd7f = icmp eq i64 %v3_dd76, 0
  br i1 %v1_dd7f, label %dec_label_pc_dd95, label %dec_label_pc_dd88

dec_label_pc_dd88:                                ; preds = %dec_label_pc_dd76, %dec_label_pc_dd88
  %v0_dd8c = phi i64 [ %v1_dd8c, %dec_label_pc_dd88 ], [ 1, %dec_label_pc_dd76 ]
  %v0_dd88 = phi i64 [ %v3_dd88, %dec_label_pc_dd88 ], [ %v3_dd76, %dec_label_pc_dd76 ]
  %v1_dd88 = add i64 %v0_dd88, 8
  %v2_dd88 = inttoptr i64 %v1_dd88 to i64*
  %v3_dd88 = load i64, i64* %v2_dd88, align 8
  %v1_dd8c = add i64 %v0_dd8c, 1
  store i64 %v1_dd8c, i64* @rdx, align 8
  %v1_dd90 = icmp eq i64 %v3_dd88, 0
  %v1_dd93 = icmp eq i1 %v1_dd90, false
  br i1 %v1_dd93, label %dec_label_pc_dd88, label %dec_label_pc_dd95

dec_label_pc_dd95:                                ; preds = %dec_label_pc_dd88, %dec_label_pc_dd76
  %v1_dd95 = phi i64 [ 1, %dec_label_pc_dd76 ], [ %v1_dd8c, %dec_label_pc_dd88 ]
  %v7_dd95 = icmp ult i64 %v0_dd95, %v1_dd95
  %v3_dd98 = select i1 %v7_dd95, i64 %v1_dd95, i64 %v0_dd95
  store i64 %v3_dd98, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_dd9c

dec_label_pc_dd9c:                                ; preds = %dec_label_pc_dd95, %dec_label_pc_dd70
  %v0_dd9513 = phi i64 [ %v3_dd98, %dec_label_pc_dd95 ], [ %v0_dd95, %dec_label_pc_dd70 ]
  %v1_dd9c = add i64 %v0_dd9c, 16
  store i64 %v1_dd9c, i64* @rsi, align 8
  %v7_dda0 = icmp ult i64 %v1_dd9c, %v3_dd5e
  br i1 %v7_dda0, label %dec_label_pc_dd70, label %dec_label_pc_dda5.loopexit

dec_label_pc_dda5.loopexit:                       ; preds = %dec_label_pc_dd9c
  %v2_dda0.le = sub i64 %v1_dd9c, %v3_dd5e
  %v13_dda0 = icmp slt i64 %v2_dda0.le, 0
  store i1 %v13_dda0, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_dda5

dec_label_pc_dda5:                                ; preds = %dec_label_pc_dda5.loopexit, %dec_label_pc_dd40
  store i64 ptrtoint ([24 x i8]* @global_var_1a347.406 to i64), i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  store i64 %v0_dd44, i64* @rdi, align 8
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_ddb6 = inttoptr i64 %v0_dd44 to %_IO_FILE*
  %v11_ddb6 = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v1_ddb6, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @global_var_1a347.406, i64 0, i64 0), i32 %v4_dd52)
  store i64 ptrtoint ([24 x i8]* @global_var_1a35f.407 to i64), i64* @rdx, align 8
  store i1 false, i1* %sf.global-to-local, align 1
  %sext = mul i64 %v3_dd56, 4294967296
  %v1_ddc4 = sdiv i64 %sext, 4294967296
  store i64 %v1_ddc4, i64* @rcx, align 8
  store i64 1, i64* @rsi, align 8
  %v0_ddcc = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_ddcc, i64* @rdi, align 8
  %v1_ddcf = inttoptr i64 %v0_ddcc to %_IO_FILE*
  %v11_ddcf = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v1_ddcf, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @global_var_1a35f.407, i64 0, i64 0), i32 %v4_dd56)
  %v3_ddd4 = icmp slt i32 %v4_dd5a, 0
  store i1 %v3_ddd4, i1* %sf.global-to-local, align 1
  br i1 %v3_ddd4, label %dec_label_pc_de40, label %dec_label_pc_ddd9

dec_label_pc_ddd9:                                ; preds = %dec_label_pc_dda5
  %v0_ddd9 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_ddd9 = call i128 @__asm_pxor(i128 %v0_ddd9, i128 %v0_ddd9)
  store i128 %v2_ddd9, i128* %xmm0.global-to-local, align 8
  %v3_dddd = icmp slt i32 %v4_dd56, 0
  store i1 %v3_dddd, i1* %sf.global-to-local, align 1
  %sext4 = mul i64 %v3_dd5a, 4294967296
  %v1_dde0 = sdiv i64 %sext4, 4294967296
  %v2_dde0 = call i128 @__asm_cvtsi2sd(i64 %v1_dde0)
  store i128 %v2_dde0, i128* %xmm0.global-to-local, align 8
  %v2_dde5 = call i128 @__asm_mulsd(i128 %v2_dde0, i64 4636737291354636288)
  store i128 %v2_dde5, i128* %xmm0.global-to-local, align 8
  %v0_dded = load i1, i1* %sf.global-to-local, align 1
  br i1 %v0_dded, label %dec_label_pc_de69, label %dec_label_pc_ddef

dec_label_pc_ddef:                                ; preds = %dec_label_pc_de40, %dec_label_pc_ddd9
  %v0_ddef = load i128, i128* %xmm1.global-to-local, align 8
  %v2_ddef = call i128 @__asm_pxor(i128 %v0_ddef, i128 %v0_ddef)
  store i128 %v2_ddef, i128* %xmm1.global-to-local, align 8
  %v2_ddf3 = call i128 @__asm_cvtsi2sd(i64 %v1_ddc4)
  br label %dec_label_pc_ddf8

dec_label_pc_ddf8:                                ; preds = %dec_label_pc_de69, %dec_label_pc_ddef
  %storemerge = phi i128 [ %v2_de7e, %dec_label_pc_de69 ], [ %v2_ddf3, %dec_label_pc_ddef ]
  store i128 %storemerge, i128* %xmm1.global-to-local, align 8
  %v0_ddf8 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_ddf8 = call i128 @__asm_divsd(i128 %v0_ddf8, i128 %storemerge)
  %v3_ddf8 = trunc i128 %v2_ddf8 to i64
  %v4_ddf8 = bitcast i64 %v3_ddf8 to double
  store i128 %v2_ddf8, i128* %xmm0.global-to-local, align 8
  store i64 ptrtoint ([33 x i8]* @global_var_1a390.409 to i64), i64* @rdx, align 8
  %sext6 = mul i64 %v3_dd5a, 4294967296
  %v1_de03 = sdiv i64 %sext6, 4294967296
  store i64 %v1_de03, i64* @rcx, align 8
  %v0_de06 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_de06, i64* @rdi, align 8
  store i64 1, i64* @rsi, align 8
  %v1_de13 = inttoptr i64 %v0_de06 to %_IO_FILE*
  %v17_de13 = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v1_de13, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @global_var_1a390.409, i64 0, i64 0), i32 %v4_dd5a, double %v4_ddf8)
  %v0_de1c = load i64, i64* %rbx.global-to-local, align 8
  %v1_de1c = trunc i64 %v0_de1c to i32
  store i64 %v0_de1c, i64* @rcx, align 8
  %v0_de1f = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_de1f, i64* @rdi, align 8
  store i64 %v0_dd48, i64* %rbx.global-to-local, align 8
  store i64 %v0_dd47, i64* %rbp.global-to-local, align 8
  store i64 %v0_dd42, i64* %r12.global-to-local, align 8
  store i64 %v0_dd40, i64* %r13.global-to-local, align 8
  store i64 ptrtoint ([24 x i8]* @global_var_1a377.410 to i64), i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_de36 = inttoptr i64 %v0_de1f to %_IO_FILE*
  %v11_de36 = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v1_de36, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @global_var_1a377.410, i64 0, i64 0), i32 %v1_de1c)
  %v13_de36 = sext i32 %v11_de36 to i64
  ret i64 %v13_de36

dec_label_pc_de40:                                ; preds = %dec_label_pc_dda5
  %sext8 = mul i64 %v3_dd5a, 4294967296
  %v1_de40 = sdiv i64 %sext8, 4294967296
  store i64 %v1_de40, i64* @rdx, align 8
  %v0_de46 = load i128, i128* %xmm0.global-to-local, align 8
  %v2_de46 = call i128 @__asm_pxor(i128 %v0_de46, i128 %v0_de46)
  store i128 %v2_de46, i128* %xmm0.global-to-local, align 8
  %v2_de4a = udiv i64 %v1_de40, 2
  %v0_de4d = load i64, i64* @rdx, align 8
  %v2_de4d = urem i64 %v0_de4d, 2
  store i64 %v2_de4d, i64* @rdx, align 8
  %v2_de50 = or i64 %v2_de4d, %v2_de4a
  %v3_de53 = icmp slt i32 %v4_dd56, 0
  store i1 %v3_de53, i1* %sf.global-to-local, align 1
  %v1_de56 = call i128 @__asm_cvtsi2sd(i64 %v2_de50)
  store i128 %v1_de56, i128* %xmm0.global-to-local, align 8
  %v2_de5b = call i128 @__asm_addsd(i128 %v1_de56, i128 %v1_de56)
  store i128 %v2_de5b, i128* %xmm0.global-to-local, align 8
  %v2_de5f = call i128 @__asm_mulsd(i128 %v2_de5b, i64 4636737291354636288)
  store i128 %v2_de5f, i128* %xmm0.global-to-local, align 8
  %v0_de67 = load i1, i1* %sf.global-to-local, align 1
  %v1_de67 = icmp eq i1 %v0_de67, false
  br i1 %v1_de67, label %dec_label_pc_ddef, label %dec_label_pc_de69

dec_label_pc_de69:                                ; preds = %dec_label_pc_de40, %dec_label_pc_ddd9
  %v0_de6c = load i128, i128* %xmm1.global-to-local, align 8
  %v2_de6c = call i128 @__asm_pxor(i128 %v0_de6c, i128 %v0_de6c)
  store i128 %v2_de6c, i128* %xmm1.global-to-local, align 8
  %v2_de70 = udiv i64 %v1_ddc4, 2
  %v3_de73 = urem i64 %v3_dd56, 2
  store i64 %v3_de73, i64* %rbp.global-to-local, align 8
  %v2_de76 = or i64 %v2_de70, %v3_de73
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_de79 = call i128 @__asm_cvtsi2sd(i64 %v2_de76)
  store i128 %v1_de79, i128* %xmm1.global-to-local, align 8
  %v2_de7e = call i128 @__asm_addsd(i128 %v1_de79, i128 %v1_de79)
  br label %dec_label_pc_ddf8
}

define i64 @function_de90(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_de90:
  %rbp.global-to-local = alloca i64, align 8
  %tmp21 = ptrtoint i64* %arg2 to i64
  store i64 %tmp21, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_de96 = load i64, i64* @rbx, align 8
  store i64 %v0_de96, i64* %stack_var_-24, align 8
  store i64 %tmp21, i64* %rbp.global-to-local, align 8
  %v2_de9a = call i64 @function_d950(i64 %arg1, i64 %tmp21)
  %v1_de9f = inttoptr i64 %v2_de9a to i64*
  %v2_de9f = load i64, i64* %v1_de9f, align 8
  store i64 %v2_de9f, i64* @rsi, align 8
  %v1_dea2 = icmp eq i64 %v2_de9f, 0
  br i1 %v1_dea2, label %dec_label_pc_decd, label %dec_label_pc_dea7

dec_label_pc_dea7:                                ; preds = %dec_label_pc_de90
  %v1_deb3.pre = load i64, i64* %rbp.global-to-local, align 8
  %v12_deb332 = icmp eq i64 %v2_de9f, %v1_deb3.pre
  br i1 %v12_deb332, label %dec_label_pc_decf.loopexit, label %dec_label_pc_deb8.lr.ph

dec_label_pc_deb8.lr.ph:                          ; preds = %dec_label_pc_dea7
  %v4_dec0 = trunc i64 %v2_de9a to i8
  %v5_dec0 = icmp eq i8 %v4_dec0, 0
  %v1_dec2 = icmp eq i1 %v5_dec0, false
  br label %dec_label_pc_deb8

dec_label_pc_deb0:                                ; preds = %dec_label_pc_dec4
  %v1_deb0 = inttoptr i64 %v3_dec4 to i64*
  %v2_deb0 = load i64, i64* %v1_deb0, align 8
  store i64 %v2_deb0, i64* @rsi, align 8
  %v12_deb3 = icmp eq i64 %v2_deb0, %v1_deb3.pre
  br i1 %v12_deb3, label %dec_label_pc_decf.loopexit, label %dec_label_pc_deb8

dec_label_pc_deb8:                                ; preds = %dec_label_pc_deb8.lr.ph, %dec_label_pc_deb0
  %v0_dee033 = phi i64 [ %v2_de9a, %dec_label_pc_deb8.lr.ph ], [ %v3_dec4, %dec_label_pc_deb0 ]
  store i64 %v1_deb3.pre, i64* @rdi, align 8
  br i1 %v1_dec2, label %dec_label_pc_dee0, label %dec_label_pc_dec4

dec_label_pc_dec4:                                ; preds = %dec_label_pc_deb8
  %v1_dec4 = add i64 %v0_dee033, 8
  %v2_dec4 = inttoptr i64 %v1_dec4 to i64*
  %v3_dec4 = load i64, i64* %v2_dec4, align 8
  %v1_dec8 = icmp eq i64 %v3_dec4, 0
  %v1_decb = icmp eq i1 %v1_dec8, false
  br i1 %v1_decb, label %dec_label_pc_deb0, label %dec_label_pc_decd.loopexit

dec_label_pc_decd.loopexit:                       ; preds = %dec_label_pc_dec4
  br label %dec_label_pc_decd

dec_label_pc_decd:                                ; preds = %dec_label_pc_decd.loopexit, %dec_label_pc_de90
  store i64 0, i64* @rsi, align 8
  br label %dec_label_pc_decf

dec_label_pc_decf.loopexit:                       ; preds = %dec_label_pc_deb0, %dec_label_pc_dea7
  %v0_deb3.lcssa = phi i64 [ %v2_de9f, %dec_label_pc_dea7 ], [ %v1_deb3.pre, %dec_label_pc_deb0 ]
  br label %dec_label_pc_decf

dec_label_pc_decf:                                ; preds = %dec_label_pc_decf.loopexit, %dec_label_pc_decd
  %v0_ded0 = phi i64 [ %v0_deb3.lcssa, %dec_label_pc_decf.loopexit ], [ 0, %dec_label_pc_decd ]
  %v2_decf = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_decf, i64* @rbx, align 8
  ret i64 %v0_ded0

dec_label_pc_dee0:                                ; preds = %dec_label_pc_deb8
  %v2_dee0 = load i64, i64* %v1_de9f, align 8
  store i64 %v2_dee0, i64* @rsi, align 8
  %v2_dee3 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_dee3, i64* @rbx, align 8
  ret i64 %v2_dee0
}

define i64 @function_def0(i64 %arg1) local_unnamed_addr {
dec_label_pc_def0:
  store i64 %arg1, i64* @rdi, align 8
  %v0_def0 = load i64, i64* @rdi, align 8
  %v1_def0 = add i64 %v0_def0, 32
  %v2_def0 = inttoptr i64 %v1_def0 to i64*
  %v3_def0 = load i64, i64* %v2_def0, align 8
  %v10_def0 = icmp eq i64 %v3_def0, 0
  br i1 %v10_def0, label %dec_label_pc_df23, label %dec_label_pc_def7

dec_label_pc_def7:                                ; preds = %dec_label_pc_def0
  store i64 %v0_def0, i64* @rdx, align 8
  %v1_defa = add i64 %v0_def0, 8
  %v2_defa = inttoptr i64 %v1_defa to i64*
  %v3_defa = load i64, i64* %v2_defa, align 8
  store i64 %v3_defa, i64* @rcx, align 8
  %v7_defe = icmp ult i64 %v0_def0, %v3_defa
  %v1_df01 = icmp eq i1 %v7_defe, false
  br i1 %v1_df01, label %dec_label_pc_df28, label %dec_label_pc_df03

dec_label_pc_df03:                                ; preds = %dec_label_pc_def7
  %v1_df06 = icmp eq i64 %v0_def0, 0
  %v1_df09 = icmp eq i1 %v1_df06, false
  br i1 %v1_df09, label %dec_label_pc_df21, label %dec_label_pc_df10

dec_label_pc_df10:                                ; preds = %dec_label_pc_df03, %dec_label_pc_df19
  %v0_df10 = phi i64 [ %v1_df10, %dec_label_pc_df19 ], [ %v0_def0, %dec_label_pc_df03 ]
  %v1_df10 = add i64 %v0_df10, 16
  store i64 %v1_df10, i64* @rdx, align 8
  %v7_df14 = icmp ult i64 %v1_df10, %v3_defa
  %v1_df17 = icmp eq i1 %v7_df14, false
  br i1 %v1_df17, label %dec_label_pc_df28.loopexit, label %dec_label_pc_df19

dec_label_pc_df19:                                ; preds = %dec_label_pc_df10
  %v1_df19 = inttoptr i64 %v1_df10 to i64*
  %v2_df19 = load i64, i64* %v1_df19, align 8
  %v1_df1c = icmp eq i64 %v2_df19, 0
  br i1 %v1_df1c, label %dec_label_pc_df10, label %dec_label_pc_df21.loopexit

dec_label_pc_df21.loopexit:                       ; preds = %dec_label_pc_df19
  br label %dec_label_pc_df21

dec_label_pc_df21:                                ; preds = %dec_label_pc_df21.loopexit, %dec_label_pc_df03
  %merge = phi i64 [ %v0_def0, %dec_label_pc_df03 ], [ %v2_df19, %dec_label_pc_df21.loopexit ]
  ret i64 %merge

dec_label_pc_df23:                                ; preds = %dec_label_pc_def0
  ret i64 0

dec_label_pc_df28.loopexit:                       ; preds = %dec_label_pc_df10
  br label %dec_label_pc_df28

dec_label_pc_df28:                                ; preds = %dec_label_pc_df28.loopexit, %dec_label_pc_def7
  call void @abort()
  unreachable
}

define i64 @function_df40(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_df40:
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_df40 = load i64, i64* %rbp.global-to-local, align 8
  %v0_df41 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_df41, i64* %stack_var_-16, align 8
  store i64 %arg1, i64* %rbp.global-to-local, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v2_df4c = call i64 @function_d950(i64 %arg1, i64 %arg2)
  store i64 %v2_df4c, i64* @rdx, align 8
  store i64 %v2_df4c, i64* @rcx, align 8
  %v1_df57 = inttoptr i64 %v2_df4c to i64*
  %v2_df57 = load i64, i64* %v1_df57, align 8
  %v1_df5a = add i64 %v2_df4c, 8
  %v2_df5a = inttoptr i64 %v1_df5a to i64*
  %v3_df5a = load i64, i64* %v2_df5a, align 8
  store i64 %v3_df5a, i64* @rdx, align 8
  %v1_df5e = load i64, i64* @rbx, align 8
  %v12_df5e = icmp eq i64 %v2_df57, %v1_df5e
  br i1 %v12_df5e, label %dec_label_pc_df79, label %dec_label_pc_df68

dec_label_pc_df68:                                ; preds = %dec_label_pc_df40, %dec_label_pc_df6d
  %v0_df6d = phi i64 [ %v3_df70, %dec_label_pc_df6d ], [ %v3_df5a, %dec_label_pc_df40 ]
  %v1_df68 = icmp eq i64 %v0_df6d, 0
  br i1 %v1_df68, label %dec_label_pc_df7e.loopexit, label %dec_label_pc_df6d

dec_label_pc_df6d:                                ; preds = %dec_label_pc_df68
  %v1_df6d = inttoptr i64 %v0_df6d to i64*
  %v2_df6d = load i64, i64* %v1_df6d, align 8
  %v1_df70 = add i64 %v0_df6d, 8
  %v2_df70 = inttoptr i64 %v1_df70 to i64*
  %v3_df70 = load i64, i64* %v2_df70, align 8
  store i64 %v3_df70, i64* @rdx, align 8
  %v12_df74 = icmp eq i64 %v2_df6d, %v1_df5e
  %v1_df77 = icmp eq i1 %v12_df74, false
  br i1 %v1_df77, label %dec_label_pc_df68, label %dec_label_pc_df79.loopexit

dec_label_pc_df79.loopexit:                       ; preds = %dec_label_pc_df6d
  br label %dec_label_pc_df79

dec_label_pc_df79:                                ; preds = %dec_label_pc_df79.loopexit, %dec_label_pc_df40
  %v0_dfa8 = phi i64 [ %v3_df70, %dec_label_pc_df79.loopexit ], [ %v3_df5a, %dec_label_pc_df40 ]
  %v1_df79 = icmp eq i64 %v0_dfa8, 0
  %v1_df7c = icmp eq i1 %v1_df79, false
  br i1 %v1_df7c, label %dec_label_pc_dfa8, label %dec_label_pc_df7e

dec_label_pc_df7e.loopexit:                       ; preds = %dec_label_pc_df68
  br label %dec_label_pc_df7e

dec_label_pc_df7e:                                ; preds = %dec_label_pc_df7e.loopexit, %dec_label_pc_df79
  %v0_df7e = load i64, i64* %rbp.global-to-local, align 8
  %v1_df7e = add i64 %v0_df7e, 8
  %v2_df7e = inttoptr i64 %v1_df7e to i64*
  %v3_df7e = load i64, i64* %v2_df7e, align 8
  store i64 %v3_df7e, i64* @rdx, align 8
  br label %dec_label_pc_df90

dec_label_pc_df88:                                ; preds = %dec_label_pc_df90
  %v1_df88 = inttoptr i64 %v1_df90 to i64*
  %v2_df88 = load i64, i64* %v1_df88, align 8
  %v1_df8b = icmp eq i64 %v2_df88, 0
  %v1_df8e = icmp eq i1 %v1_df8b, false
  br i1 %v1_df8e, label %dec_label_pc_df9b.loopexit, label %dec_label_pc_df90

dec_label_pc_df90:                                ; preds = %dec_label_pc_df88, %dec_label_pc_df7e
  %v0_df90 = phi i64 [ %v1_df90, %dec_label_pc_df88 ], [ %v2_df4c, %dec_label_pc_df7e ]
  %v1_df90 = add i64 %v0_df90, 16
  store i64 %v1_df90, i64* @rcx, align 8
  %tmp255 = icmp ugt i64 %v3_df7e, %v1_df90
  br i1 %tmp255, label %dec_label_pc_df88, label %dec_label_pc_df99

dec_label_pc_df99:                                ; preds = %dec_label_pc_df90
  br label %dec_label_pc_df9b

dec_label_pc_df9b.loopexit:                       ; preds = %dec_label_pc_df88
  br label %dec_label_pc_df9b

dec_label_pc_df9b:                                ; preds = %dec_label_pc_df9b.loopexit, %dec_label_pc_df99
  %v0_dfa1 = phi i64 [ %v2_df88, %dec_label_pc_df9b.loopexit ], [ 0, %dec_label_pc_df99 ]
  %v2_df9f = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_df9f, i64* %rbx.global-to-local, align 8
  store i64 %v0_df40, i64* %rbp.global-to-local, align 8
  ret i64 %v0_dfa1

dec_label_pc_dfa8:                                ; preds = %dec_label_pc_df79
  %v1_dfa8 = inttoptr i64 %v0_dfa8 to i64*
  %v2_dfa8 = load i64, i64* %v1_dfa8, align 8
  %v2_dfaf = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_dfaf, i64* %rbx.global-to-local, align 8
  store i64 %v0_df40, i64* %rbp.global-to-local, align 8
  ret i64 %v2_dfa8
}

define i64 @function_dfc0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_dfc0:
  %r9.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg1, i64* %r9.global-to-local, align 8
  %v1_dfc3 = add i64 %arg1, 8
  %v2_dfc3 = inttoptr i64 %v1_dfc3 to i64*
  %v3_dfc3 = load i64, i64* %v2_dfc3, align 8
  %tmp255 = icmp ugt i64 %v3_dfc3, %arg1
  br i1 %tmp255, label %dec_label_pc_dfc9, label %dec_label_pc_e022

dec_label_pc_dfc9:                                ; preds = %dec_label_pc_dfc0
  store i64 0, i64* @r8, align 8
  br label %dec_label_pc_dfcc

dec_label_pc_dfcc:                                ; preds = %dec_label_pc_e00d, %dec_label_pc_dfc9
  %v0_e01117 = phi i64 [ %v0_e011, %dec_label_pc_e00d ], [ %arg1, %dec_label_pc_dfc9 ]
  %v0_dfcc = phi i64 [ %v1_e00d, %dec_label_pc_e00d ], [ %arg1, %dec_label_pc_dfc9 ]
  %v2_dfd9 = phi i64 [ %v1_dfd411, %dec_label_pc_e00d ], [ 0, %dec_label_pc_dfc9 ]
  %v1_dfcc = inttoptr i64 %v0_dfcc to i64*
  %v2_dfcc = load i64, i64* %v1_dfcc, align 8
  store i64 %v2_dfcc, i64* @rcx, align 8
  %v1_dfcf = icmp eq i64 %v2_dfcc, 0
  br i1 %v1_dfcf, label %dec_label_pc_e00d, label %dec_label_pc_dfd4

dec_label_pc_dfd4:                                ; preds = %dec_label_pc_dfcc
  %v0_dfd4 = load i64, i64* @rdx, align 8
  %tmp263 = icmp ugt i64 %v0_dfd4, %v2_dfd9
  br i1 %tmp263, label %dec_label_pc_dfd9, label %dec_label_pc_e017

dec_label_pc_dfd9:                                ; preds = %dec_label_pc_dfd4
  %v1_dfd9 = load i64, i64* @rsi, align 8
  %v3_dfd9 = mul i64 %v2_dfd9, 8
  %v4_dfd9 = add i64 %v1_dfd9, %v3_dfd9
  %v5_dfd9 = inttoptr i64 %v4_dfd9 to i64*
  store i64 %v2_dfcc, i64* %v5_dfd9, align 8
  %v0_dfdd = load i64, i64* %r9.global-to-local, align 8
  %v1_dfdd = add i64 %v0_dfdd, 8
  %v2_dfdd = inttoptr i64 %v1_dfdd to i64*
  %v3_dfdd = load i64, i64* %v2_dfdd, align 8
  store i64 %v3_dfdd, i64* @rcx, align 8
  %v0_dfe1 = load i64, i64* @r8, align 8
  %v1_dfe1 = add i64 %v0_dfe1, 1
  store i64 %v1_dfe1, i64* %rax.global-to-local, align 8
  %v1_dfe5 = icmp eq i64 %v3_dfdd, 0
  br i1 %v1_dfe5, label %dec_label_pc_e00a, label %dec_label_pc_dff0

dec_label_pc_dff0:                                ; preds = %dec_label_pc_dfd9, %dec_label_pc_dff5
  %v0_dff5 = phi i64 [ %v3_e001, %dec_label_pc_dff5 ], [ %v3_dfdd, %dec_label_pc_dfd9 ]
  %v0_e020 = phi i64 [ %v1_dff0.pre, %dec_label_pc_dff5 ], [ %v1_dfe1, %dec_label_pc_dfd9 ]
  %v0_dff0 = load i64, i64* @rdx, align 8
  %v12_dff0 = icmp eq i64 %v0_dff0, %v0_e020
  br i1 %v12_dff0, label %dec_label_pc_e020, label %dec_label_pc_dff5

dec_label_pc_dff5:                                ; preds = %dec_label_pc_dff0
  %v1_dff5 = inttoptr i64 %v0_dff5 to i64*
  %v2_dff5 = load i64, i64* %v1_dff5, align 8
  store i64 %v2_dff5, i64* @r8, align 8
  %v1_dff8 = add i64 %v0_e020, 1
  store i64 %v1_dff8, i64* %rax.global-to-local, align 8
  %v1_dffc = load i64, i64* @rsi, align 8
  %v3_dffc = mul i64 %v1_dff8, 8
  %v4_dffc = add i64 %v3_dffc, -8
  %v5_dffc = add i64 %v4_dffc, %v1_dffc
  %v6_dffc = inttoptr i64 %v5_dffc to i64*
  store i64 %v2_dff5, i64* %v6_dffc, align 8
  %v0_e001 = load i64, i64* @rcx, align 8
  %v1_e001 = add i64 %v0_e001, 8
  %v2_e001 = inttoptr i64 %v1_e001 to i64*
  %v3_e001 = load i64, i64* %v2_e001, align 8
  store i64 %v3_e001, i64* @rcx, align 8
  %v1_e005 = icmp eq i64 %v3_e001, 0
  %v1_e008 = icmp eq i1 %v1_e005, false
  %v1_dff0.pre = load i64, i64* %rax.global-to-local, align 8
  br i1 %v1_e008, label %dec_label_pc_dff0, label %dec_label_pc_e00a.loopexit

dec_label_pc_e00a.loopexit:                       ; preds = %dec_label_pc_dff5
  %v0_e00d.pre.pre = load i64, i64* %r9.global-to-local, align 8
  br label %dec_label_pc_e00a

dec_label_pc_e00a:                                ; preds = %dec_label_pc_e00a.loopexit, %dec_label_pc_dfd9
  %v0_e00d.pre = phi i64 [ %v0_e00d.pre.pre, %dec_label_pc_e00a.loopexit ], [ %v0_dfdd, %dec_label_pc_dfd9 ]
  %v0_e00a = phi i64 [ %v1_dff0.pre, %dec_label_pc_e00a.loopexit ], [ %v1_dfe1, %dec_label_pc_dfd9 ]
  store i64 %v0_e00a, i64* @r8, align 8
  %v0_e011.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_e00d

dec_label_pc_e00d:                                ; preds = %dec_label_pc_e00a, %dec_label_pc_dfcc
  %v0_e011 = phi i64 [ %v0_e011.pre, %dec_label_pc_e00a ], [ %v0_e01117, %dec_label_pc_dfcc ]
  %v0_e00d = phi i64 [ %v0_e00d.pre, %dec_label_pc_e00a ], [ %v0_dfcc, %dec_label_pc_dfcc ]
  %v1_dfd411 = phi i64 [ %v0_e00a, %dec_label_pc_e00a ], [ %v2_dfd9, %dec_label_pc_dfcc ]
  %v1_e00d = add i64 %v0_e00d, 16
  store i64 %v1_e00d, i64* %r9.global-to-local, align 8
  %v1_e011 = add i64 %v0_e011, 8
  %v2_e011 = inttoptr i64 %v1_e011 to i64*
  %v3_e011 = load i64, i64* %v2_e011, align 8
  %tmp264 = icmp ugt i64 %v3_e011, %v1_e00d
  br i1 %tmp264, label %dec_label_pc_dfcc, label %dec_label_pc_e017

dec_label_pc_e017:                                ; preds = %dec_label_pc_e00d, %dec_label_pc_dfd4
  %v0_e017 = phi i64 [ %v1_dfd411, %dec_label_pc_e00d ], [ %v2_dfd9, %dec_label_pc_dfd4 ]
  store i64 %v0_e017, i64* %rax.global-to-local, align 8
  ret i64 %v0_e017

dec_label_pc_e020:                                ; preds = %dec_label_pc_dff0
  ret i64 %v0_e020

dec_label_pc_e022:                                ; preds = %dec_label_pc_dfc0
  store i64 0, i64* %rax.global-to-local, align 8
  ret i64 0
}

define i64 @function_e030(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_e030:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_e030 = load i64, i64* %r15.global-to-local, align 8
  %v0_e032 = load i64, i64* %r14.global-to-local, align 8
  %v0_e034 = load i64, i64* %r13.global-to-local, align 8
  %v0_e036 = load i64, i64* %r12.global-to-local, align 8
  %v0_e038 = load i64, i64* %rbp.global-to-local, align 8
  %v0_e039 = load i64, i64* %rbx.global-to-local, align 8
  %v2_e03e = load i64, i64* @rdi, align 8
  store i64 %v2_e03e, i64* %r14.global-to-local, align 8
  %v1_e041 = add i64 %v2_e03e, 8
  %v2_e041 = inttoptr i64 %v1_e041 to i64*
  %v3_e041 = load i64, i64* %v2_e041, align 8
  %tmp288 = icmp ugt i64 %v3_e041, %v2_e03e
  br i1 %tmp288, label %dec_label_pc_e047, label %dec_label_pc_e096

dec_label_pc_e047:                                ; preds = %dec_label_pc_e030
  %v0_e047 = load i64, i64* @rdx, align 8
  store i64 %v0_e047, i64* %r13.global-to-local, align 8
  %v0_e04a = load i64, i64* @rsi, align 8
  store i64 %v0_e04a, i64* %r12.global-to-local, align 8
  store i64 %v2_e03e, i64* %r15.global-to-local, align 8
  store i64 0, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_e052

dec_label_pc_e052:                                ; preds = %dec_label_pc_e07a, %dec_label_pc_e047
  %v0_e07128 = phi i64 [ %v0_e07127, %dec_label_pc_e07a ], [ 0, %dec_label_pc_e047 ]
  %v0_e07a = phi i64 [ %v1_e07a, %dec_label_pc_e07a ], [ %v2_e03e, %dec_label_pc_e047 ]
  %v1_e052 = inttoptr i64 %v0_e07a to i64*
  %v2_e052 = load i64, i64* %v1_e052, align 8
  store i64 %v2_e052, i64* @rdi, align 8
  %v1_e055 = icmp eq i64 %v2_e052, 0
  br i1 %v1_e055, label %dec_label_pc_e07a, label %dec_label_pc_e05a

dec_label_pc_e05a:                                ; preds = %dec_label_pc_e052
  store i64 %v0_e07a, i64* %rbx.global-to-local, align 8
  store i64 %v0_e047, i64* @rsi, align 8
  %v0_e0696 = load i64, i64* %rax.global-to-local, align 8
  %v4_e0697 = trunc i64 %v0_e0696 to i8
  %v5_e0698 = icmp eq i8 %v4_e0697, 0
  br i1 %v5_e0698, label %dec_label_pc_e084.loopexit, label %dec_label_pc_e06d.preheader

dec_label_pc_e06d.preheader:                      ; preds = %dec_label_pc_e05a
  %v1_e06d278 = add i64 %v0_e07a, 8
  %v2_e06d279 = inttoptr i64 %v1_e06d278 to i64*
  %v3_e06d280 = load i64, i64* %v2_e06d279, align 8
  store i64 %v3_e06d280, i64* %rbx.global-to-local, align 8
  %v1_e071281 = add i64 %v0_e07128, 1
  store i64 %v1_e071281, i64* %rbp.global-to-local, align 8
  %v1_e075282 = icmp eq i64 %v3_e06d280, 0
  %v1_e078283 = icmp eq i1 %v1_e075282, false
  br i1 %v1_e078283, label %dec_label_pc_e060, label %dec_label_pc_e07a

dec_label_pc_e060:                                ; preds = %dec_label_pc_e06d.preheader, %dec_label_pc_e060
  %v1_e071285 = phi i64 [ %v1_e071, %dec_label_pc_e060 ], [ %v1_e071281, %dec_label_pc_e06d.preheader ]
  %v3_e06d284 = phi i64 [ %v3_e06d, %dec_label_pc_e060 ], [ %v3_e06d280, %dec_label_pc_e06d.preheader ]
  %v1_e060 = inttoptr i64 %v3_e06d284 to i64*
  %v2_e060 = load i64, i64* %v1_e060, align 8
  store i64 %v2_e060, i64* @rdi, align 8
  store i64 %v0_e047, i64* @rsi, align 8
  %v1_e06d = add i64 %v3_e06d284, 8
  %v2_e06d = inttoptr i64 %v1_e06d to i64*
  %v3_e06d = load i64, i64* %v2_e06d, align 8
  store i64 %v3_e06d, i64* %rbx.global-to-local, align 8
  %v1_e071 = add i64 %v1_e071285, 1
  store i64 %v1_e071, i64* %rbp.global-to-local, align 8
  %v1_e075 = icmp eq i64 %v3_e06d, 0
  %v1_e078 = icmp eq i1 %v1_e075, false
  br i1 %v1_e078, label %dec_label_pc_e060, label %dec_label_pc_e07a

dec_label_pc_e07a:                                ; preds = %dec_label_pc_e06d.preheader, %dec_label_pc_e060, %dec_label_pc_e052
  %v0_e07127 = phi i64 [ %v0_e07128, %dec_label_pc_e052 ], [ %v1_e071281, %dec_label_pc_e06d.preheader ], [ %v1_e071, %dec_label_pc_e060 ]
  %v1_e07a = add i64 %v0_e07a, 16
  store i64 %v1_e07a, i64* %r14.global-to-local, align 8
  %v3_e07e = load i64, i64* %v2_e041, align 8
  %tmp289 = icmp ugt i64 %v3_e07e, %v1_e07a
  br i1 %tmp289, label %dec_label_pc_e052, label %dec_label_pc_e084.loopexit4

dec_label_pc_e084.loopexit:                       ; preds = %dec_label_pc_e05a
  br label %dec_label_pc_e084

dec_label_pc_e084.loopexit4:                      ; preds = %dec_label_pc_e07a
  br label %dec_label_pc_e084

dec_label_pc_e084:                                ; preds = %dec_label_pc_e084.loopexit4, %dec_label_pc_e084.loopexit, %dec_label_pc_e096
  %v0_e088 = phi i64 [ %v0_e07127, %dec_label_pc_e084.loopexit4 ], [ %v0_e07128, %dec_label_pc_e084.loopexit ], [ 0, %dec_label_pc_e096 ]
  store i64 %v0_e088, i64* %rax.global-to-local, align 8
  store i64 %v0_e039, i64* %rbx.global-to-local, align 8
  store i64 %v0_e038, i64* %rbp.global-to-local, align 8
  store i64 %v0_e036, i64* %r12.global-to-local, align 8
  store i64 %v0_e034, i64* %r13.global-to-local, align 8
  store i64 %v0_e032, i64* %r14.global-to-local, align 8
  store i64 %v0_e030, i64* %r15.global-to-local, align 8
  ret i64 %v0_e088

dec_label_pc_e096:                                ; preds = %dec_label_pc_e030
  store i64 0, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_e084
}

define i64 @function_e0a0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_e0a0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v3_e0a0 = urem i64 %arg1, 256
  store i64 %v3_e0a0, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  %v4_e0a5 = trunc i64 %arg1 to i8
  %v5_e0a5 = icmp eq i8 %v4_e0a5, 0
  br i1 %v5_e0a5, label %dec_label_pc_e0cd, label %dec_label_pc_e0b0

dec_label_pc_e0b0:                                ; preds = %dec_label_pc_e0a0, %dec_label_pc_e0b0
  %v1_e0c0 = phi i64 [ %v3_e0c3, %dec_label_pc_e0b0 ], [ %v3_e0a0, %dec_label_pc_e0a0 ]
  %v0_e0b3 = phi i64 [ %v1_e0b3, %dec_label_pc_e0b0 ], [ %arg1, %dec_label_pc_e0a0 ]
  %v1_e0bb = phi i64 [ %tmp244, %dec_label_pc_e0b0 ], [ 0, %dec_label_pc_e0a0 ]
  %v1_e0b3 = add i64 %v0_e0b3, 1
  store i64 %v1_e0b3, i64* @rdi, align 8
  %v2_e0bb = mul i64 %v1_e0bb, 31
  store i64 0, i64* @rdx, align 8
  %v2_e0c0 = add i64 %v2_e0bb, %v1_e0c0
  %v1_e0c3 = inttoptr i64 %v1_e0b3 to i8*
  %v2_e0c3 = load i8, i8* %v1_e0c3, align 1
  %v3_e0c3 = zext i8 %v2_e0c3 to i64
  store i64 %v3_e0c3, i64* @rcx, align 8
  %tmp244 = urem i64 %v2_e0c0, %arg2
  store i64 %tmp244, i64* @rdx, align 8
  %v5_e0c9 = icmp eq i8 %v2_e0c3, 0
  %v1_e0cb = icmp eq i1 %v5_e0c9, false
  br i1 %v1_e0cb, label %dec_label_pc_e0b0, label %dec_label_pc_e0cd

dec_label_pc_e0cd:                                ; preds = %dec_label_pc_e0b0, %dec_label_pc_e0a0
  %v0_e0cd = phi i64 [ 0, %dec_label_pc_e0a0 ], [ %tmp244, %dec_label_pc_e0b0 ]
  ret i64 %v0_e0cd
}

define i64 @function_e0e0(i64 %arg1) local_unnamed_addr {
dec_label_pc_e0e0:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 4575657221408423936, i64* %rax.global-to-local, align 8
  %v1_e0ea = add i64 %arg1, 16
  %v2_e0ea = inttoptr i64 %v1_e0ea to i8*
  store i8 0, i8* %v2_e0ea, align 1
  %v0_e0ee = load i64, i64* %rax.global-to-local, align 8
  %v1_e0ee = load i64, i64* @rdi, align 8
  %v2_e0ee = inttoptr i64 %v1_e0ee to i64*
  store i64 %v0_e0ee, i64* %v2_e0ee, align 8
  store i64 4590573145673223373, i64* %rax.global-to-local, align 8
  %v1_e0fb = load i64, i64* @rdi, align 8
  %v2_e0fb = add i64 %v1_e0fb, 8
  %v3_e0fb = inttoptr i64 %v2_e0fb to i64*
  store i64 4590573145673223373, i64* %v3_e0fb, align 8
  %v0_e0ff = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_e0ff
}

define i64 @function_e100(i64 %arg1, i32 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_e100:
  %cf.global-to-local = alloca i1, align 1
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  %tmp36 = sext i32 %arg2 to i64
  store i64 %tmp36, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_e117 = load i64, i64* @rdi, align 8
  store i64 %v0_e117, i64* %rbp.global-to-local, align 8
  store i64 80, i64* @rdi, align 8
  %v0_e11f = load i64, i64* @rsi, align 8
  %v1_e126 = icmp eq i64 %arg3, 0
  %v0_e129 = load i64, i64* @r8, align 8
  store i64 %v0_e129, i64* %r14.global-to-local, align 8
  %v3_e12c = select i1 %v1_e126, i64 55600, i64 %arg3
  store i64 %v3_e12c, i64* %r12.global-to-local, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e137 = icmp eq i64 %arg4, 0
  %v3_e13a = select i1 %v1_e137, i64 55616, i64 %arg4
  store i64 %v3_e13a, i64* %r13.global-to-local, align 8
  %v3_e13e = call i64* @malloc(i32 80)
  %v4_e13e = ptrtoint i64* %v3_e13e to i64
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e143 = icmp eq i64* %v3_e13e, null
  store i64 %v4_e13e, i64* %rbx.global-to-local, align 8
  br i1 %v1_e143, label %dec_label_pc_e1fa, label %dec_label_pc_e14f

dec_label_pc_e14f:                                ; preds = %dec_label_pc_e100
  %v1_e11f = trunc i64 %v0_e11f to i32
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_e14f = icmp eq i32 %v1_e11f, 0
  %v1_e152 = add i64 %v4_e13e, 40
  store i64 %v1_e152, i64* @rdi, align 8
  br i1 %v2_e14f, label %dec_label_pc_e210, label %dec_label_pc_e15c

dec_label_pc_e15c:                                ; preds = %dec_label_pc_e14f
  %sext = mul i64 %v0_e11f, 4294967296
  %v1_e15c = sdiv i64 %sext, 4294967296
  %v4_e15c = inttoptr i64 %v1_e152 to i64*
  store i64 %v1_e15c, i64* %v4_e15c, align 8
  %v1_e160 = call i64 @function_daa0(i64 %v1_e152)
  %v4_e165 = trunc i64 %v1_e160 to i8
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_e165 = icmp eq i8 %v4_e165, 0
  br i1 %v5_e165, label %dec_label_pc_e1f0, label %dec_label_pc_e16d

dec_label_pc_e16d:                                ; preds = %dec_label_pc_e15c
  %v2_e16d = add nsw i64 %v1_e15c, 16
  %v3_e16d = inttoptr i64 %v2_e16d to i8*
  %v4_e16d = load i8, i8* %v3_e16d, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v11_e16d = icmp eq i8 %v4_e16d, 0
  %v0_e270 = load i64, i64* %rbp.global-to-local, align 8
  br i1 %v11_e16d, label %dec_label_pc_e270, label %dec_label_pc_e178

dec_label_pc_e178:                                ; preds = %dec_label_pc_e16d, %dec_label_pc_e2a0, %dec_label_pc_e250
  %v0_e178 = phi i64 [ %v1_e2a0, %dec_label_pc_e2a0 ], [ %v2_e267, %dec_label_pc_e250 ], [ %v0_e270, %dec_label_pc_e16d ]
  store i64 %v0_e178, i64* @rdi, align 8
  %v1_e17b = call i64 @function_d890(i64 %v0_e178)
  store i64 %v1_e17b, i64* %rbp.global-to-local, align 8
  %v5_e18d = mul i64 %v1_e17b, 8
  br i1 undef, label %dec_label_pc_e2aa, label %dec_label_pc_e196

dec_label_pc_e196:                                ; preds = %dec_label_pc_e2aa, %dec_label_pc_e178
  %storemerge49 = phi i64 [ 1, %dec_label_pc_e2aa ], [ 0, %dec_label_pc_e178 ]
  %v0_e19b = phi i64 [ 1, %dec_label_pc_e2aa ], [ 0, %dec_label_pc_e178 ]
  store i64 %storemerge49, i64* @rcx, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_e196 = icmp slt i64 %v5_e18d, 0
  br i1 %v2_e196, label %dec_label_pc_e1f0, label %dec_label_pc_e19b

dec_label_pc_e19b:                                ; preds = %dec_label_pc_e196
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e19b = icmp eq i64 %v0_e19b, 0
  %v1_e19e = icmp eq i1 %v1_e19b, false
  br i1 %v1_e19e, label %dec_label_pc_e1f0, label %dec_label_pc_e1a0

dec_label_pc_e1a0:                                ; preds = %dec_label_pc_e19b
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_e1a0 = icmp eq i64 %v1_e17b, 0
  %v2_e1a3 = load i64, i64* %rbx.global-to-local, align 8
  %v3_e1a3 = add i64 %v2_e1a3, 16
  %v4_e1a3 = inttoptr i64 %v3_e1a3 to i64*
  store i64 %v1_e17b, i64* %v4_e1a3, align 8
  br i1 %v2_e1a0, label %dec_label_pc_e1f0, label %dec_label_pc_e1a9

dec_label_pc_e1a9:                                ; preds = %dec_label_pc_e1a0
  store i64 16, i64* @rsi, align 8
  %tmp47 = trunc i64 %v1_e17b to i32
  store i64 %v1_e17b, i64* @rdi, align 8
  %v6_e1b1 = call i64* @calloc(i32 %tmp47, i32 16)
  %v7_e1b1 = ptrtoint i64* %v6_e1b1 to i64
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e1b6 = icmp eq i64* %v6_e1b1, null
  %v1_e1b9 = load i64, i64* %rbx.global-to-local, align 8
  %v2_e1b9 = inttoptr i64 %v1_e1b9 to i64*
  store i64 %v7_e1b1, i64* %v2_e1b9, align 8
  br i1 %v1_e1b6, label %dec_label_pc_e1f0, label %dec_label_pc_e1be

dec_label_pc_e1be:                                ; preds = %dec_label_pc_e1a9
  %v3_e1be = mul i64 %v1_e17b, 16
  store i64 %v3_e1be, i64* %rbp.global-to-local, align 8
  %v0_e1c2 = load i64, i64* %rbx.global-to-local, align 8
  %v1_e1c2 = add i64 %v0_e1c2, 24
  %v2_e1c2 = inttoptr i64 %v1_e1c2 to i64*
  store i64 0, i64* %v2_e1c2, align 8
  %v0_e1ca = load i64, i64* %rbx.global-to-local, align 8
  %v1_e1ca = add i64 %v0_e1ca, 32
  %v2_e1ca = inttoptr i64 %v1_e1ca to i64*
  store i64 0, i64* %v2_e1ca, align 8
  %v0_e1d2 = load i64, i64* %rbp.global-to-local, align 8
  %v2_e1d2 = add i64 %v0_e1d2, %v7_e1b1
  %v7_e1d2 = icmp ult i64 %v2_e1d2, %v0_e1d2
  store i1 %v7_e1d2, i1* %cf.global-to-local, align 1
  store i64 %v2_e1d2, i64* %rbp.global-to-local, align 8
  %v0_e1d5 = load i64, i64* %r12.global-to-local, align 8
  %v1_e1d5 = load i64, i64* %rbx.global-to-local, align 8
  %v2_e1d5 = add i64 %v1_e1d5, 48
  %v3_e1d5 = inttoptr i64 %v2_e1d5 to i64*
  store i64 %v0_e1d5, i64* %v3_e1d5, align 8
  %v0_e1d9 = load i64, i64* %r13.global-to-local, align 8
  %v1_e1d9 = load i64, i64* %rbx.global-to-local, align 8
  %v2_e1d9 = add i64 %v1_e1d9, 56
  %v3_e1d9 = inttoptr i64 %v2_e1d9 to i64*
  store i64 %v0_e1d9, i64* %v3_e1d9, align 8
  %v0_e1dd = load i64, i64* %rbp.global-to-local, align 8
  %v1_e1dd = load i64, i64* %rbx.global-to-local, align 8
  %v2_e1dd = add i64 %v1_e1dd, 8
  %v3_e1dd = inttoptr i64 %v2_e1dd to i64*
  store i64 %v0_e1dd, i64* %v3_e1dd, align 8
  %v0_e1e1 = load i64, i64* %r14.global-to-local, align 8
  %v1_e1e1 = load i64, i64* %rbx.global-to-local, align 8
  %v2_e1e1 = add i64 %v1_e1e1, 64
  %v3_e1e1 = inttoptr i64 %v2_e1e1 to i64*
  store i64 %v0_e1e1, i64* %v3_e1e1, align 8
  %v0_e1e5 = load i64, i64* %rbx.global-to-local, align 8
  %v1_e1e5 = add i64 %v0_e1e5, 72
  %v2_e1e5 = inttoptr i64 %v1_e1e5 to i64*
  store i64 0, i64* %v2_e1e5, align 8
  br label %dec_label_pc_e1fa

dec_label_pc_e1f0:                                ; preds = %dec_label_pc_e23a, %dec_label_pc_e210, %dec_label_pc_e1a9, %dec_label_pc_e1a0, %dec_label_pc_e19b, %dec_label_pc_e196, %dec_label_pc_e15c
  %v0_e1f0 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_e1f0, i64* @rdi, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  store i64 0, i64* %rbx.global-to-local, align 8
  %v1_e1f5 = inttoptr i64 %v0_e1f0 to i64*
  call void @free(i64* %v1_e1f5)
  br label %dec_label_pc_e1fa

dec_label_pc_e1fa:                                ; preds = %dec_label_pc_e1f0, %dec_label_pc_e1be, %dec_label_pc_e100
  %v0_e1fa = load i64, i64* @rsp, align 8
  %v5_e1fa = icmp ugt i64 %v0_e1fa, -9
  store i1 %v5_e1fa, i1* %cf.global-to-local, align 1
  %v0_e1fe = load i64, i64* %rbx.global-to-local, align 8
  ret i64 %v0_e1fe

dec_label_pc_e210:                                ; preds = %dec_label_pc_e14f
  %v3_e217 = inttoptr i64 %v1_e152 to i64*
  store i64 ptrtoint (i64* @global_var_1a3c0.400 to i64), i64* %v3_e217, align 8
  %v1_e21b = call i64 @function_daa0(i64 %v1_e152)
  %v4_e220 = trunc i64 %v1_e21b to i8
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_e220 = icmp eq i8 %v4_e220, 0
  %v1_e222 = call i128 @__asm_movss(i32 1061997773)
  store i128 %v1_e222, i128* @xmm1, align 8
  br i1 %v5_e220, label %dec_label_pc_e1f0, label %dec_label_pc_e22c

dec_label_pc_e22c:                                ; preds = %dec_label_pc_e210
  %v0_e22c = load i64, i64* %rbp.global-to-local, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_e22c = icmp slt i64 %v0_e22c, 0
  br i1 %v2_e22c, label %dec_label_pc_e27b, label %dec_label_pc_e231

dec_label_pc_e231:                                ; preds = %dec_label_pc_e270, %dec_label_pc_e22c
  %v0_e231 = load i128, i128* @xmm0, align 8
  %v2_e231 = call i128 @__asm_pxor(i128 %v0_e231, i128 %v0_e231)
  %v0_e235 = load i64, i64* %rbp.global-to-local, align 8
  %v1_e235 = call i128 @__asm_cvtsi2ss(i64 %v0_e235)
  br label %dec_label_pc_e23a

dec_label_pc_e23a:                                ; preds = %dec_label_pc_e27b, %dec_label_pc_e231
  %storemerge = phi i128 [ %v1_e235, %dec_label_pc_e231 ], [ %v2_e290, %dec_label_pc_e27b ]
  %v1_e23a = load i128, i128* @xmm1, align 8
  %v2_e23a = call i128 @__asm_divss(i128 %storemerge, i128 %v1_e23a)
  store i128 %v2_e23a, i128* @xmm0, align 8
  call void @__asm_ucomiss(i128 %v2_e23a, i32 1602224128)
  %v0_e245 = load i1, i1* %cf.global-to-local, align 1
  %v1_e245 = icmp eq i1 %v0_e245, false
  br i1 %v1_e245, label %dec_label_pc_e1f0, label %dec_label_pc_e247

dec_label_pc_e247:                                ; preds = %dec_label_pc_e23a
  call void @__asm_ucomiss(i128 %v2_e23a, i32 1593835520)
  %v0_e24e = load i1, i1* %cf.global-to-local, align 1
  br i1 %v0_e24e, label %dec_label_pc_e2a0, label %dec_label_pc_e250

dec_label_pc_e250:                                ; preds = %dec_label_pc_e247
  %v2_e250 = call i128 @__asm_subss(i128 %v2_e23a, i32 1593835520)
  store i128 %v2_e250, i128* @xmm0, align 8
  %v1_e262 = call i64 @__asm_cvttss2si(i128 %v2_e250)
  %v2_e267 = xor i64 %v1_e262, -9223372036854775808
  store i1 false, i1* %cf.global-to-local, align 1
  store i64 %v2_e267, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_e178

dec_label_pc_e270:                                ; preds = %dec_label_pc_e16d
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_e270 = icmp slt i64 %v0_e270, 0
  %v2_e273 = add nsw i64 %v1_e15c, 8
  %v3_e273 = inttoptr i64 %v2_e273 to i32*
  %v4_e273 = load i32, i32* %v3_e273, align 4
  %v5_e273 = call i128 @__asm_movss(i32 %v4_e273)
  store i128 %v5_e273, i128* @xmm1, align 8
  %v1_e279 = icmp eq i1 %v2_e270, false
  br i1 %v1_e279, label %dec_label_pc_e231, label %dec_label_pc_e270.dec_label_pc_e27b_crit_edge

dec_label_pc_e270.dec_label_pc_e27b_crit_edge:    ; preds = %dec_label_pc_e270
  %v0_e27b.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_e27b

dec_label_pc_e27b:                                ; preds = %dec_label_pc_e270.dec_label_pc_e27b_crit_edge, %dec_label_pc_e22c
  %v0_e27b = phi i64 [ %v0_e27b.pre, %dec_label_pc_e270.dec_label_pc_e27b_crit_edge ], [ %v0_e22c, %dec_label_pc_e22c ]
  %v0_e27e = load i128, i128* @xmm0, align 8
  %v2_e27e = call i128 @__asm_pxor(i128 %v0_e27e, i128 %v0_e27e)
  %v2_e282 = udiv i64 %v0_e27b, 2
  %v0_e285 = load i64, i64* %rbp.global-to-local, align 8
  %v2_e285 = urem i64 %v0_e285, 2
  store i64 %v2_e285, i64* %rbp.global-to-local, align 8
  %v2_e288 = or i64 %v2_e285, %v2_e282
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e28b = call i128 @__asm_cvtsi2ss(i64 %v2_e288)
  %v2_e290 = call i128 @__asm_addss(i128 %v1_e28b, i128 %v1_e28b)
  br label %dec_label_pc_e23a

dec_label_pc_e2a0:                                ; preds = %dec_label_pc_e247
  %v1_e2a0 = call i64 @__asm_cvttss2si(i128 %v2_e23a)
  store i64 %v1_e2a0, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_e178

dec_label_pc_e2aa:                                ; preds = %dec_label_pc_e178
  br label %dec_label_pc_e196
}

define i64 @function_e2c0(i64 %arg1) local_unnamed_addr {
dec_label_pc_e2c0:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_e2c0 = load i64, i64* %r12.global-to-local, align 8
  %v0_e2c2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_e2c3 = load i64, i64* @rdi, align 8
  store i64 %v0_e2c3, i64* %rbp.global-to-local, align 8
  %v0_e2c6 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_e2c6, i64* %stack_var_-24, align 8
  store i64 %v0_e2c3, i64* %r12.global-to-local, align 8
  %v2_e2ca = add i64 %v0_e2c3, 8
  %v3_e2ca = inttoptr i64 %v2_e2ca to i64*
  %v4_e2ca = load i64, i64* %v3_e2ca, align 8
  %v10_e2ca = icmp ult i64 %v0_e2c3, %v4_e2ca
  %v1_e2ce = icmp eq i1 %v10_e2ca, false
  br i1 %v1_e2ce, label %dec_label_pc_e33b, label %dec_label_pc_e2d0

dec_label_pc_e2d0:                                ; preds = %dec_label_pc_e331, %dec_label_pc_e2c0
  %v0_e2dc = phi i64 [ %v0_e335, %dec_label_pc_e331 ], [ %v0_e2c3, %dec_label_pc_e2c0 ]
  %v0_e2d7 = phi i64 [ %v1_e331, %dec_label_pc_e331 ], [ %v0_e2c3, %dec_label_pc_e2c0 ]
  %v1_e2d0 = inttoptr i64 %v0_e2d7 to i64*
  %v2_e2d0 = load i64, i64* %v1_e2d0, align 8
  %v9_e2d0 = icmp eq i64 %v2_e2d0, 0
  br i1 %v9_e2d0, label %dec_label_pc_e331, label %dec_label_pc_e2d7

dec_label_pc_e2d7:                                ; preds = %dec_label_pc_e2d0
  %v1_e2d7 = add i64 %v0_e2d7, 8
  %v2_e2d7 = inttoptr i64 %v1_e2d7 to i64*
  %v3_e2d7 = load i64, i64* %v2_e2d7, align 8
  store i64 %v3_e2d7, i64* %rbx.global-to-local, align 8
  %v1_e2dc = add i64 %v0_e2dc, 64
  %v2_e2dc = inttoptr i64 %v1_e2dc to i64*
  %v3_e2dc = load i64, i64* %v2_e2dc, align 8
  store i64 %v3_e2dc, i64* %rax.global-to-local, align 8
  %v1_e2e0 = icmp eq i64 %v3_e2d7, 0
  br i1 %v1_e2e0, label %dec_label_pc_e315, label %dec_label_pc_e2e8

dec_label_pc_e2e8:                                ; preds = %dec_label_pc_e2d7, %dec_label_pc_e2f6
  %v0_e2fe = phi i64 [ %v3_e2f6, %dec_label_pc_e2f6 ], [ %v3_e2d7, %dec_label_pc_e2d7 ]
  %v0_e2e8 = phi i64 [ %v0_e2e8.pre, %dec_label_pc_e2f6 ], [ %v3_e2dc, %dec_label_pc_e2d7 ]
  %v1_e2e8 = icmp eq i64 %v0_e2e8, 0
  br i1 %v1_e2e8, label %dec_label_pc_e2e8.dec_label_pc_e2f6_crit_edge, label %dec_label_pc_e2ed

dec_label_pc_e2e8.dec_label_pc_e2f6_crit_edge:    ; preds = %dec_label_pc_e2e8
  %v0_e2fa.pre = load i64, i64* %rbp.global-to-local, align 8
  %.pre = inttoptr i64 %v0_e2fe to i64*
  br label %dec_label_pc_e2f6

dec_label_pc_e2ed:                                ; preds = %dec_label_pc_e2e8
  %v1_e2ed = inttoptr i64 %v0_e2fe to i64*
  %v2_e2ed = load i64, i64* %v1_e2ed, align 8
  store i64 %v2_e2ed, i64* @rdi, align 8
  %v0_e2f2 = load i64, i64* %rbp.global-to-local, align 8
  %v1_e2f2 = add i64 %v0_e2f2, 64
  %v2_e2f2 = inttoptr i64 %v1_e2f2 to i64*
  %v3_e2f2 = load i64, i64* %v2_e2f2, align 8
  store i64 %v3_e2f2, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_e2f6

dec_label_pc_e2f6:                                ; preds = %dec_label_pc_e2e8.dec_label_pc_e2f6_crit_edge, %dec_label_pc_e2ed
  %v1_e2fe.pre-phi = phi i64* [ %.pre, %dec_label_pc_e2e8.dec_label_pc_e2f6_crit_edge ], [ %v1_e2ed, %dec_label_pc_e2ed ]
  %v0_e2fa = phi i64 [ %v0_e2fa.pre, %dec_label_pc_e2e8.dec_label_pc_e2f6_crit_edge ], [ %v0_e2f2, %dec_label_pc_e2ed ]
  %v1_e2f6 = add i64 %v0_e2fe, 8
  %v2_e2f6 = inttoptr i64 %v1_e2f6 to i64*
  %v3_e2f6 = load i64, i64* %v2_e2f6, align 8
  store i64 %v3_e2f6, i64* @rdx, align 8
  %v1_e2fa = add i64 %v0_e2fa, 72
  %v2_e2fa = inttoptr i64 %v1_e2fa to i64*
  %v3_e2fa = load i64, i64* %v2_e2fa, align 8
  store i64 %v3_e2fa, i64* @rcx, align 8
  store i64 0, i64* %v1_e2fe.pre-phi, align 8
  %v1_e305 = icmp eq i64 %v3_e2f6, 0
  %v0_e308 = load i64, i64* @rcx, align 8
  %v1_e308 = load i64, i64* %rbx.global-to-local, align 8
  %v2_e308 = add i64 %v1_e308, 8
  %v3_e308 = inttoptr i64 %v2_e308 to i64*
  store i64 %v0_e308, i64* %v3_e308, align 8
  %v0_e30c = load i64, i64* %rbx.global-to-local, align 8
  %v1_e30c = load i64, i64* %rbp.global-to-local, align 8
  %v2_e30c = add i64 %v1_e30c, 72
  %v3_e30c = inttoptr i64 %v2_e30c to i64*
  store i64 %v0_e30c, i64* %v3_e30c, align 8
  store i64 %v3_e2f6, i64* %rbx.global-to-local, align 8
  %v1_e313 = icmp eq i1 %v1_e305, false
  %v0_e2e8.pre = load i64, i64* %rax.global-to-local, align 8
  br i1 %v1_e313, label %dec_label_pc_e2e8, label %dec_label_pc_e315.loopexit

dec_label_pc_e315.loopexit:                       ; preds = %dec_label_pc_e2f6
  %v0_e320.pre.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_e315

dec_label_pc_e315:                                ; preds = %dec_label_pc_e315.loopexit, %dec_label_pc_e2d7
  %v0_e320.pre = phi i64 [ %v0_e2d7, %dec_label_pc_e2d7 ], [ %v0_e320.pre.pre, %dec_label_pc_e315.loopexit ]
  %v0_e315 = phi i64 [ %v3_e2dc, %dec_label_pc_e2d7 ], [ %v0_e2e8.pre, %dec_label_pc_e315.loopexit ]
  %v1_e315 = icmp eq i64 %v0_e315, 0
  %.pre250 = inttoptr i64 %v0_e320.pre to i64*
  br i1 %v1_e315, label %dec_label_pc_e320, label %dec_label_pc_e31a

dec_label_pc_e31a:                                ; preds = %dec_label_pc_e315
  %v2_e31a = load i64, i64* %.pre250, align 8
  store i64 %v2_e31a, i64* @rdi, align 8
  br label %dec_label_pc_e320

dec_label_pc_e320:                                ; preds = %dec_label_pc_e315, %dec_label_pc_e31a
  store i64 0, i64* %.pre250, align 8
  %v0_e328 = load i64, i64* %r12.global-to-local, align 8
  %v1_e328 = add i64 %v0_e328, 8
  %v2_e328 = inttoptr i64 %v1_e328 to i64*
  store i64 0, i64* %v2_e328, align 8
  %v0_e331.pre = load i64, i64* %r12.global-to-local, align 8
  %v0_e335.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_e331

dec_label_pc_e331:                                ; preds = %dec_label_pc_e320, %dec_label_pc_e2d0
  %v0_e335 = phi i64 [ %v0_e335.pre, %dec_label_pc_e320 ], [ %v0_e2dc, %dec_label_pc_e2d0 ]
  %v0_e331 = phi i64 [ %v0_e331.pre, %dec_label_pc_e320 ], [ %v0_e2d7, %dec_label_pc_e2d0 ]
  %v1_e331 = add i64 %v0_e331, 16
  store i64 %v1_e331, i64* %r12.global-to-local, align 8
  %v1_e335 = add i64 %v0_e335, 8
  %v2_e335 = inttoptr i64 %v1_e335 to i64*
  %v3_e335 = load i64, i64* %v2_e335, align 8
  %tmp251 = icmp ugt i64 %v3_e335, %v1_e331
  br i1 %tmp251, label %dec_label_pc_e2d0, label %dec_label_pc_e33b.loopexit

dec_label_pc_e33b.loopexit:                       ; preds = %dec_label_pc_e331
  br label %dec_label_pc_e33b

dec_label_pc_e33b:                                ; preds = %dec_label_pc_e33b.loopexit, %dec_label_pc_e2c0
  %v0_e33b = phi i64 [ %v0_e335, %dec_label_pc_e33b.loopexit ], [ %v0_e2c3, %dec_label_pc_e2c0 ]
  %v1_e33b = add i64 %v0_e33b, 24
  %v2_e33b = inttoptr i64 %v1_e33b to i64*
  store i64 0, i64* %v2_e33b, align 8
  %v0_e343 = load i64, i64* %rbp.global-to-local, align 8
  %v1_e343 = add i64 %v0_e343, 32
  %v2_e343 = inttoptr i64 %v1_e343 to i64*
  store i64 0, i64* %v2_e343, align 8
  %v2_e34b = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_e34b, i64* %rbx.global-to-local, align 8
  store i64 %v0_e2c2, i64* %rbp.global-to-local, align 8
  store i64 %v0_e2c0, i64* %r12.global-to-local, align 8
  %v0_e34f = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_e34f
}

define i64 @function_e350(i64 %arg1) local_unnamed_addr {
dec_label_pc_e350:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_e353 = load i64, i64* @rdi, align 8
  store i64 %v0_e353, i64* %r12.global-to-local, align 8
  %v0_e356 = load i64, i64* @rbx, align 8
  store i64 %v0_e356, i64* %stack_var_-24, align 8
  %v1_e357 = add i64 %v0_e353, 64
  %v2_e357 = inttoptr i64 %v1_e357 to i64*
  %v3_e357 = load i64, i64* %v2_e357, align 8
  %v10_e357 = icmp eq i64 %v3_e357, 0
  store i64 %v0_e353, i64* %rbp.global-to-local, align 8
  %v1_e35f = add i64 %v0_e353, 8
  %v2_e35f = inttoptr i64 %v1_e35f to i64*
  %v3_e35f = load i64, i64* %v2_e35f, align 8
  br i1 %v10_e357, label %dec_label_pc_e3b3, label %dec_label_pc_e365

dec_label_pc_e365:                                ; preds = %dec_label_pc_e350
  %v1_e365 = add i64 %v0_e353, 32
  %v2_e365 = inttoptr i64 %v1_e365 to i64*
  %v3_e365 = load i64, i64* %v2_e365, align 8
  %v10_e365 = icmp eq i64 %v3_e365, 0
  br i1 %v10_e365, label %dec_label_pc_e3b3, label %dec_label_pc_e36c

dec_label_pc_e36c:                                ; preds = %dec_label_pc_e365
  %v7_e36c = icmp ult i64 %v0_e353, %v3_e35f
  %v1_e36f = icmp eq i1 %v7_e36c, false
  br i1 %v1_e36f, label %dec_label_pc_e3ec, label %dec_label_pc_e378

dec_label_pc_e378:                                ; preds = %dec_label_pc_e3a6, %dec_label_pc_e36c
  %v0_e3aa5 = phi i64 [ %v0_e3aa, %dec_label_pc_e3a6 ], [ %v3_e35f, %dec_label_pc_e36c ]
  %v0_e3a6 = phi i64 [ %v1_e3a6, %dec_label_pc_e3a6 ], [ %v0_e353, %dec_label_pc_e36c ]
  %v1_e378 = inttoptr i64 %v0_e3a6 to i64*
  %v2_e378 = load i64, i64* %v1_e378, align 8
  store i64 %v2_e378, i64* @rdi, align 8
  %v1_e37c = icmp eq i64 %v2_e378, 0
  br i1 %v1_e37c, label %dec_label_pc_e3a6, label %dec_label_pc_e381

dec_label_pc_e381:                                ; preds = %dec_label_pc_e378
  %v1_e39826 = add i64 %v0_e3a6, 8
  %v2_e39827 = inttoptr i64 %v1_e39826 to i64*
  %v3_e39828 = load i64, i64* %v2_e39827, align 8
  %v1_e39c29 = icmp eq i64 %v3_e39828, 0
  %v1_e39f30 = icmp eq i1 %v1_e39c29, false
  br i1 %v1_e39f30, label %dec_label_pc_e390, label %dec_label_pc_e3a1

dec_label_pc_e390:                                ; preds = %dec_label_pc_e381, %dec_label_pc_e390
  %v3_e39831 = phi i64 [ %v3_e398, %dec_label_pc_e390 ], [ %v3_e39828, %dec_label_pc_e381 ]
  %v1_e390 = inttoptr i64 %v3_e39831 to i64*
  %v2_e390 = load i64, i64* %v1_e390, align 8
  store i64 %v2_e390, i64* @rdi, align 8
  %v1_e398 = add i64 %v3_e39831, 8
  %v2_e398 = inttoptr i64 %v1_e398 to i64*
  %v3_e398 = load i64, i64* %v2_e398, align 8
  %v1_e39c = icmp eq i64 %v3_e398, 0
  %v1_e39f = icmp eq i1 %v1_e39c, false
  br i1 %v1_e39f, label %dec_label_pc_e390, label %dec_label_pc_e3a1

dec_label_pc_e3a1:                                ; preds = %dec_label_pc_e390, %dec_label_pc_e381
  %v2_e3af7.lcssa = phi i64 [ %v2_e378, %dec_label_pc_e381 ], [ %v2_e390, %dec_label_pc_e390 ]
  %v3_e3a1 = load i64, i64* %v2_e35f, align 8
  br label %dec_label_pc_e3a6

dec_label_pc_e3a6:                                ; preds = %dec_label_pc_e3a1, %dec_label_pc_e378
  %v2_e3af = phi i64 [ %v2_e3af7.lcssa, %dec_label_pc_e3a1 ], [ 0, %dec_label_pc_e378 ]
  %v0_e3aa = phi i64 [ %v3_e3a1, %dec_label_pc_e3a1 ], [ %v0_e3aa5, %dec_label_pc_e378 ]
  %v1_e3a6 = add i64 %v0_e3a6, 16
  store i64 %v1_e3a6, i64* %rbp.global-to-local, align 8
  %tmp32 = icmp ugt i64 %v0_e3aa, %v1_e3a6
  br i1 %tmp32, label %dec_label_pc_e378, label %dec_label_pc_e3af

dec_label_pc_e3af:                                ; preds = %dec_label_pc_e3a6
  store i64 %v2_e3af, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_e3b3

dec_label_pc_e3b3:                                ; preds = %dec_label_pc_e3af, %dec_label_pc_e365, %dec_label_pc_e350
  %v1_e3b3 = phi i64 [ %v0_e3aa, %dec_label_pc_e3af ], [ %v3_e35f, %dec_label_pc_e365 ], [ %v3_e35f, %dec_label_pc_e350 ]
  %v0_e3b3 = phi i64 [ %v2_e3af, %dec_label_pc_e3af ], [ %v0_e353, %dec_label_pc_e365 ], [ %v0_e353, %dec_label_pc_e350 ]
  %v7_e3b3 = icmp ult i64 %v0_e3b3, %v1_e3b3
  %v1_e3b6 = icmp eq i1 %v7_e3b3, false
  br i1 %v1_e3b6, label %dec_label_pc_e3ec, label %dec_label_pc_e3c0

dec_label_pc_e3c0:                                ; preds = %dec_label_pc_e3e1, %dec_label_pc_e3b3
  %v0_e3e514 = phi i64 [ %v0_e3e5, %dec_label_pc_e3e1 ], [ %v0_e353, %dec_label_pc_e3b3 ]
  %v0_e3c0 = phi i64 [ %v1_e3e1, %dec_label_pc_e3e1 ], [ %v0_e3b3, %dec_label_pc_e3b3 ]
  %v1_e3c0 = add i64 %v0_e3c0, 8
  %v2_e3c0 = inttoptr i64 %v1_e3c0 to i64*
  %v3_e3c0 = load i64, i64* %v2_e3c0, align 8
  store i64 %v3_e3c0, i64* @rdi, align 8
  %v1_e3c4 = icmp eq i64 %v3_e3c0, 0
  br i1 %v1_e3c4, label %dec_label_pc_e3e1, label %dec_label_pc_e3d0

dec_label_pc_e3d0:                                ; preds = %dec_label_pc_e3c0, %dec_label_pc_e3d0
  %v0_e3d0 = phi i64 [ %v3_e3d0, %dec_label_pc_e3d0 ], [ %v3_e3c0, %dec_label_pc_e3c0 ]
  %v1_e3d0 = add i64 %v0_e3d0, 8
  %v2_e3d0 = inttoptr i64 %v1_e3d0 to i64*
  %v3_e3d0 = load i64, i64* %v2_e3d0, align 8
  %v1_e3d4 = inttoptr i64 %v0_e3d0 to i64*
  call void @free(i64* %v1_e3d4)
  %v1_e3d9 = icmp eq i64 %v3_e3d0, 0
  store i64 %v3_e3d0, i64* @rdi, align 8
  %v1_e3df = icmp eq i1 %v1_e3d9, false
  br i1 %v1_e3df, label %dec_label_pc_e3d0, label %dec_label_pc_e3e1.loopexit

dec_label_pc_e3e1.loopexit:                       ; preds = %dec_label_pc_e3d0
  %v0_e3e1.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_e3e5.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_e3e1

dec_label_pc_e3e1:                                ; preds = %dec_label_pc_e3e1.loopexit, %dec_label_pc_e3c0
  %v0_e3e5 = phi i64 [ %v0_e3e5.pre, %dec_label_pc_e3e1.loopexit ], [ %v0_e3e514, %dec_label_pc_e3c0 ]
  %v0_e3e1 = phi i64 [ %v0_e3e1.pre, %dec_label_pc_e3e1.loopexit ], [ %v0_e3c0, %dec_label_pc_e3c0 ]
  %v1_e3e1 = add i64 %v0_e3e1, 16
  store i64 %v1_e3e1, i64* %rbp.global-to-local, align 8
  %v1_e3e5 = add i64 %v0_e3e5, 8
  %v2_e3e5 = inttoptr i64 %v1_e3e5 to i64*
  %v3_e3e5 = load i64, i64* %v2_e3e5, align 8
  %tmp33 = icmp ugt i64 %v3_e3e5, %v1_e3e1
  br i1 %tmp33, label %dec_label_pc_e3c0, label %dec_label_pc_e3ec

dec_label_pc_e3ec:                                ; preds = %dec_label_pc_e3e1, %dec_label_pc_e3b3, %dec_label_pc_e36c
  %v0_e3ec = phi i64 [ %v0_e353, %dec_label_pc_e3b3 ], [ %v0_e353, %dec_label_pc_e36c ], [ %v0_e3e5, %dec_label_pc_e3e1 ]
  %v1_e3ec = add i64 %v0_e3ec, 72
  %v2_e3ec = inttoptr i64 %v1_e3ec to i64*
  %v3_e3ec = load i64, i64* %v2_e3ec, align 8
  store i64 %v3_e3ec, i64* @rdi, align 8
  %v1_e3f1 = icmp eq i64 %v3_e3ec, 0
  br i1 %v1_e3f1, label %dec_label_pc_e411, label %dec_label_pc_e400

dec_label_pc_e400:                                ; preds = %dec_label_pc_e3ec, %dec_label_pc_e400
  %v0_e400 = phi i64 [ %v3_e400, %dec_label_pc_e400 ], [ %v3_e3ec, %dec_label_pc_e3ec ]
  %v1_e400 = add i64 %v0_e400, 8
  %v2_e400 = inttoptr i64 %v1_e400 to i64*
  %v3_e400 = load i64, i64* %v2_e400, align 8
  %v1_e404 = inttoptr i64 %v0_e400 to i64*
  call void @free(i64* %v1_e404)
  %v1_e409 = icmp eq i64 %v3_e400, 0
  store i64 %v3_e400, i64* @rdi, align 8
  %v1_e40f = icmp eq i1 %v1_e409, false
  br i1 %v1_e40f, label %dec_label_pc_e400, label %dec_label_pc_e411.loopexit

dec_label_pc_e411.loopexit:                       ; preds = %dec_label_pc_e400
  %phitmp = inttoptr i64 %v3_e400 to i64*
  br label %dec_label_pc_e411

dec_label_pc_e411:                                ; preds = %dec_label_pc_e411.loopexit, %dec_label_pc_e3ec
  %v2_e411 = phi i64* [ %phitmp, %dec_label_pc_e411.loopexit ], [ null, %dec_label_pc_e3ec ]
  call void @free(i64* %v2_e411)
  %v2_e41a = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_e41a, i64* @rbx, align 8
  %v0_e41b = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_e41b, i64* @rdi, align 8
  %v1_e421 = inttoptr i64 %v0_e41b to i64*
  call void @free(i64* %v1_e421)
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_e430(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_e430:
  %cf.global-to-local = alloca i1, align 1
  %r12.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-120 = alloca i64, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_e430 = load i64, i64* @r12, align 8
  %v0_e432 = load i64, i64* @rbp, align 8
  %v0_e433 = load i64, i64* @rdi, align 8
  store i64 %v0_e433, i64* @rbp, align 8
  %v0_e436 = load i64, i64* @rbx, align 8
  store i64 %v0_e436, i64* %stack_var_-24, align 8
  %v4_e437 = icmp ult i64* %stack_var_-24, inttoptr (i64 96 to i64*)
  store i1 %v4_e437, i1* %cf.global-to-local, align 1
  %v15_e437 = ptrtoint i64* %stack_var_-120 to i64
  %v1_e43b = add i64 %v0_e433, 40
  %v2_e43b = inttoptr i64 %v1_e43b to i64*
  %v3_e43b = load i64, i64* %v2_e43b, align 8
  store i64 %v3_e43b, i64* %r12.global-to-local, align 8
  %v0_e43f = call i64 @__readfsqword(i64 40)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e44f = add i64 %v3_e43b, 16
  %v2_e44f = inttoptr i64 %v1_e44f to i8*
  %v3_e44f = load i8, i8* %v2_e44f, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v10_e44f = icmp eq i8 %v3_e44f, 0
  %v1_e455 = icmp eq i1 %v10_e44f, false
  %v0_e4a8.pre = load i64, i64* @rsi, align 8
  br i1 %v1_e455, label %dec_label_pc_e4a8, label %dec_label_pc_e457

dec_label_pc_e457:                                ; preds = %dec_label_pc_e430
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_e457 = icmp slt i64 %v0_e4a8.pre, 0
  br i1 %v2_e457, label %dec_label_pc_e5d8, label %dec_label_pc_e460

dec_label_pc_e460:                                ; preds = %dec_label_pc_e457
  %v0_e460 = load i128, i128* @xmm0, align 8
  %v2_e460 = call i128 @__asm_pxor(i128 %v0_e460, i128 %v0_e460)
  %v0_e464 = load i64, i64* @rsi, align 8
  %v1_e464 = call i128 @__asm_cvtsi2ss(i64 %v0_e464)
  br label %dec_label_pc_e469

dec_label_pc_e469:                                ; preds = %dec_label_pc_e5d8, %dec_label_pc_e460
  %storemerge = phi i128 [ %v2_e5ed, %dec_label_pc_e5d8 ], [ %v1_e464, %dec_label_pc_e460 ]
  %v1_e469 = load i64, i64* %r12.global-to-local, align 8
  %v2_e469 = add i64 %v1_e469, 8
  %v3_e469 = inttoptr i64 %v2_e469 to i32*
  %v4_e469 = load i32, i32* %v3_e469, align 4
  %v5_e469 = call i128 @__asm_divss.4(i128 %storemerge, i32 %v4_e469)
  store i128 %v5_e469, i128* @xmm0, align 8
  call void @__asm_ucomiss(i128 %v5_e469, i32 1602224128)
  %v0_e477 = load i1, i1* %cf.global-to-local, align 1
  %v1_e477 = icmp eq i1 %v0_e477, false
  br i1 %v1_e477, label %dec_label_pc_e5b0, label %dec_label_pc_e47d

dec_label_pc_e47d:                                ; preds = %dec_label_pc_e469
  call void @__asm_ucomiss(i128 %v5_e469, i32 1593835520)
  %v0_e484 = load i1, i1* %cf.global-to-local, align 1
  br i1 %v0_e484, label %dec_label_pc_e600, label %dec_label_pc_e48a

dec_label_pc_e48a:                                ; preds = %dec_label_pc_e47d
  %v2_e48a = call i128 @__asm_subss(i128 %v5_e469, i32 1593835520)
  store i128 %v2_e48a, i128* @xmm0, align 8
  %v1_e49c = call i64 @__asm_cvttss2si(i128 %v2_e48a)
  %v2_e4a1 = xor i64 %v1_e49c, -9223372036854775808
  store i1 false, i1* %cf.global-to-local, align 1
  store i64 %v2_e4a1, i64* @rsi, align 8
  br label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e430, %dec_label_pc_e600, %dec_label_pc_e48a
  %v0_e4a8 = phi i64 [ %v1_e600, %dec_label_pc_e600 ], [ %v2_e4a1, %dec_label_pc_e48a ], [ %v0_e4a8.pre, %dec_label_pc_e430 ]
  store i64 %v0_e4a8, i64* @rdi, align 8
  %v1_e4ab = call i64 @function_d890(i64 %v0_e4a8)
  store i64 %v1_e4ab, i64* @rbx, align 8
  br i1 undef, label %dec_label_pc_e65f, label %dec_label_pc_e4c6

dec_label_pc_e4c6:                                ; preds = %dec_label_pc_e65f, %dec_label_pc_e4a8
  %v0_e4f3 = phi i64 [ %v0_e4d2.pre, %dec_label_pc_e65f ], [ %v1_e4ab, %dec_label_pc_e4a8 ]
  %v1_e4ce = phi i64 [ 1, %dec_label_pc_e65f ], [ 0, %dec_label_pc_e4a8 ]
  %v3_e4ce = select i1 icmp slt (i32* @0, i32* null), i64 1, i64 %v1_e4ce
  store i64 %v3_e4ce, i64* @rcx, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e4d2 = icmp eq i64 %v0_e4f3, 0
  br i1 %v1_e4d2, label %dec_label_pc_e5b0, label %dec_label_pc_e4db

dec_label_pc_e4db:                                ; preds = %dec_label_pc_e4c6
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_e4db = icmp eq i64 %v3_e4ce, 0
  store i64 %v3_e4ce, i64* @rcx, align 8
  %v1_e4de = icmp eq i1 %v3_e4db, false
  br i1 %v1_e4de, label %dec_label_pc_e5b0, label %dec_label_pc_e4e4

dec_label_pc_e4e4:                                ; preds = %dec_label_pc_e4db
  %v0_e4e4 = load i64, i64* @rbp, align 8
  %v1_e4e4 = add i64 %v0_e4e4, 16
  %v2_e4e4 = inttoptr i64 %v1_e4e4 to i64*
  %v3_e4e4 = load i64, i64* %v2_e4e4, align 8
  %v10_e4e4 = icmp ult i64 %v3_e4e4, %v0_e4f3
  store i1 %v10_e4e4, i1* %cf.global-to-local, align 1
  %v15_e4e4 = icmp eq i64 %v3_e4e4, %v0_e4f3
  br i1 %v15_e4e4, label %dec_label_pc_e610, label %dec_label_pc_e4ee

dec_label_pc_e4ee:                                ; preds = %dec_label_pc_e4e4
  store i64 16, i64* @rsi, align 8
  %v1_e4f3 = trunc i64 %v0_e4f3 to i32
  store i64 %v0_e4f3, i64* @rdi, align 8
  %v6_e4f6 = call i64* @calloc(i32 %v1_e4f3, i32 16)
  %v7_e4f6 = ptrtoint i64* %v6_e4f6 to i64
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e4fb = icmp eq i64* %v6_e4f6, null
  store i64 %v7_e4f6, i64* %stack_var_-120, align 8
  br i1 %v1_e4fb, label %dec_label_pc_e5b0, label %dec_label_pc_e508

dec_label_pc_e508:                                ; preds = %dec_label_pc_e4ee
  %v0_e508 = load i64, i64* @rbx, align 8
  %v2_e50d = mul i64 %v0_e508, 16
  %v2_e516 = add i64 %v2_e50d, %v7_e4f6
  store i64 %v2_e516, i64* @rbx, align 8
  %v0_e519 = load i64, i64* @rbp, align 8
  store i64 %v15_e437, i64* @r12, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  store i64 0, i64* @rdx, align 8
  store i64 %v0_e519, i64* @rsi, align 8
  store i64 %v15_e437, i64* @rdi, align 8
  %v1_e556 = add i64 %v0_e519, 72
  %v2_e556 = inttoptr i64 %v1_e556 to i64*
  %v3_e556 = load i64, i64* %v2_e556, align 8
  store i64 %v3_e556, i64* @rax, align 8
  %v5_e55f = call i64 @function_db20(i64* nonnull %stack_var_-120, i64 %v0_e519, i32 0)
  %v4_e564 = trunc i64 %v5_e55f to i8
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_e564 = icmp eq i8 %v4_e564, 0
  store i64 %v5_e55f, i64* @rbx, align 8
  %v1_e568 = icmp eq i1 %v5_e564, false
  br i1 %v1_e568, label %dec_label_pc_e620, label %dec_label_pc_e56e

dec_label_pc_e56e:                                ; preds = %dec_label_pc_e508
  store i64 %v3_e556, i64* @rax, align 8
  store i64 1, i64* @rdx, align 8
  store i64 %v15_e437, i64* @rsi, align 8
  %v0_e57b = load i64, i64* @rbp, align 8
  store i64 %v0_e57b, i64* @rdi, align 8
  %v2_e57e = add i64 %v0_e57b, 72
  %v3_e57e = inttoptr i64 %v2_e57e to i64*
  store i64 %v3_e556, i64* %v3_e57e, align 8
  %v1_e582 = inttoptr i64 %v0_e57b to i64*
  %v6_e582 = call i64 @function_db20(i64* %v1_e582, i64 %v15_e437, i32 1)
  store i64 %v6_e582, i64* @rax, align 8
  %v4_e587 = trunc i64 %v6_e582 to i8
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_e587 = icmp eq i8 %v4_e587, 0
  br i1 %v5_e587, label %dec_label_pc_e669, label %dec_label_pc_e58f

dec_label_pc_e58f:                                ; preds = %dec_label_pc_e56e
  store i1 false, i1* %cf.global-to-local, align 1
  store i64 0, i64* @rdx, align 8
  store i64 %v15_e437, i64* @rsi, align 8
  %v0_e594 = load i64, i64* @rbp, align 8
  store i64 %v0_e594, i64* @rdi, align 8
  %v1_e597 = inttoptr i64 %v0_e594 to i64*
  %v5_e597 = call i64 @function_db20(i64* %v1_e597, i64 %v15_e437, i32 0)
  %v4_e59c = trunc i64 %v5_e597 to i8
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_e59c = icmp eq i8 %v4_e59c, 0
  br i1 %v5_e59c, label %dec_label_pc_e669, label %dec_label_pc_e5a4

dec_label_pc_e5a4:                                ; preds = %dec_label_pc_e58f
  %v2_e5a4 = load i64, i64* %stack_var_-120, align 8
  store i64 %v2_e5a4, i64* @rdi, align 8
  %v1_e5a8 = inttoptr i64 %v2_e5a4 to i64*
  call void @free(i64* %v1_e5a8)
  br label %dec_label_pc_e5b2

dec_label_pc_e5b0:                                ; preds = %dec_label_pc_e4ee, %dec_label_pc_e4db, %dec_label_pc_e4c6, %dec_label_pc_e469
  store i1 false, i1* %cf.global-to-local, align 1
  store i64 0, i64* @rbx, align 8
  br label %dec_label_pc_e5b2

dec_label_pc_e5b2:                                ; preds = %dec_label_pc_e620, %dec_label_pc_e610, %dec_label_pc_e5b0, %dec_label_pc_e5a4
  store i64 %v0_e43f, i64* @rcx, align 8
  %v1_e5b7 = call i64 @__readfsqword(i64 40)
  %v2_e5b7 = xor i64 %v1_e5b7, %v0_e43f
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_e5b7 = icmp eq i64 %v2_e5b7, 0
  store i64 %v2_e5b7, i64* @rcx, align 8
  %v1_e5c2 = icmp eq i1 %v3_e5b7, false
  br i1 %v1_e5c2, label %dec_label_pc_e65a, label %dec_label_pc_e5c8

dec_label_pc_e5c8:                                ; preds = %dec_label_pc_e5b2
  %v0_e5c0 = load i64, i64* @rbx, align 8
  %v0_e5c8 = load i64, i64* @rsp, align 8
  %v4_e5c8 = icmp ugt i64 %v0_e5c8, -97
  store i1 %v4_e5c8, i1* %cf.global-to-local, align 1
  %v2_e5cc = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_e5cc, i64* @rbx, align 8
  store i64 %v0_e432, i64* @rbp, align 8
  store i64 %v0_e430, i64* @r12, align 8
  ret i64 %v0_e5c0

dec_label_pc_e5d8:                                ; preds = %dec_label_pc_e457
  %v0_e5db = load i128, i128* @xmm0, align 8
  %v2_e5db = call i128 @__asm_pxor(i128 %v0_e5db, i128 %v0_e5db)
  %v2_e5df = udiv i64 %v0_e4a8.pre, 2
  %v0_e5e2 = load i64, i64* @rsi, align 8
  %v2_e5e2 = urem i64 %v0_e5e2, 2
  store i64 %v2_e5e2, i64* @rsi, align 8
  %v2_e5e5 = or i64 %v2_e5e2, %v2_e5df
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e5e8 = call i128 @__asm_cvtsi2ss(i64 %v2_e5e5)
  %v2_e5ed = call i128 @__asm_addss(i128 %v1_e5e8, i128 %v1_e5e8)
  br label %dec_label_pc_e469

dec_label_pc_e600:                                ; preds = %dec_label_pc_e47d
  %v1_e600 = call i64 @__asm_cvttss2si(i128 %v5_e469)
  store i64 %v1_e600, i64* @rsi, align 8
  br label %dec_label_pc_e4a8

dec_label_pc_e610:                                ; preds = %dec_label_pc_e4e4
  store i64 1, i64* @rbx, align 8
  br label %dec_label_pc_e5b2

dec_label_pc_e620:                                ; preds = %dec_label_pc_e508
  store i64 %v15_e437, i64* @rdi, align 8
  call void @free(i64* nonnull %stack_var_-120)
  %v2_e629 = load i64, i64* %stack_var_-120, align 8
  %v1_e62d = load i64, i64* @rbp, align 8
  %v2_e62d = inttoptr i64 %v1_e62d to i64*
  store i64 %v2_e629, i64* %v2_e62d, align 8
  %v1_e636 = load i64, i64* @rbp, align 8
  %v2_e636 = add i64 %v1_e636, 8
  %v3_e636 = inttoptr i64 %v2_e636 to i64*
  store i64 %v2_e516, i64* %v3_e636, align 8
  %v1_e63f = load i64, i64* @rbp, align 8
  %v2_e63f = add i64 %v1_e63f, 16
  %v3_e63f = inttoptr i64 %v2_e63f to i64*
  store i64 %v0_e508, i64* %v3_e63f, align 8
  %v1_e648 = load i64, i64* @rbp, align 8
  %v2_e648 = add i64 %v1_e648, 24
  %v3_e648 = inttoptr i64 %v2_e648 to i64*
  store i64 0, i64* %v3_e648, align 8
  %v1_e651 = load i64, i64* @rbp, align 8
  %v2_e651 = add i64 %v1_e651, 72
  %v3_e651 = inttoptr i64 %v2_e651 to i64*
  store i64 %v3_e556, i64* %v3_e651, align 8
  br label %dec_label_pc_e5b2

dec_label_pc_e65a:                                ; preds = %dec_label_pc_e5b2
  call void @__stack_chk_fail()
  %v0_e4d2.pre.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_e65f

dec_label_pc_e65f:                                ; preds = %dec_label_pc_e65a, %dec_label_pc_e4a8
  %v0_e4d2.pre = phi i64 [ %v0_e4d2.pre.pre, %dec_label_pc_e65a ], [ %v1_e4ab, %dec_label_pc_e4a8 ]
  br label %dec_label_pc_e4c6

dec_label_pc_e669:                                ; preds = %dec_label_pc_e58f, %dec_label_pc_e56e
  call void @abort()
  unreachable
}

define i64 @function_e670(i64 %arg1, i64 %arg2, i64* %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_e670:
  %cf.global-to-local = alloca i1, align 1
  %rax.global-to-local = alloca i64, align 8
  %sf.global-to-local = alloca i1, align 1
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg4, i64* @rcx, align 8
  %tmp55 = ptrtoint i64* %arg3 to i64
  store i64 %tmp55, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-56 = alloca i64, align 8
  %stack_var_-32 = alloca i64, align 8
  %v0_e670 = load i64, i64* @r13, align 8
  %v0_e672 = load i64, i64* @r12, align 8
  %v0_e674 = load i64, i64* @rbp, align 8
  %v0_e675 = load i64, i64* @rbx, align 8
  store i64 %v0_e675, i64* %stack_var_-32, align 8
  %v4_e675 = ptrtoint i64* %stack_var_-32 to i64
  %v1_e676 = add i64 %v4_e675, -24
  %v5_e676 = icmp ult i64* %stack_var_-32, inttoptr (i64 24 to i64*)
  store i1 %v5_e676, i1* %cf.global-to-local, align 1
  %v10_e676 = icmp eq i64 %v1_e676, 0
  store i1 %v10_e676, i1* %zf.global-to-local, align 1
  %v11_e676 = icmp slt i64 %v1_e676, 0
  store i1 %v11_e676, i1* %sf.global-to-local, align 1
  %v16_e676 = ptrtoint i64* %stack_var_-56 to i64
  %v0_e67a = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e68a = icmp eq i64 %arg2, 0
  store i1 %v1_e68a, i1* %zf.global-to-local, align 1
  %v2_e68a = icmp slt i64 %arg2, 0
  store i1 %v2_e68a, i1* %sf.global-to-local, align 1
  br i1 %v1_e68a, label %dec_label_pc_e84d, label %dec_label_pc_e693

dec_label_pc_e693:                                ; preds = %dec_label_pc_e670
  store i64 %v16_e676, i64* @r12, align 8
  store i64 0, i64* @rcx, align 8
  %v0_e698 = load i64, i64* @rdx, align 8
  store i64 %v0_e698, i64* @r13, align 8
  %v0_e69e = load i64, i64* @rdi, align 8
  store i64 %v0_e69e, i64* @rbx, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 0, i64* @rdx, align 8
  %v1_e6e0 = add i64 %v0_e69e, 24
  %v2_e6e0 = inttoptr i64 %v1_e6e0 to i64*
  %v3_e6e0 = load i64, i64* %v2_e6e0, align 8
  store i64 %v3_e6e0, i64* %rax.global-to-local, align 8
  %sext = mul i64 %v3_e6e0, 4294967296
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_e6e4 = icmp eq i64 %sext, 0
  store i1 %v2_e6e4, i1* %zf.global-to-local, align 1
  %v3_e6e4 = icmp slt i64 %sext, 0
  store i1 %v3_e6e4, i1* %sf.global-to-local, align 1
  br i1 %v3_e6e4, label %dec_label_pc_e760, label %dec_label_pc_e6e9

dec_label_pc_e6bc:                                ; preds = %dec_label_pc_e883, %dec_label_pc_e858, %dec_label_pc_e73e
  store i64 %v0_e67a, i64* @rcx, align 8
  %v1_e6c1 = call i64 @__readfsqword(i64 40)
  %v2_e6c1 = xor i64 %v1_e6c1, %v0_e67a
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_e6c1 = icmp eq i64 %v2_e6c1, 0
  store i1 %v3_e6c1, i1* %zf.global-to-local, align 1
  %v4_e6c1 = icmp slt i64 %v2_e6c1, 0
  store i1 %v4_e6c1, i1* %sf.global-to-local, align 1
  store i64 %v2_e6c1, i64* @rcx, align 8
  %v1_e6ca = icmp eq i1 %v3_e6c1, false
  br i1 %v1_e6ca, label %dec_label_pc_e8ef, label %dec_label_pc_e6d0

dec_label_pc_e6d0:                                ; preds = %dec_label_pc_e6bc
  %v0_e6d0 = load i64, i64* @rsp, align 8
  %v1_e6d0 = add i64 %v0_e6d0, 24
  %v5_e6d0 = icmp ugt i64 %v0_e6d0, -25
  store i1 %v5_e6d0, i1* %cf.global-to-local, align 1
  %v10_e6d0 = icmp eq i64 %v1_e6d0, 0
  store i1 %v10_e6d0, i1* %zf.global-to-local, align 1
  %v11_e6d0 = icmp slt i64 %v1_e6d0, 0
  store i1 %v11_e6d0, i1* %sf.global-to-local, align 1
  %v2_e6d4 = load i64, i64* %stack_var_-32, align 8
  store i64 %v2_e6d4, i64* @rbx, align 8
  store i64 %v0_e674, i64* @rbp, align 8
  store i64 %v0_e672, i64* @r12, align 8
  store i64 %v0_e670, i64* @r13, align 8
  %v0_e6da = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_e6da

dec_label_pc_e6e9:                                ; preds = %dec_label_pc_e693
  %v0_e6e9 = load i128, i128* @xmm1, align 8
  %v2_e6e9 = call i128 @__asm_pxor(i128 %v0_e6e9, i128 %v0_e6e9)
  %v0_e6ed = load i64, i64* @rbx, align 8
  %v1_e6ed = add i64 %v0_e6ed, 40
  %v2_e6ed = inttoptr i64 %v1_e6ed to i64*
  %v3_e6ed = load i64, i64* %v2_e6ed, align 8
  store i64 %v3_e6ed, i64* @rdx, align 8
  %v1_e6f1 = sdiv i64 %sext, 4294967296
  %v2_e6f1 = call i128 @__asm_cvtsi2ss(i64 %v1_e6f1)
  store i128 %v2_e6f1, i128* @xmm1, align 8
  %v0_e6f6 = load i64, i64* @rbx, align 8
  %v1_e6f6 = add i64 %v0_e6f6, 16
  %v2_e6f6 = inttoptr i64 %v1_e6f6 to i64*
  %v3_e6f6 = load i64, i64* %v2_e6f6, align 8
  store i64 %v3_e6f6, i64* %rax.global-to-local, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e6fa = icmp eq i64 %v3_e6f6, 0
  store i1 %v1_e6fa, i1* %zf.global-to-local, align 1
  %v2_e6fa = icmp slt i64 %v3_e6f6, 0
  store i1 %v2_e6fa, i1* %sf.global-to-local, align 1
  br i1 %v2_e6fa, label %dec_label_pc_e78a, label %dec_label_pc_e703

dec_label_pc_e703:                                ; preds = %dec_label_pc_e760, %dec_label_pc_e6e9
  %v0_e703 = load i128, i128* @xmm0, align 8
  %v2_e703 = call i128 @__asm_pxor(i128 %v0_e703, i128 %v0_e703)
  %v0_e707 = load i64, i64* %rax.global-to-local, align 8
  %v1_e707 = call i128 @__asm_cvtsi2ss(i64 %v0_e707)
  br label %dec_label_pc_e70c

dec_label_pc_e70c:                                ; preds = %dec_label_pc_e78a, %dec_label_pc_e703
  %storemerge7 = phi i128 [ %v2_e79f, %dec_label_pc_e78a ], [ %v1_e707, %dec_label_pc_e703 ]
  %v1_e70c = load i64, i64* @rdx, align 8
  %v2_e70c = add i64 %v1_e70c, 8
  %v3_e70c = inttoptr i64 %v2_e70c to i32*
  %v4_e70c = load i32, i32* %v3_e70c, align 4
  %v5_e70c = call i128 @__asm_mulss(i128 %storemerge7, i32 %v4_e70c)
  store i128 %v5_e70c, i128* @xmm0, align 8
  %v0_e711 = load i128, i128* @xmm1, align 8
  call void @__asm_ucomiss.1(i128 %v0_e711, i128 %v5_e70c)
  %v0_e714 = load i1, i1* %cf.global-to-local, align 1
  %v1_e714 = load i1, i1* %zf.global-to-local, align 1
  %v2_e714 = or i1 %v0_e714, %v1_e714
  br i1 %v2_e714, label %dec_label_pc_e71a, label %dec_label_pc_e7b0

dec_label_pc_e71a:                                ; preds = %dec_label_pc_e70c, %dec_label_pc_e7ee
  %v2_e71a = load i64, i64* %stack_var_-56, align 8
  store i64 %v2_e71a, i64* @r12, align 8
  %v1_e71e = inttoptr i64 %v2_e71a to i64*
  %v2_e71e = load i64, i64* %v1_e71e, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v9_e71e = icmp eq i64 %v2_e71e, 0
  store i1 %v9_e71e, i1* %zf.global-to-local, align 1
  %v10_e71e = icmp slt i64 %v2_e71e, 0
  store i1 %v10_e71e, i1* %sf.global-to-local, align 1
  br i1 %v9_e71e, label %dec_label_pc_e858, label %dec_label_pc_e729

dec_label_pc_e729:                                ; preds = %dec_label_pc_e71a
  %v0_e729 = load i64, i64* @rbx, align 8
  %v1_e729 = add i64 %v0_e729, 72
  %v2_e729 = inttoptr i64 %v1_e729 to i64*
  %v3_e729 = load i64, i64* %v2_e729, align 8
  store i64 %v3_e729, i64* %rax.global-to-local, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e72d = icmp eq i64 %v3_e729, 0
  store i1 %v1_e72d, i1* %zf.global-to-local, align 1
  %v2_e72d = icmp slt i64 %v3_e729, 0
  store i1 %v2_e72d, i1* %sf.global-to-local, align 1
  br i1 %v1_e72d, label %dec_label_pc_e870, label %dec_label_pc_e736

dec_label_pc_e736:                                ; preds = %dec_label_pc_e729
  %v1_e736 = add i64 %v3_e729, 8
  %v2_e736 = inttoptr i64 %v1_e736 to i64*
  %v3_e736 = load i64, i64* %v2_e736, align 8
  store i64 %v3_e736, i64* @rdx, align 8
  store i64 %v3_e736, i64* %v2_e729, align 8
  %v1_e743.pre = load i64, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_e73e

dec_label_pc_e73e:                                ; preds = %dec_label_pc_e870, %dec_label_pc_e736
  %v1_e743 = phi i64 [ %v5_e875, %dec_label_pc_e870 ], [ %v1_e743.pre, %dec_label_pc_e736 ]
  %v0_e73e = load i64, i64* @r12, align 8
  %v1_e73e = add i64 %v0_e73e, 8
  %v2_e73e = inttoptr i64 %v1_e73e to i64*
  %v3_e73e = load i64, i64* %v2_e73e, align 8
  store i64 %v3_e73e, i64* @rdx, align 8
  %v0_e743 = load i64, i64* @rbp, align 8
  %v2_e743 = inttoptr i64 %v1_e743 to i64*
  store i64 %v0_e743, i64* %v2_e743, align 8
  %v0_e746 = load i64, i64* @rdx, align 8
  %v1_e746 = load i64, i64* %rax.global-to-local, align 8
  %v2_e746 = add i64 %v1_e746, 8
  %v3_e746 = inttoptr i64 %v2_e746 to i64*
  store i64 %v0_e746, i64* %v3_e746, align 8
  %v0_e74a = load i64, i64* %rax.global-to-local, align 8
  %v1_e74a = load i64, i64* @r12, align 8
  %v2_e74a = add i64 %v1_e74a, 8
  %v3_e74a = inttoptr i64 %v2_e74a to i64*
  store i64 %v0_e74a, i64* %v3_e74a, align 8
  store i64 1, i64* %rax.global-to-local, align 8
  %v0_e754 = load i64, i64* @rbx, align 8
  %v1_e754 = add i64 %v0_e754, 32
  %v2_e754 = inttoptr i64 %v1_e754 to i64*
  %v3_e754 = load i64, i64* %v2_e754, align 8
  %v4_e754 = add i64 %v3_e754, 1
  %v8_e754 = icmp eq i64 %v3_e754, -1
  store i1 %v8_e754, i1* %cf.global-to-local, align 1
  %v13_e754 = icmp eq i64 %v4_e754, 0
  store i1 %v13_e754, i1* %zf.global-to-local, align 1
  %v14_e754 = icmp slt i64 %v4_e754, 0
  store i1 %v14_e754, i1* %sf.global-to-local, align 1
  store i64 %v4_e754, i64* %v2_e754, align 8
  br label %dec_label_pc_e6bc

dec_label_pc_e760:                                ; preds = %dec_label_pc_e693
  %v1_e760 = sdiv i64 %sext, 4294967296
  store i64 %v1_e760, i64* @rdx, align 8
  %v0_e763 = load i128, i128* @xmm1, align 8
  %v2_e763 = call i128 @__asm_pxor(i128 %v0_e763, i128 %v0_e763)
  %v3_e767 = urem i64 %v3_e6e0, 2
  store i64 %v3_e767, i64* %rax.global-to-local, align 8
  %v0_e76a = load i64, i64* @rdx, align 8
  %v2_e76a = udiv i64 %v0_e76a, 2
  %v2_e76d = or i64 %v2_e76a, %v3_e767
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_e76d = icmp eq i64 %v2_e76d, 0
  store i1 %v3_e76d, i1* %zf.global-to-local, align 1
  store i1 false, i1* %sf.global-to-local, align 1
  store i64 %v2_e76d, i64* @rdx, align 8
  %v0_e770 = load i64, i64* @rbx, align 8
  %v1_e770 = add i64 %v0_e770, 16
  %v2_e770 = inttoptr i64 %v1_e770 to i64*
  %v3_e770 = load i64, i64* %v2_e770, align 8
  store i64 %v3_e770, i64* %rax.global-to-local, align 8
  %v1_e774 = call i128 @__asm_cvtsi2ss(i64 %v2_e76d)
  %v0_e779 = load i64, i64* @rbx, align 8
  %v1_e779 = add i64 %v0_e779, 40
  %v2_e779 = inttoptr i64 %v1_e779 to i64*
  %v3_e779 = load i64, i64* %v2_e779, align 8
  store i64 %v3_e779, i64* @rdx, align 8
  %v0_e77d = load i64, i64* %rax.global-to-local, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e77d = icmp eq i64 %v0_e77d, 0
  store i1 %v1_e77d, i1* %zf.global-to-local, align 1
  %v2_e77d = icmp slt i64 %v0_e77d, 0
  store i1 %v2_e77d, i1* %sf.global-to-local, align 1
  %v2_e780 = call i128 @__asm_addss(i128 %v1_e774, i128 %v1_e774)
  store i128 %v2_e780, i128* @xmm1, align 8
  %v0_e784 = load i1, i1* %sf.global-to-local, align 1
  %v1_e784 = icmp eq i1 %v0_e784, false
  br i1 %v1_e784, label %dec_label_pc_e703, label %dec_label_pc_e760.dec_label_pc_e78a_crit_edge

dec_label_pc_e760.dec_label_pc_e78a_crit_edge:    ; preds = %dec_label_pc_e760
  %v0_e78a.pre = load i64, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_e78a

dec_label_pc_e78a:                                ; preds = %dec_label_pc_e760.dec_label_pc_e78a_crit_edge, %dec_label_pc_e6e9
  %v0_e78a = phi i64 [ %v0_e78a.pre, %dec_label_pc_e760.dec_label_pc_e78a_crit_edge ], [ %v3_e6f6, %dec_label_pc_e6e9 ]
  store i64 %v0_e78a, i64* @rcx, align 8
  %v0_e78d = load i128, i128* @xmm0, align 8
  %v2_e78d = call i128 @__asm_pxor(i128 %v0_e78d, i128 %v0_e78d)
  %v0_e791 = load i64, i64* @rcx, align 8
  %v2_e791 = udiv i64 %v0_e791, 2
  %v0_e794 = load i64, i64* %rax.global-to-local, align 8
  %v2_e794 = urem i64 %v0_e794, 2
  store i64 %v2_e794, i64* %rax.global-to-local, align 8
  %v2_e797 = or i64 %v2_e794, %v2_e791
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_e797 = icmp eq i64 %v2_e797, 0
  store i1 %v3_e797, i1* %zf.global-to-local, align 1
  store i1 false, i1* %sf.global-to-local, align 1
  store i64 %v2_e797, i64* @rcx, align 8
  %v1_e79a = call i128 @__asm_cvtsi2ss(i64 %v2_e797)
  %v2_e79f = call i128 @__asm_addss(i128 %v1_e79a, i128 %v1_e79a)
  br label %dec_label_pc_e70c

dec_label_pc_e7b0:                                ; preds = %dec_label_pc_e70c
  %v0_e7b0 = load i64, i64* @rbx, align 8
  %v1_e7b0 = add i64 %v0_e7b0, 40
  store i64 %v1_e7b0, i64* @rdi, align 8
  %v1_e7b4 = call i64 @function_daa0(i64 %v1_e7b0)
  store i64 %v1_e7b4, i64* %rax.global-to-local, align 8
  %v0_e7b9 = load i64, i64* @rbx, align 8
  %v1_e7b9 = add i64 %v0_e7b9, 16
  %v2_e7b9 = inttoptr i64 %v1_e7b9 to i64*
  %v3_e7b9 = load i64, i64* %v2_e7b9, align 8
  %v4_e7b9 = trunc i64 %v3_e7b9 to i32
  store i64 %v3_e7b9, i64* %rax.global-to-local, align 8
  %v1_e7bd = add i64 %v0_e7b9, 40
  %v2_e7bd = inttoptr i64 %v1_e7bd to i64*
  %v3_e7bd = load i64, i64* %v2_e7bd, align 8
  store i64 %v3_e7bd, i64* @rdx, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_e7c1 = icmp eq i32 %v4_e7b9, 0
  store i1 %v2_e7c1, i1* %zf.global-to-local, align 1
  %v3_e7c1 = icmp slt i32 %v4_e7b9, 0
  store i1 %v3_e7c1, i1* %sf.global-to-local, align 1
  %v1_e7c4 = add i64 %v3_e7bd, 8
  %v2_e7c4 = inttoptr i64 %v1_e7c4 to i32*
  %v3_e7c4 = load i32, i32* %v2_e7c4, align 4
  %v4_e7c4 = call i128 @__asm_movss(i32 %v3_e7c4)
  %v0_e7c9 = load i1, i1* %sf.global-to-local, align 1
  br i1 %v0_e7c9, label %dec_label_pc_e890, label %dec_label_pc_e7cf

dec_label_pc_e7cf:                                ; preds = %dec_label_pc_e7b0
  %v2_e7cf = call i128 @__asm_pxor(i128 %v5_e70c, i128 %v5_e70c)
  %sext9 = mul i64 %v3_e7b9, 4294967296
  %v1_e7d3 = sdiv i64 %sext9, 4294967296
  %v2_e7d3 = call i128 @__asm_cvtsi2ss(i64 %v1_e7d3)
  br label %dec_label_pc_e7d8

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e890, %dec_label_pc_e7cf
  %storemerge6 = phi i128 [ %v2_e8a5, %dec_label_pc_e890 ], [ %v2_e7d3, %dec_label_pc_e7cf ]
  store i128 %storemerge6, i128* @xmm0, align 8
  %v0_e7d8 = load i64, i64* @rbx, align 8
  %v1_e7d8 = add i64 %v0_e7d8, 24
  %v2_e7d8 = inttoptr i64 %v1_e7d8 to i64*
  %v3_e7d8 = load i64, i64* %v2_e7d8, align 8
  store i64 %v3_e7d8, i64* %rax.global-to-local, align 8
  %sext3 = mul i64 %v3_e7d8, 4294967296
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_e7dc = icmp eq i64 %sext3, 0
  store i1 %v2_e7dc, i1* %zf.global-to-local, align 1
  %v3_e7dc = icmp slt i64 %sext3, 0
  store i1 %v3_e7dc, i1* %sf.global-to-local, align 1
  br i1 %v3_e7dc, label %dec_label_pc_e8b0, label %dec_label_pc_e7e5

dec_label_pc_e7e5:                                ; preds = %dec_label_pc_e7d8
  %v0_e7e5 = load i128, i128* @xmm1, align 8
  %v2_e7e5 = call i128 @__asm_pxor(i128 %v0_e7e5, i128 %v0_e7e5)
  %v1_e7e9 = sdiv i64 %sext3, 4294967296
  %v2_e7e9 = call i128 @__asm_cvtsi2ss(i64 %v1_e7e9)
  br label %dec_label_pc_e7ee

dec_label_pc_e7ee:                                ; preds = %dec_label_pc_e8b0, %dec_label_pc_e7e5
  %storemerge5 = phi i128 [ %v2_e8c5, %dec_label_pc_e8b0 ], [ %v2_e7e9, %dec_label_pc_e7e5 ]
  store i128 %storemerge5, i128* @xmm1, align 8
  %v1_e7ee = call i128 @__asm_movaps(i128 %v4_e7c4)
  %v1_e7f1 = load i128, i128* @xmm0, align 8
  %v2_e7f1 = call i128 @__asm_mulss.3(i128 %v1_e7ee, i128 %v1_e7f1)
  %v0_e7f5 = load i128, i128* @xmm1, align 8
  call void @__asm_ucomiss.1(i128 %v0_e7f5, i128 %v2_e7f1)
  %v0_e7f8 = load i1, i1* %cf.global-to-local, align 1
  %v1_e7f8 = load i1, i1* %zf.global-to-local, align 1
  %v2_e7f8 = or i1 %v0_e7f8, %v1_e7f8
  br i1 %v2_e7f8, label %dec_label_pc_e71a, label %dec_label_pc_e7fe

dec_label_pc_e7fe:                                ; preds = %dec_label_pc_e7ee
  %v1_e7fe = add i64 %v3_e7bd, 16
  %v2_e7fe = inttoptr i64 %v1_e7fe to i8*
  %v3_e7fe = load i8, i8* %v2_e7fe, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v10_e7fe = icmp eq i8 %v3_e7fe, 0
  store i1 %v10_e7fe, i1* %zf.global-to-local, align 1
  %v11_e7fe = icmp slt i8 %v3_e7fe, 0
  store i1 %v11_e7fe, i1* %sf.global-to-local, align 1
  %v0_e802 = load i128, i128* @xmm0, align 8
  %v2_e802 = add i64 %v3_e7bd, 12
  %v3_e802 = inttoptr i64 %v2_e802 to i32*
  %v4_e802 = load i32, i32* %v3_e802, align 4
  %v5_e802 = call i128 @__asm_mulss(i128 %v0_e802, i32 %v4_e802)
  store i128 %v5_e802, i128* @xmm0, align 8
  %v0_e807 = load i1, i1* %zf.global-to-local, align 1
  %v1_e807 = icmp eq i1 %v0_e807, false
  br i1 %v1_e807, label %dec_label_pc_e80d, label %dec_label_pc_e809

dec_label_pc_e809:                                ; preds = %dec_label_pc_e7fe
  %v2_e809 = call i128 @__asm_mulss.3(i128 %v5_e802, i128 %v4_e7c4)
  store i128 %v2_e809, i128* @xmm0, align 8
  br label %dec_label_pc_e80d

dec_label_pc_e80d:                                ; preds = %dec_label_pc_e809, %dec_label_pc_e7fe
  %v0_e80d = phi i128 [ %v2_e809, %dec_label_pc_e809 ], [ %v5_e802, %dec_label_pc_e7fe ]
  call void @__asm_ucomiss(i128 %v0_e80d, i32 1602224128)
  %v0_e814 = load i1, i1* %cf.global-to-local, align 1
  %v1_e814 = icmp eq i1 %v0_e814, false
  br i1 %v1_e814, label %dec_label_pc_e883, label %dec_label_pc_e816

dec_label_pc_e816:                                ; preds = %dec_label_pc_e80d
  %v0_e816 = load i128, i128* @xmm0, align 8
  call void @__asm_ucomiss(i128 %v0_e816, i32 1593835520)
  %v0_e81d = load i1, i1* %cf.global-to-local, align 1
  %v1_e81d = icmp eq i1 %v0_e81d, false
  %v0_e8d0 = load i128, i128* @xmm0, align 8
  br i1 %v1_e81d, label %dec_label_pc_e8d0, label %dec_label_pc_e823

dec_label_pc_e823:                                ; preds = %dec_label_pc_e816
  %v1_e823 = call i64 @__asm_cvttss2si(i128 %v0_e8d0)
  br label %dec_label_pc_e828

dec_label_pc_e828:                                ; preds = %dec_label_pc_e8d0, %dec_label_pc_e823
  %storemerge = phi i64 [ %v2_e8e7, %dec_label_pc_e8d0 ], [ %v1_e823, %dec_label_pc_e823 ]
  store i64 %storemerge, i64* @rsi, align 8
  %v0_e828 = load i64, i64* @rbx, align 8
  store i64 %v0_e828, i64* @rdi, align 8
  %v3_e82b = load i64, i64* @rcx, align 8
  %v4_e82b = call i64 @function_e430(i64 %v0_e828, i64 %storemerge, i64 %v3_e7bd, i64 %v3_e82b)
  %v5_e82b = trunc i64 %v4_e82b to i8
  store i64 %v4_e82b, i64* %rax.global-to-local, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_e830 = icmp eq i8 %v5_e82b, 0
  store i1 %v7_e830, i1* %zf.global-to-local, align 1
  %v8_e830 = icmp slt i8 %v5_e82b, 0
  store i1 %v8_e830, i1* %sf.global-to-local, align 1
  br i1 %v7_e830, label %dec_label_pc_e883, label %dec_label_pc_e834

dec_label_pc_e834:                                ; preds = %dec_label_pc_e828
  store i64 0, i64* @rcx, align 8
  store i64 %v16_e676, i64* @rdx, align 8
  %v0_e839 = load i64, i64* @rbp, align 8
  store i64 %v0_e839, i64* @rsi, align 8
  %v0_e83c = load i64, i64* @rbx, align 8
  store i64 %v0_e83c, i64* @rdi, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  store i1 false, i1* %zf.global-to-local, align 1
  store i1 %v8_e830, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_e84d

dec_label_pc_e84d:                                ; preds = %dec_label_pc_e834, %dec_label_pc_e670
  call void @abort()
  unreachable

dec_label_pc_e858:                                ; preds = %dec_label_pc_e71a
  %v0_e858 = load i64, i64* @rbp, align 8
  store i64 %v0_e858, i64* %v1_e71e, align 8
  store i64 1, i64* %rax.global-to-local, align 8
  %v0_e861 = load i64, i64* @rbx, align 8
  %v1_e861 = add i64 %v0_e861, 32
  %v2_e861 = inttoptr i64 %v1_e861 to i64*
  %v3_e861 = load i64, i64* %v2_e861, align 8
  %v4_e861 = add i64 %v3_e861, 1
  store i64 %v4_e861, i64* %v2_e861, align 8
  %v0_e866 = load i64, i64* @rbx, align 8
  %v1_e866 = add i64 %v0_e866, 24
  %v2_e866 = inttoptr i64 %v1_e866 to i64*
  %v3_e866 = load i64, i64* %v2_e866, align 8
  %v4_e866 = add i64 %v3_e866, 1
  %v8_e866 = icmp eq i64 %v3_e866, -1
  store i1 %v8_e866, i1* %cf.global-to-local, align 1
  %v13_e866 = icmp eq i64 %v4_e866, 0
  store i1 %v13_e866, i1* %zf.global-to-local, align 1
  %v14_e866 = icmp slt i64 %v4_e866, 0
  store i1 %v14_e866, i1* %sf.global-to-local, align 1
  store i64 %v4_e866, i64* %v2_e866, align 8
  br label %dec_label_pc_e6bc

dec_label_pc_e870:                                ; preds = %dec_label_pc_e729
  store i64 16, i64* @rdi, align 8
  %v3_e875 = call i64* @malloc(i32 16)
  %v5_e875 = ptrtoint i64* %v3_e875 to i64
  store i64 %v5_e875, i64* %rax.global-to-local, align 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_e87a = icmp eq i64* %v3_e875, null
  store i1 %v1_e87a, i1* %zf.global-to-local, align 1
  %v2_e87a = icmp slt i64* %v3_e875, null
  store i1 %v2_e87a, i1* %sf.global-to-local, align 1
  %v1_e87d = icmp eq i1 %v1_e87a, false
  br i1 %v1_e87d, label %dec_label_pc_e73e, label %dec_label_pc_e883

dec_label_pc_e883:                                ; preds = %dec_label_pc_e870, %dec_label_pc_e828, %dec_label_pc_e80d
  store i64 4294967295, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_e6bc

dec_label_pc_e890:                                ; preds = %dec_label_pc_e7b0
  %sext12 = mul i64 %v3_e7b9, 4294967296
  %v1_e890 = sdiv i64 %sext12, 4294967296
  store i64 %v1_e890, i64* @rcx, align 8
  %v2_e893 = call i128 @__asm_pxor(i128 %v5_e70c, i128 %v5_e70c)
  %v0_e897 = load i64, i64* @rcx, align 8
  %v2_e897 = udiv i64 %v0_e897, 2
  %v3_e89a = urem i64 %v3_e7b9, 2
  store i64 %v3_e89a, i64* %rax.global-to-local, align 8
  %v2_e89d = or i64 %v2_e897, %v3_e89a
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_e89d = icmp eq i64 %v2_e89d, 0
  store i1 %v3_e89d, i1* %zf.global-to-local, align 1
  store i1 false, i1* %sf.global-to-local, align 1
  store i64 %v2_e89d, i64* @rcx, align 8
  %v1_e8a0 = call i128 @__asm_cvtsi2ss(i64 %v2_e89d)
  %v2_e8a5 = call i128 @__asm_addss(i128 %v1_e8a0, i128 %v1_e8a0)
  br label %dec_label_pc_e7d8

dec_label_pc_e8b0:                                ; preds = %dec_label_pc_e7d8
  %v1_e8b0 = sdiv i64 %sext3, 4294967296
  store i64 %v1_e8b0, i64* @rcx, align 8
  %v0_e8b3 = load i128, i128* @xmm1, align 8
  %v2_e8b3 = call i128 @__asm_pxor(i128 %v0_e8b3, i128 %v0_e8b3)
  %v0_e8b7 = load i64, i64* @rcx, align 8
  %v2_e8b7 = udiv i64 %v0_e8b7, 2
  %v3_e8ba = urem i64 %v3_e7d8, 2
  store i64 %v3_e8ba, i64* %rax.global-to-local, align 8
  %v2_e8bd = or i64 %v2_e8b7, %v3_e8ba
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_e8bd = icmp eq i64 %v2_e8bd, 0
  store i1 %v3_e8bd, i1* %zf.global-to-local, align 1
  store i1 false, i1* %sf.global-to-local, align 1
  store i64 %v2_e8bd, i64* @rcx, align 8
  %v1_e8c0 = call i128 @__asm_cvtsi2ss(i64 %v2_e8bd)
  %v2_e8c5 = call i128 @__asm_addss(i128 %v1_e8c0, i128 %v1_e8c0)
  br label %dec_label_pc_e7ee

dec_label_pc_e8d0:                                ; preds = %dec_label_pc_e816
  %v2_e8d0 = call i128 @__asm_subss(i128 %v0_e8d0, i32 1593835520)
  store i128 %v2_e8d0, i128* @xmm0, align 8
  store i64 -9223372036854775808, i64* %rax.global-to-local, align 8
  %v1_e8e2 = call i64 @__asm_cvttss2si(i128 %v2_e8d0)
  store i64 %v1_e8e2, i64* @rsi, align 8
  %v1_e8e7 = load i64, i64* %rax.global-to-local, align 8
  %v2_e8e7 = xor i64 %v1_e8e7, %v1_e8e2
  store i1 false, i1* %cf.global-to-local, align 1
  %v3_e8e7 = icmp eq i64 %v2_e8e7, 0
  store i1 %v3_e8e7, i1* %zf.global-to-local, align 1
  %v4_e8e7 = icmp slt i64 %v2_e8e7, 0
  store i1 %v4_e8e7, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_e828

dec_label_pc_e8ef:                                ; preds = %dec_label_pc_e6bc
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_e900(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_e900:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_e900 = load i64, i64* @rbx, align 8
  store i64 %v0_e900, i64* %stack_var_-8, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v15_e904 = ptrtoint i64* %stack_var_-24 to i64
  store i64 %v15_e904, i64* @rdx, align 8
  %v0_e90b = call i64 @__readfsqword(i64 40)
  %v4_e91b = load i64, i64* @rcx, align 8
  %v5_e91b = call i64 @function_e670(i64 %arg1, i64 %arg2, i64* nonnull %stack_var_-24, i64 %v4_e91b)
  %v1_e920 = trunc i64 %v5_e91b to i32
  %v11_e920 = icmp eq i32 %v1_e920, -1
  br i1 %v11_e920, label %dec_label_pc_e950, label %dec_label_pc_e925

dec_label_pc_e925:                                ; preds = %dec_label_pc_e900
  %v5_e925 = icmp eq i32 %v1_e920, 0
  %v1_e927 = icmp eq i1 %v5_e925, false
  br i1 %v1_e927, label %dec_label_pc_e92d, label %dec_label_pc_e929

dec_label_pc_e929:                                ; preds = %dec_label_pc_e925
  %v2_e929 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_e929, i64* @rbx, align 8
  br label %dec_label_pc_e92d

dec_label_pc_e92d:                                ; preds = %dec_label_pc_e950, %dec_label_pc_e929, %dec_label_pc_e925
  store i64 %v0_e90b, i64* @rcx, align 8
  %v1_e932 = call i64 @__readfsqword(i64 40)
  %v2_e932 = xor i64 %v1_e932, %v0_e90b
  %v3_e932 = icmp eq i64 %v2_e932, 0
  store i64 %v2_e932, i64* @rcx, align 8
  %v1_e93e = icmp eq i1 %v3_e932, false
  br i1 %v1_e93e, label %dec_label_pc_e954, label %dec_label_pc_e940

dec_label_pc_e940:                                ; preds = %dec_label_pc_e92d
  %v0_e93b = load i64, i64* @rbx, align 8
  %v2_e944 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_e944, i64* @rbx, align 8
  ret i64 %v0_e93b

dec_label_pc_e950:                                ; preds = %dec_label_pc_e900
  store i64 0, i64* @rbx, align 8
  br label %dec_label_pc_e92d

dec_label_pc_e954:                                ; preds = %dec_label_pc_e92d
  call void @__stack_chk_fail()
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_e960(i64 %arg1) local_unnamed_addr {
dec_label_pc_e960:
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-56 = alloca i64, align 8
  %stack_var_-40 = alloca i64, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_e960 = load i64, i64* @r12, align 8
  %v0_e962 = load i64, i64* @rbp, align 8
  store i64 1, i64* @rcx, align 8
  %v0_e968 = load i64, i64* @rbx, align 8
  store i64 %v0_e968, i64* %stack_var_-24, align 8
  %v0_e969 = load i64, i64* @rdi, align 8
  store i64 %v0_e969, i64* %rbx.global-to-local, align 8
  %v15_e96c = ptrtoint i64* %stack_var_-40 to i64
  store i64 %v15_e96c, i64* @rdx, align 8
  %v0_e973 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rbp.global-to-local, align 8
  store i64 %v0_e973, i64* @rcx, align 8
  %v1_e9a4 = call i64 @__readfsqword(i64 40)
  %v2_e9a4 = xor i64 %v1_e9a4, %v0_e973
  %v3_e9a4 = icmp eq i64 %v2_e9a4, 0
  store i64 %v2_e9a4, i64* @rcx, align 8
  %v1_e9b0 = icmp eq i1 %v3_e9a4, false
  br i1 %v1_e9b0, label %dec_label_pc_eb5e, label %dec_label_pc_e9b6

dec_label_pc_e9b6:                                ; preds = %dec_label_pc_e960
  %v0_e9ad = load i64, i64* %rbp.global-to-local, align 8
  %v2_e9ba = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_e9ba, i64* @rbx, align 8
  store i64 %v0_e962, i64* @rbp, align 8
  store i64 %v0_e960, i64* @r12, align 8
  ret i64 %v0_e9ad

dec_label_pc_eb5e:                                ; preds = %dec_label_pc_e960
  call void @__stack_chk_fail()
  %v0_eb70 = load i64, i64* %rbp.global-to-local, align 8
  %v0_eb71 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_eb71, i64* %stack_var_-56, align 8
  %v0_eb72 = load i64, i64* @rdi, align 8
  store i64 %v0_eb72, i64* %rbp.global-to-local, align 8
  %v0_eb75 = load i64, i64* @rsi, align 8
  store i64 %v0_eb75, i64* %rbx.global-to-local, align 8
  %v1_eb7c = inttoptr i64 %v0_eb72 to i64*
  %v2_eb7c = load i64, i64* %v1_eb7c, align 8
  store i64 %v2_eb7c, i64* @rdi, align 8
  %v2_eb7f = load i64, i64* @rdx, align 8
  %v3_eb7f = call i64 @function_15d10(i64 %v2_eb7c, i64 %v0_eb75, i64 %v2_eb7f)
  %v1_eb84 = load i64, i64* %rbp.global-to-local, align 8
  %v2_eb84 = add i64 %v1_eb84, 8
  %v3_eb84 = inttoptr i64 %v2_eb84 to i64*
  %v4_eb84 = load i64, i64* %v3_eb84, align 8
  %v5_eb84 = xor i64 %v4_eb84, %v3_eb7f
  %v0_eb8e = load i64, i64* %rbx.global-to-local, align 8
  %tmp53 = urem i64 %v5_eb84, %v0_eb8e
  store i64 %tmp53, i64* @rdx, align 8
  %v2_eb91 = load i64, i64* %stack_var_-56, align 8
  store i64 %v2_eb91, i64* @rbx, align 8
  store i64 %v0_eb70, i64* @rbp, align 8
  ret i64 %tmp53
}

define i64 @function_eba0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_eba0:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_eba0 = add i64 %arg1, 8
  %v2_eba0 = inttoptr i64 %v1_eba0 to i64*
  %v3_eba0 = load i64, i64* %v2_eba0, align 8
  %tmp235 = urem i64 %v3_eba0, %arg2
  store i64 %tmp235, i64* @rdx, align 8
  ret i64 %tmp235
}

define i64 @function_ebb0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_ebb0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_ebb2 = load i64, i64* @rsi, align 8
  %v1_ebb2 = add i64 %v0_ebb2, 8
  %v2_ebb2 = inttoptr i64 %v1_ebb2 to i64*
  %v3_ebb2 = load i64, i64* %v2_ebb2, align 8
  store i64 %v3_ebb2, i64* @rdx, align 8
  %v0_ebb6 = load i64, i64* @rdi, align 8
  %v1_ebb6 = add i64 %v0_ebb6, 8
  %v2_ebb6 = inttoptr i64 %v1_ebb6 to i64*
  %v3_ebb6 = load i64, i64* %v2_ebb6, align 8
  %v15_ebb6 = icmp eq i64 %v3_ebb6, %v3_ebb2
  br i1 %v15_ebb6, label %dec_label_pc_ebc0, label %dec_label_pc_ebbc

dec_label_pc_ebbc:                                ; preds = %dec_label_pc_ebc0, %dec_label_pc_ebb0
  ret i64 0

dec_label_pc_ebc0:                                ; preds = %dec_label_pc_ebb0
  %v1_ebc0 = add i64 %v0_ebb2, 16
  %v2_ebc0 = inttoptr i64 %v1_ebc0 to i64*
  %v3_ebc0 = load i64, i64* %v2_ebc0, align 8
  store i64 %v3_ebc0, i64* @rcx, align 8
  %v1_ebc4 = add i64 %v0_ebb6, 16
  %v2_ebc4 = inttoptr i64 %v1_ebc4 to i64*
  %v3_ebc4 = load i64, i64* %v2_ebc4, align 8
  %v15_ebc4 = icmp eq i64 %v3_ebc4, %v3_ebc0
  %v1_ebc8 = icmp eq i1 %v15_ebc4, false
  br i1 %v1_ebc8, label %dec_label_pc_ebbc, label %dec_label_pc_ebca

dec_label_pc_ebca:                                ; preds = %dec_label_pc_ebc0
  %v2_ebd4 = call i64 @function_13d00(i64 %v0_ebb6, i64 %v0_ebb2)
  ret i64 %v2_ebd4
}

define i64 @function_ebe0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_ebe0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_ebe2 = load i64, i64* @rsi, align 8
  %v1_ebe2 = add i64 %v0_ebe2, 8
  %v2_ebe2 = inttoptr i64 %v1_ebe2 to i64*
  %v3_ebe2 = load i64, i64* %v2_ebe2, align 8
  store i64 %v3_ebe2, i64* @rdx, align 8
  %v0_ebe6 = load i64, i64* @rdi, align 8
  %v1_ebe6 = add i64 %v0_ebe6, 8
  %v2_ebe6 = inttoptr i64 %v1_ebe6 to i64*
  %v3_ebe6 = load i64, i64* %v2_ebe6, align 8
  %v15_ebe6 = icmp eq i64 %v3_ebe6, %v3_ebe2
  br i1 %v15_ebe6, label %dec_label_pc_ebf0, label %dec_label_pc_ebec

dec_label_pc_ebec:                                ; preds = %dec_label_pc_ebf0, %dec_label_pc_ebe0
  ret i64 0

dec_label_pc_ebf0:                                ; preds = %dec_label_pc_ebe0
  %v1_ebf0 = add i64 %v0_ebe2, 16
  %v2_ebf0 = inttoptr i64 %v1_ebf0 to i64*
  %v3_ebf0 = load i64, i64* %v2_ebf0, align 8
  store i64 %v3_ebf0, i64* @rcx, align 8
  %v1_ebf4 = add i64 %v0_ebe6, 16
  %v2_ebf4 = inttoptr i64 %v1_ebf4 to i64*
  %v3_ebf4 = load i64, i64* %v2_ebf4, align 8
  %v15_ebf4 = icmp eq i64 %v3_ebf4, %v3_ebf0
  %v1_ebf8 = icmp eq i1 %v15_ebf4, false
  br i1 %v1_ebf8, label %dec_label_pc_ebec, label %dec_label_pc_ebfa

dec_label_pc_ebfa:                                ; preds = %dec_label_pc_ebf0
  %v1_ec04 = inttoptr i64 %v0_ebe6 to i8*
  %v3_ec04 = inttoptr i64 %v0_ebe2 to i8*
  %v4_ec04 = call i32 @strcmp(i8* %v1_ec04, i8* %v3_ec04)
  %v6_ec04 = sext i32 %v4_ec04 to i64
  %v5_ec09 = icmp eq i32 %v4_ec04, 0
  %v1_ec0b = zext i1 %v5_ec09 to i64
  %v3_ec0b = and i64 %v6_ec04, -256
  %v4_ec0b = or i64 %v3_ec0b, %v1_ec0b
  ret i64 %v4_ec0b
}

define i64 @function_ec20(i64 %arg1) local_unnamed_addr {
dec_label_pc_ec20:
  store i64 %arg1, i64* @rdi, align 8
  %v0_ec20 = load i64, i64* @rbx, align 8
  %v0_ec21 = load i64, i64* @rdi, align 8
  %v1_ec27 = inttoptr i64 %v0_ec21 to i64*
  call void @free(i64* %v1_ec27)
  store i64 %v0_ec21, i64* @rdi, align 8
  store i64 %v0_ec20, i64* @rbx, align 8
  %v1_ec30 = inttoptr i64 %v0_ec21 to i64*
  call void @free(i64* %v1_ec30)
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_ec40(i64 %arg1, x86_fp80 %arg2) local_unnamed_addr {
dec_label_pc_ec40:
  store i64 %arg1, i64* @rdi, align 8
  %v0_ec40 = load i3, i3* @fpu_stat_TOP, align 1
  %v4_ec4a = fcmp ogt x86_fp80 %arg2, 0xK403E8000000000000000
  br i1 %v4_ec4a, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_ec40
  br label %dec_label_pc_ecc0

bb:                                               ; preds = %dec_label_pc_ec40
  %v5_ec4a = fcmp olt x86_fp80 %arg2, 0xK403E8000000000000000
  br i1 %v5_ec4a, label %.thread10, label %bb20

.thread10:                                        ; preds = %bb
  br label %dec_label_pc_ec4e

bb20:                                             ; preds = %bb
  %not.v6_ec4a = fcmp une x86_fp80 %arg2, 0xK403E8000000000000000
  %v1_ec4c = icmp eq i1 %not.v6_ec4a, false
  br i1 %v1_ec4c, label %dec_label_pc_ecc0, label %dec_label_pc_ec4e

dec_label_pc_ec4e:                                ; preds = %.thread10, %bb20
  %v2_ec67 = fptosi x86_fp80 %arg2 to i64
  br label %dec_label_pc_ec74

dec_label_pc_ec74:                                ; preds = %dec_label_pc_ecc0, %dec_label_pc_ec4e
  %v0_eca0 = phi i64 [ %v2_ecf0, %dec_label_pc_ecc0 ], [ %v2_ec67, %dec_label_pc_ec4e ]
  %storemerge.in = add i3 %v0_ec40, -1
  %v0_ec88 = load i64, i64* @rdi, align 8
  %v4_ec88 = trunc i64 %v0_ec88 to i32
  %v5_ec88 = icmp eq i32 %v4_ec88, 0
  %v1_ec8a = icmp eq i1 %v5_ec88, false
  br i1 %v1_ec8a, label %dec_label_pc_ecb8, label %dec_label_pc_ec8c

dec_label_pc_ec8c:                                ; preds = %dec_label_pc_ec74
  %v2_ec79 = icmp slt i64 %v0_eca0, 0
  %v1_ec80 = icmp eq i1 %v2_ec79, false
  %v4_ec82 = fadd x86_fp80 %arg2, 0xK403F8000000000000000
  %arg2.v4_ec82 = select i1 %v1_ec80, x86_fp80 %arg2, x86_fp80 %v4_ec82
  %not.v6_ec8e = fcmp uno x86_fp80 %arg2.v4_ec82, 0xK00000000000000000000
  store i3 %storemerge.in, i3* @fpu_stat_TOP, align 1
  br i1 %not.v6_ec8e, label %dec_label_pc_eca0, label %dec_label_pc_ecba

dec_label_pc_eca0:                                ; preds = %dec_label_pc_ec8c
  %v1_eca0 = add i64 %v0_eca0, 1
  store i3 %storemerge.in, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_ecba

dec_label_pc_ecb8:                                ; preds = %dec_label_pc_ec74
  store i3 %storemerge.in, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_ecba

dec_label_pc_ecba:                                ; preds = %dec_label_pc_eca0, %dec_label_pc_ec8c, %dec_label_pc_ecb8
  %v0_ecba = phi i64 [ %v0_eca0, %dec_label_pc_ecb8 ], [ %v0_eca0, %dec_label_pc_ec8c ], [ %v1_eca0, %dec_label_pc_eca0 ]
  ret i64 %v0_ecba

dec_label_pc_ecc0:                                ; preds = %.thread, %bb20
  %v4_ecc9 = fadd x86_fp80 %arg2, 0xKC03E8000000000000000
  store i64 -9223372036854775808, i64* @rdx, align 8
  %v2_ece3 = fptosi x86_fp80 %v4_ecc9 to i64
  %v2_ecf0 = xor i64 %v2_ece3, -9223372036854775808
  br label %dec_label_pc_ec74
}

define i64 @function_ed10(i64 %arg1, i64* %arg2, i32 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_ed10:
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %r9.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg6, i64* @r9, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  %tmp248 = sext i32 %arg3 to i64
  store i64 %tmp248, i64* @rdx, align 8
  %tmp249 = ptrtoint i64* %arg2 to i64
  store i64 %tmp249, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-216 = alloca i64, align 8
  %stack_var_-200 = alloca i64, align 8
  %v0_ed14 = load i64, i64* @rdx, align 8
  %v2_ed1f = and i64 %v0_ed14, 32
  store i64 %v2_ed1f, i64* %rax.global-to-local, align 8
  %v2_ed22 = urem i64 %v0_ed14, 4
  store i64 %v2_ed22, i64* %r15.global-to-local, align 8
  store i64 %v0_ed14, i64* %r12.global-to-local, align 8
  %v0_ed29 = load i64, i64* @rdi, align 8
  store i64 %v0_ed29, i64* %rbx.global-to-local, align 8
  store i1 false, i1* %zf.global-to-local, align 1
  %v16_ed2c = ptrtoint i64* %stack_var_-200 to i64
  %v0_ed33 = load i64, i64* @rcx, align 8
  %v0_ed3c = call i64 @__readfsqword(i64 40)
  store i64 0, i64* @rcx, align 8
  %v0_ed4f = load i64, i64* %rax.global-to-local, align 8
  %v1_ed4f = trunc i64 %v0_ed4f to i32
  %v6_ed4f = icmp eq i32 %v1_ed4f, 0
  %v0_ed52 = load i64, i64* @rsi, align 8
  store i64 %v0_ed52, i64* %stack_var_-200, align 8
  %v0_ed56 = load i64, i64* @r8, align 8
  %v2_ed5d = select i1 %v6_ed4f, i32 -24, i32 0
  %v2_ed60 = add i32 %v2_ed5d, ptrtoint (i32* @global_var_400.157 to i32)
  %v10_ed60 = icmp eq i32 %v2_ed60, 0
  store i1 %v10_ed60, i1* %zf.global-to-local, align 1
  %v16_ed60 = zext i32 %v2_ed60 to i64
  store i64 %v16_ed60, i64* %rax.global-to-local, align 8
  %v0_ed69 = call %lconv* @localeconv()
  %v2_ed69 = ptrtoint %lconv* %v0_ed69 to i64
  store i64 %v2_ed69, i64* %rax.global-to-local, align 8
  %v1_ed6e = bitcast %lconv* %v0_ed69 to i64*
  %v2_ed6e = load i64, i64* %v1_ed6e, align 8
  store i64 %v2_ed6e, i64* %r14.global-to-local, align 8
  store i64 %v2_ed69, i64* %r13.global-to-local, align 8
  %v1_ed74 = inttoptr i64 %v2_ed6e to i8*
  store i64 %v2_ed6e, i64* @rdi, align 8
  %v3_ed77 = call i32 @strlen(i8* %v1_ed74)
  %v5_ed77 = sext i32 %v3_ed77 to i64
  store i64 %v5_ed77, i64* %rax.global-to-local, align 8
  %v1_ed7c = add i64 %v2_ed69, 16
  %v2_ed7c = inttoptr i64 %v1_ed7c to i64*
  %v3_ed7c = load i64, i64* %v2_ed7c, align 8
  store i64 %v3_ed7c, i64* @rcx, align 8
  %v1_ed80 = add i64 %v2_ed69, 8
  %v2_ed80 = inttoptr i64 %v1_ed80 to i64*
  %v3_ed80 = load i64, i64* %v2_ed80, align 8
  store i64 %v3_ed80, i64* %r13.global-to-local, align 8
  %v1_ed87 = add nsw i64 %v5_ed77, -1
  store i64 1, i64* @rdx, align 8
  %v4_ed90 = icmp ult i64 %v1_ed87, 16
  %v9_ed90 = icmp eq i32 %v3_ed77, 17
  store i1 %v9_ed90, i1* %zf.global-to-local, align 1
  store i64 ptrtoint (i8** @global_var_1a33d.149 to i64), i64* %rax.global-to-local, align 8
  %v1_ed9b = inttoptr i64 %v3_ed80 to i8*
  store i64 %v3_ed80, i64* @rdi, align 8
  %v1_ed9e = icmp eq i1 %v4_ed90, false
  %v4_ed9e = select i1 %v1_ed9e, i64 1, i64 %v5_ed77
  store i64 %v4_ed9e, i64* %rbp.global-to-local, align 8
  %v2_eda7 = load i64, i64* %r14.global-to-local, align 8
  %v4_eda7 = select i1 %v1_ed9e, i64 ptrtoint (i8** @global_var_1a33d.149 to i64), i64 %v2_eda7
  store i64 %v4_eda7, i64* %r14.global-to-local, align 8
  %v3_edab = call i32 @strlen(i8* %v1_ed9b)
  %v5_edb0 = icmp ult i32 %v3_edab, 17
  store i64 %v0_ed56, i64* @rdi, align 8
  store i64 %v0_ed33, i64* @rcx, align 8
  %v1_edc5 = icmp eq i1 %v5_edb0, false
  %v2_edc5 = load i64, i64* %r13.global-to-local, align 8
  %v4_edc5 = select i1 %v1_edc5, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v2_edc5
  store i64 %v4_edc5, i64* %r13.global-to-local, align 8
  %v2_edc9 = load i64, i64* %stack_var_-200, align 8
  %v1_edcd = add i64 %v2_edc9, ptrtoint (i64* @global_var_287.414 to i64)
  store i64 %v1_edcd, i64* %rax.global-to-local, align 8
  %v12_edd3 = icmp eq i64 %v0_ed56, %v0_ed33
  store i1 %v12_edd3, i1* %zf.global-to-local, align 1
  %tmp353 = icmp ugt i64 %v0_ed56, %v0_ed33
  br i1 %tmp353, label %dec_label_pc_ef28, label %dec_label_pc_ede1

dec_label_pc_ede1:                                ; preds = %dec_label_pc_ed10
  %div = udiv i64 %v0_ed33, %v0_ed56
  store i64 %div, i64* %rax.global-to-local, align 8
  %tmp272 = urem i64 %v0_ed33, %v0_ed56
  store i64 %tmp272, i64* @rdx, align 8
  %sext = mul i64 %tmp272, 4294967296
  %v2_ede9 = icmp eq i64 %sext, 0
  store i1 %v2_ede9, i1* %zf.global-to-local, align 1
  store i64 %div, i64* @rdi, align 8
  br i1 %v2_ede9, label %dec_label_pc_f150, label %dec_label_pc_edf5

dec_label_pc_edf5:                                ; preds = %dec_label_pc_f150, %dec_label_pc_ef31, %dec_label_pc_ef28, %dec_label_pc_ede1
  %v0_edfd = load i3, i3* @fpu_stat_TOP, align 1
  %v5_edfd = sitofp i64 %v0_ed33 to x86_fp80
  %v6_edfd = add i3 %v0_edfd, -1
  store i64 %v0_ed56, i64* %rax.global-to-local, align 8
  %v5_ee16 = sitofp i64 %v0_ed56 to x86_fp80
  %v5_ee2c = sitofp i64 %v0_ed29 to x86_fp80
  %v0_ee38 = load i64, i64* %r12.global-to-local, align 8
  %v2_ee38 = and i64 %v0_ee38, 16
  %v3_ee38 = icmp eq i64 %v2_ee38, 0
  store i1 %v3_ee38, i1* %zf.global-to-local, align 1
  store i3 %v6_edfd, i3* %fpu_stat_TOP.global-to-local, align 1
  br i1 %v3_ee38, label %dec_label_pc_f008, label %dec_label_pc_ee44

dec_label_pc_ee44:                                ; preds = %dec_label_pc_edf5
  %v5_ee44 = sitofp i32 %v2_ed60 to x86_fp80
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rbx.global-to-local, align 8
  %v2_ee4a = add i3 %v0_edfd, -3
  store i3 %v2_ee4a, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_ee54

dec_label_pc_ee54:                                ; preds = %dec_label_pc_ee61, %dec_label_pc_ee44
  %indvars.iv = phi i64 [ 0, %dec_label_pc_ee44 ], [ %indvars.iv.next, %dec_label_pc_ee61 ]
  %v1_ee5087 = phi x86_fp80 [ %v5_ee44, %dec_label_pc_ee44 ], [ %v4_ee59, %dec_label_pc_ee61 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %v4_ee59 = fmul x86_fp80 %v5_ee44, %v1_ee5087
  %not.v6_ee5d = fcmp uno x86_fp80 %v4_ee59, 0xK00000000000000000000
  br i1 %not.v6_ee5d, label %dec_label_pc_ee74, label %dec_label_pc_ee61

dec_label_pc_ee61:                                ; preds = %dec_label_pc_ee54
  %tmp274 = trunc i64 %indvars.iv to i32
  %v11_ee61 = icmp eq i32 %tmp274, 7
  %v1_ee64 = icmp eq i1 %v11_ee61, false
  br i1 %v1_ee64, label %dec_label_pc_ee54, label %dec_label_pc_ee74

dec_label_pc_ee74:                                ; preds = %dec_label_pc_ee61, %dec_label_pc_ee54
  store i64 %indvars.iv.next, i64* %rbx.global-to-local, align 8
  store i64 %v2_ed1f, i64* @rcx, align 8
  %v0_ee78 = load i64, i64* %rbp.global-to-local, align 8
  %v1_ee78 = add i64 %v0_ee78, 1
  store i64 %v1_ee78, i64* %rbp.global-to-local, align 8
  store i3 %v6_edfd, i3* %fpu_stat_TOP.global-to-local, align 1
  %v0_ee85 = load i64, i64* %r15.global-to-local, align 8
  %v1_ee85 = trunc i64 %v0_ee85 to i32
  %v11_ee85 = icmp eq i32 %v1_ee85, 1
  store i1 %v11_ee85, i1* %zf.global-to-local, align 1
  %tmp351 = udiv i64 %v2_ed1f, 32
  %tmp352 = xor i64 %tmp351, 3
  %v4_ee89 = add i64 %tmp352, %v0_ee78
  store i64 %v4_ee89, i64* %rax.global-to-local, align 8
  br i1 %v11_ee85, label %dec_label_pc_f400, label %dec_label_pc_ee99

dec_label_pc_ee99:                                ; preds = %dec_label_pc_ee74
  store i64 ptrtoint ([6 x i8]* @global_var_1a406.416 to i64), i64* @rcx, align 8
  store i64 1, i64* @rsi, align 8
  store i64 -1, i64* @rdx, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  store i64 %v2_edc9, i64* %r14.global-to-local, align 8
  store i64 %v2_edc9, i64* @rdi, align 8
  store i64 4895412773431363160, i64* %stack_var_-216, align 8
  store i3 %v0_edfd, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_eed1 = inttoptr i64 %v2_edc9 to i8*
  %v11_eed1 = load i128, i128* @xmm0, align 8
  %v12_eed1 = trunc i128 %v11_eed1 to i80
  %v13_eed1 = bitcast i80 %v12_eed1 to x86_fp80
  %v14_eed1 = call i32 (i8*, i32, i32, i8*, ...) @__sprintf_chk(i8* %v1_eed1, i32 1, i32 -1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1a406.416, i64 0, i64 0), x86_fp80 %v13_eed1)
  %v16_eed1 = sext i32 %v14_eed1 to i64
  store i64 %v16_eed1, i64* %rax.global-to-local, align 8
  %v0_eed6 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_eed6, i64* @rdi, align 8
  %v1_eed9 = inttoptr i64 %v0_eed6 to i8*
  %v2_eed9 = call i32 @strlen(i8* %v1_eed9)
  %v4_eed9 = sext i32 %v2_eed9 to i64
  store i64 %v4_eed9, i64* %rax.global-to-local, align 8
  %v2_eede = load i64, i64* %stack_var_-216, align 8
  store i64 %v2_eede, i64* @rcx, align 8
  %v15_eee0 = icmp eq i64 %v4_eed9, %v4_ee89
  store i1 %v15_eee0, i1* %zf.global-to-local, align 1
  store i64 %v4_eed9, i64* %r14.global-to-local, align 8
  %v0_eee8 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_eee8 = add i3 %v0_eee8, -1
  store i3 %v5_eee8, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp354 = icmp ugt i64 %v4_eed9, %v4_ee89
  br i1 %tmp354, label %dec_label_pc_f4a0.thread, label %dec_label_pc_eef2

dec_label_pc_eef2:                                ; preds = %dec_label_pc_f400, %dec_label_pc_ee99
  %v0_f060 = phi i3 [ %v5_eee8, %dec_label_pc_ee99 ], [ %v5_f441, %dec_label_pc_f400 ]
  %v1_ef00 = phi i64 [ %v4_eed9, %dec_label_pc_ee99 ], [ %v4_f432, %dec_label_pc_f400 ]
  %v0_eef2 = load i64, i64* %r12.global-to-local, align 8
  %v2_eef2 = and i64 %v0_eef2, 8
  %v3_eef2 = icmp eq i64 %v2_eef2, 0
  store i1 %v3_eef2, i1* %zf.global-to-local, align 1
  br i1 %v3_eef2, label %dec_label_pc_f060, label %dec_label_pc_eefc

dec_label_pc_eefc:                                ; preds = %dec_label_pc_eef2
  %v2_eefc = load i64, i64* %stack_var_-200, align 8
  store i64 %v2_eefc, i64* %rax.global-to-local, align 8
  %v3_ef00 = add nsw i64 %v1_ef00, -1
  %v4_ef00 = add i64 %v3_ef00, %v2_eefc
  %v5_ef00 = inttoptr i64 %v4_ef00 to i8*
  %v6_ef00 = load i8, i8* %v5_ef00, align 1
  %v15_ef00 = icmp eq i8 %v6_ef00, 48
  store i1 %v15_ef00, i1* %zf.global-to-local, align 1
  %v1_ef06 = icmp eq i1 %v15_ef00, false
  br i1 %v1_ef06, label %dec_label_pc_f068, label %dec_label_pc_ef0c

dec_label_pc_ef0c:                                ; preds = %dec_label_pc_eefc
  %v3_ef0c = add i3 %v0_f060, -1
  store i3 %v3_ef0c, i3* %fpu_stat_TOP.global-to-local, align 1
  %v0_ef12 = load i64, i64* %r15.global-to-local, align 8
  %v1_ef12 = trunc i64 %v0_ef12 to i32
  %v11_ef12 = icmp eq i32 %v1_ef12, 1
  store i1 %v11_ef12, i1* %zf.global-to-local, align 1
  %v1_ef18 = icmp eq i1 %v11_ef12, false
  br i1 %v1_ef18, label %dec_label_pc_f4aa, label %dec_label_pc_f453

dec_label_pc_ef28:                                ; preds = %dec_label_pc_ed10
  %v1_ef28 = icmp eq i64 %v0_ed33, 0
  store i1 %v1_ef28, i1* %zf.global-to-local, align 1
  br i1 %v1_ef28, label %dec_label_pc_edf5, label %dec_label_pc_ef31

dec_label_pc_ef31:                                ; preds = %dec_label_pc_ef28
  %div56 = udiv i64 %v0_ed56, %v0_ed33
  store i64 %div56, i64* %rax.global-to-local, align 8
  %tmp278 = urem i64 %v0_ed56, %v0_ed33
  store i64 %tmp278, i64* @rdx, align 8
  %sext57 = mul i64 %tmp278, 4294967296
  %v2_ef3b = icmp eq i64 %sext57, 0
  store i1 %v2_ef3b, i1* %zf.global-to-local, align 1
  store i64 %div56, i64* @r8, align 8
  %v1_ef41 = icmp eq i1 %v2_ef3b, false
  br i1 %v1_ef41, label %dec_label_pc_edf5, label %dec_label_pc_ef47

dec_label_pc_ef47:                                ; preds = %dec_label_pc_ef31
  %div58 = udiv i64 %v0_ed29, %div56
  %tmp280 = urem i64 %v0_ed29, %div56
  store i64 %div58, i64* %rbx.global-to-local, align 8
  store i64 %div58, i64* @rsi, align 8
  %v2_ef5b = mul i64 %tmp280, 10
  %div169 = udiv i64 %v2_ef5b, %div56
  store i64 %div169, i64* %rax.global-to-local, align 8
  %tmp281 = urem i64 %v2_ef5b, %div56
  %v2_ef61 = mul i64 %tmp281, 2
  %v12_ef61 = icmp eq i64 %v2_ef61, 0
  store i64 %v2_ef61, i64* @rdx, align 8
  store i64 %div169, i64* @r9, align 8
  %v12_ef67 = icmp eq i64 %div56, %v2_ef61
  store i1 %v12_ef67, i1* %zf.global-to-local, align 1
  %tmp355 = icmp ugt i64 %div56, %v2_ef61
  br i1 %tmp355, label %dec_label_pc_ef70, label %dec_label_pc_f4f8

dec_label_pc_ef70:                                ; preds = %dec_label_pc_ef47
  store i1 %v12_ef61, i1* %zf.global-to-local, align 1
  %v1_ef75 = icmp eq i1 %v12_ef61, false
  %v2_ef75 = zext i1 %v1_ef75 to i64
  store i64 %v2_ef75, i64* @rdi, align 8
  br label %dec_label_pc_ef79

dec_label_pc_ef79:                                ; preds = %dec_label_pc_f4f8, %dec_label_pc_f168, %dec_label_pc_ef70
  %r9.promoted = phi i64 [ %div169, %dec_label_pc_f4f8 ], [ 0, %dec_label_pc_f168 ], [ %div169, %dec_label_pc_ef70 ]
  %rdi.promoted = phi i64 [ %v2_f500, %dec_label_pc_f4f8 ], [ 0, %dec_label_pc_f168 ], [ %v2_ef75, %dec_label_pc_ef70 ]
  %rsi.promoted = phi i64 [ %div58, %dec_label_pc_f4f8 ], [ %v5_f155, %dec_label_pc_f168 ], [ %div58, %dec_label_pc_ef70 ]
  %v0_ef79 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v1_edcd, i64* @r8, align 8
  store i64 4294967295, i64* %rbx.global-to-local, align 8
  %v1_ef86 = trunc i64 %v0_ef79 to i32
  %v2_ef86 = and i32 %v1_ef86, 16
  %v3_ef86 = icmp eq i32 %v2_ef86, 0
  store i1 %v3_ef86, i1* %zf.global-to-local, align 1
  %v9_ef86 = zext i32 %v2_ef86 to i64
  store i64 %v9_ef86, i64* @rcx, align 8
  br i1 %v3_ef86, label %dec_label_pc_f350, label %dec_label_pc_ef8f

dec_label_pc_ef8f:                                ; preds = %dec_label_pc_ef79
  store i64 %v16_ed60, i64* @r8, align 8
  %v12_ef94 = icmp eq i64 %v16_ed60, %rsi.promoted
  store i1 %v12_ef94, i1* %zf.global-to-local, align 1
  %tmp356 = icmp ugt i64 %v16_ed60, %rsi.promoted
  br i1 %tmp356, label %dec_label_pc_f510, label %dec_label_pc_efa0

dec_label_pc_efa0:                                ; preds = %dec_label_pc_ef8f
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_efc7

dec_label_pc_efa8:                                ; preds = %dec_label_pc_efc7
  %v5_efa8 = icmp eq i32 %v4_efa8, 0
  %v1_efaa = icmp eq i1 %v5_efa8, false
  %v2_efaa = zext i1 %v1_efaa to i64
  %v4_efaa = and i64 %v4_efeb, 4294967040
  %v5_efaa = or i64 %v2_efaa, %v4_efaa
  br label %dec_label_pc_efb2

dec_label_pc_efb2:                                ; preds = %dec_label_pc_efa8, %dec_label_pc_eff2
  %v2_f597 = phi i64 [ %v5_efaa, %dec_label_pc_efa8 ], [ %v2_effd, %dec_label_pc_eff2 ]
  %v2_efb2 = add nuw nsw i64 %v0_efbe101, 1
  %v17_efb2 = and i64 %v2_efb2, 4294967295
  %tmp282 = icmp ugt i64 %v16_ed60, %div36
  br i1 %tmp282, label %dec_label_pc_f2cd, label %dec_label_pc_efbe

dec_label_pc_efbe:                                ; preds = %dec_label_pc_efb2
  %v1_efbe = trunc i64 %v2_efb2 to i32
  %v11_efbe = icmp eq i32 %v1_efbe, 8
  br i1 %v11_efbe, label %dec_label_pc_f568.loopexit, label %dec_label_pc_efc7

dec_label_pc_efc7:                                ; preds = %dec_label_pc_efbe, %dec_label_pc_efa0
  %v0_efbe101 = phi i64 [ %v17_efb2, %dec_label_pc_efbe ], [ 0, %dec_label_pc_efa0 ]
  %v5_efdf97 = phi i64 [ %v5_efdf, %dec_label_pc_efbe ], [ %r9.promoted, %dec_label_pc_efa0 ]
  %storemerge5394 = phi i64 [ %v2_f597, %dec_label_pc_efbe ], [ %rdi.promoted, %dec_label_pc_efa0 ]
  %v0_efe889 = phi i64 [ %div36, %dec_label_pc_efbe ], [ %rsi.promoted, %dec_label_pc_efa0 ]
  %div36 = udiv i64 %v0_efe889, %v16_ed60
  %tmp283 = urem i64 %v0_efe889, %v16_ed60
  %v1_efd1 = trunc i64 %storemerge5394 to i32
  %v3_efd1 = sdiv i32 %v1_efd1, 2
  %v10_efd1 = zext i32 %v3_efd1 to i64
  %v2_efdb = mul nuw nsw i64 %tmp283, 10
  %v3_efdb = add i64 %v2_efdb, %v5_efdf97
  %v5_efdf = udiv i64 %v3_efdb, %v16_ed60
  %v6_efdf = urem i64 %v3_efdb, %v16_ed60
  %v2_efe2 = mul nuw nsw i64 %v6_efdf, 2
  %v3_efe2 = add nuw nsw i64 %v2_efe2, %v10_efd1
  %v4_efeb = add nsw i64 %v3_efe2, %storemerge5394
  %v3_efed = trunc i64 %v3_efe2 to i32
  %tmp284 = icmp ugt i32 %v2_ed60, %v3_efed
  %v4_efa8 = trunc i64 %v4_efeb to i32
  br i1 %tmp284, label %dec_label_pc_efa8, label %dec_label_pc_eff2

dec_label_pc_eff2:                                ; preds = %dec_label_pc_efc7
  %v9_eff2 = icmp ult i32 %v2_ed60, %v4_efa8
  %v1_eff5 = zext i1 %v9_eff2 to i64
  %v3_eff5 = and i64 %v4_efeb, 4294967040
  %v4_eff5 = or i64 %v3_eff5, %v1_eff5
  %v2_effd = or i64 %v4_eff5, 2
  br label %dec_label_pc_efb2

dec_label_pc_f008:                                ; preds = %dec_label_pc_edf5
  %v2_ee29 = icmp slt i64 %v0_ed29, 0
  %v2_ee13 = icmp slt i64 %v0_ed56, 0
  %v2_edfa = icmp slt i64 %v0_ed33, 0
  %v1_ee30 = icmp eq i1 %v2_ee29, false
  %v4_ee32 = fadd x86_fp80 %v5_ee2c, 0xK403F8000000000000000
  %v5_ee2c.v4_ee32 = select i1 %v1_ee30, x86_fp80 %v5_ee2c, x86_fp80 %v4_ee32
  %v1_ee01 = icmp eq i1 %v2_edfa, false
  %v4_ee03 = fadd x86_fp80 %v5_edfd, 0xK403F8000000000000000
  %v5_edfd.v4_ee03 = select i1 %v1_ee01, x86_fp80 %v5_edfd, x86_fp80 %v4_ee03
  %v1_ee1a = icmp eq i1 %v2_ee13, false
  %v4_ee1c = fadd x86_fp80 %v5_ee16, 0xK403F8000000000000000
  %storemerge170 = select i1 %v1_ee1a, x86_fp80 %v5_ee16, x86_fp80 %v4_ee1c
  %v4_ee22 = fdiv x86_fp80 %v5_edfd.v4_ee03, %storemerge170
  %v4_ee3c = fmul x86_fp80 %v5_ee2c.v4_ee32, %v4_ee22
  %v0_f008 = load i64, i64* %r15.global-to-local, align 8
  %v1_f008 = trunc i64 %v0_f008 to i32
  %v11_f008 = icmp eq i32 %v1_f008, 1
  store i1 %v11_f008, i1* %zf.global-to-local, align 1
  br i1 %v11_f008, label %dec_label_pc_f01c, label %dec_label_pc_f00e

dec_label_pc_f00e:                                ; preds = %dec_label_pc_f008
  store i1 true, i1* %zf.global-to-local, align 1
  store i3 %v6_edfd, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_f01c

dec_label_pc_f01c:                                ; preds = %dec_label_pc_f00e, %dec_label_pc_f008
  %v1_f03a = phi x86_fp80 [ 0xK403EFFFFD7EA4A32C000, %dec_label_pc_f00e ], [ %v4_ee3c, %dec_label_pc_f008 ]
  store i64 ptrtoint ([6 x i8]* @global_var_1a400.418 to i64), i64* @rcx, align 8
  store i64 1, i64* @rsi, align 8
  store i64 %v2_edc9, i64* %rbx.global-to-local, align 8
  store i64 -1, i64* @rdx, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v4_f03a = fptrunc x86_fp80 %v1_f03a to double
  %v5_f03a = bitcast double %v4_f03a to i64
  store i64 %v5_f03a, i64* %stack_var_-216, align 8
  store i3 %v0_edfd, i3* @fpu_stat_TOP, align 1
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rbp.global-to-local, align 8
  store i64 %v2_edc9, i64* @rdi, align 8
  %v1_f042 = inttoptr i64 %v2_edc9 to i8*
  %v11_f042 = load i128, i128* @xmm0, align 8
  %v12_f042 = trunc i128 %v11_f042 to i80
  %v13_f042 = bitcast i80 %v12_f042 to x86_fp80
  %v14_f042 = call i32 (i8*, i32, i32, i8*, ...) @__sprintf_chk(i8* %v1_f042, i32 1, i32 -1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1a400.418, i64 0, i64 0), x86_fp80 %v13_f042)
  %v16_f042 = sext i32 %v14_f042 to i64
  store i64 %v16_f042, i64* %rax.global-to-local, align 8
  %v0_f047 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_f047, i64* @rdi, align 8
  store i64 4294967295, i64* %rbx.global-to-local, align 8
  %v1_f04f = inttoptr i64 %v0_f047 to i8*
  %v2_f04f = call i32 @strlen(i8* %v1_f04f)
  %v4_f04f = sext i32 %v2_f04f to i64
  store i64 %v4_f04f, i64* %rax.global-to-local, align 8
  %v2_f054 = load i64, i64* %stack_var_-216, align 8
  store i64 %v2_f054, i64* @rsi, align 8
  store i64 %v4_f04f, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_f070

dec_label_pc_f060:                                ; preds = %dec_label_pc_eef2
  %v4_f060 = add i3 %v0_f060, 1
  store i3 %v4_f060, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_f070

dec_label_pc_f068:                                ; preds = %dec_label_pc_eefc
  %v4_f068 = add i3 %v0_f060, 1
  store i3 %v4_f068, i3* @fpu_stat_TOP, align 1
  br label %dec_label_pc_f070

dec_label_pc_f070:                                ; preds = %dec_label_pc_f453, %dec_label_pc_f068, %dec_label_pc_f060, %dec_label_pc_f01c
  %v0_f07f = phi i64 [ %v4_f483, %dec_label_pc_f453 ], [ %v1_ef00, %dec_label_pc_f068 ], [ %v1_ef00, %dec_label_pc_f060 ], [ %v4_f04f, %dec_label_pc_f01c ]
  %v1_f070 = add i64 %v16_ed2c, 8
  %v2_f070 = inttoptr i64 %v1_f070 to i64*
  %v3_f070 = load i64, i64* %v2_f070, align 8
  %v2_f075 = load i64, i64* %stack_var_-200, align 8
  store i64 %v2_f075, i64* @rsi, align 8
  %v1_f079 = trunc i64 %v0_f07f to i32
  store i64 %v0_f07f, i64* @rdx, align 8
  %v2_f07c = sub i64 %v3_f070, %v0_f07f
  store i64 %v2_f07c, i64* %r15.global-to-local, align 8
  %v1_f07f = load i64, i64* %rbp.global-to-local, align 8
  %v2_f07f = sub i64 %v0_f07f, %v1_f07f
  %v12_f07f = icmp eq i64 %v2_f07f, 0
  store i1 %v12_f07f, i1* %zf.global-to-local, align 1
  store i64 %v2_f07f, i64* %r14.global-to-local, align 8
  store i64 %v2_f07c, i64* @rdi, align 8
  %v1_f085 = inttoptr i64 %v2_f07c to i64*
  %v3_f085 = inttoptr i64 %v2_f075 to i64*
  %v7_f085 = call i64* @memmove(i64* %v1_f085, i64* %v3_f085, i32 %v1_f079)
  %v9_f085 = ptrtoint i64* %v7_f085 to i64
  store i64 %v9_f085, i64* %rax.global-to-local, align 8
  %v0_f08a = load i64, i64* %r14.global-to-local, align 8
  %v1_f08d = load i64, i64* %r15.global-to-local, align 8
  %v2_f08d = add i64 %v1_f08d, %v0_f08a
  %v12_f08d = icmp eq i64 %v2_f08d, 0
  store i1 %v12_f08d, i1* %zf.global-to-local, align 1
  store i64 %v2_f08d, i64* @r8, align 8
  br label %dec_label_pc_f090

dec_label_pc_f090:                                ; preds = %dec_label_pc_f390, %dec_label_pc_f556, %dec_label_pc_f070
  %v0_f090 = load i64, i64* %r12.global-to-local, align 8
  %v2_f090 = and i64 %v0_f090, 4
  %v3_f090 = icmp eq i64 %v2_f090, 0
  store i1 %v3_f090, i1* %zf.global-to-local, align 1
  %v1_f094 = icmp eq i1 %v3_f090, false
  br i1 %v1_f094, label %dec_label_pc_f178, label %dec_label_pc_f09a

dec_label_pc_f09a:                                ; preds = %dec_label_pc_f708, %dec_label_pc_f22c, %dec_label_pc_f090
  %v0_f0b7 = phi i64 [ %v0_f70f, %dec_label_pc_f708 ], [ %v0_f09a.pre, %dec_label_pc_f22c ], [ %v0_f090, %dec_label_pc_f090 ]
  %tmp357 = trunc i64 %v0_f0b7 to i8
  %v3_f09a = icmp sgt i8 %tmp357, -1
  store i1 %v3_f09a, i1* %zf.global-to-local, align 1
  br i1 %v3_f09a, label %dec_label_pc_f117, label %dec_label_pc_f0a0

dec_label_pc_f0a0:                                ; preds = %dec_label_pc_f09a
  %v0_f0a0 = load i64, i64* %rbx.global-to-local, align 8
  %v1_f0a0 = trunc i64 %v0_f0a0 to i32
  %v11_f0a0 = icmp eq i32 %v1_f0a0, -1
  store i1 %v11_f0a0, i1* %zf.global-to-local, align 1
  br i1 %v11_f0a0, label %dec_label_pc_f3c0, label %dec_label_pc_f0a9

dec_label_pc_f0a9.loopexit:                       ; preds = %dec_label_pc_f3dd, %dec_label_pc_f3ea
  %v2_f0b3152 = phi i64 [ %v0_f3ea, %dec_label_pc_f3dd ], [ %v17_f3ea, %dec_label_pc_f3ea ]
  %v0_f3f078 = phi i1 [ %v12_f3e1, %dec_label_pc_f3dd ], [ true, %dec_label_pc_f3ea ]
  store i64 %v4_f3dd, i64* %rax.global-to-local, align 8
  store i1 %v0_f3f078, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_f0a9

dec_label_pc_f0a9:                                ; preds = %dec_label_pc_f0a9.loopexit, %dec_label_pc_f572, %dec_label_pc_f0a0
  %v2_f0b3 = phi i64 [ %v2_f0b3152, %dec_label_pc_f0a9.loopexit ], [ 0, %dec_label_pc_f572 ], [ %v0_f0a0, %dec_label_pc_f0a0 ]
  %v1_f0ac = trunc i64 %v0_f0b7 to i32
  %v2_f0ac = and i32 %v1_f0ac, 256
  %v9_f0ac = zext i32 %v2_f0ac to i64
  store i64 %v9_f0ac, i64* %rax.global-to-local, align 8
  %v3_f0b3 = trunc i64 %v2_f0b3 to i32
  %v4_f0b3 = or i32 %v3_f0b3, %v2_f0ac
  %v5_f0b3 = icmp eq i32 %v4_f0b3, 0
  store i1 %v5_f0b3, i1* %zf.global-to-local, align 1
  %v11_f0b3 = zext i32 %v4_f0b3 to i64
  store i64 %v11_f0b3, i64* @rcx, align 8
  br i1 %v5_f0b3, label %dec_label_pc_f117, label %dec_label_pc_f0b7

dec_label_pc_f0b7:                                ; preds = %dec_label_pc_f0a9
  %v2_f0b7 = and i32 %v1_f0ac, 64
  %v3_f0b7 = icmp eq i32 %v2_f0b7, 0
  store i1 %v3_f0b7, i1* %zf.global-to-local, align 1
  %v9_f0b7 = zext i32 %v2_f0b7 to i64
  store i64 %v9_f0b7, i64* %r12.global-to-local, align 8
  %v1_f0bb = icmp eq i1 %v3_f0b7, false
  br i1 %v1_f0bb, label %dec_label_pc_f258, label %dec_label_pc_f0c1

dec_label_pc_f0c1:                                ; preds = %dec_label_pc_f258, %dec_label_pc_f0b7
  %v1_f0ed = phi i64 [ %v0_f0c1.pre, %dec_label_pc_f258 ], [ %v2_f0b3, %dec_label_pc_f0b7 ]
  %v4_f0c1 = trunc i64 %v1_f0ed to i32
  %v5_f0c1 = icmp eq i32 %v4_f0c1, 0
  store i1 %v5_f0c1, i1* %zf.global-to-local, align 1
  br i1 %v5_f0c1, label %dec_label_pc_f6f6, label %dec_label_pc_f0c9

dec_label_pc_f0c9:                                ; preds = %dec_label_pc_f0c1
  %v11_f0c9 = icmp eq i32 %v4_f0c1, 1
  store i1 %v11_f0c9, i1* %zf.global-to-local, align 1
  %v1_f0cc = icmp eq i1 %v11_f0c9, false
  %v0_f0e6.pre = load i64, i64* @rsp, align 8
  br i1 %v1_f0cc, label %dec_label_pc_f0dc, label %dec_label_pc_f0ce

dec_label_pc_f0ce:                                ; preds = %dec_label_pc_f0c9
  %v1_f0ce = add i64 %v0_f0e6.pre, 48
  %v2_f0ce = inttoptr i64 %v1_f0ce to i32*
  %v3_f0ce = load i32, i32* %v2_f0ce, align 4
  %v4_f0ce = zext i32 %v3_f0ce to i64
  store i64 %v4_f0ce, i64* @r9, align 8
  %v5_f0d3 = icmp eq i32 %v3_f0ce, 0
  store i1 %v5_f0d3, i1* %zf.global-to-local, align 1
  br i1 %v5_f0d3, label %dec_label_pc_f520, label %dec_label_pc_f0dc

dec_label_pc_f0dc:                                ; preds = %dec_label_pc_f0c9, %dec_label_pc_f0ce
  store i64 ptrtoint (i64* @global_var_1a440.419 to i64), i64* @rcx, align 8
  %v1_f0e6 = add i64 %v0_f0e6.pre, 8
  %v2_f0e6 = inttoptr i64 %v1_f0e6 to i64*
  %v3_f0e6 = load i64, i64* %v2_f0e6, align 8
  store i64 %v3_f0e6, i64* @rdi, align 8
  %v0_f0eb = load i64, i64* %rax.global-to-local, align 8
  %v4_f0eb = trunc i64 %v0_f0eb to i32
  %v5_f0eb = icmp eq i32 %v4_f0eb, 0
  store i1 %v5_f0eb, i1* %zf.global-to-local, align 1
  %v3_f0ed = add i64 %v1_f0ed, ptrtoint (i64* @global_var_1a440.419 to i64)
  %v4_f0ed = inttoptr i64 %v3_f0ed to i8*
  %v5_f0ed = load i8, i8* %v4_f0ed, align 1
  %v6_f0ed = zext i8 %v5_f0ed to i64
  store i64 %v6_f0ed, i64* @rcx, align 8
  %v1_f0f1 = add i64 %v3_f0e6, 1
  store i64 %v1_f0f1, i64* @rdx, align 8
  %v3_f0f5 = inttoptr i64 %v3_f0e6 to i8*
  store i8 %v5_f0ed, i8* %v3_f0f5, align 1
  %v0_f0f7 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_f0f7, label %dec_label_pc_f534, label %dec_label_pc_f0fd

dec_label_pc_f0fd:                                ; preds = %dec_label_pc_f0dc
  %v0_f0fd = load i64, i64* @rsp, align 8
  %v1_f0fd = add i64 %v0_f0fd, 48
  %v2_f0fd = inttoptr i64 %v1_f0fd to i32*
  %v3_f0fd = load i32, i32* %v2_f0fd, align 4
  %v4_f0fd = zext i32 %v3_f0fd to i64
  store i64 %v4_f0fd, i64* @r8, align 8
  %v5_f102 = icmp eq i32 %v3_f0fd, 0
  store i1 %v5_f102, i1* %zf.global-to-local, align 1
  %v1_f105 = icmp eq i1 %v5_f102, false
  br i1 %v1_f105, label %dec_label_pc_f2c0, label %dec_label_pc_f10b

dec_label_pc_f10b:                                ; preds = %dec_label_pc_f6f6, %dec_label_pc_f520, %dec_label_pc_f2c0, %dec_label_pc_f0fd
  %v0_f10b = load i64, i64* @rdx, align 8
  %v1_f10b = add i64 %v0_f10b, 1
  store i64 %v1_f10b, i64* %rax.global-to-local, align 8
  %v1_f10f = inttoptr i64 %v0_f10b to i8*
  store i8 66, i8* %v1_f10f, align 1
  %v0_f112 = load i64, i64* %rax.global-to-local, align 8
  %v1_f112 = load i64, i64* @rsp, align 8
  %v2_f112 = add i64 %v1_f112, 8
  %v3_f112 = inttoptr i64 %v2_f112 to i64*
  store i64 %v0_f112, i64* %v3_f112, align 8
  br label %dec_label_pc_f117

dec_label_pc_f117:                                ; preds = %dec_label_pc_f6f6, %dec_label_pc_f534, %dec_label_pc_f10b, %dec_label_pc_f0a9, %dec_label_pc_f09a
  %v0_f117 = load i64, i64* @rsp, align 8
  %v1_f117 = add i64 %v0_f117, 8
  %v2_f117 = inttoptr i64 %v1_f117 to i64*
  %v3_f117 = load i64, i64* %v2_f117, align 8
  store i64 %v3_f117, i64* %rax.global-to-local, align 8
  %v1_f11c = add i64 %v0_f117, 136
  %v2_f11c = inttoptr i64 %v1_f11c to i64*
  %v3_f11c = load i64, i64* %v2_f11c, align 8
  store i64 %v3_f11c, i64* @rcx, align 8
  %v1_f124 = call i64 @__readfsqword(i64 40)
  %v2_f124 = xor i64 %v1_f124, %v3_f11c
  %v3_f124 = icmp eq i64 %v2_f124, 0
  store i1 %v3_f124, i1* %zf.global-to-local, align 1
  store i64 %v2_f124, i64* @rcx, align 8
  %v0_f12d = load i64, i64* %rax.global-to-local, align 8
  %v1_f12d = inttoptr i64 %v0_f12d to i8*
  store i8 0, i8* %v1_f12d, align 1
  %v0_f130 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_f130, i64* %rax.global-to-local, align 8
  %v0_f133 = load i1, i1* %zf.global-to-local, align 1
  %v1_f133 = icmp eq i1 %v0_f133, false
  br i1 %v1_f133, label %dec_label_pc_f6cb, label %dec_label_pc_f139

dec_label_pc_f139:                                ; preds = %dec_label_pc_f117
  %v0_f139 = load i64, i64* @rsp, align 8
  %v1_f139 = add i64 %v0_f139, 152
  %v10_f139 = icmp eq i64 %v1_f139, 0
  store i1 %v10_f139, i1* %zf.global-to-local, align 1
  %v1_f140 = inttoptr i64 %v1_f139 to i64*
  %v2_f140 = load i64, i64* %v1_f140, align 8
  store i64 %v2_f140, i64* @rbx, align 8
  %v3_f140 = add i64 %v0_f139, 160
  %v1_f141 = inttoptr i64 %v3_f140 to i64*
  %v2_f141 = load i64, i64* %v1_f141, align 8
  store i64 %v2_f141, i64* @rbp, align 8
  %v3_f141 = add i64 %v0_f139, 168
  %v1_f142 = inttoptr i64 %v3_f141 to i64*
  %v2_f142 = load i64, i64* %v1_f142, align 8
  store i64 %v2_f142, i64* @r12, align 8
  %v3_f142 = add i64 %v0_f139, 176
  %v1_f144 = inttoptr i64 %v3_f142 to i64*
  %v2_f144 = load i64, i64* %v1_f144, align 8
  store i64 %v2_f144, i64* @r13, align 8
  %v3_f144 = add i64 %v0_f139, 184
  %v1_f146 = inttoptr i64 %v3_f144 to i64*
  %v2_f146 = load i64, i64* %v1_f146, align 8
  store i64 %v2_f146, i64* @r14, align 8
  %v3_f146 = add i64 %v0_f139, 192
  %v1_f148 = inttoptr i64 %v3_f146 to i64*
  %v2_f148 = load i64, i64* %v1_f148, align 8
  store i64 %v2_f148, i64* @r15, align 8
  ret i64 %v0_f130

dec_label_pc_f150:                                ; preds = %dec_label_pc_ede1
  %v2_f155 = sext i64 %v0_ed29 to i128
  %v3_f155 = sext i64 %div to i128
  %v4_f155 = mul nsw i128 %v3_f155, %v2_f155
  %v5_f155 = trunc i128 %v4_f155 to i64
  store i64 %v5_f155, i64* @rsi, align 8
  %v2_f15c = and i128 %v4_f155, 18446744073709551615
  %v7_f15c = zext i64 %div to i128
  %v8_f15c = udiv i128 %v2_f15c, %v7_f15c
  %v9_f15c = trunc i128 %v8_f15c to i64
  store i64 %v9_f15c, i64* %rax.global-to-local, align 8
  %v10_f15c = urem i128 %v2_f15c, %v7_f15c
  %v11_f15c = trunc i128 %v10_f15c to i64
  store i64 %v11_f15c, i64* @rdx, align 8
  %v12_f15f = icmp eq i64 %v9_f15c, %v0_ed29
  store i1 %v12_f15f, i1* %zf.global-to-local, align 1
  %v1_f162 = icmp eq i1 %v12_f15f, false
  br i1 %v1_f162, label %dec_label_pc_edf5, label %dec_label_pc_f168

dec_label_pc_f168:                                ; preds = %dec_label_pc_f150
  store i64 0, i64* @rdi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @r9, align 8
  br label %dec_label_pc_ef79

dec_label_pc_f178:                                ; preds = %dec_label_pc_f090
  %v0_f178 = load i64, i64* @r8, align 8
  store i64 %v0_f178, i64* %r14.global-to-local, align 8
  %v0_f17b = load i64, i64* %r13.global-to-local, align 8
  %v1_f17b = inttoptr i64 %v0_f17b to i8*
  store i64 %v0_f17b, i64* @rdi, align 8
  %v1_f17e = load i64, i64* @rsp, align 8
  %v2_f17e = add i64 %v1_f17e, 72
  %v3_f17e = inttoptr i64 %v2_f17e to i64*
  store i64 %v0_f178, i64* %v3_f17e, align 8
  %v0_f183 = load i64, i64* %r14.global-to-local, align 8
  %v1_f183 = load i64, i64* %r15.global-to-local, align 8
  %v2_f183 = sub i64 %v0_f183, %v1_f183
  %v12_f183 = icmp eq i64 %v2_f183, 0
  store i1 %v12_f183, i1* %zf.global-to-local, align 1
  store i64 %v2_f183, i64* %r14.global-to-local, align 8
  store i64 -1, i64* %rbp.global-to-local, align 8
  %v3_f18d = call i32 @strlen(i8* %v1_f17b)
  %v5_f18d = sext i32 %v3_f18d to i64
  store i64 %v5_f18d, i64* %rax.global-to-local, align 8
  %v0_f192 = load i64, i64* @rsp, align 8
  %v1_f192 = add i64 %v0_f192, 80
  store i64 %v1_f192, i64* @rdi, align 8
  store i64 41, i64* @rcx, align 8
  %v0_f19c = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_f19c, i64* @rdx, align 8
  %v0_f19f = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_f19f, i64* @rsi, align 8
  %v2_f1a2 = add i64 %v0_f192, 64
  %v3_f1a2 = inttoptr i64 %v2_f1a2 to i64*
  store i64 %v5_f18d, i64* %v3_f1a2, align 8
  %v1_f1a7 = load i64, i64* @rsp, align 8
  %v2_f1a7 = add i64 %v1_f1a7, 24
  %v3_f1a7 = inttoptr i64 %v2_f1a7 to i64*
  store i64 %v1_f192, i64* %v3_f1a7, align 8
  %v1_f1ac = inttoptr i64 %v1_f192 to i64*
  %v3_f1ac = inttoptr i64 %v0_f19f to i64*
  %v5_f1ac = trunc i64 %v0_f19c to i32
  %v9_f1ac = call i64* @__memcpy_chk(i64* %v1_f1ac, i64* %v3_f1ac, i32 %v5_f1ac, i32 41)
  %v11_f1ac = ptrtoint i64* %v9_f1ac to i64
  store i64 %v11_f1ac, i64* %rax.global-to-local, align 8
  %v0_f1b1 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_f1b1, i64* @rcx, align 8
  %v0_f1b4 = load i64, i64* %rbx.global-to-local, align 8
  %v1_f1b4 = trunc i64 %v0_f1b4 to i32
  %v2_f1b4 = load i64, i64* @rsp, align 8
  %v3_f1b4 = add i64 %v2_f1b4, 32
  %v4_f1b4 = inttoptr i64 %v3_f1b4 to i32*
  store i32 %v1_f1b4, i32* %v4_f1b4, align 4
  %v0_f1b8 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_f1b8, i64* %r12.global-to-local, align 8
  %v0_f1bb = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_f1bb, i64* %rbx.global-to-local, align 8
  %v0_f1be = load i64, i64* @rsp, align 8
  %v1_f1be = add i64 %v0_f1be, 72
  %v2_f1be = inttoptr i64 %v1_f1be to i64*
  %v3_f1be = load i64, i64* %v2_f1be, align 8
  store i64 %v3_f1be, i64* @r8, align 8
  %v1_f1c3 = add i64 %v0_f1be, 56
  %v2_f1c3 = inttoptr i64 %v1_f1c3 to i64*
  %v3_f1c3 = load i64, i64* %v2_f1c3, align 8
  store i64 %v3_f1c3, i64* %r15.global-to-local, align 8
  %v1_f1c8 = add i64 %v0_f1be, 64
  %v2_f1c8 = inttoptr i64 %v1_f1c8 to i64*
  %v3_f1c8 = load i64, i64* %v2_f1c8, align 8
  store i64 %v3_f1c8, i64* %r13.global-to-local, align 8
  %v0_f1cd = load i64, i64* @rcx, align 8
  store i64 %v0_f1cd, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_f212

dec_label_pc_f1d8:                                ; preds = %dec_label_pc_f227
  %v0_f1d8 = load i64, i64* @rsp, align 8
  %v1_f1d8 = add i64 %v0_f1d8, 24
  %v2_f1d8 = inttoptr i64 %v1_f1d8 to i64*
  %v3_f1d8 = load i64, i64* %v2_f1d8, align 8
  store i64 %v3_f1d8, i64* %rax.global-to-local, align 8
  %v2_f1dd = sub i64 %v0_f1dd, %v0_f1e6
  store i64 %v2_f1dd, i64* %r12.global-to-local, align 8
  %v2_f1e0 = sub i64 %v0_f1e0, %v0_f1e6
  %v12_f1e0 = icmp eq i64 %v2_f1e0, 0
  store i1 %v12_f1e0, i1* %zf.global-to-local, align 1
  store i64 %v2_f1e0, i64* @r8, align 8
  store i64 %v2_f1e0, i64* @rdi, align 8
  %v1_f1e6 = trunc i64 %v0_f1e6 to i32
  store i64 %v0_f1e6, i64* @rdx, align 8
  %v3_f1e9 = add i64 %v3_f1d8, %v2_f1dd
  store i64 %v3_f1e9, i64* @rsi, align 8
  %v1_f1ed = inttoptr i64 %v2_f1e0 to i64*
  %v3_f1ed = inttoptr i64 %v3_f1e9 to i64*
  %v7_f1ed = call i64* @memcpy(i64* %v1_f1ed, i64* %v3_f1ed, i32 %v1_f1e6)
  %v9_f1ed = ptrtoint i64* %v7_f1ed to i64
  store i64 %v9_f1ed, i64* %rax.global-to-local, align 8
  %v0_f1f2 = load i64, i64* %r12.global-to-local, align 8
  %v1_f1f2 = icmp eq i64 %v0_f1f2, 0
  store i1 %v1_f1f2, i1* %zf.global-to-local, align 1
  store i64 %v9_f1ed, i64* @r8, align 8
  br i1 %v1_f1f2, label %dec_label_pc_f708, label %dec_label_pc_f1fe

dec_label_pc_f1fe:                                ; preds = %dec_label_pc_f1d8
  %v1_f1fe = load i64, i64* %r13.global-to-local, align 8
  %v2_f1fe = sub i64 %v9_f1ed, %v1_f1fe
  %v12_f1fe = icmp eq i64 %v2_f1fe, 0
  store i1 %v12_f1fe, i1* %zf.global-to-local, align 1
  store i64 %v2_f1fe, i64* @r8, align 8
  %v1_f201 = trunc i64 %v1_f1fe to i32
  store i64 %v1_f1fe, i64* @rdx, align 8
  %v0_f204 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_f204, i64* @rsi, align 8
  store i64 %v2_f1fe, i64* @rdi, align 8
  %v1_f20a = inttoptr i64 %v2_f1fe to i64*
  %v3_f20a = inttoptr i64 %v0_f204 to i64*
  %v7_f20a = call i64* @memcpy(i64* %v1_f20a, i64* %v3_f20a, i32 %v1_f201)
  %v9_f20a = ptrtoint i64* %v7_f20a to i64
  store i64 %v9_f20a, i64* %rax.global-to-local, align 8
  store i64 %v9_f20a, i64* @r8, align 8
  %v0_f212.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_f212

dec_label_pc_f212:                                ; preds = %dec_label_pc_f1fe, %dec_label_pc_f178
  %v0_f1e0 = phi i64 [ %v9_f20a, %dec_label_pc_f1fe ], [ %v3_f1be, %dec_label_pc_f178 ]
  %v0_f223 = phi i64 [ %v0_f212.pre, %dec_label_pc_f1fe ], [ %v3_f1c3, %dec_label_pc_f178 ]
  %v1_f212 = inttoptr i64 %v0_f223 to i8*
  %v2_f212 = load i8, i8* %v1_f212, align 1
  %v3_f212 = zext i8 %v2_f212 to i64
  store i64 %v3_f212, i64* %rax.global-to-local, align 8
  %v5_f216 = icmp eq i8 %v2_f212, 0
  store i1 %v5_f216, i1* %zf.global-to-local, align 1
  br i1 %v5_f216, label %dec_label_pc_f212.dec_label_pc_f227_crit_edge, label %dec_label_pc_f21a

dec_label_pc_f212.dec_label_pc_f227_crit_edge:    ; preds = %dec_label_pc_f212
  %v0_f227.pre = load i64, i64* %rbp.global-to-local, align 8
  %v1_f227.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_f227

dec_label_pc_f21a:                                ; preds = %dec_label_pc_f212
  %v6_f21a = icmp ult i8 %v2_f212, 127
  %v1_f21f = icmp eq i1 %v6_f21a, false
  %v3_f21f = load i64, i64* %r12.global-to-local, align 8
  %v4_f21f = select i1 %v1_f21f, i64 %v3_f21f, i64 %v3_f212
  store i64 %v4_f21f, i64* %rbp.global-to-local, align 8
  %v1_f223 = add i64 %v0_f223, 1
  %v10_f223 = icmp eq i64 %v1_f223, 0
  store i1 %v10_f223, i1* %zf.global-to-local, align 1
  store i64 %v1_f223, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_f227

dec_label_pc_f227:                                ; preds = %dec_label_pc_f212.dec_label_pc_f227_crit_edge, %dec_label_pc_f21a
  %v0_f1dd = phi i64 [ %v1_f227.pre, %dec_label_pc_f212.dec_label_pc_f227_crit_edge ], [ %v3_f21f, %dec_label_pc_f21a ]
  %v0_f1e6 = phi i64 [ %v0_f227.pre, %dec_label_pc_f212.dec_label_pc_f227_crit_edge ], [ %v4_f21f, %dec_label_pc_f21a ]
  %v12_f227 = icmp eq i64 %v0_f1dd, %v0_f1e6
  store i1 %v12_f227, i1* %zf.global-to-local, align 1
  %tmp358 = icmp ult i64 %v0_f1dd, %v0_f1e6
  br i1 %tmp358, label %dec_label_pc_f22c, label %dec_label_pc_f1d8

dec_label_pc_f22c:                                ; preds = %dec_label_pc_f227
  %v0_f22c = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_f22c, i64* %rax.global-to-local, align 8
  store i64 %v0_f1e0, i64* %r15.global-to-local, align 8
  store i64 %v0_f1dd, i64* %r14.global-to-local, align 8
  %v0_f235 = load i64, i64* @rsp, align 8
  %v1_f235 = add i64 %v0_f235, 24
  %v2_f235 = inttoptr i64 %v1_f235 to i64*
  %v3_f235 = load i64, i64* %v2_f235, align 8
  store i64 %v3_f235, i64* @rsi, align 8
  %v2_f23a = sub i64 %v0_f1e0, %v0_f1dd
  %v12_f23a = icmp eq i64 %v2_f23a, 0
  store i1 %v12_f23a, i1* %zf.global-to-local, align 1
  store i64 %v2_f23a, i64* %r15.global-to-local, align 8
  store i64 %v0_f1dd, i64* @rdx, align 8
  store i64 %v2_f23a, i64* @rdi, align 8
  %v1_f243 = add i64 %v0_f235, 32
  %v2_f243 = inttoptr i64 %v1_f243 to i32*
  %v3_f243 = load i32, i32* %v2_f243, align 4
  %v4_f243 = zext i32 %v3_f243 to i64
  store i64 %v4_f243, i64* %rbx.global-to-local, align 8
  store i64 %v0_f22c, i64* %r12.global-to-local, align 8
  %v1_f24a = inttoptr i64 %v2_f23a to i64*
  %v3_f24a = inttoptr i64 %v3_f235 to i64*
  %v5_f24a = trunc i64 %v0_f1dd to i32
  %v6_f24a = call i64* @memcpy(i64* %v1_f24a, i64* %v3_f24a, i32 %v5_f24a)
  %v8_f24a = ptrtoint i64* %v6_f24a to i64
  store i64 %v8_f24a, i64* %rax.global-to-local, align 8
  %v0_f09a.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_f09a

dec_label_pc_f258:                                ; preds = %dec_label_pc_f0b7
  %v0_f258 = load i64, i64* @rsp, align 8
  %v1_f258 = inttoptr i64 %v0_f258 to i64*
  %v2_f258 = load i64, i64* %v1_f258, align 8
  store i64 %v2_f258, i64* @rcx, align 8
  %v1_f25c = add i64 %v2_f258, ptrtoint (i64* @global_var_288.420 to i64)
  store i64 %v1_f25c, i64* @rdi, align 8
  %v1_f263 = add i64 %v2_f258, ptrtoint (i64* @global_var_287.414 to i64)
  %v2_f263 = inttoptr i64 %v1_f263 to i8*
  store i8 32, i8* %v2_f263, align 1
  %v0_f26a = load i64, i64* @rdi, align 8
  %v1_f26a = load i64, i64* @rsp, align 8
  %v2_f26a = add i64 %v1_f26a, 8
  %v3_f26a = inttoptr i64 %v2_f26a to i64*
  store i64 %v0_f26a, i64* %v3_f26a, align 8
  %v0_f0c1.pre = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_f0c1

dec_label_pc_f2c0:                                ; preds = %dec_label_pc_f0fd
  %v0_f2c0 = load i64, i64* @rdi, align 8
  %v1_f2c0 = add i64 %v0_f2c0, 2
  store i64 %v1_f2c0, i64* @rdx, align 8
  %v1_f2c4 = add i64 %v0_f2c0, 1
  %v2_f2c4 = inttoptr i64 %v1_f2c4 to i8*
  store i8 105, i8* %v2_f2c4, align 1
  br label %dec_label_pc_f10b

dec_label_pc_f2cd:                                ; preds = %dec_label_pc_efb2
  store i64 %div36, i64* @rsi, align 8
  store i64 %v5_efdf, i64* %rax.global-to-local, align 8
  store i64 %v3_efe2, i64* @rdx, align 8
  store i64 %v2_f597, i64* @rdi, align 8
  store i64 %v5_efdf, i64* @r9, align 8
  store i64 %v17_efb2, i64* %rbx.global-to-local, align 8
  %v10_f2cd = icmp eq i64 %div36, 9
  store i1 %v10_f2cd, i1* %zf.global-to-local, align 1
  %tmp359 = icmp ult i64 %div36, 10
  br i1 %tmp359, label %dec_label_pc_f2d7, label %dec_label_pc_f568

dec_label_pc_f2d7:                                ; preds = %dec_label_pc_f2cd
  %v0_f2d7 = load i64, i64* %r15.global-to-local, align 8
  %v1_f2d7 = trunc i64 %v0_f2d7 to i32
  %v11_f2d7 = icmp eq i32 %v1_f2d7, 1
  store i1 %v11_f2d7, i1* %zf.global-to-local, align 1
  br i1 %v11_f2d7, label %dec_label_pc_f592, label %dec_label_pc_f2e1

dec_label_pc_f2e1:                                ; preds = %dec_label_pc_f2d7
  %v6_f2d7 = icmp eq i32 %v1_f2d7, 0
  %v1_f2e4 = zext i1 %v6_f2d7 to i64
  %v3_f2e4 = and i64 %v3_efe2, 34359738112
  %v4_f2e4 = or i64 %v1_f2e4, %v3_f2e4
  store i64 %v4_f2e4, i64* @rdx, align 8
  %v4_f2e7 = trunc i64 %v2_f597 to i32
  %v5_f2e7 = icmp eq i32 %v4_f2e7, 0
  %v6_f2e7 = icmp slt i32 %v4_f2e7, 0
  %v3_f2e9 = icmp eq i1 %v6_f2e7, false
  %v4_f2e9 = icmp eq i1 %v5_f2e7, false
  %v5_f2e9 = icmp eq i1 %v3_f2e9, %v4_f2e9
  %v6_f2e9 = zext i1 %v5_f2e9 to i64
  %v8_f2e9 = and i64 %v16_ed60, 4294967040
  %v9_f2e9 = or i64 %v6_f2e9, %v8_f2e9
  store i64 %v9_f2e9, i64* @r8, align 8
  %v4_f2ed42 = and i64 %v4_f2e4, %v9_f2e9
  %v5_f2ed = icmp eq i64 %v4_f2ed42, 0
  store i1 %v5_f2ed, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_f2f0

dec_label_pc_f2f0:                                ; preds = %dec_label_pc_f592, %dec_label_pc_f2e1
  %storemerge51 = phi i64 [ %v9_f59c, %dec_label_pc_f592 ], [ %v4_f2ed42, %dec_label_pc_f2e1 ]
  store i64 %storemerge51, i64* @rdx, align 8
  %v4_f2f0 = trunc i64 %storemerge51 to i8
  %v5_f2f0 = icmp eq i8 %v4_f2f0, 0
  store i1 %v5_f2f0, i1* %zf.global-to-local, align 1
  br i1 %v5_f2f0, label %dec_label_pc_f579, label %dec_label_pc_f2f8

dec_label_pc_f2f8:                                ; preds = %dec_label_pc_f2f0
  %v1_f2f8 = add i64 %v5_efdf, 1
  store i64 %v1_f2f8, i64* %r9.global-to-local, align 8
  %v1_f2fc = trunc i64 %v1_f2f8 to i32
  %v11_f2fc = icmp eq i32 %v1_f2fc, 10
  store i1 %v11_f2fc, i1* %zf.global-to-local, align 1
  br i1 %v11_f2fc, label %dec_label_pc_f601, label %dec_label_pc_f306

dec_label_pc_f306:                                ; preds = %dec_label_pc_f579, %dec_label_pc_f2f8
  %v0_f306 = phi i64 [ %v5_efdf, %dec_label_pc_f579 ], [ %v1_f2f8, %dec_label_pc_f2f8 ]
  %v1_f306 = trunc i64 %v0_f306 to i32
  %v2_f306 = add i32 %v1_f306, 48
  %v10_f306 = icmp eq i32 %v2_f306, 0
  store i1 %v10_f306, i1* %zf.global-to-local, align 1
  %v16_f306 = zext i32 %v2_f306 to i64
  br label %dec_label_pc_f30a

dec_label_pc_f30a:                                ; preds = %dec_label_pc_f581, %dec_label_pc_f306
  %storemerge48 = phi i64 [ %v16_f306, %dec_label_pc_f306 ], [ 48, %dec_label_pc_f581 ]
  store i64 %storemerge48, i64* %r9.global-to-local, align 8
  %v1_f30e = add i64 %v2_edc9, ptrtoint (i32** @global_var_286.421 to i64)
  store i64 %v1_f30e, i64* @r8, align 8
  %v1_f315 = trunc i64 %storemerge48 to i8
  %v4_f315 = inttoptr i64 %v1_f30e to i8*
  store i8 %v1_f315, i8* %v4_f315, align 1
  %v0_f31c = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_f31c, i64* %rax.global-to-local, align 8
  %v0_f31e = load i64, i64* @r8, align 8
  %v2_f31e = sub i64 %v0_f31e, %v0_f31c
  store i64 %v2_f31e, i64* @r8, align 8
  %v1_f321 = trunc i64 %v0_f31c to i32
  %v6_f321 = icmp ult i32 %v1_f321, 8
  %v11_f321 = icmp eq i32 %v1_f321, 8
  store i1 %v11_f321, i1* %zf.global-to-local, align 1
  %v1_f324 = icmp eq i1 %v6_f321, false
  br i1 %v1_f324, label %dec_label_pc_f5b1, label %dec_label_pc_f32a

dec_label_pc_f32a:                                ; preds = %dec_label_pc_f30a
  %v2_f32a = and i64 %v0_f31c, 4
  %v3_f32a = icmp eq i64 %v2_f32a, 0
  store i1 %v3_f32a, i1* %zf.global-to-local, align 1
  %v1_f32e = icmp eq i1 %v3_f32a, false
  br i1 %v1_f32e, label %dec_label_pc_f6b6, label %dec_label_pc_f334

dec_label_pc_f334:                                ; preds = %dec_label_pc_f32a
  %v5_f334 = icmp eq i32 %v1_f321, 0
  store i1 %v5_f334, i1* %zf.global-to-local, align 1
  br i1 %v5_f334, label %dec_label_pc_f347, label %dec_label_pc_f338

dec_label_pc_f338:                                ; preds = %dec_label_pc_f334
  %v0_f338 = load i64, i64* %r14.global-to-local, align 8
  %v1_f338 = inttoptr i64 %v0_f338 to i8*
  %v2_f338 = load i8, i8* %v1_f338, align 1
  %v3_f338 = zext i8 %v2_f338 to i64
  store i64 %v3_f338, i64* @rdx, align 8
  %v2_f33c = and i64 %v0_f31c, 2
  %v3_f33c = icmp eq i64 %v2_f33c, 0
  store i1 %v3_f33c, i1* %zf.global-to-local, align 1
  %v3_f33e = inttoptr i64 %v2_f31e to i8*
  store i8 %v2_f338, i8* %v3_f33e, align 1
  %v0_f341 = load i1, i1* %zf.global-to-local, align 1
  %v1_f341 = icmp eq i1 %v0_f341, false
  br i1 %v1_f341, label %dec_label_pc_f338.dec_label_pc_f6d0_crit_edge, label %dec_label_pc_f347

dec_label_pc_f338.dec_label_pc_f6d0_crit_edge:    ; preds = %dec_label_pc_f338
  %v1_f6d0.pre = load i64, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_f6d0

dec_label_pc_f5ea.dec_label_pc_f347.loopexit_crit_edge: ; preds = %dec_label_pc_f5ea.dec_label_pc_f5ea_crit_edge
  %v4_f5f4.le = sub i32 %v1_f5f4, %v3_f5f4
  br label %dec_label_pc_f347.loopexit

dec_label_pc_f347.loopexit:                       ; preds = %dec_label_pc_f5e5, %dec_label_pc_f5ea.dec_label_pc_f347.loopexit_crit_edge
  %v4_f5f4.lcssa = phi i32 [ %v4_f5f4.le, %dec_label_pc_f5ea.dec_label_pc_f347.loopexit_crit_edge ], [ %v4_f5f4327, %dec_label_pc_f5e5 ]
  %v14_f5f4 = icmp eq i32 %v4_f5f4.lcssa, 0
  store i1 %v14_f5f4, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_f347

dec_label_pc_f347:                                ; preds = %dec_label_pc_f347.loopexit, %dec_label_pc_f6d0, %dec_label_pc_f6b6, %dec_label_pc_f660, %dec_label_pc_f5b1, %dec_label_pc_f338, %dec_label_pc_f334
  store i64 0, i64* @rdi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @r9, align 8
  br label %dec_label_pc_f350

dec_label_pc_f350:                                ; preds = %dec_label_pc_f5a4, %dec_label_pc_f568, %dec_label_pc_f510, %dec_label_pc_f347, %dec_label_pc_ef79
  %v0_f4e2 = phi i64 [ 0, %dec_label_pc_f5a4 ], [ %v5_efdf, %dec_label_pc_f568 ], [ %r9.promoted, %dec_label_pc_f510 ], [ 0, %dec_label_pc_f347 ], [ %r9.promoted, %dec_label_pc_ef79 ]
  %v1_f4d9 = phi i64 [ %v0_f35f158, %dec_label_pc_f5a4 ], [ %v2_f597, %dec_label_pc_f568 ], [ %rdi.promoted, %dec_label_pc_f510 ], [ 0, %dec_label_pc_f347 ], [ %rdi.promoted, %dec_label_pc_ef79 ]
  %v0_f350 = load i64, i64* %r15.global-to-local, align 8
  %v1_f350 = trunc i64 %v0_f350 to i32
  %v6_f350 = icmp eq i32 %v1_f350, 0
  %v11_f350 = icmp eq i32 %v1_f350, 1
  store i1 %v11_f350, i1* %zf.global-to-local, align 1
  br i1 %v11_f350, label %dec_label_pc_f4d0, label %dec_label_pc_f35a

dec_label_pc_f35a:                                ; preds = %dec_label_pc_f350
  store i1 %v6_f350, i1* %zf.global-to-local, align 1
  %v1_f35d = icmp eq i1 %v6_f350, false
  br i1 %v1_f35d, label %dec_label_pc_f380, label %dec_label_pc_f35f

dec_label_pc_f35f:                                ; preds = %dec_label_pc_f35a
  %v1_f35f = trunc i64 %v1_f4d9 to i32
  %v3_f35f = trunc i64 %v0_f4e2 to i32
  %v4_f35f = add i32 %v1_f35f, %v3_f35f
  %v14_f35f = icmp eq i32 %v4_f35f, 0
  %v20_f35f = zext i32 %v4_f35f to i64
  store i64 %v20_f35f, i64* @rdi, align 8
  store i1 %v14_f35f, i1* %zf.global-to-local, align 1
  %tmp295 = icmp slt i32 %v4_f35f, 1
  br i1 %tmp295, label %dec_label_pc_f380, label %dec_label_pc_f35f.dec_label_pc_f366_crit_edge

dec_label_pc_f35f.dec_label_pc_f366_crit_edge:    ; preds = %dec_label_pc_f35f
  %v0_f366.pre = load i64, i64* @rsi, align 8
  br label %dec_label_pc_f366

dec_label_pc_f366:                                ; preds = %dec_label_pc_f35f.dec_label_pc_f366_crit_edge, %dec_label_pc_f4d0
  %v0_f366 = phi i64 [ %v0_f366.pre, %dec_label_pc_f35f.dec_label_pc_f366_crit_edge ], [ %v0_f4d0, %dec_label_pc_f4d0 ]
  %v1_f366 = add i64 %v0_f366, 1
  store i64 %v1_f366, i64* @rsi, align 8
  %v0_f36a = load i64, i64* @rcx, align 8
  %v4_f36a = trunc i64 %v0_f36a to i32
  %v5_f36a = icmp eq i32 %v4_f36a, 0
  store i1 %v5_f36a, i1* %zf.global-to-local, align 1
  br i1 %v5_f36a, label %dec_label_pc_f380, label %dec_label_pc_f36e

dec_label_pc_f36e:                                ; preds = %dec_label_pc_f366
  %v0_f36e = load i64, i64* @rsp, align 8
  %v1_f36e = add i64 %v0_f36e, 52
  %v2_f36e = inttoptr i64 %v1_f36e to i32*
  %v3_f36e = load i32, i32* %v2_f36e, align 4
  %v4_f36e = zext i32 %v3_f36e to i64
  store i64 %v4_f36e, i64* %rax.global-to-local, align 8
  %v12_f372 = icmp eq i64 %v4_f36e, %v1_f366
  store i1 %v12_f372, i1* %zf.global-to-local, align 1
  br i1 %v12_f372, label %dec_label_pc_f540, label %dec_label_pc_f380

dec_label_pc_f380:                                ; preds = %dec_label_pc_f4d0, %dec_label_pc_f36e, %dec_label_pc_f540, %dec_label_pc_f366, %dec_label_pc_f35f, %dec_label_pc_f35a
  %v0_f380 = load i64, i64* @r8, align 8
  store i64 %v0_f380, i64* %r15.global-to-local, align 8
  store i64 -3689348814741910323, i64* @rcx, align 8
  %v0_f390.pre = load i64, i64* @rsi, align 8
  br label %dec_label_pc_f390

dec_label_pc_f390:                                ; preds = %dec_label_pc_f390.dec_label_pc_f390_crit_edge, %dec_label_pc_f380
  %v0_f393 = phi i64 [ %v0_f393.pre, %dec_label_pc_f390.dec_label_pc_f390_crit_edge ], [ %v0_f380, %dec_label_pc_f380 ]
  %v1_f393 = add i64 %v0_f393, -1
  store i64 %v1_f393, i64* %r15.global-to-local, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v1_f3a8 = trunc i64 %v0_f390.pre to i8
  %v2_f3a8 = add i8 %v1_f3a8, 48
  %v3_f3ae = inttoptr i64 %v1_f393 to i8*
  store i8 %v2_f3a8, i8* %v3_f3ae, align 1
  %v0_f3b4 = load i1, i1* %zf.global-to-local, align 1
  %v1_f3b4 = icmp eq i1 %v0_f3b4, false
  br i1 %v1_f3b4, label %dec_label_pc_f390.dec_label_pc_f390_crit_edge, label %dec_label_pc_f090

dec_label_pc_f390.dec_label_pc_f390_crit_edge:    ; preds = %dec_label_pc_f390
  %v0_f393.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_f390

dec_label_pc_f3c0:                                ; preds = %dec_label_pc_f0a0
  %v0_f3c0 = load i64, i64* @rsp, align 8
  %v1_f3c0 = add i64 %v0_f3c0, 16
  %v2_f3c0 = inttoptr i64 %v1_f3c0 to i64*
  %v3_f3c0 = load i64, i64* %v2_f3c0, align 8
  store i64 %v3_f3c0, i64* @rcx, align 8
  %v10_f3c5 = icmp eq i64 %v3_f3c0, 1
  store i1 %v10_f3c5, i1* %zf.global-to-local, align 1
  %tmp360 = or i64 %v3_f3c0, 1
  %tmp361 = icmp eq i64 %tmp360, 1
  br i1 %tmp361, label %dec_label_pc_f572, label %dec_label_pc_f3cf

dec_label_pc_f3cf:                                ; preds = %dec_label_pc_f3c0
  %v1_f3cf = add i64 %v0_f3c0, 52
  %v2_f3cf = inttoptr i64 %v1_f3cf to i32*
  %v3_f3cf = load i32, i32* %v2_f3cf, align 4
  %v4_f3cf = zext i32 %v3_f3cf to i64
  store i64 %v4_f3cf, i64* @rdx, align 8
  store i64 1, i64* %rbx.global-to-local, align 8
  store i64 1, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_f3dd

dec_label_pc_f3dd:                                ; preds = %dec_label_pc_f3ea, %dec_label_pc_f3cf
  %v0_f3ea = phi i64 [ %v17_f3ea, %dec_label_pc_f3ea ], [ 1, %dec_label_pc_f3cf ]
  %v4_f3dd75 = phi i64 [ %v4_f3dd, %dec_label_pc_f3ea ], [ 1, %dec_label_pc_f3cf ]
  %v4_f3dd = mul i64 %v4_f3dd75, %v4_f3cf
  %v12_f3e1 = icmp eq i64 %v3_f3c0, %v4_f3dd
  %tmp362 = icmp ugt i64 %v3_f3c0, %v4_f3dd
  br i1 %tmp362, label %dec_label_pc_f3ea, label %dec_label_pc_f0a9.loopexit

dec_label_pc_f3ea:                                ; preds = %dec_label_pc_f3dd
  %v2_f3ea = add nuw nsw i64 %v0_f3ea, 1
  %v17_f3ea = and i64 %v2_f3ea, 4294967295
  store i64 %v17_f3ea, i64* %rbx.global-to-local, align 8
  %v11_f3ed = icmp eq i64 %v0_f3ea, 7
  %v1_f3f0 = icmp eq i1 %v11_f3ed, false
  br i1 %v1_f3f0, label %dec_label_pc_f3dd, label %dec_label_pc_f0a9.loopexit

dec_label_pc_f400:                                ; preds = %dec_label_pc_ee74
  %v4_ee7e = fdiv x86_fp80 %v4_ee59, %v4_ee59
  store i64 ptrtoint ([6 x i8]* @global_var_1a406.416 to i64), i64* @rcx, align 8
  store i64 -1, i64* @rdx, align 8
  %v4_f414 = fptrunc x86_fp80 %v4_ee7e to double
  %v5_f414 = bitcast double %v4_f414 to i64
  store i64 %v5_f414, i64* %stack_var_-216, align 8
  store i64 %v2_edc9, i64* %r14.global-to-local, align 8
  store i64 1, i64* @rsi, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  store i64 %v2_edc9, i64* @rdi, align 8
  store i3 %v0_edfd, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_f42a = inttoptr i64 %v2_edc9 to i8*
  %v11_f42a = load i128, i128* @xmm0, align 8
  %v12_f42a = trunc i128 %v11_f42a to i80
  %v13_f42a = bitcast i80 %v12_f42a to x86_fp80
  %v14_f42a = call i32 (i8*, i32, i32, i8*, ...) @__sprintf_chk(i8* %v1_f42a, i32 1, i32 -1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1a406.416, i64 0, i64 0), x86_fp80 %v13_f42a)
  %v16_f42a = sext i32 %v14_f42a to i64
  store i64 %v16_f42a, i64* %rax.global-to-local, align 8
  %v0_f42f = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_f42f, i64* @rdi, align 8
  %v1_f432 = inttoptr i64 %v0_f42f to i8*
  %v2_f432 = call i32 @strlen(i8* %v1_f432)
  %v4_f432 = sext i32 %v2_f432 to i64
  store i64 %v4_f432, i64* %r14.global-to-local, align 8
  %v2_f43a = load i64, i64* %stack_var_-216, align 8
  store i64 %v2_f43a, i64* %rax.global-to-local, align 8
  %v15_f43c = icmp eq i64 %v4_f432, %v4_ee89
  store i1 %v15_f43c, i1* %zf.global-to-local, align 1
  %v0_f441 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_f441 = add i3 %v0_f441, -1
  store i3 %v5_f441, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp363 = icmp ugt i64 %v4_f432, %v4_ee89
  br i1 %tmp363, label %dec_label_pc_f44b, label %dec_label_pc_eef2

dec_label_pc_f44b:                                ; preds = %dec_label_pc_f400
  %v3_f44b = add i3 %v0_f441, -2
  store i3 %v3_f44b, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_f453

dec_label_pc_f453:                                ; preds = %dec_label_pc_ef0c, %dec_label_pc_f4aa, %dec_label_pc_f44b
  %v0_f453 = phi i3 [ %v8_f4c0, %dec_label_pc_f4aa ], [ %v3_f44b, %dec_label_pc_f44b ], [ %v3_ef0c, %dec_label_pc_ef0c ]
  %v2_f453 = phi x86_fp80 [ 0xK00000000000000000000, %dec_label_pc_f4aa ], [ 0xK4005C800000000000000, %dec_label_pc_f44b ], [ 0xK4005C800000000000000, %dec_label_pc_ef0c ]
  %v4_f453 = fdiv x86_fp80 %v2_f453, %v2_f453
  store i64 ptrtoint ([6 x i8]* @global_var_1a400.418 to i64), i64* @rcx, align 8
  %v3_f460 = load i64, i64* %stack_var_-200, align 8
  store i64 %v3_f460, i64* %r14.global-to-local, align 8
  store i64 -1, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rbp.global-to-local, align 8
  store i64 %v3_f460, i64* @rdi, align 8
  %v4_f478 = fptrunc x86_fp80 %v4_f453 to double
  %v5_f478 = bitcast double %v4_f478 to i64
  store i64 %v5_f478, i64* %stack_var_-216, align 8
  %v6_f478 = add i3 %v0_f453, 2
  store i3 %v6_f478, i3* @fpu_stat_TOP, align 1
  %v1_f47b = inttoptr i64 %v3_f460 to i8*
  %v11_f47b = load i128, i128* @xmm0, align 8
  %v12_f47b = trunc i128 %v11_f47b to i80
  %v13_f47b = bitcast i80 %v12_f47b to x86_fp80
  %v14_f47b = call i32 (i8*, i32, i32, i8*, ...) @__sprintf_chk(i8* %v1_f47b, i32 1, i32 -1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_1a400.418, i64 0, i64 0), x86_fp80 %v13_f47b)
  %v16_f47b = sext i32 %v14_f47b to i64
  store i64 %v16_f47b, i64* %rax.global-to-local, align 8
  %v0_f480 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_f480, i64* @rdi, align 8
  %v1_f483 = inttoptr i64 %v0_f480 to i8*
  %v2_f483 = call i32 @strlen(i8* %v1_f483)
  %v4_f483 = sext i32 %v2_f483 to i64
  store i64 %v4_f483, i64* %rax.global-to-local, align 8
  store i64 %v4_f483, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_f070

dec_label_pc_f4a0.thread:                         ; preds = %dec_label_pc_ee99
  %v3_f498 = add i3 %v0_eee8, -2
  %v0_f4b2.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_f4aa

dec_label_pc_f4aa:                                ; preds = %dec_label_pc_ef0c, %dec_label_pc_f4a0.thread
  %v0_f4b2 = phi i64 [ %v0_f4b2.pre, %dec_label_pc_f4a0.thread ], [ %v0_ef12, %dec_label_pc_ef0c ]
  %v0_f4a074 = phi i3 [ %v3_f498, %dec_label_pc_f4a0.thread ], [ %v3_ef0c, %dec_label_pc_ef0c ]
  %v9_f4ae = icmp eq i64* %stack_var_-200, inttoptr (i64 16 to i64*)
  store i1 %v9_f4ae, i1* %zf.global-to-local, align 1
  store i64 %v0_f4b2, i64* @rdi, align 8
  store i64 4636737291354636288, i64* %stack_var_-216, align 8
  %v8_f4b5 = add i3 %v0_f4a074, 2
  store i3 %v8_f4b5, i3* @fpu_stat_TOP, align 1
  %v6_f4b8 = call i64 @function_ec40(i64 %v0_f4b2, x86_fp80 0xK4005C800000000000000)
  store i64 %v6_f4b8, i64* %rax.global-to-local, align 8
  store i64 4636737291354636288, i64* %rbp.global-to-local, align 8
  %v0_f4c0 = load i3, i3* @fpu_stat_TOP, align 1
  %v8_f4c0 = add i3 %v0_f4c0, -1
  store i3 %v8_f4c0, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_f453

dec_label_pc_f4d0:                                ; preds = %dec_label_pc_f350
  %v0_f4d0 = load i64, i64* @rsi, align 8
  %v2_f4d6 = urem i64 %v0_f4d0, 2
  %v2_f4d9 = add i64 %v2_f4d6, %v1_f4d9
  %v12_f4d9 = icmp eq i64 %v2_f4d9, 0
  %v1_f4dc = icmp eq i1 %v12_f4d9, false
  %v2_f4dc = zext i1 %v1_f4dc to i64
  %v4_f4dc = and i64 %v2_f4d9, -256
  %v5_f4dc = or i64 %v2_f4dc, %v4_f4dc
  store i64 %v5_f4dc, i64* %rax.global-to-local, align 8
  %v1_f4e2 = trunc i64 %v0_f4e2 to i32
  %v3_f4e2 = trunc i64 %v5_f4dc to i32
  %v4_f4e2 = add i32 %v3_f4e2, %v1_f4e2
  %v20_f4e2 = zext i32 %v4_f4e2 to i64
  store i64 %v20_f4e2, i64* @r9, align 8
  %v12_f4e5 = icmp eq i32 %v4_f4e2, 5
  store i1 %v12_f4e5, i1* %zf.global-to-local, align 1
  %v10_f4e9 = icmp sgt i32 %v4_f4e2, 5
  br i1 %v10_f4e9, label %dec_label_pc_f366, label %dec_label_pc_f380

dec_label_pc_f4f8:                                ; preds = %dec_label_pc_ef47
  %v7_ef67 = icmp ult i64 %div56, %v2_ef61
  %v1_f4f8 = zext i1 %v7_ef67 to i64
  %v3_f4f8 = and i64 %v0_ed56, 4294967040
  %v4_f4f8 = or i64 %v1_f4f8, %v3_f4f8
  %v2_f500 = or i64 %v4_f4f8, 2
  store i1 false, i1* %zf.global-to-local, align 1
  store i64 %v2_f500, i64* @rdi, align 8
  br label %dec_label_pc_ef79

dec_label_pc_f510:                                ; preds = %dec_label_pc_ef8f
  store i64 %v1_edcd, i64* @r8, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_f350

dec_label_pc_f520:                                ; preds = %dec_label_pc_f0ce
  %v1_f520 = add i64 %v0_f0e6.pre, 8
  %v2_f520 = inttoptr i64 %v1_f520 to i64*
  %v3_f520 = load i64, i64* %v2_f520, align 8
  store i64 %v3_f520, i64* %rbx.global-to-local, align 8
  %v0_f525 = load i64, i64* %rax.global-to-local, align 8
  %v4_f525 = trunc i64 %v0_f525 to i32
  %v5_f525 = icmp eq i32 %v4_f525, 0
  store i1 %v5_f525, i1* %zf.global-to-local, align 1
  %v1_f527 = add i64 %v3_f520, 1
  store i64 %v1_f527, i64* @rdx, align 8
  %v1_f52b = inttoptr i64 %v3_f520 to i8*
  store i8 107, i8* %v1_f52b, align 1
  %v0_f52e = load i1, i1* %zf.global-to-local, align 1
  %v1_f52e = icmp eq i1 %v0_f52e, false
  br i1 %v1_f52e, label %dec_label_pc_f10b, label %dec_label_pc_f534

dec_label_pc_f534:                                ; preds = %dec_label_pc_f520, %dec_label_pc_f0dc
  %v0_f534 = load i64, i64* @rdx, align 8
  %v1_f534 = load i64, i64* @rsp, align 8
  %v2_f534 = add i64 %v1_f534, 8
  %v3_f534 = inttoptr i64 %v2_f534 to i64*
  store i64 %v0_f534, i64* %v3_f534, align 8
  br label %dec_label_pc_f117

dec_label_pc_f540:                                ; preds = %dec_label_pc_f36e
  %v0_f540 = load i64, i64* %rbx.global-to-local, align 8
  %v1_f540 = trunc i64 %v0_f540 to i32
  %v11_f540 = icmp eq i32 %v1_f540, 8
  store i1 %v11_f540, i1* %zf.global-to-local, align 1
  br i1 %v11_f540, label %dec_label_pc_f380, label %dec_label_pc_f549

dec_label_pc_f549:                                ; preds = %dec_label_pc_f540
  %v2_f549 = add i64 %v0_f540, 1
  %v17_f549 = and i64 %v2_f549, 4294967295
  store i64 %v17_f549, i64* %rbx.global-to-local, align 8
  %v0_f54c = load i64, i64* %r12.global-to-local, align 8
  %v2_f54c = and i64 %v0_f54c, 8
  %v3_f54c = icmp eq i64 %v2_f54c, 0
  store i1 %v3_f54c, i1* %zf.global-to-local, align 1
  br i1 %v3_f54c, label %dec_label_pc_f612, label %dec_label_pc_f556

dec_label_pc_f6a0.dec_label_pc_f556.loopexit_crit_edge: ; preds = %dec_label_pc_f6a0.dec_label_pc_f6a0_crit_edge
  %v4_f6a9.le = sub i32 %v1_f6a9, %v3_f6a9
  br label %dec_label_pc_f556.loopexit

dec_label_pc_f556.loopexit:                       ; preds = %dec_label_pc_f69b, %dec_label_pc_f6a0.dec_label_pc_f556.loopexit_crit_edge
  %v4_f6a9.lcssa = phi i32 [ %v4_f6a9.le, %dec_label_pc_f6a0.dec_label_pc_f556.loopexit_crit_edge ], [ %v4_f6a9318, %dec_label_pc_f69b ]
  %v14_f6a9 = icmp eq i32 %v4_f6a9.lcssa, 0
  store i1 %v14_f6a9, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_f556

dec_label_pc_f556:                                ; preds = %dec_label_pc_f556.loopexit, %dec_label_pc_f6e1, %dec_label_pc_f66a, %dec_label_pc_f647, %dec_label_pc_f638, %dec_label_pc_f630, %dec_label_pc_f549
  %v0_f556 = load i64, i64* @r8, align 8
  %v1_f556 = add i64 %v0_f556, -1
  store i64 %v1_f556, i64* %r15.global-to-local, align 8
  %v2_f55a = inttoptr i64 %v1_f556 to i8*
  store i8 49, i8* %v2_f55a, align 1
  br label %dec_label_pc_f090

dec_label_pc_f568.loopexit:                       ; preds = %dec_label_pc_efbe
  store i64 %div36, i64* @rsi, align 8
  store i64 %v5_efdf, i64* %rax.global-to-local, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 %v3_efe2, i64* @rdx, align 8
  store i64 %v2_f597, i64* @rdi, align 8
  store i64 %v5_efdf, i64* @r9, align 8
  store i64 %v17_efb2, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_f568

dec_label_pc_f568:                                ; preds = %dec_label_pc_f568.loopexit, %dec_label_pc_f2cd
  store i64 %v1_edcd, i64* @r8, align 8
  br label %dec_label_pc_f350

dec_label_pc_f572:                                ; preds = %dec_label_pc_f3c0
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_f0a9

dec_label_pc_f579:                                ; preds = %dec_label_pc_f2f0
  %v4_f579 = trunc i64 %v5_efdf to i32
  %v5_f579 = icmp eq i32 %v4_f579, 0
  store i1 %v5_f579, i1* %zf.global-to-local, align 1
  %v1_f57b = icmp eq i1 %v5_f579, false
  br i1 %v1_f57b, label %dec_label_pc_f306, label %dec_label_pc_f581

dec_label_pc_f581:                                ; preds = %dec_label_pc_f60b, %dec_label_pc_f579
  %v0_f35f158 = phi i64 [ 0, %dec_label_pc_f60b ], [ %v2_f597, %dec_label_pc_f579 ]
  %v2_f581 = and i64 %v0_ef79, 8
  %v3_f581 = icmp eq i64 %v2_f581, 0
  store i1 %v3_f581, i1* %zf.global-to-local, align 1
  %v1_f585 = icmp eq i1 %v3_f581, false
  br i1 %v1_f585, label %dec_label_pc_f5a4, label %dec_label_pc_f30a

dec_label_pc_f592:                                ; preds = %dec_label_pc_f2d7
  %v1_f594 = trunc i64 %v5_efdf to i32
  %v2_f594 = urem i32 %v1_f594, 2
  %v3_f597 = trunc i64 %v2_f597 to i32
  %v4_f597 = add i32 %v3_f597, %v2_f594
  %v20_f597 = zext i32 %v4_f597 to i64
  store i64 %v20_f597, i64* @rdx, align 8
  %v2_f599 = add i32 %v4_f597, -2
  %tmp302 = sub i32 1, %v4_f597
  %v9_f599 = and i32 %tmp302, %v4_f597
  %v10_f599 = icmp slt i32 %v9_f599, 0
  %v11_f599 = icmp eq i32 %v2_f599, 0
  store i1 %v11_f599, i1* %zf.global-to-local, align 1
  %v12_f599 = icmp slt i32 %v2_f599, 0
  %v3_f59c = icmp eq i1 %v12_f599, %v10_f599
  %v4_f59c = icmp eq i1 %v11_f599, false
  %v5_f59c = icmp eq i1 %v3_f59c, %v4_f59c
  %v6_f59c = zext i1 %v5_f59c to i64
  %v8_f59c = and i64 %v20_f597, 4294967040
  %v9_f59c = or i64 %v6_f59c, %v8_f59c
  br label %dec_label_pc_f2f0

dec_label_pc_f5a4:                                ; preds = %dec_label_pc_f581
  store i64 %v1_edcd, i64* @r8, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @r9, align 8
  br label %dec_label_pc_f350

dec_label_pc_f5b1:                                ; preds = %dec_label_pc_f30a
  %v0_f5b1 = load i64, i64* %r14.global-to-local, align 8
  %v1_f5b1 = inttoptr i64 %v0_f5b1 to i64*
  %v2_f5b1 = load i64, i64* %v1_f5b1, align 8
  store i64 %v0_f5b1, i64* %r9.global-to-local, align 8
  %v2_f5b7 = inttoptr i64 %v2_f31e to i64*
  store i64 %v2_f5b1, i64* %v2_f5b7, align 8
  %v0_f5ba = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_f5ba, i64* %rax.global-to-local, align 8
  %v0_f5bc = load i64, i64* %r14.global-to-local, align 8
  %v3_f5bc = add i64 %v0_f5ba, -8
  %v4_f5bc = add i64 %v3_f5bc, %v0_f5bc
  %v5_f5bc = inttoptr i64 %v4_f5bc to i64*
  %v6_f5bc = load i64, i64* %v5_f5bc, align 8
  %v1_f5c1 = load i64, i64* @r8, align 8
  %v5_f5c1 = add i64 %v3_f5bc, %v1_f5c1
  %v6_f5c1 = inttoptr i64 %v5_f5c1 to i64*
  store i64 %v6_f5bc, i64* %v6_f5c1, align 8
  %v0_f5c6 = load i64, i64* @r8, align 8
  %v1_f5c6 = add i64 %v0_f5c6, 8
  %v1_f5cd = and i64 %v1_f5c6, -8
  store i64 %v1_f5cd, i64* @rdx, align 8
  %v2_f5d1 = sub i64 %v0_f5c6, %v1_f5cd
  %v0_f5d4 = load i64, i64* %r9.global-to-local, align 8
  %v2_f5d4 = sub i64 %v0_f5d4, %v2_f5d1
  store i64 %v2_f5d4, i64* %r9.global-to-local, align 8
  %v1_f5d7 = trunc i64 %v2_f5d1 to i32
  %v2_f5d7 = load i64, i64* %rbp.global-to-local, align 8
  %v3_f5d7 = trunc i64 %v2_f5d7 to i32
  %v4_f5d7 = add i32 %v3_f5d7, %v1_f5d7
  %v2_f5d9 = and i32 %v4_f5d7, -8
  %v9_f5d9 = zext i32 %v2_f5d9 to i64
  store i64 %v9_f5d9, i64* %rax.global-to-local, align 8
  %v6_f5dc = icmp ult i32 %v2_f5d9, 8
  %v11_f5dc = icmp eq i32 %v2_f5d9, 8
  store i1 %v11_f5dc, i1* %zf.global-to-local, align 1
  br i1 %v6_f5dc, label %dec_label_pc_f347, label %dec_label_pc_f5e5

dec_label_pc_f5e5:                                ; preds = %dec_label_pc_f5b1
  store i64 %v9_f5d9, i64* %rax.global-to-local, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 8, i64* @rdi, align 8
  %v4_f5f0324 = inttoptr i64 %v2_f5d4 to i64*
  %v5_f5f0325 = load i64, i64* %v4_f5f0324, align 8
  %v4_f5f4327 = sub i32 8, %v2_f5d9
  %v9_f5f4328 = icmp eq i32 %v2_f5d9, 8
  %v5_f5f6329 = inttoptr i64 %v1_f5cd to i64*
  store i64 %v5_f5f0325, i64* %v5_f5f6329, align 8
  br i1 %v9_f5f4328, label %dec_label_pc_f347.loopexit, label %dec_label_pc_f5ea.dec_label_pc_f5ea_crit_edge

dec_label_pc_f5ea.dec_label_pc_f5ea_crit_edge:    ; preds = %dec_label_pc_f5e5, %dec_label_pc_f5ea.dec_label_pc_f5ea_crit_edge
  %v0_f5ea.pre = load i64, i64* @rdi, align 8
  %v0_f5f0.pre = load i64, i64* %r9.global-to-local, align 8
  %v2_f5f4.pre = load i64, i64* %rax.global-to-local, align 8
  %v1_f5f6.pre = load i64, i64* @rdx, align 8
  %v2_f5ed = add i64 %v0_f5ea.pre, 8
  %v17_f5ed = and i64 %v2_f5ed, 4294967295
  store i64 %v17_f5ed, i64* @rdi, align 8
  %v3_f5f0 = add i64 %v0_f5ea.pre, %v0_f5f0.pre
  %v4_f5f0 = inttoptr i64 %v3_f5f0 to i64*
  %v5_f5f0 = load i64, i64* %v4_f5f0, align 8
  %v1_f5f4 = trunc i64 %v2_f5ed to i32
  %v3_f5f4 = trunc i64 %v2_f5f4.pre to i32
  %v9_f5f4 = icmp ult i32 %v1_f5f4, %v3_f5f4
  %v4_f5f6 = add i64 %v0_f5ea.pre, %v1_f5f6.pre
  %v5_f5f6 = inttoptr i64 %v4_f5f6 to i64*
  store i64 %v5_f5f0, i64* %v5_f5f6, align 8
  br i1 %v9_f5f4, label %dec_label_pc_f5ea.dec_label_pc_f5ea_crit_edge, label %dec_label_pc_f5ea.dec_label_pc_f347.loopexit_crit_edge

dec_label_pc_f601:                                ; preds = %dec_label_pc_f2f8
  %v1_f601 = add i64 %div36, 1
  store i64 %v1_f601, i64* @rsi, align 8
  store i1 %v10_f2cd, i1* %zf.global-to-local, align 1
  br i1 %v10_f2cd, label %dec_label_pc_f660, label %dec_label_pc_f60b

dec_label_pc_f60b:                                ; preds = %dec_label_pc_f601
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rdi, align 8
  br label %dec_label_pc_f581

dec_label_pc_f612:                                ; preds = %dec_label_pc_f549
  %v0_f612 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_f612, i64* %rax.global-to-local, align 8
  %v0_f615 = load i64, i64* @r8, align 8
  %v1_f615 = add i64 %v0_f615, -1
  %v2_f615 = inttoptr i64 %v1_f615 to i8*
  store i8 48, i8* %v2_f615, align 1
  %v0_f61a = load i64, i64* %rax.global-to-local, align 8
  %v1_f61a = sub i64 -1, %v0_f61a
  %v0_f61d = load i64, i64* @r8, align 8
  %v2_f61d = add i64 %v0_f61d, %v1_f61a
  store i64 %v2_f61d, i64* @r8, align 8
  %v0_f620 = load i64, i64* %rbp.global-to-local, align 8
  %v1_f620 = trunc i64 %v0_f620 to i32
  %v6_f620 = icmp ult i32 %v1_f620, 8
  %v11_f620 = icmp eq i32 %v1_f620, 8
  store i1 %v11_f620, i1* %zf.global-to-local, align 1
  store i64 %v0_f620, i64* %rax.global-to-local, align 8
  %v1_f625 = icmp eq i1 %v6_f620, false
  br i1 %v1_f625, label %dec_label_pc_f66a, label %dec_label_pc_f627

dec_label_pc_f627:                                ; preds = %dec_label_pc_f612
  %v2_f627 = and i32 %v1_f620, 4
  %v3_f627 = icmp eq i32 %v2_f627, 0
  store i1 %v3_f627, i1* %zf.global-to-local, align 1
  %v9_f627 = zext i32 %v2_f627 to i64
  store i64 %v9_f627, i64* %rbp.global-to-local, align 8
  %v1_f62a = icmp eq i1 %v3_f627, false
  br i1 %v1_f62a, label %dec_label_pc_f6e1, label %dec_label_pc_f630

dec_label_pc_f630:                                ; preds = %dec_label_pc_f627
  %v5_f630 = icmp eq i32 %v1_f620, 0
  store i1 %v5_f630, i1* %zf.global-to-local, align 1
  br i1 %v5_f630, label %dec_label_pc_f556, label %dec_label_pc_f638

dec_label_pc_f638:                                ; preds = %dec_label_pc_f630
  %v0_f638 = load i64, i64* %r14.global-to-local, align 8
  %v1_f638 = inttoptr i64 %v0_f638 to i8*
  %v2_f638 = load i8, i8* %v1_f638, align 1
  %v3_f638 = zext i8 %v2_f638 to i64
  store i64 %v3_f638, i64* @rdx, align 8
  %v2_f63c = and i64 %v0_f620, 2
  %v3_f63c = icmp eq i64 %v2_f63c, 0
  store i1 %v3_f63c, i1* %zf.global-to-local, align 1
  %v3_f63e = inttoptr i64 %v2_f61d to i8*
  store i8 %v2_f638, i8* %v3_f63e, align 1
  %v0_f641 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_f641, label %dec_label_pc_f556, label %dec_label_pc_f647

dec_label_pc_f647:                                ; preds = %dec_label_pc_f638
  %v0_f647 = load i64, i64* %r14.global-to-local, align 8
  %v1_f647 = load i64, i64* %rax.global-to-local, align 8
  %v3_f647 = add i64 %v0_f647, -2
  %v4_f647 = add i64 %v3_f647, %v1_f647
  %v5_f647 = inttoptr i64 %v4_f647 to i16*
  %v6_f647 = load i16, i16* %v5_f647, align 2
  %v7_f647 = zext i16 %v6_f647 to i64
  store i64 %v7_f647, i64* @rdx, align 8
  %v2_f64d = load i64, i64* @r8, align 8
  %v5_f64d = add i64 %v1_f647, -2
  %v6_f64d = add i64 %v5_f64d, %v2_f64d
  %v7_f64d = inttoptr i64 %v6_f64d to i16*
  store i16 %v6_f647, i16* %v7_f64d, align 2
  br label %dec_label_pc_f556

dec_label_pc_f660:                                ; preds = %dec_label_pc_f601
  store i64 %v1_edcd, i64* @r8, align 8
  br label %dec_label_pc_f347

dec_label_pc_f66a:                                ; preds = %dec_label_pc_f612
  %v0_f66a = load i64, i64* %r14.global-to-local, align 8
  %v1_f66a = inttoptr i64 %v0_f66a to i64*
  %v2_f66a = load i64, i64* %v1_f66a, align 8
  %v1_f66d = add i64 %v2_f61d, 8
  %v1_f671 = and i64 %v1_f66d, -8
  store i64 %v1_f671, i64* @rcx, align 8
  %v2_f675 = inttoptr i64 %v2_f61d to i64*
  store i64 %v2_f66a, i64* %v2_f675, align 8
  %v0_f678 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_f678, i64* %rax.global-to-local, align 8
  %v0_f67a = load i64, i64* %r14.global-to-local, align 8
  %v3_f67a = add i64 %v0_f678, -8
  %v4_f67a = add i64 %v3_f67a, %v0_f67a
  %v5_f67a = inttoptr i64 %v4_f67a to i64*
  %v6_f67a = load i64, i64* %v5_f67a, align 8
  store i64 %v6_f67a, i64* @rdx, align 8
  %v1_f67f = load i64, i64* @r8, align 8
  %v5_f67f = add i64 %v3_f67a, %v1_f67f
  %v6_f67f = inttoptr i64 %v5_f67f to i64*
  store i64 %v6_f67a, i64* %v6_f67f, align 8
  %v0_f684 = load i64, i64* @r8, align 8
  %v1_f687 = load i64, i64* @rcx, align 8
  %v2_f687 = sub i64 %v0_f684, %v1_f687
  %v0_f68a = load i64, i64* %r14.global-to-local, align 8
  %v2_f68a = sub i64 %v0_f68a, %v2_f687
  store i64 %v2_f68a, i64* %r14.global-to-local, align 8
  %v1_f68d = trunc i64 %v2_f687 to i32
  %v2_f68d = load i64, i64* %rbp.global-to-local, align 8
  %v3_f68d = trunc i64 %v2_f68d to i32
  %v4_f68d = add i32 %v3_f68d, %v1_f68d
  %v2_f68f = and i32 %v4_f68d, -8
  %v9_f68f = zext i32 %v2_f68f to i64
  store i64 %v9_f68f, i64* %rax.global-to-local, align 8
  %v6_f692 = icmp ult i32 %v2_f68f, 8
  %v11_f692 = icmp eq i32 %v2_f68f, 8
  store i1 %v11_f692, i1* %zf.global-to-local, align 1
  br i1 %v6_f692, label %dec_label_pc_f556, label %dec_label_pc_f69b

dec_label_pc_f69b:                                ; preds = %dec_label_pc_f66a
  store i64 %v9_f68f, i64* %rax.global-to-local, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rsi, align 8
  store i64 8, i64* @rdx, align 8
  %v4_f6a5315 = inttoptr i64 %v2_f68a to i64*
  %v5_f6a5316 = load i64, i64* %v4_f6a5315, align 8
  store i64 %v5_f6a5316, i64* @rdi, align 8
  %v4_f6a9318 = sub i32 8, %v2_f68f
  %v9_f6a9319 = icmp eq i32 %v2_f68f, 8
  %v5_f6ab320 = inttoptr i64 %v1_f687 to i64*
  store i64 %v5_f6a5316, i64* %v5_f6ab320, align 8
  br i1 %v9_f6a9319, label %dec_label_pc_f556.loopexit, label %dec_label_pc_f6a0.dec_label_pc_f6a0_crit_edge

dec_label_pc_f6a0.dec_label_pc_f6a0_crit_edge:    ; preds = %dec_label_pc_f69b, %dec_label_pc_f6a0.dec_label_pc_f6a0_crit_edge
  %v0_f6a0.pre = load i64, i64* @rdx, align 8
  %v0_f6a5.pre = load i64, i64* %r14.global-to-local, align 8
  %v2_f6a9.pre = load i64, i64* %rax.global-to-local, align 8
  %v1_f6ab.pre = load i64, i64* @rcx, align 8
  store i64 %v0_f6a0.pre, i64* @rsi, align 8
  %v2_f6a2 = add i64 %v0_f6a0.pre, 8
  %v17_f6a2 = and i64 %v2_f6a2, 4294967295
  store i64 %v17_f6a2, i64* @rdx, align 8
  %v3_f6a5 = add i64 %v0_f6a0.pre, %v0_f6a5.pre
  %v4_f6a5 = inttoptr i64 %v3_f6a5 to i64*
  %v5_f6a5 = load i64, i64* %v4_f6a5, align 8
  store i64 %v5_f6a5, i64* @rdi, align 8
  %v1_f6a9 = trunc i64 %v2_f6a2 to i32
  %v3_f6a9 = trunc i64 %v2_f6a9.pre to i32
  %v9_f6a9 = icmp ult i32 %v1_f6a9, %v3_f6a9
  %v4_f6ab = add i64 %v0_f6a0.pre, %v1_f6ab.pre
  %v5_f6ab = inttoptr i64 %v4_f6ab to i64*
  store i64 %v5_f6a5, i64* %v5_f6ab, align 8
  br i1 %v9_f6a9, label %dec_label_pc_f6a0.dec_label_pc_f6a0_crit_edge, label %dec_label_pc_f6a0.dec_label_pc_f556.loopexit_crit_edge

dec_label_pc_f6b6:                                ; preds = %dec_label_pc_f32a
  %v0_f6b6 = load i64, i64* %r14.global-to-local, align 8
  %v1_f6b6 = inttoptr i64 %v0_f6b6 to i32*
  %v2_f6b6 = load i32, i32* %v1_f6b6, align 4
  %v3_f6b6 = zext i32 %v2_f6b6 to i64
  store i64 %v3_f6b6, i64* @rdx, align 8
  %v3_f6b9 = inttoptr i64 %v2_f31e to i32*
  store i32 %v2_f6b6, i32* %v3_f6b9, align 4
  %v0_f6bc = load i64, i64* %r14.global-to-local, align 8
  %v1_f6bc = load i64, i64* %rax.global-to-local, align 8
  %v3_f6bc = add i64 %v0_f6bc, -4
  %v4_f6bc = add i64 %v3_f6bc, %v1_f6bc
  %v5_f6bc = inttoptr i64 %v4_f6bc to i32*
  %v6_f6bc = load i32, i32* %v5_f6bc, align 4
  %v7_f6bc = zext i32 %v6_f6bc to i64
  store i64 %v7_f6bc, i64* @rdx, align 8
  %v2_f6c1 = load i64, i64* @r8, align 8
  %v5_f6c1 = add i64 %v1_f6bc, -4
  %v6_f6c1 = add i64 %v5_f6c1, %v2_f6c1
  %v7_f6c1 = inttoptr i64 %v6_f6c1 to i32*
  store i32 %v6_f6bc, i32* %v7_f6c1, align 4
  br label %dec_label_pc_f347

dec_label_pc_f6cb:                                ; preds = %dec_label_pc_f117
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_f6d0

dec_label_pc_f6d0:                                ; preds = %dec_label_pc_f338.dec_label_pc_f6d0_crit_edge, %dec_label_pc_f6cb
  %v3_f6d6 = phi i64 [ %v1_f6d0.pre, %dec_label_pc_f338.dec_label_pc_f6d0_crit_edge ], [ ptrtoint (i32* @0 to i64), %dec_label_pc_f6cb ]
  %v0_f6d0 = load i64, i64* %r14.global-to-local, align 8
  %v3_f6d0 = add i64 %v3_f6d6, -2
  %v4_f6d0 = add i64 %v3_f6d0, %v0_f6d0
  %v5_f6d0 = inttoptr i64 %v4_f6d0 to i16*
  %v6_f6d0 = load i16, i16* %v5_f6d0, align 2
  %v7_f6d0 = zext i16 %v6_f6d0 to i64
  store i64 %v7_f6d0, i64* @rdx, align 8
  %v2_f6d6 = load i64, i64* @r8, align 8
  %v6_f6d6 = add i64 %v3_f6d0, %v2_f6d6
  %v7_f6d6 = inttoptr i64 %v6_f6d6 to i16*
  store i16 %v6_f6d0, i16* %v7_f6d6, align 2
  br label %dec_label_pc_f347

dec_label_pc_f6e1:                                ; preds = %dec_label_pc_f627
  %v0_f6e1 = load i64, i64* %r14.global-to-local, align 8
  %v1_f6e1 = inttoptr i64 %v0_f6e1 to i32*
  %v2_f6e1 = load i32, i32* %v1_f6e1, align 4
  %v3_f6e1 = zext i32 %v2_f6e1 to i64
  store i64 %v3_f6e1, i64* @rdx, align 8
  %v3_f6e4 = inttoptr i64 %v2_f61d to i32*
  store i32 %v2_f6e1, i32* %v3_f6e4, align 4
  %v0_f6e7 = load i64, i64* %r14.global-to-local, align 8
  %v1_f6e7 = load i64, i64* %rax.global-to-local, align 8
  %v3_f6e7 = add i64 %v0_f6e7, -4
  %v4_f6e7 = add i64 %v3_f6e7, %v1_f6e7
  %v5_f6e7 = inttoptr i64 %v4_f6e7 to i32*
  %v6_f6e7 = load i32, i32* %v5_f6e7, align 4
  %v7_f6e7 = zext i32 %v6_f6e7 to i64
  store i64 %v7_f6e7, i64* @rdx, align 8
  %v2_f6ec = load i64, i64* @r8, align 8
  %v5_f6ec = add i64 %v1_f6e7, -4
  %v6_f6ec = add i64 %v5_f6ec, %v2_f6ec
  %v7_f6ec = inttoptr i64 %v6_f6ec to i32*
  store i32 %v6_f6e7, i32* %v7_f6ec, align 4
  br label %dec_label_pc_f556

dec_label_pc_f6f6:                                ; preds = %dec_label_pc_f0c1
  %v0_f6f6 = load i64, i64* %rax.global-to-local, align 8
  %v4_f6f6 = trunc i64 %v0_f6f6 to i32
  %v5_f6f6 = icmp eq i32 %v4_f6f6, 0
  store i1 %v5_f6f6, i1* %zf.global-to-local, align 1
  %v0_f6f8 = load i64, i64* @rsp, align 8
  %v1_f6f8 = add i64 %v0_f6f8, 8
  %v2_f6f8 = inttoptr i64 %v1_f6f8 to i64*
  %v3_f6f8 = load i64, i64* %v2_f6f8, align 8
  store i64 %v3_f6f8, i64* @rdx, align 8
  %v1_f6fd = icmp eq i1 %v5_f6f6, false
  br i1 %v1_f6fd, label %dec_label_pc_f10b, label %dec_label_pc_f117

dec_label_pc_f708:                                ; preds = %dec_label_pc_f1d8
  %v0_f708 = load i64, i64* @rsp, align 8
  %v1_f708 = add i64 %v0_f708, 32
  %v2_f708 = inttoptr i64 %v1_f708 to i32*
  %v3_f708 = load i32, i32* %v2_f708, align 4
  %v4_f708 = zext i32 %v3_f708 to i64
  store i64 %v4_f708, i64* %rbx.global-to-local, align 8
  store i64 %v9_f1ed, i64* %r15.global-to-local, align 8
  %v0_f70f = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_f70f, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_f09a
}

define i64 @function_f720(i64 %arg1, i64* %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_f720:
  %rax.global-to-local = alloca i64, align 8
  %tmp37 = ptrtoint i64* %arg3 to i64
  store i64 %tmp37, i64* @rdx, align 8
  %tmp38 = ptrtoint i64* %arg2 to i64
  store i64 %tmp38, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-56 = alloca i64, align 8
  %stack_var_-32 = alloca i64, align 8
  %v0_f722 = load i64, i64* @r12, align 8
  %v0_f724 = load i64, i64* @rsi, align 8
  store i64 %v0_f724, i64* @r13, align 8
  %v0_f727 = load i64, i64* @rbp, align 8
  %v0_f728 = load i64, i64* @rbx, align 8
  store i64 %v0_f728, i64* %stack_var_-32, align 8
  %v0_f729 = load i64, i64* @rdx, align 8
  store i64 %v0_f729, i64* @r12, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v16_f72f = ptrtoint i64* %stack_var_-56 to i64
  %v0_f733 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v1_f743 = icmp eq i64 %arg1, 0
  br i1 %v1_f743, label %dec_label_pc_f860, label %dec_label_pc_f720.dec_label_pc_f74c_crit_edge

dec_label_pc_f720.dec_label_pc_f74c_crit_edge:    ; preds = %dec_label_pc_f720
  %v0_f74e.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_f74c

dec_label_pc_f74c:                                ; preds = %dec_label_pc_f720.dec_label_pc_f74c_crit_edge, %dec_label_pc_f878, %dec_label_pc_f860
  %v0_f753 = phi i64 [ %v0_f74e.pre, %dec_label_pc_f720.dec_label_pc_f74c_crit_edge ], [ %v4_f87f, %dec_label_pc_f878 ], [ %v4_f867, %dec_label_pc_f860 ]
  store i64 0, i64* @rbp, align 8
  %v1_f74e = inttoptr i64 %v0_f753 to i8*
  %v2_f74e = load i8, i8* %v1_f74e, align 1
  %v12_f74e = icmp eq i8 %v2_f74e, 39
  %v1_f751 = icmp eq i1 %v12_f74e, false
  br i1 %v1_f751, label %dec_label_pc_f75c, label %dec_label_pc_f753

dec_label_pc_f753:                                ; preds = %dec_label_pc_f74c
  %v1_f753 = add i64 %v0_f753, 1
  store i64 %v1_f753, i64* @rbx, align 8
  store i64 4, i64* @rbp, align 8
  br label %dec_label_pc_f75c

dec_label_pc_f75c:                                ; preds = %dec_label_pc_f753, %dec_label_pc_f74c
  %v0_f76f = phi i64 [ %v1_f753, %dec_label_pc_f753 ], [ %v0_f753, %dec_label_pc_f74c ]
  store i64 ptrtoint (i64* @global_var_1a438.422 to i64), i64* @rdx, align 8
  store i64 ptrtoint ([2 x i8*]* @global_var_21f9b0.425 to i64), i64* @rsi, align 8
  store i64 4, i64* @rcx, align 8
  store i64 %v0_f76f, i64* @rdi, align 8
  %v7_f772 = call i64 @function_c2c0(i64 %v0_f76f, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @global_var_21f9b0.425, i64 0, i64 0), i64* nonnull @global_var_1a438.422, i64 4)
  store i64 %v7_f772, i64* %rax.global-to-local, align 8
  %v4_f777 = trunc i64 %v7_f772 to i32
  %v6_f777 = icmp slt i32 %v4_f777, 0
  br i1 %v6_f777, label %dec_label_pc_f7b8, label %dec_label_pc_f77b

dec_label_pc_f77b:                                ; preds = %dec_label_pc_f75c
  store i64 ptrtoint (i64* @global_var_1a438.422 to i64), i64* @rdx, align 8
  %v0_f784 = load i64, i64* @r12, align 8
  %v1_f784 = inttoptr i64 %v0_f784 to i64*
  store i64 1, i64* %v1_f784, align 8
  %v0_f78c = load i64, i64* @rbp, align 8
  %v1_f78c = trunc i64 %v0_f78c to i32
  %v2_f78c = load i64, i64* @rdx, align 8
  %v3_f78c = load i64, i64* %rax.global-to-local, align 8
  %v4_f78c = mul i64 %v3_f78c, 4
  %v5_f78c = add i64 %v4_f78c, %v2_f78c
  %v6_f78c = inttoptr i64 %v5_f78c to i32*
  %v7_f78c = load i32, i32* %v6_f78c, align 4
  %v8_f78c = or i32 %v7_f78c, %v1_f78c
  %v15_f78c = zext i32 %v8_f78c to i64
  store i64 %v15_f78c, i64* @rbp, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v2_f791 = load i64, i64* @r13, align 8
  %v3_f791 = inttoptr i64 %v2_f791 to i32*
  store i32 %v8_f78c, i32* %v3_f791, align 4
  br label %dec_label_pc_f795

dec_label_pc_f795:                                ; preds = %dec_label_pc_f8ea, %dec_label_pc_f8a1, %dec_label_pc_f82d, %dec_label_pc_f824, %dec_label_pc_f77b
  store i64 %v0_f733, i64* @rcx, align 8
  %v1_f79a = call i64 @__readfsqword(i64 40)
  %v2_f79a = xor i64 %v1_f79a, %v0_f733
  %v3_f79a = icmp eq i64 %v2_f79a, 0
  store i64 %v2_f79a, i64* @rcx, align 8
  %v1_f7a3 = icmp eq i1 %v3_f79a, false
  br i1 %v1_f7a3, label %dec_label_pc_f901, label %dec_label_pc_f7a9

dec_label_pc_f7a9:                                ; preds = %dec_label_pc_f795
  %v2_f7ad = load i64, i64* %stack_var_-32, align 8
  store i64 %v2_f7ad, i64* @rbx, align 8
  store i64 %v0_f727, i64* @rbp, align 8
  store i64 %v0_f722, i64* @r12, align 8
  %v0_f7b3 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_f7b3

dec_label_pc_f7b8:                                ; preds = %dec_label_pc_f75c
  store i64 ptrtoint ([18 x i8]* @global_var_1a426.426 to i64), i64* @r8, align 8
  store i64 0, i64* @rdx, align 8
  %v2_f7c1 = trunc i64 %v16_f72f to i32
  store i64 %v16_f72f, i64* @rsi, align 8
  %v0_f7c4 = load i64, i64* @r12, align 8
  store i64 %v0_f7c4, i64* @rcx, align 8
  %v0_f7c7 = load i64, i64* @rbx, align 8
  store i64 %v0_f7c7, i64* @rdi, align 8
  %v8_f7ca = inttoptr i64 %v0_f7c4 to i64*
  %v12_f7ca = load i64, i64* @r9, align 8
  %v13_f7ca = call i64 @function_14e20(i64 %v0_f7c7, i32 %v2_f7c1, i32 0, i64* %v8_f7ca, i64* bitcast ([18 x i8]* @global_var_1a426.426 to i64*), i64 %v12_f7ca)
  store i64 %v13_f7ca, i64* %rax.global-to-local, align 8
  %v4_f7cf = trunc i64 %v13_f7ca to i32
  %v5_f7cf = icmp eq i32 %v4_f7cf, 0
  %v1_f7d1 = icmp eq i1 %v5_f7cf, false
  br i1 %v1_f7d1, label %dec_label_pc_f818, label %dec_label_pc_f7d3

dec_label_pc_f7d3:                                ; preds = %dec_label_pc_f7b8
  %v0_f7d3 = load i64, i64* @rbx, align 8
  %v1_f7d3 = inttoptr i64 %v0_f7d3 to i8*
  %v2_f7d3 = load i8, i8* %v1_f7d3, align 1
  %v3_f7d3 = zext i8 %v2_f7d3 to i64
  store i64 %v3_f7d3, i64* @rsi, align 8
  %v1_f7d6 = add nsw i64 %v3_f7d3, -48
  store i64 %v1_f7d6, i64* @rdx, align 8
  %v1_f7d9 = trunc i64 %v1_f7d6 to i8
  %tmp56 = icmp ult i8 %v1_f7d9, 10
  br i1 %tmp56, label %dec_label_pc_f808, label %dec_label_pc_f7de

dec_label_pc_f7de:                                ; preds = %dec_label_pc_f7d3
  %v2_f7de = load i64, i64* %stack_var_-56, align 8
  store i64 %v2_f7de, i64* @rcx, align 8
  %v12_f7e2 = icmp eq i64 %v0_f7d3, %v2_f7de
  %v1_f7e5 = icmp eq i1 %v12_f7e2, false
  br i1 %v1_f7e5, label %dec_label_pc_f7f9, label %dec_label_pc_f8c0

dec_label_pc_f7f0:                                ; preds = %dec_label_pc_f7f9
  %v12_f7f0 = icmp eq i64 %v1_f7f9, %v2_f7de
  br i1 %v12_f7f0, label %dec_label_pc_f8c0, label %dec_label_pc_f7f9

dec_label_pc_f7f9:                                ; preds = %dec_label_pc_f7de, %dec_label_pc_f7f0
  %v0_f7f9 = phi i64 [ %v1_f7f9, %dec_label_pc_f7f0 ], [ %v0_f7d3, %dec_label_pc_f7de ]
  %v1_f7f9 = add i64 %v0_f7f9, 1
  store i64 %v1_f7f9, i64* @rbx, align 8
  %v1_f7fd = inttoptr i64 %v1_f7f9 to i8*
  %v2_f7fd = load i8, i8* %v1_f7fd, align 1
  %v3_f7fd = zext i8 %v2_f7fd to i64
  store i64 %v3_f7fd, i64* @rdi, align 8
  %v1_f800 = add nsw i64 %v3_f7fd, -48
  store i64 %v1_f800, i64* @rdx, align 8
  %v1_f803 = trunc i64 %v1_f800 to i8
  %tmp57 = icmp ult i8 %v1_f803, 10
  br i1 %tmp57, label %dec_label_pc_f808, label %dec_label_pc_f7f0

dec_label_pc_f808:                                ; preds = %dec_label_pc_f7f9, %dec_label_pc_f8d8, %dec_label_pc_f8ca, %dec_label_pc_f7d3
  %v0_f80c = load i64, i64* @rbp, align 8
  %v1_f80c = trunc i64 %v0_f80c to i32
  %v2_f80c = load i64, i64* @r13, align 8
  %v3_f80c = inttoptr i64 %v2_f80c to i32*
  store i32 %v1_f80c, i32* %v3_f80c, align 4
  br label %dec_label_pc_f824

dec_label_pc_f818:                                ; preds = %dec_label_pc_f7b8
  store i64 0, i64* @rdx, align 8
  %v0_f81c = load i64, i64* @r13, align 8
  %v1_f81c = inttoptr i64 %v0_f81c to i32*
  store i32 0, i32* %v1_f81c, align 4
  br label %dec_label_pc_f824

dec_label_pc_f824:                                ; preds = %dec_label_pc_f818, %dec_label_pc_f808
  %v0_f824 = load i64, i64* @rdx, align 8
  %v1_f824 = icmp eq i64 %v0_f824, 0
  %v1_f827 = icmp eq i1 %v1_f824, false
  br i1 %v1_f827, label %dec_label_pc_f795, label %dec_label_pc_f82d

dec_label_pc_f82d:                                ; preds = %dec_label_pc_f824
  store i64 ptrtoint ([16 x i8]* @global_var_1a416.427 to i64), i64* @rdi, align 8
  %v3_f834 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_1a416.427, i64 0, i64 0))
  %v5_f839 = icmp eq i8* %v3_f834, null
  %v1_f845 = select i1 %v5_f839, i64 1024, i64 512
  %v1_f84b = load i64, i64* @r12, align 8
  %v2_f84b = inttoptr i64 %v1_f84b to i64*
  store i64 %v1_f845, i64* %v2_f84b, align 8
  store i64 4, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_f795

dec_label_pc_f860:                                ; preds = %dec_label_pc_f720
  store i64 ptrtoint ([11 x i8]* @global_var_17e68.126 to i64), i64* @rdi, align 8
  %v3_f867 = call i8* @getenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_17e68.126, i64 0, i64 0))
  %v4_f867 = ptrtoint i8* %v3_f867 to i64
  store i64 %v4_f867, i64* %rax.global-to-local, align 8
  %v1_f86c = icmp eq i8* %v3_f867, null
  store i64 %v4_f867, i64* @rbx, align 8
  %v1_f872 = icmp eq i1 %v1_f86c, false
  br i1 %v1_f872, label %dec_label_pc_f74c, label %dec_label_pc_f878

dec_label_pc_f878:                                ; preds = %dec_label_pc_f860
  store i64 ptrtoint ([10 x i8]* @global_var_1a40c.428 to i64), i64* @rdi, align 8
  %v3_f87f = call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_1a40c.428, i64 0, i64 0))
  %v4_f87f = ptrtoint i8* %v3_f87f to i64
  store i64 %v4_f87f, i64* %rax.global-to-local, align 8
  %v1_f884 = icmp eq i8* %v3_f87f, null
  store i64 %v4_f87f, i64* @rbx, align 8
  %v1_f88a = icmp eq i1 %v1_f884, false
  br i1 %v1_f88a, label %dec_label_pc_f74c, label %dec_label_pc_f890

dec_label_pc_f890:                                ; preds = %dec_label_pc_f878
  store i64 ptrtoint ([16 x i8]* @global_var_1a416.427 to i64), i64* @rdi, align 8
  %v3_f897 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_1a416.427, i64 0, i64 0))
  %v5_f897 = ptrtoint i8* %v3_f897 to i64
  store i64 %v5_f897, i64* %rax.global-to-local, align 8
  %sext = mul i64 %v5_f897, 4294967296
  %v2_f89c = icmp eq i64 %sext, 0
  %v0_f8ea = load i64, i64* @r12, align 8
  %v1_f8ea = inttoptr i64 %v0_f8ea to i64*
  br i1 %v2_f89c, label %dec_label_pc_f8ea, label %dec_label_pc_f8a1

dec_label_pc_f8a1:                                ; preds = %dec_label_pc_f890
  store i64 512, i64* %v1_f8ea, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_f8ab = load i64, i64* @r13, align 8
  %v1_f8ab = inttoptr i64 %v0_f8ab to i32*
  store i32 0, i32* %v1_f8ab, align 4
  br label %dec_label_pc_f795

dec_label_pc_f8c0:                                ; preds = %dec_label_pc_f7f0, %dec_label_pc_f7de
  %v1_f8c0 = add i64 %v2_f7de, -1
  %v2_f8c0 = inttoptr i64 %v1_f8c0 to i8*
  %v3_f8c0 = load i8, i8* %v2_f8c0, align 1
  %v13_f8c0 = icmp eq i8 %v3_f8c0, 66
  %v0_f8d8 = load i64, i64* @rbp, align 8
  br i1 %v13_f8c0, label %dec_label_pc_f8d8, label %dec_label_pc_f8c6

dec_label_pc_f8c6:                                ; preds = %dec_label_pc_f8c0
  %v11_f8c6 = or i64 %v0_f8d8, 128
  br label %dec_label_pc_f8ca

dec_label_pc_f8ca:                                ; preds = %dec_label_pc_f8d8, %dec_label_pc_f8c6
  %v0_f8ca = phi i64 [ %v9_f8d8, %dec_label_pc_f8d8 ], [ %v11_f8c6, %dec_label_pc_f8c6 ]
  %v2_f8ca = and i64 %v0_f8ca, 4294967263
  %v9_f8ca = or i64 %v2_f8ca, 32
  store i64 %v9_f8ca, i64* @rbp, align 8
  br label %dec_label_pc_f808

dec_label_pc_f8d8:                                ; preds = %dec_label_pc_f8c0
  %v2_f8d8 = and i64 %v0_f8d8, 4294966911
  %v9_f8d8 = or i64 %v2_f8d8, 384
  store i64 %v9_f8d8, i64* @rbp, align 8
  %v1_f8de = add i64 %v2_f7de, -2
  %v2_f8de = inttoptr i64 %v1_f8de to i8*
  %v3_f8de = load i8, i8* %v2_f8de, align 1
  %v13_f8de = icmp eq i8 %v3_f8de, 105
  %v1_f8e2 = icmp eq i1 %v13_f8de, false
  br i1 %v1_f8e2, label %dec_label_pc_f808, label %dec_label_pc_f8ca

dec_label_pc_f8ea:                                ; preds = %dec_label_pc_f890
  store i64 ptrtoint (i32* @global_var_400.157 to i64), i64* %v1_f8ea, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_f8f4 = load i64, i64* @r13, align 8
  %v1_f8f4 = inttoptr i64 %v0_f8f4 to i32*
  store i32 0, i32* %v1_f8f4, align 4
  br label %dec_label_pc_f795

dec_label_pc_f901:                                ; preds = %dec_label_pc_f795
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_f910(i64 %arg1) local_unnamed_addr {
dec_label_pc_f910:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_f913 = load i64, i64* @rbx, align 8
  store i64 %v0_f913, i64* %stack_var_-24, align 8
  %v0_f914 = load i32*, i32** @global_var_2213f8.429, align 8
  %v1_f914 = ptrtoint i32* %v0_f914 to i64
  store i64 %v1_f914, i64* @rbx, align 8
  %v1_f91b = icmp eq i32* %v0_f914, null
  %.pre = trunc i64 %arg1 to i32
  br i1 %v1_f91b, label %dec_label_pc_f93d, label %dec_label_pc_f920

dec_label_pc_f920:                                ; preds = %dec_label_pc_f910
  %v4_f920 = load i32, i32* %v0_f914, align 4
  %v15_f920 = icmp eq i32 %.pre, %v4_f920
  %v1_f922 = icmp eq i1 %v15_f920, false
  br i1 %v1_f922, label %dec_label_pc_f934, label %dec_label_pc_f990

dec_label_pc_f930:                                ; preds = %dec_label_pc_f934
  %v1_f930 = inttoptr i64 %v3_f934 to i32*
  %v2_f930 = load i32, i32* %v1_f930, align 4
  %v15_f930 = icmp eq i32 %v2_f930, %.pre
  br i1 %v15_f930, label %dec_label_pc_f990.loopexit, label %dec_label_pc_f934

dec_label_pc_f934:                                ; preds = %dec_label_pc_f920, %dec_label_pc_f930
  %v0_f934 = phi i64 [ %v3_f934, %dec_label_pc_f930 ], [ %v1_f914, %dec_label_pc_f920 ]
  %v1_f934 = add i64 %v0_f934, 8
  %v2_f934 = inttoptr i64 %v1_f934 to i64*
  %v3_f934 = load i64, i64* %v2_f934, align 8
  store i64 %v3_f934, i64* @rbx, align 8
  %v1_f938 = icmp eq i64 %v3_f934, 0
  %v1_f93b = icmp eq i1 %v1_f938, false
  br i1 %v1_f93b, label %dec_label_pc_f930, label %dec_label_pc_f93d.loopexit

dec_label_pc_f93d.loopexit:                       ; preds = %dec_label_pc_f934
  br label %dec_label_pc_f93d

dec_label_pc_f93d:                                ; preds = %dec_label_pc_f910, %dec_label_pc_f93d.loopexit
  store i64 %arg1, i64* %rbp.global-to-local, align 8
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* %r12.global-to-local, align 8
  %v2_f946 = call %passwd* @getpwuid(i32 %.pre)
  %v3_f946 = ptrtoint %passwd* %v2_f946 to i64
  store i64 %v3_f946, i64* %rax.global-to-local, align 8
  %v1_f94b = icmp eq %passwd* %v2_f946, null
  store i64 24, i64* @rdi, align 8
  br i1 %v1_f94b, label %dec_label_pc_f968, label %dec_label_pc_f955

dec_label_pc_f955:                                ; preds = %dec_label_pc_f93d
  %v1_f955 = bitcast %passwd* %v2_f946 to i64*
  %v2_f955 = load i64, i64* %v1_f955, align 8
  store i64 %v2_f955, i64* %r12.global-to-local, align 8
  %v1_f958 = inttoptr i64 %v2_f955 to i8*
  store i64 %v2_f955, i64* @rdi, align 8
  %v3_f95b = call i32 @strlen(i8* %v1_f958)
  %v5_f95b = sext i32 %v3_f95b to i64
  store i64 %v5_f95b, i64* %rax.global-to-local, align 8
  %v1_f960 = add nsw i64 %v5_f95b, 24
  %v1_f964 = and i64 %v1_f960, -8
  store i64 %v1_f964, i64* @rdi, align 8
  br label %dec_label_pc_f968

dec_label_pc_f968:                                ; preds = %dec_label_pc_f955, %dec_label_pc_f93d
  %v0_f968 = phi i64 [ %v1_f964, %dec_label_pc_f955 ], [ 24, %dec_label_pc_f93d ]
  %v1_f968 = call i64 @function_14480(i64 %v0_f968)
  store i64 %v1_f968, i64* %rax.global-to-local, align 8
  %v1_f96d = add i64 %v1_f968, 16
  %v2_f96d = inttoptr i64 %v1_f96d to i8*
  store i64 %v1_f96d, i64* @rdi, align 8
  %v0_f971 = load i64, i64* %rbp.global-to-local, align 8
  %v1_f971 = trunc i64 %v0_f971 to i32
  %v3_f971 = inttoptr i64 %v1_f968 to i32*
  store i32 %v1_f971, i32* %v3_f971, align 4
  %v0_f973 = load i64, i64* %r12.global-to-local, align 8
  %v1_f973 = inttoptr i64 %v0_f973 to i8*
  store i64 %v0_f973, i64* @rsi, align 8
  %v0_f976 = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_f976, i64* %rbx.global-to-local, align 8
  %v6_f979 = call i8* @strcpy(i8* %v2_f96d, i8* %v1_f973)
  %v0_f97e = load i32*, i32** @global_var_2213f8.429, align 8
  %v1_f97e = ptrtoint i32* %v0_f97e to i64
  store i64 %v1_f97e, i64* %rax.global-to-local, align 8
  %v1_f985 = inttoptr i64 %v0_f976 to i32*
  store i32* %v1_f985, i32** @global_var_2213f8.429, align 8
  %v2_f98c = add i64 %v0_f976, 8
  %v3_f98c = inttoptr i64 %v2_f98c to i64*
  store i64 %v1_f97e, i64* %v3_f98c, align 8
  %v0_f990.pre = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_f990

dec_label_pc_f990.loopexit:                       ; preds = %dec_label_pc_f930
  br label %dec_label_pc_f990

dec_label_pc_f990:                                ; preds = %dec_label_pc_f990.loopexit, %dec_label_pc_f920, %dec_label_pc_f968
  %v0_f996 = phi i64 [ %v3_f934, %dec_label_pc_f990.loopexit ], [ %v1_f914, %dec_label_pc_f920 ], [ %v0_f990.pre, %dec_label_pc_f968 ]
  %v1_f990 = add i64 %v0_f996, 16
  %v2_f990 = inttoptr i64 %v1_f990 to i8*
  %v3_f990 = load i8, i8* %v2_f990, align 1
  %v10_f990 = icmp eq i8 %v3_f990, 0
  br i1 %v10_f990, label %dec_label_pc_f9a0, label %dec_label_pc_f99a

dec_label_pc_f99a:                                ; preds = %dec_label_pc_f990, %dec_label_pc_f9a0
  %storemerge = phi i64 [ 0, %dec_label_pc_f9a0 ], [ %v1_f990, %dec_label_pc_f990 ]
  store i64 %storemerge, i64* %rax.global-to-local, align 8
  %v2_f99a = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_f99a, i64* @rbx, align 8
  ret i64 %storemerge

dec_label_pc_f9a0:                                ; preds = %dec_label_pc_f990
  br label %dec_label_pc_f99a
}

define i64 @function_f9b0(i64 %arg1) local_unnamed_addr {
dec_label_pc_f9b0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_f9b0 = load i64, i64* %r12.global-to-local, align 8
  %v0_f9b2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_f9b3 = load i64, i64* @rdi, align 8
  store i64 %v0_f9b3, i64* %r12.global-to-local, align 8
  %v0_f9b6 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_f9b6, i64* %stack_var_-24, align 8
  %v0_f9b7 = load i32*, i32** @global_var_2213f8.429, align 8
  %v1_f9b7 = ptrtoint i32* %v0_f9b7 to i64
  store i64 %v1_f9b7, i64* %rbx.global-to-local, align 8
  %v1_f9be = icmp eq i32* %v0_f9b7, null
  br i1 %v1_f9be, label %dec_label_pc_fa00, label %dec_label_pc_f9c3

dec_label_pc_f9c3:                                ; preds = %dec_label_pc_f9b0
  %v3_f9c3 = urem i64 %v0_f9b3, 256
  store i64 %v3_f9c3, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_f9d9

dec_label_pc_f9d0:                                ; preds = %dec_label_pc_f9df.dec_label_pc_f9d0_crit_edge, %dec_label_pc_f9d9
  %v0_f9d0 = phi i64 [ %v0_f9d0.pre, %dec_label_pc_f9df.dec_label_pc_f9d0_crit_edge ], [ %v0_f9df, %dec_label_pc_f9d9 ]
  %v1_f9d0 = add i64 %v0_f9d0, 8
  %v2_f9d0 = inttoptr i64 %v1_f9d0 to i64*
  %v3_f9d0 = load i64, i64* %v2_f9d0, align 8
  store i64 %v3_f9d0, i64* %rbx.global-to-local, align 8
  %v1_f9d4 = icmp eq i64 %v3_f9d0, 0
  br i1 %v1_f9d4, label %dec_label_pc_fa00, label %dec_label_pc_f9d0.dec_label_pc_f9d9_crit_edge

dec_label_pc_f9d0.dec_label_pc_f9d9_crit_edge:    ; preds = %dec_label_pc_f9d0
  %v4_f9d9.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_f9d9

dec_label_pc_f9d9:                                ; preds = %dec_label_pc_f9d0.dec_label_pc_f9d9_crit_edge, %dec_label_pc_f9c3
  %v4_f9d9 = phi i64 [ %v4_f9d9.pre, %dec_label_pc_f9d0.dec_label_pc_f9d9_crit_edge ], [ %v3_f9c3, %dec_label_pc_f9c3 ]
  %v0_f9df = phi i64 [ %v3_f9d0, %dec_label_pc_f9d0.dec_label_pc_f9d9_crit_edge ], [ %v1_f9b7, %dec_label_pc_f9c3 ]
  %v1_f9d9 = add i64 %v0_f9df, 16
  %v2_f9d9 = inttoptr i64 %v1_f9d9 to i8*
  %v3_f9d9 = load i8, i8* %v2_f9d9, align 1
  %v5_f9d9 = trunc i64 %v4_f9d9 to i8
  %v16_f9d9 = icmp eq i8 %v3_f9d9, %v5_f9d9
  %v1_f9dd = icmp eq i1 %v16_f9d9, false
  br i1 %v1_f9dd, label %dec_label_pc_f9d0, label %dec_label_pc_f9df

dec_label_pc_f9df:                                ; preds = %dec_label_pc_f9d9
  store i64 %v1_f9d9, i64* @rdi, align 8
  %v0_f9e3 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_f9e3, i64* @rsi, align 8
  %v4_f9e6 = inttoptr i64 %v0_f9e3 to i8*
  %v5_f9e6 = call i32 @strcmp(i8* %v2_f9d9, i8* %v4_f9e6)
  %v5_f9eb = icmp eq i32 %v5_f9e6, 0
  %v1_f9ed = icmp eq i1 %v5_f9eb, false
  br i1 %v1_f9ed, label %dec_label_pc_f9df.dec_label_pc_f9d0_crit_edge, label %dec_label_pc_f9ef

dec_label_pc_f9df.dec_label_pc_f9d0_crit_edge:    ; preds = %dec_label_pc_f9df
  %v0_f9d0.pre = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_f9d0

dec_label_pc_f9ef:                                ; preds = %dec_label_pc_f9df, %dec_label_pc_fa74
  %v0_f9ef = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_f9f2

dec_label_pc_f9f2:                                ; preds = %dec_label_pc_fa90, %dec_label_pc_f9ef
  %storemerge = phi i64 [ 0, %dec_label_pc_fa90 ], [ %v0_f9ef, %dec_label_pc_f9ef ]
  %v2_f9f2 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_f9f2, i64* %rbx.global-to-local, align 8
  store i64 %v0_f9b2, i64* %rbp.global-to-local, align 8
  store i64 %v0_f9b0, i64* %r12.global-to-local, align 8
  ret i64 %storemerge

dec_label_pc_fa00:                                ; preds = %dec_label_pc_f9d0, %dec_label_pc_f9b0
  %v0_fa00 = load i32, i32* @global_var_2213f0.430, align 4
  %v1_fa00 = sext i32 %v0_fa00 to i64
  store i64 %v1_fa00, i64* @rbx, align 8
  %v1_fa07 = icmp eq i32 %v0_fa00, 0
  br i1 %v1_fa07, label %dec_label_pc_fa40, label %dec_label_pc_fa0c

dec_label_pc_fa0c:                                ; preds = %dec_label_pc_fa00
  %v2_fa0c = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v3_fa0c = zext i8 %v2_fa0c to i64
  store i64 %v3_fa0c, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_fa21

dec_label_pc_fa18:                                ; preds = %dec_label_pc_fa27.dec_label_pc_fa18_crit_edge, %dec_label_pc_fa21
  %v0_fa18 = phi i64 [ %v0_fa18.pre, %dec_label_pc_fa27.dec_label_pc_fa18_crit_edge ], [ %v0_fa27, %dec_label_pc_fa21 ]
  %v1_fa18 = add i64 %v0_fa18, 8
  %v2_fa18 = inttoptr i64 %v1_fa18 to i64*
  %v3_fa18 = load i64, i64* %v2_fa18, align 8
  store i64 %v3_fa18, i64* @rbx, align 8
  %v1_fa1c = icmp eq i64 %v3_fa18, 0
  br i1 %v1_fa1c, label %dec_label_pc_fa40, label %dec_label_pc_fa18.dec_label_pc_fa21_crit_edge

dec_label_pc_fa18.dec_label_pc_fa21_crit_edge:    ; preds = %dec_label_pc_fa18
  %v4_fa21.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_fa21

dec_label_pc_fa21:                                ; preds = %dec_label_pc_fa18.dec_label_pc_fa21_crit_edge, %dec_label_pc_fa0c
  %v4_fa21 = phi i64 [ %v4_fa21.pre, %dec_label_pc_fa18.dec_label_pc_fa21_crit_edge ], [ %v3_fa0c, %dec_label_pc_fa0c ]
  %v0_fa27 = phi i64 [ %v3_fa18, %dec_label_pc_fa18.dec_label_pc_fa21_crit_edge ], [ %v1_fa00, %dec_label_pc_fa0c ]
  %v1_fa21 = add i64 %v0_fa27, 16
  %v2_fa21 = inttoptr i64 %v1_fa21 to i8*
  %v3_fa21 = load i8, i8* %v2_fa21, align 1
  %v5_fa21 = trunc i64 %v4_fa21 to i8
  %v16_fa21 = icmp eq i8 %v3_fa21, %v5_fa21
  %v1_fa25 = icmp eq i1 %v16_fa21, false
  br i1 %v1_fa25, label %dec_label_pc_fa18, label %dec_label_pc_fa27

dec_label_pc_fa27:                                ; preds = %dec_label_pc_fa21
  store i64 %v1_fa21, i64* @rdi, align 8
  %v0_fa2b = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_fa2b, i64* @rsi, align 8
  %v4_fa2e = inttoptr i64 %v0_fa2b to i8*
  %v5_fa2e = call i32 @strcmp(i8* %v2_fa21, i8* %v4_fa2e)
  %v5_fa33 = icmp eq i32 %v5_fa2e, 0
  %v1_fa35 = icmp eq i1 %v5_fa33, false
  br i1 %v1_fa35, label %dec_label_pc_fa27.dec_label_pc_fa18_crit_edge, label %dec_label_pc_fa37

dec_label_pc_fa27.dec_label_pc_fa18_crit_edge:    ; preds = %dec_label_pc_fa27
  %v0_fa18.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_fa18

dec_label_pc_fa37:                                ; preds = %dec_label_pc_fa27
  %v2_fa37 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_fa37, i64* %rbx.global-to-local, align 8
  store i64 %v0_f9b2, i64* %rbp.global-to-local, align 8
  store i64 %v0_f9b0, i64* %r12.global-to-local, align 8
  ret i64 0

dec_label_pc_fa40:                                ; preds = %dec_label_pc_fa18, %dec_label_pc_fa00
  %v0_fa40 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_fa40, i64* @rdi, align 8
  %v1_fa43 = inttoptr i64 %v0_fa40 to i8*
  %v2_fa43 = call %passwd* @getpwnam(i8* %v1_fa43)
  %v4_fa43 = ptrtoint %passwd* %v2_fa43 to i64
  store i64 %v0_fa40, i64* @rdi, align 8
  store i64 %v4_fa43, i64* %rbp.global-to-local, align 8
  %v1_fa4e = inttoptr i64 %v0_fa40 to i8*
  %v2_fa4e = call i32 @strlen(i8* %v1_fa4e)
  %v4_fa4e = sext i32 %v2_fa4e to i64
  %v1_fa53 = add nsw i64 %v4_fa4e, 24
  %v1_fa57 = and i64 %v1_fa53, -8
  store i64 %v1_fa57, i64* @rdi, align 8
  %v1_fa5b = call i64 @function_14480(i64 %v1_fa57)
  %v1_fa60 = add i64 %v1_fa5b, 16
  %v2_fa60 = inttoptr i64 %v1_fa60 to i8*
  store i64 %v1_fa60, i64* @rdi, align 8
  %v0_fa64 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_fa64, i64* @rsi, align 8
  store i64 %v1_fa5b, i64* %rbx.global-to-local, align 8
  %v4_fa6a = inttoptr i64 %v0_fa64 to i8*
  %v5_fa6a = call i8* @strcpy(i8* %v2_fa60, i8* %v4_fa6a)
  %v1_fa6f = icmp eq %passwd* %v2_fa43, null
  br i1 %v1_fa6f, label %dec_label_pc_fa90, label %dec_label_pc_fa74

dec_label_pc_fa74:                                ; preds = %dec_label_pc_fa40
  %v1_fa74 = add i64 %v4_fa43, 16
  %v2_fa74 = inttoptr i64 %v1_fa74 to i32*
  %v3_fa74 = load i32, i32* %v2_fa74, align 4
  %v2_fa77 = load i64, i64* %rbx.global-to-local, align 8
  %v3_fa77 = inttoptr i64 %v2_fa77 to i32*
  store i32 %v3_fa74, i32* %v3_fa77, align 4
  %v0_fa79 = load i32*, i32** @global_var_2213f8.429, align 8
  %v1_fa79 = ptrtoint i32* %v0_fa79 to i64
  %v0_fa80 = load i64, i64* %rbx.global-to-local, align 8
  %v1_fa80 = inttoptr i64 %v0_fa80 to i32*
  store i32* %v1_fa80, i32** @global_var_2213f8.429, align 8
  %v2_fa87 = add i64 %v0_fa80, 8
  %v3_fa87 = inttoptr i64 %v2_fa87 to i64*
  store i64 %v1_fa79, i64* %v3_fa87, align 8
  br label %dec_label_pc_f9ef

dec_label_pc_fa90:                                ; preds = %dec_label_pc_fa40
  %v0_fa90 = load i32, i32* @global_var_2213f0.430, align 4
  %v1_fa90 = sext i32 %v0_fa90 to i64
  %v0_fa97 = load i64, i64* %rbx.global-to-local, align 8
  %v1_fa97 = trunc i64 %v0_fa97 to i32
  store i32 %v1_fa97, i32* @global_var_2213f0.430, align 4
  %v2_fa9e = add i64 %v0_fa97, 8
  %v3_fa9e = inttoptr i64 %v2_fa9e to i64*
  store i64 %v1_fa90, i64* %v3_fa9e, align 8
  br label %dec_label_pc_f9f2
}

define i64 @function_fab0(i64 %arg1) local_unnamed_addr {
dec_label_pc_fab0:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_fab3 = load i64, i64* @rbx, align 8
  store i64 %v0_fab3, i64* %stack_var_-24, align 8
  %v0_fab4 = load i32*, i32** @global_var_2213e8.431, align 8
  %v1_fab4 = ptrtoint i32* %v0_fab4 to i64
  store i64 %v1_fab4, i64* @rbx, align 8
  %v1_fabb = icmp eq i32* %v0_fab4, null
  %.pre = trunc i64 %arg1 to i32
  br i1 %v1_fabb, label %dec_label_pc_fadd, label %dec_label_pc_fac0

dec_label_pc_fac0:                                ; preds = %dec_label_pc_fab0
  %v4_fac0 = load i32, i32* %v0_fab4, align 4
  %v15_fac0 = icmp eq i32 %.pre, %v4_fac0
  %v1_fac2 = icmp eq i1 %v15_fac0, false
  br i1 %v1_fac2, label %dec_label_pc_fad4, label %dec_label_pc_fb30

dec_label_pc_fad0:                                ; preds = %dec_label_pc_fad4
  %v1_fad0 = inttoptr i64 %v3_fad4 to i32*
  %v2_fad0 = load i32, i32* %v1_fad0, align 4
  %v15_fad0 = icmp eq i32 %v2_fad0, %.pre
  br i1 %v15_fad0, label %dec_label_pc_fb30.loopexit, label %dec_label_pc_fad4

dec_label_pc_fad4:                                ; preds = %dec_label_pc_fac0, %dec_label_pc_fad0
  %v0_fad4 = phi i64 [ %v3_fad4, %dec_label_pc_fad0 ], [ %v1_fab4, %dec_label_pc_fac0 ]
  %v1_fad4 = add i64 %v0_fad4, 8
  %v2_fad4 = inttoptr i64 %v1_fad4 to i64*
  %v3_fad4 = load i64, i64* %v2_fad4, align 8
  store i64 %v3_fad4, i64* @rbx, align 8
  %v1_fad8 = icmp eq i64 %v3_fad4, 0
  %v1_fadb = icmp eq i1 %v1_fad8, false
  br i1 %v1_fadb, label %dec_label_pc_fad0, label %dec_label_pc_fadd.loopexit

dec_label_pc_fadd.loopexit:                       ; preds = %dec_label_pc_fad4
  br label %dec_label_pc_fadd

dec_label_pc_fadd:                                ; preds = %dec_label_pc_fab0, %dec_label_pc_fadd.loopexit
  store i64 %arg1, i64* %rbp.global-to-local, align 8
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* %r12.global-to-local, align 8
  %v2_fae6 = call %group* @getgrgid(i32 %.pre)
  %v3_fae6 = ptrtoint %group* %v2_fae6 to i64
  store i64 %v3_fae6, i64* %rax.global-to-local, align 8
  %v1_faeb = icmp eq %group* %v2_fae6, null
  store i64 24, i64* @rdi, align 8
  br i1 %v1_faeb, label %dec_label_pc_fb08, label %dec_label_pc_faf5

dec_label_pc_faf5:                                ; preds = %dec_label_pc_fadd
  %v1_faf5 = bitcast %group* %v2_fae6 to i64*
  %v2_faf5 = load i64, i64* %v1_faf5, align 8
  store i64 %v2_faf5, i64* %r12.global-to-local, align 8
  %v1_faf8 = inttoptr i64 %v2_faf5 to i8*
  store i64 %v2_faf5, i64* @rdi, align 8
  %v3_fafb = call i32 @strlen(i8* %v1_faf8)
  %v5_fafb = sext i32 %v3_fafb to i64
  store i64 %v5_fafb, i64* %rax.global-to-local, align 8
  %v1_fb00 = add nsw i64 %v5_fafb, 24
  %v1_fb04 = and i64 %v1_fb00, -8
  store i64 %v1_fb04, i64* @rdi, align 8
  br label %dec_label_pc_fb08

dec_label_pc_fb08:                                ; preds = %dec_label_pc_faf5, %dec_label_pc_fadd
  %v0_fb08 = phi i64 [ %v1_fb04, %dec_label_pc_faf5 ], [ 24, %dec_label_pc_fadd ]
  %v1_fb08 = call i64 @function_14480(i64 %v0_fb08)
  store i64 %v1_fb08, i64* %rax.global-to-local, align 8
  %v1_fb0d = add i64 %v1_fb08, 16
  %v2_fb0d = inttoptr i64 %v1_fb0d to i8*
  store i64 %v1_fb0d, i64* @rdi, align 8
  %v0_fb11 = load i64, i64* %rbp.global-to-local, align 8
  %v1_fb11 = trunc i64 %v0_fb11 to i32
  %v3_fb11 = inttoptr i64 %v1_fb08 to i32*
  store i32 %v1_fb11, i32* %v3_fb11, align 4
  %v0_fb13 = load i64, i64* %r12.global-to-local, align 8
  %v1_fb13 = inttoptr i64 %v0_fb13 to i8*
  store i64 %v0_fb13, i64* @rsi, align 8
  %v0_fb16 = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_fb16, i64* %rbx.global-to-local, align 8
  %v6_fb19 = call i8* @strcpy(i8* %v2_fb0d, i8* %v1_fb13)
  %v0_fb1e = load i32*, i32** @global_var_2213e8.431, align 8
  %v1_fb1e = ptrtoint i32* %v0_fb1e to i64
  store i64 %v1_fb1e, i64* %rax.global-to-local, align 8
  %v1_fb25 = inttoptr i64 %v0_fb16 to i32*
  store i32* %v1_fb25, i32** @global_var_2213e8.431, align 8
  %v2_fb2c = add i64 %v0_fb16, 8
  %v3_fb2c = inttoptr i64 %v2_fb2c to i64*
  store i64 %v1_fb1e, i64* %v3_fb2c, align 8
  %v0_fb30.pre = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_fb30

dec_label_pc_fb30.loopexit:                       ; preds = %dec_label_pc_fad0
  br label %dec_label_pc_fb30

dec_label_pc_fb30:                                ; preds = %dec_label_pc_fb30.loopexit, %dec_label_pc_fac0, %dec_label_pc_fb08
  %v0_fb36 = phi i64 [ %v3_fad4, %dec_label_pc_fb30.loopexit ], [ %v1_fab4, %dec_label_pc_fac0 ], [ %v0_fb30.pre, %dec_label_pc_fb08 ]
  %v1_fb30 = add i64 %v0_fb36, 16
  %v2_fb30 = inttoptr i64 %v1_fb30 to i8*
  %v3_fb30 = load i8, i8* %v2_fb30, align 1
  %v10_fb30 = icmp eq i8 %v3_fb30, 0
  br i1 %v10_fb30, label %dec_label_pc_fb40, label %dec_label_pc_fb3a

dec_label_pc_fb3a:                                ; preds = %dec_label_pc_fb30, %dec_label_pc_fb40
  %storemerge = phi i64 [ 0, %dec_label_pc_fb40 ], [ %v1_fb30, %dec_label_pc_fb30 ]
  store i64 %storemerge, i64* %rax.global-to-local, align 8
  %v2_fb3a = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_fb3a, i64* @rbx, align 8
  ret i64 %storemerge

dec_label_pc_fb40:                                ; preds = %dec_label_pc_fb30
  br label %dec_label_pc_fb3a
}

define i64 @function_fb50(i64 %arg1) local_unnamed_addr {
dec_label_pc_fb50:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_fb50 = load i64, i64* %r12.global-to-local, align 8
  %v0_fb52 = load i64, i64* %rbp.global-to-local, align 8
  %v0_fb53 = load i64, i64* @rdi, align 8
  store i64 %v0_fb53, i64* %r12.global-to-local, align 8
  %v0_fb56 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_fb56, i64* %stack_var_-24, align 8
  %v0_fb57 = load i32*, i32** @global_var_2213e8.431, align 8
  %v1_fb57 = ptrtoint i32* %v0_fb57 to i64
  store i64 %v1_fb57, i64* %rbx.global-to-local, align 8
  %v1_fb5e = icmp eq i32* %v0_fb57, null
  br i1 %v1_fb5e, label %dec_label_pc_fba0, label %dec_label_pc_fb63

dec_label_pc_fb63:                                ; preds = %dec_label_pc_fb50
  %v3_fb63 = urem i64 %v0_fb53, 256
  store i64 %v3_fb63, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_fb79

dec_label_pc_fb70:                                ; preds = %dec_label_pc_fb7f.dec_label_pc_fb70_crit_edge, %dec_label_pc_fb79
  %v0_fb70 = phi i64 [ %v0_fb70.pre, %dec_label_pc_fb7f.dec_label_pc_fb70_crit_edge ], [ %v0_fb7f, %dec_label_pc_fb79 ]
  %v1_fb70 = add i64 %v0_fb70, 8
  %v2_fb70 = inttoptr i64 %v1_fb70 to i64*
  %v3_fb70 = load i64, i64* %v2_fb70, align 8
  store i64 %v3_fb70, i64* %rbx.global-to-local, align 8
  %v1_fb74 = icmp eq i64 %v3_fb70, 0
  br i1 %v1_fb74, label %dec_label_pc_fba0, label %dec_label_pc_fb70.dec_label_pc_fb79_crit_edge

dec_label_pc_fb70.dec_label_pc_fb79_crit_edge:    ; preds = %dec_label_pc_fb70
  %v4_fb79.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_fb79

dec_label_pc_fb79:                                ; preds = %dec_label_pc_fb70.dec_label_pc_fb79_crit_edge, %dec_label_pc_fb63
  %v4_fb79 = phi i64 [ %v4_fb79.pre, %dec_label_pc_fb70.dec_label_pc_fb79_crit_edge ], [ %v3_fb63, %dec_label_pc_fb63 ]
  %v0_fb7f = phi i64 [ %v3_fb70, %dec_label_pc_fb70.dec_label_pc_fb79_crit_edge ], [ %v1_fb57, %dec_label_pc_fb63 ]
  %v1_fb79 = add i64 %v0_fb7f, 16
  %v2_fb79 = inttoptr i64 %v1_fb79 to i8*
  %v3_fb79 = load i8, i8* %v2_fb79, align 1
  %v5_fb79 = trunc i64 %v4_fb79 to i8
  %v16_fb79 = icmp eq i8 %v3_fb79, %v5_fb79
  %v1_fb7d = icmp eq i1 %v16_fb79, false
  br i1 %v1_fb7d, label %dec_label_pc_fb70, label %dec_label_pc_fb7f

dec_label_pc_fb7f:                                ; preds = %dec_label_pc_fb79
  store i64 %v1_fb79, i64* @rdi, align 8
  %v0_fb83 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_fb83, i64* @rsi, align 8
  %v4_fb86 = inttoptr i64 %v0_fb83 to i8*
  %v5_fb86 = call i32 @strcmp(i8* %v2_fb79, i8* %v4_fb86)
  %v5_fb8b = icmp eq i32 %v5_fb86, 0
  %v1_fb8d = icmp eq i1 %v5_fb8b, false
  br i1 %v1_fb8d, label %dec_label_pc_fb7f.dec_label_pc_fb70_crit_edge, label %dec_label_pc_fb8f

dec_label_pc_fb7f.dec_label_pc_fb70_crit_edge:    ; preds = %dec_label_pc_fb7f
  %v0_fb70.pre = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_fb70

dec_label_pc_fb8f:                                ; preds = %dec_label_pc_fb7f, %dec_label_pc_fc14
  %v0_fb8f = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_fb92

dec_label_pc_fb92:                                ; preds = %dec_label_pc_fc30, %dec_label_pc_fb8f
  %storemerge = phi i64 [ 0, %dec_label_pc_fc30 ], [ %v0_fb8f, %dec_label_pc_fb8f ]
  %v2_fb92 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_fb92, i64* %rbx.global-to-local, align 8
  store i64 %v0_fb52, i64* %rbp.global-to-local, align 8
  store i64 %v0_fb50, i64* %r12.global-to-local, align 8
  ret i64 %storemerge

dec_label_pc_fba0:                                ; preds = %dec_label_pc_fb70, %dec_label_pc_fb50
  %v0_fba0 = load i32, i32* @global_var_2213e0.432, align 4
  %v1_fba0 = sext i32 %v0_fba0 to i64
  store i64 %v1_fba0, i64* @rbx, align 8
  %v1_fba7 = icmp eq i32 %v0_fba0, 0
  br i1 %v1_fba7, label %dec_label_pc_fbe0, label %dec_label_pc_fbac

dec_label_pc_fbac:                                ; preds = %dec_label_pc_fba0
  %v2_fbac = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v3_fbac = zext i8 %v2_fbac to i64
  store i64 %v3_fbac, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_fbc1

dec_label_pc_fbb8:                                ; preds = %dec_label_pc_fbc7.dec_label_pc_fbb8_crit_edge, %dec_label_pc_fbc1
  %v0_fbb8 = phi i64 [ %v0_fbb8.pre, %dec_label_pc_fbc7.dec_label_pc_fbb8_crit_edge ], [ %v0_fbc7, %dec_label_pc_fbc1 ]
  %v1_fbb8 = add i64 %v0_fbb8, 8
  %v2_fbb8 = inttoptr i64 %v1_fbb8 to i64*
  %v3_fbb8 = load i64, i64* %v2_fbb8, align 8
  store i64 %v3_fbb8, i64* @rbx, align 8
  %v1_fbbc = icmp eq i64 %v3_fbb8, 0
  br i1 %v1_fbbc, label %dec_label_pc_fbe0, label %dec_label_pc_fbb8.dec_label_pc_fbc1_crit_edge

dec_label_pc_fbb8.dec_label_pc_fbc1_crit_edge:    ; preds = %dec_label_pc_fbb8
  %v4_fbc1.pre = load i64, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_fbc1

dec_label_pc_fbc1:                                ; preds = %dec_label_pc_fbb8.dec_label_pc_fbc1_crit_edge, %dec_label_pc_fbac
  %v4_fbc1 = phi i64 [ %v4_fbc1.pre, %dec_label_pc_fbb8.dec_label_pc_fbc1_crit_edge ], [ %v3_fbac, %dec_label_pc_fbac ]
  %v0_fbc7 = phi i64 [ %v3_fbb8, %dec_label_pc_fbb8.dec_label_pc_fbc1_crit_edge ], [ %v1_fba0, %dec_label_pc_fbac ]
  %v1_fbc1 = add i64 %v0_fbc7, 16
  %v2_fbc1 = inttoptr i64 %v1_fbc1 to i8*
  %v3_fbc1 = load i8, i8* %v2_fbc1, align 1
  %v5_fbc1 = trunc i64 %v4_fbc1 to i8
  %v16_fbc1 = icmp eq i8 %v3_fbc1, %v5_fbc1
  %v1_fbc5 = icmp eq i1 %v16_fbc1, false
  br i1 %v1_fbc5, label %dec_label_pc_fbb8, label %dec_label_pc_fbc7

dec_label_pc_fbc7:                                ; preds = %dec_label_pc_fbc1
  store i64 %v1_fbc1, i64* @rdi, align 8
  %v0_fbcb = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_fbcb, i64* @rsi, align 8
  %v4_fbce = inttoptr i64 %v0_fbcb to i8*
  %v5_fbce = call i32 @strcmp(i8* %v2_fbc1, i8* %v4_fbce)
  %v5_fbd3 = icmp eq i32 %v5_fbce, 0
  %v1_fbd5 = icmp eq i1 %v5_fbd3, false
  br i1 %v1_fbd5, label %dec_label_pc_fbc7.dec_label_pc_fbb8_crit_edge, label %dec_label_pc_fbd7

dec_label_pc_fbc7.dec_label_pc_fbb8_crit_edge:    ; preds = %dec_label_pc_fbc7
  %v0_fbb8.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_fbb8

dec_label_pc_fbd7:                                ; preds = %dec_label_pc_fbc7
  %v2_fbd7 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_fbd7, i64* %rbx.global-to-local, align 8
  store i64 %v0_fb52, i64* %rbp.global-to-local, align 8
  store i64 %v0_fb50, i64* %r12.global-to-local, align 8
  ret i64 0

dec_label_pc_fbe0:                                ; preds = %dec_label_pc_fbb8, %dec_label_pc_fba0
  %v0_fbe0 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_fbe0, i64* @rdi, align 8
  %v1_fbe3 = inttoptr i64 %v0_fbe0 to i8*
  %v2_fbe3 = call %group* @getgrnam(i8* %v1_fbe3)
  %v4_fbe3 = ptrtoint %group* %v2_fbe3 to i64
  store i64 %v0_fbe0, i64* @rdi, align 8
  store i64 %v4_fbe3, i64* %rbp.global-to-local, align 8
  %v1_fbee = inttoptr i64 %v0_fbe0 to i8*
  %v2_fbee = call i32 @strlen(i8* %v1_fbee)
  %v4_fbee = sext i32 %v2_fbee to i64
  %v1_fbf3 = add nsw i64 %v4_fbee, 24
  %v1_fbf7 = and i64 %v1_fbf3, -8
  store i64 %v1_fbf7, i64* @rdi, align 8
  %v1_fbfb = call i64 @function_14480(i64 %v1_fbf7)
  %v1_fc00 = add i64 %v1_fbfb, 16
  %v2_fc00 = inttoptr i64 %v1_fc00 to i8*
  store i64 %v1_fc00, i64* @rdi, align 8
  %v0_fc04 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_fc04, i64* @rsi, align 8
  store i64 %v1_fbfb, i64* %rbx.global-to-local, align 8
  %v4_fc0a = inttoptr i64 %v0_fc04 to i8*
  %v5_fc0a = call i8* @strcpy(i8* %v2_fc00, i8* %v4_fc0a)
  %v1_fc0f = icmp eq %group* %v2_fbe3, null
  br i1 %v1_fc0f, label %dec_label_pc_fc30, label %dec_label_pc_fc14

dec_label_pc_fc14:                                ; preds = %dec_label_pc_fbe0
  %v1_fc14 = add i64 %v4_fbe3, 16
  %v2_fc14 = inttoptr i64 %v1_fc14 to i32*
  %v3_fc14 = load i32, i32* %v2_fc14, align 4
  %v2_fc17 = load i64, i64* %rbx.global-to-local, align 8
  %v3_fc17 = inttoptr i64 %v2_fc17 to i32*
  store i32 %v3_fc14, i32* %v3_fc17, align 4
  %v0_fc19 = load i32*, i32** @global_var_2213e8.431, align 8
  %v1_fc19 = ptrtoint i32* %v0_fc19 to i64
  %v0_fc20 = load i64, i64* %rbx.global-to-local, align 8
  %v1_fc20 = inttoptr i64 %v0_fc20 to i32*
  store i32* %v1_fc20, i32** @global_var_2213e8.431, align 8
  %v2_fc27 = add i64 %v0_fc20, 8
  %v3_fc27 = inttoptr i64 %v2_fc27 to i64*
  store i64 %v1_fc19, i64* %v3_fc27, align 8
  br label %dec_label_pc_fb8f

dec_label_pc_fc30:                                ; preds = %dec_label_pc_fbe0
  %v0_fc30 = load i32, i32* @global_var_2213e0.432, align 4
  %v1_fc30 = sext i32 %v0_fc30 to i64
  %v0_fc37 = load i64, i64* %rbx.global-to-local, align 8
  %v1_fc37 = trunc i64 %v0_fc37 to i32
  store i32 %v1_fc37, i32* @global_var_2213e0.432, align 4
  %v2_fc3e = add i64 %v0_fc37, 8
  %v3_fc3e = inttoptr i64 %v2_fc3e to i64*
  store i64 %v1_fc30, i64* %v3_fc3e, align 8
  br label %dec_label_pc_fb92
}

define i64 @function_fc50(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_fc50:
  %sf.global-to-local = alloca i1, align 1
  %zf.global-to-local = alloca i1, align 1
  %tmp10 = ptrtoint i64* %arg2 to i64
  store i64 %arg1, i64* @rdi, align 8
  %v1_fc50 = icmp eq i64 %arg1, 0
  store i1 %v1_fc50, i1* %zf.global-to-local, align 1
  %v2_fc50 = icmp slt i64 %arg1, 0
  store i1 %v2_fc50, i1* %sf.global-to-local, align 1
  %v1_fc53 = add i64 %tmp10, 20
  store i64 %v1_fc53, i64* @rcx, align 8
  %v2_fc57 = inttoptr i64 %v1_fc53 to i8*
  store i8 0, i8* %v2_fc57, align 1
  store i64 -3689348814741910323, i64* @rsi, align 8
  store i64 48, i64* @r8, align 8
  %v0_fc75 = load i1, i1* %sf.global-to-local, align 1
  br i1 %v0_fc75, label %dec_label_pc_fcb3.preheader, label %dec_label_pc_fc80.preheader

dec_label_pc_fc80.preheader:                      ; preds = %dec_label_pc_fc50
  %v0_fc80.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_fc80

dec_label_pc_fcb3.preheader:                      ; preds = %dec_label_pc_fc50
  %v0_fcb6.pre = load i64, i64* @rcx, align 8
  br label %dec_label_pc_fcb3

dec_label_pc_fc80:                                ; preds = %dec_label_pc_fc80.dec_label_pc_fc80_crit_edge, %dec_label_pc_fc80.preheader
  %v0_fc83 = load i64, i64* @rcx, align 8
  %v1_fc83 = add i64 %v0_fc83, -1
  store i64 %v1_fc83, i64* @rcx, align 8
  %v1_fc98 = trunc i64 %v0_fc80.pre to i8
  %v2_fc98 = add i8 %v1_fc98, 48
  store i1 false, i1* %sf.global-to-local, align 1
  %v3_fc9e = inttoptr i64 %v1_fc83 to i8*
  store i8 %v2_fc98, i8* %v3_fc9e, align 1
  %v0_fca4 = load i1, i1* %zf.global-to-local, align 1
  %v1_fca4 = icmp eq i1 %v0_fca4, false
  br i1 %v1_fca4, label %dec_label_pc_fc80.dec_label_pc_fc80_crit_edge, label %dec_label_pc_fca6

dec_label_pc_fc80.dec_label_pc_fc80_crit_edge:    ; preds = %dec_label_pc_fc80
  br label %dec_label_pc_fc80

dec_label_pc_fca6:                                ; preds = %dec_label_pc_fc80
  %v0_fca6 = load i64, i64* @rcx, align 8
  ret i64 %v0_fca6

dec_label_pc_fcb0:                                ; preds = %dec_label_pc_fcb3
  %v0_fcb0 = load i64, i64* @rsi, align 8
  store i64 %v0_fcb0, i64* @rcx, align 8
  %v0_fccf.pre = load i64, i64* @r8, align 8
  br label %dec_label_pc_fcb3

dec_label_pc_fcb3:                                ; preds = %dec_label_pc_fcb3.preheader, %dec_label_pc_fcb0
  %v0_fccf = phi i64 [ 48, %dec_label_pc_fcb3.preheader ], [ %v0_fccf.pre, %dec_label_pc_fcb0 ]
  %v2_fcdb = phi i64 [ %v0_fcb6.pre, %dec_label_pc_fcb3.preheader ], [ %v0_fcb0, %dec_label_pc_fcb0 ]
  %v0_fcb3 = load i64, i64* @rdi, align 8
  %v1_fcb6 = add i64 %v2_fcdb, -1
  store i64 %v1_fcb6, i64* @rsi, align 8
  %v2_fcc8 = lshr i64 %v0_fcb3, 63
  %v12_fcc8 = icmp eq i64 %v2_fcc8, 0
  store i64 %v2_fcc8, i64* @rdx, align 8
  %tmp12 = ashr i64 %v0_fcb3, 63
  %v2_fccf = and i64 %tmp12, 10
  %v3_fccf = add i64 %v2_fccf, %v0_fccf
  %v1_fcd3 = trunc i64 %v3_fccf to i8
  %v3_fcd3 = trunc i64 %v0_fcb3 to i8
  %v4_fcd3 = sub i8 %v1_fcd3, %v3_fcd3
  store i1 %v12_fcc8, i1* %zf.global-to-local, align 1
  store i1 false, i1* %sf.global-to-local, align 1
  store i64 %v2_fcc8, i64* @rdi, align 8
  %v4_fcdb = inttoptr i64 %v1_fcb6 to i8*
  store i8 %v4_fcd3, i8* %v4_fcdb, align 1
  %v0_fcde = load i1, i1* %zf.global-to-local, align 1
  %v1_fcde = icmp eq i1 %v0_fcde, false
  br i1 %v1_fcde, label %dec_label_pc_fcb0, label %dec_label_pc_fce0

dec_label_pc_fce0:                                ; preds = %dec_label_pc_fcb3
  %v0_fce0 = load i64, i64* @rcx, align 8
  %v1_fce0 = add i64 %v0_fce0, -2
  %v10_fce0 = icmp eq i64 %v1_fce0, 0
  store i1 %v10_fce0, i1* %zf.global-to-local, align 1
  %v11_fce0 = icmp slt i64 %v1_fce0, 0
  store i1 %v11_fce0, i1* %sf.global-to-local, align 1
  store i64 %v1_fce0, i64* @rcx, align 8
  %v0_fce4 = load i64, i64* @rsi, align 8
  %v1_fce4 = add i64 %v0_fce4, -1
  %v2_fce4 = inttoptr i64 %v1_fce4 to i8*
  store i8 45, i8* %v2_fce4, align 1
  %v0_fce8 = load i64, i64* @rcx, align 8
  ret i64 %v0_fce8
}

define i64 @function_fcf0(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_fcf0:
  %zf.global-to-local = alloca i1, align 1
  %tmp5 = ptrtoint i64* %arg2 to i64
  store i64 %arg1, i64* @rdi, align 8
  %v1_fcf0 = add i64 %tmp5, 20
  store i64 %v1_fcf0, i64* @rcx, align 8
  %v2_fcf4 = inttoptr i64 %v1_fcf0 to i8*
  store i8 0, i8* %v2_fcf4, align 1
  store i64 -3689348814741910323, i64* @rsi, align 8
  %v0_fd08.pre = load i64, i64* @rdi, align 8
  br label %dec_label_pc_fd08

dec_label_pc_fd08:                                ; preds = %dec_label_pc_fd08.dec_label_pc_fd08_crit_edge, %dec_label_pc_fcf0
  %v0_fd0b = load i64, i64* @rcx, align 8
  %v1_fd0b = add i64 %v0_fd0b, -1
  store i64 %v1_fd0b, i64* @rcx, align 8
  %v1_fd20 = trunc i64 %v0_fd08.pre to i8
  %v2_fd20 = add i8 %v1_fd20, 48
  %v3_fd26 = inttoptr i64 %v1_fd0b to i8*
  store i8 %v2_fd20, i8* %v3_fd26, align 1
  %v0_fd2c = load i1, i1* %zf.global-to-local, align 1
  %v1_fd2c = icmp eq i1 %v0_fd2c, false
  br i1 %v1_fd2c, label %dec_label_pc_fd08.dec_label_pc_fd08_crit_edge, label %dec_label_pc_fd2e

dec_label_pc_fd08.dec_label_pc_fd08_crit_edge:    ; preds = %dec_label_pc_fd08
  br label %dec_label_pc_fd08

dec_label_pc_fd2e:                                ; preds = %dec_label_pc_fd08
  %v0_fd2e = load i64, i64* @rcx, align 8
  ret i64 %v0_fd2e
}

define i64 @function_fd40(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_fd40:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %r9.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  %zf.global-to-local = alloca i1, align 1
  %tmp72 = sext i32 %arg6 to i64
  store i64 %tmp72, i64* %r9.global-to-local, align 8
  %tmp73 = sext i32 %arg5 to i64
  store i64 %tmp73, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-104 = alloca i32*, align 8
  %stack_var_-48 = alloca i64, align 8
  store i64 %arg1, i64* %r14.global-to-local, align 8
  %v0_fd4b = load i64, i64* @rsi, align 8
  store i64 %v0_fd4b, i64* %r13.global-to-local, align 8
  %v0_fd4f = load i64, i64* @rbx, align 8
  store i64 %v0_fd4f, i64* %stack_var_-48, align 8
  %v0_fd50 = load i64, i64* %r9.global-to-local, align 8
  store i64 %v0_fd50, i64* %rbx.global-to-local, align 8
  %v0_fd53 = load i64, i64* @rcx, align 8
  store i64 %v0_fd53, i64* %r12.global-to-local, align 8
  store i1 false, i1* %zf.global-to-local, align 1
  %v0_fd5a = load i64, i64* @rdx, align 8
  %v0_fd5f = load i64, i64* @r8, align 8
  %v1_fd5f = trunc i64 %v0_fd5f to i32
  %v1_fd64 = inttoptr i64 %arg1 to i8*
  %v2_fd64 = call i32 @strlen(i8* %v1_fd64)
  %v4_fd64 = sext i32 %v2_fd64 to i64
  store i64 %v4_fd64, i64* %rax.global-to-local, align 8
  %v0_fd69 = load i64, i64* %rbx.global-to-local, align 8
  %v2_fd69 = and i64 %v0_fd69, 2
  %v3_fd69 = icmp eq i64 %v2_fd69, 0
  store i1 %v3_fd69, i1* %zf.global-to-local, align 1
  store i64 %v4_fd64, i64* %r15.global-to-local, align 8
  br i1 %v3_fd69, label %dec_label_pc_fee0, label %dec_label_pc_fd7a

dec_label_pc_fd7a:                                ; preds = %dec_label_pc_ff01, %dec_label_pc_fee0, %dec_label_pc_fd40
  %v0_fd7a = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_fd7a, i64* %rbp.global-to-local, align 8
  store i32* null, i32** %stack_var_-104, align 8
  br label %dec_label_pc_fd8e

dec_label_pc_fd8e:                                ; preds = %dec_label_pc_100d5, %dec_label_pc_100c0, %dec_label_pc_10074, %dec_label_pc_1004f, %dec_label_pc_fd7a
  %stack_var_-96.0 = phi i64 [ 0, %dec_label_pc_fd7a ], [ 0, %dec_label_pc_100d5 ], [ 0, %dec_label_pc_10074 ], [ %v3_fff5, %dec_label_pc_100c0 ], [ %v3_fff5, %dec_label_pc_1004f ]
  %v2_fd8e = load i64, i64* @rcx, align 8
  store i64 %v2_fd8e, i64* %rax.global-to-local, align 8
  %v1_fd92 = load i64, i64* %rbp.global-to-local, align 8
  %v7_fd92 = icmp ult i64 %v2_fd8e, %v1_fd92
  %v12_fd92 = icmp eq i64 %v2_fd8e, %v1_fd92
  store i1 %v12_fd92, i1* %zf.global-to-local, align 1
  %v1_fd95 = icmp eq i1 %v7_fd92, false
  br i1 %v1_fd95, label %dec_label_pc_fea9, label %dec_label_pc_fd9b

dec_label_pc_fd9b:                                ; preds = %dec_label_pc_fd8e
  store i64 %v2_fd8e, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_fda0

dec_label_pc_fda0:                                ; preds = %dec_label_pc_100fa, %dec_label_pc_fd9b
  %v0_fda0 = phi i64 [ %v0_100fa, %dec_label_pc_100fa ], [ %v2_fd8e, %dec_label_pc_fd9b ]
  %stack_var_-96.1 = phi i64 [ %stack_var_-96.5, %dec_label_pc_100fa ], [ %stack_var_-96.0, %dec_label_pc_fd9b ]
  store i64 0, i64* @rdx, align 8
  %v1_fda0 = load i64, i64* %r12.global-to-local, align 8
  %v2_fda0 = inttoptr i64 %v1_fda0 to i64*
  store i64 %v0_fda0, i64* %v2_fda0, align 8
  %v4_fda4 = and i64 %v0_fd5f, 4294967295
  store i64 %v4_fda4, i64* %rax.global-to-local, align 8
  %v5_fda8 = icmp eq i32 %v1_fd5f, 0
  store i1 %v5_fda8, i1* %zf.global-to-local, align 1
  br i1 %v5_fda8, label %dec_label_pc_fecb, label %dec_label_pc_fdb0

dec_label_pc_fdb0:                                ; preds = %dec_label_pc_feb2, %dec_label_pc_fda0
  %v0_fdb2 = phi i64 [ %v4_fda4, %dec_label_pc_fda0 ], [ %v4_febf, %dec_label_pc_feb2 ]
  %stack_var_-96.2 = phi i64 [ %stack_var_-96.1, %dec_label_pc_fda0 ], [ %stack_var_-96.5, %dec_label_pc_feb2 ]
  store i64 0, i64* %rbp.global-to-local, align 8
  %v11_fdb2 = icmp eq i64 %v0_fdb2, 1
  store i1 %v11_fdb2, i1* %zf.global-to-local, align 1
  %v0_fdc6.pre = load i64, i64* @rdx, align 8
  br i1 %v11_fdb2, label %dec_label_pc_fdc3, label %dec_label_pc_fdb7

dec_label_pc_fdb7:                                ; preds = %dec_label_pc_fdb0
  %v2_fdba = urem i64 %v0_fdc6.pre, 2
  %v2_fdbd = udiv i64 %v0_fdc6.pre, 2
  store i64 %v2_fdbd, i64* %rbp.global-to-local, align 8
  %v2_fdc0 = add nuw i64 %v2_fdbd, %v2_fdba
  %v12_fdc0 = icmp eq i64 %v2_fdc0, 0
  store i1 %v12_fdc0, i1* %zf.global-to-local, align 1
  store i64 %v2_fdc0, i64* @rdx, align 8
  br label %dec_label_pc_fdc3

dec_label_pc_fdc3:                                ; preds = %dec_label_pc_fdb0, %dec_label_pc_fecb, %dec_label_pc_fdb7
  %v1_fdda = phi i64 [ %v0_fecb, %dec_label_pc_fecb ], [ %v2_fdbd, %dec_label_pc_fdb7 ], [ 0, %dec_label_pc_fdb0 ]
  %v0_fdc6 = phi i64 [ 0, %dec_label_pc_fecb ], [ %v2_fdc0, %dec_label_pc_fdb7 ], [ %v0_fdc6.pre, %dec_label_pc_fdb0 ]
  %stack_var_-96.3 = phi i64 [ %stack_var_-96.6, %dec_label_pc_fecb ], [ %stack_var_-96.2, %dec_label_pc_fdb7 ], [ %stack_var_-96.2, %dec_label_pc_fdb0 ]
  %v0_fdc3 = load i64, i64* %rbx.global-to-local, align 8
  %v2_fdc3 = and i64 %v0_fdc3, 4
  %v3_fdc3 = icmp eq i64 %v2_fdc3, 0
  store i1 %v3_fdc3, i1* %zf.global-to-local, align 1
  %v1_fdc6 = load i64, i64* %r15.global-to-local, align 8
  %v3_fdc6 = add i64 %v1_fdc6, %v0_fdc6
  store i64 %v3_fdc6, i64* %r12.global-to-local, align 8
  br i1 %v3_fdc3, label %dec_label_pc_fdd1, label %dec_label_pc_fdcc

dec_label_pc_fdcc:                                ; preds = %dec_label_pc_fdc3
  store i64 %v1_fdc6, i64* %r12.global-to-local, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rdx, align 8
  br label %dec_label_pc_fdd1

dec_label_pc_fdd1:                                ; preds = %dec_label_pc_fdcc, %dec_label_pc_fdc3
  %v0_fdf9 = phi i64 [ 0, %dec_label_pc_fdcc ], [ %v0_fdc6, %dec_label_pc_fdc3 ]
  %v0_fdda = phi i64 [ %v1_fdc6, %dec_label_pc_fdcc ], [ %v3_fdc6, %dec_label_pc_fdc3 ]
  %v1_fdd1 = trunc i64 %v0_fdc3 to i32
  %v2_fdd1 = and i32 %v1_fdd1, 8
  %v3_fdd1 = icmp eq i32 %v2_fdd1, 0
  store i1 %v3_fdd1, i1* %zf.global-to-local, align 1
  %v9_fdd1 = zext i32 %v2_fdd1 to i64
  store i64 %v9_fdd1, i64* %rbx.global-to-local, align 8
  %v1_fdd4 = icmp eq i1 %v3_fdd1, false
  br i1 %v1_fdd4, label %dec_label_pc_fed8, label %dec_label_pc_fdda

dec_label_pc_fdda:                                ; preds = %dec_label_pc_fdd1
  %v2_fdda = add i64 %v0_fdda, %v1_fdda
  %v12_fdda = icmp eq i64 %v2_fdda, 0
  store i1 %v12_fdda, i1* %zf.global-to-local, align 1
  store i64 %v2_fdda, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_fddd

dec_label_pc_fddd:                                ; preds = %dec_label_pc_fed8, %dec_label_pc_fdda
  store i64 %v0_fd5a, i64* %rax.global-to-local, align 8
  %v1_fde2 = icmp eq i64 %v0_fd5a, 0
  store i1 %v1_fde2, i1* %zf.global-to-local, align 1
  br i1 %v1_fde2, label %dec_label_pc_fe71, label %dec_label_pc_fdeb

dec_label_pc_fdeb:                                ; preds = %dec_label_pc_fddd
  %v0_fdeb = load i64, i64* %r13.global-to-local, align 8
  %v3_fdeb = add i64 %v0_fd5a, -1
  %v4_fdeb = add i64 %v3_fdeb, %v0_fdeb
  store i64 %v4_fdeb, i64* %rbx.global-to-local, align 8
  %v1_fdf0 = add i64 %v0_fdf9, -1
  store i64 %v1_fdf0, i64* %rax.global-to-local, align 8
  %v7_fdf4 = icmp ult i64 %v0_fdeb, %v4_fdeb
  %v12_fdf4 = icmp eq i64 %v0_fd5a, 1
  store i1 %v12_fdf4, i1* %zf.global-to-local, align 1
  %v1_fdf7 = icmp eq i1 %v7_fdf4, false
  br i1 %v1_fdf7, label %dec_label_pc_fe1f, label %dec_label_pc_fdf9

dec_label_pc_fdf9:                                ; preds = %dec_label_pc_fdeb
  %v1_fdf9 = icmp eq i64 %v0_fdf9, 0
  store i1 %v1_fdf9, i1* %zf.global-to-local, align 1
  br i1 %v1_fdf9, label %dec_label_pc_fe1f, label %dec_label_pc_fe00

dec_label_pc_fe00:                                ; preds = %dec_label_pc_fdf9, %dec_label_pc_fe00
  %v0_fe00 = phi i64 [ %v1_fe09, %dec_label_pc_fe00 ], [ %v0_fdeb, %dec_label_pc_fdf9 ]
  %v1_fe00 = add i64 %v0_fe00, 1
  store i64 %v1_fe00, i64* %r13.global-to-local, align 8
  %v2_fe04 = inttoptr i64 %v0_fe00 to i8*
  store i8 32, i8* %v2_fe04, align 1
  %v0_fe09 = load i64, i64* %rbx.global-to-local, align 8
  %v1_fe09 = load i64, i64* %r13.global-to-local, align 8
  %tmp91 = icmp ule i64 %v0_fe09, %v1_fe09
  %v3_fe0c = icmp ne i1 %tmp91, true
  %v4_fe0c = zext i1 %v3_fe0c to i64
  %v5_fe0c = load i64, i64* @rsi, align 8
  %v6_fe0c = and i64 %v5_fe0c, -256
  %v7_fe0c = or i64 %v4_fe0c, %v6_fe0c
  store i64 %v7_fe0c, i64* @rsi, align 8
  %v0_fe10 = load i64, i64* %rax.global-to-local, align 8
  %v1_fe10 = icmp eq i64 %v0_fe10, 0
  %v1_fe13 = icmp eq i1 %v1_fe10, false
  %v2_fe13 = zext i1 %v1_fe13 to i64
  %v3_fe13 = load i64, i64* @rdx, align 8
  %v4_fe13 = and i64 %v3_fe13, -256
  %v5_fe13 = or i64 %v2_fe13, %v4_fe13
  store i64 %v5_fe13, i64* @rdx, align 8
  %v1_fe16 = add i64 %v0_fe10, -1
  store i64 %v1_fe16, i64* %rax.global-to-local, align 8
  %tmp92 = or i1 %tmp91, %v1_fe10
  %tmp93 = icmp eq i1 %tmp92, false
  %v5_fe1a = icmp eq i1 %tmp93, false
  store i1 %v5_fe1a, i1* %zf.global-to-local, align 1
  %v1_fe1d = icmp eq i1 %v5_fe1a, false
  br i1 %v1_fe1d, label %dec_label_pc_fe00, label %dec_label_pc_fe1f

dec_label_pc_fe1f:                                ; preds = %dec_label_pc_fe00, %dec_label_pc_fdf9, %dec_label_pc_fdeb
  %v0_fe22 = phi i64 [ %v0_fdeb, %dec_label_pc_fdf9 ], [ %v0_fdeb, %dec_label_pc_fdeb ], [ %v1_fe09, %dec_label_pc_fe00 ]
  %v0_fe1f = phi i64 [ %v4_fdeb, %dec_label_pc_fdf9 ], [ %v4_fdeb, %dec_label_pc_fdeb ], [ %v0_fe09, %dec_label_pc_fe00 ]
  store i64 %v0_fe1f, i64* @rdx, align 8
  %v1_fe22 = inttoptr i64 %v0_fe22 to i8*
  store i8 0, i8* %v1_fe22, align 1
  %v0_fe27 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_fe27, i64* @rsi, align 8
  %v0_fe2a = load i64, i64* @rdx, align 8
  %v1_fe2a = load i64, i64* %r13.global-to-local, align 8
  %v2_fe2a = sub i64 %v0_fe2a, %v1_fe2a
  store i64 %v1_fe2a, i64* @rdi, align 8
  %v1_fe30 = load i64, i64* %r15.global-to-local, align 8
  %v12_fe30 = icmp eq i64 %v2_fe2a, %v1_fe30
  store i1 %v12_fe30, i1* %zf.global-to-local, align 1
  %tmp107 = icmp ule i64 %v2_fe2a, %v1_fe30
  %v3_fe33 = icmp ne i1 %tmp107, true
  %v6_fe33 = select i1 %v3_fe33, i64 %v1_fe30, i64 %v2_fe2a
  %v7_fe33 = trunc i64 %v6_fe33 to i32
  store i64 %v6_fe33, i64* @rdx, align 8
  %v1_fe37 = inttoptr i64 %v1_fe2a to i64*
  %v3_fe37 = inttoptr i64 %v0_fe27 to i64*
  %v7_fe37 = call i64* @mempcpy(i64* %v1_fe37, i64* %v3_fe37, i32 %v7_fe33)
  %v9_fe37 = ptrtoint i64* %v7_fe37 to i64
  store i64 %v9_fe37, i64* %rax.global-to-local, align 8
  %v0_fe3c = load i64, i64* %rbx.global-to-local, align 8
  %v12_fe3c = icmp eq i64 %v0_fe3c, %v9_fe37
  store i1 %v12_fe3c, i1* %zf.global-to-local, align 1
  %v0_fe3f = load i64, i64* %rbp.global-to-local, align 8
  %v1_fe3f = add i64 %v0_fe3f, -1
  store i64 %v1_fe3f, i64* @rdx, align 8
  %tmp108 = icmp ugt i64 %v0_fe3c, %v9_fe37
  br i1 %tmp108, label %dec_label_pc_fe45, label %dec_label_pc_fe6e

dec_label_pc_fe45:                                ; preds = %dec_label_pc_fe1f
  %v1_fe45 = icmp eq i64 %v0_fe3f, 0
  store i1 %v1_fe45, i1* %zf.global-to-local, align 1
  br i1 %v1_fe45, label %dec_label_pc_fe6e, label %dec_label_pc_fe50

dec_label_pc_fe50:                                ; preds = %dec_label_pc_fe45, %dec_label_pc_fe50
  %v0_fe54 = phi i64 [ %v1_fe65, %dec_label_pc_fe50 ], [ %v1_fe3f, %dec_label_pc_fe45 ]
  %v0_fe50 = phi i64 [ %v1_fe5f, %dec_label_pc_fe50 ], [ %v9_fe37, %dec_label_pc_fe45 ]
  %v1_fe50 = add i64 %v0_fe50, 1
  store i64 %v1_fe50, i64* %rax.global-to-local, align 8
  %v1_fe54 = icmp eq i64 %v0_fe54, 0
  store i1 %v1_fe54, i1* %zf.global-to-local, align 1
  %v2_fe57 = inttoptr i64 %v0_fe50 to i8*
  store i8 32, i8* %v2_fe57, align 1
  %v0_fe5b = load i1, i1* %zf.global-to-local, align 1
  %v1_fe5b = icmp eq i1 %v0_fe5b, false
  %v2_fe5b = zext i1 %v1_fe5b to i64
  %v3_fe5b = load i64, i64* @rsi, align 8
  %v4_fe5b = and i64 %v3_fe5b, -256
  %v5_fe5b = or i64 %v4_fe5b, %v2_fe5b
  store i64 %v5_fe5b, i64* @rsi, align 8
  %v0_fe5f = load i64, i64* %rbx.global-to-local, align 8
  %v1_fe5f = load i64, i64* %rax.global-to-local, align 8
  %tmp94 = icmp ule i64 %v0_fe5f, %v1_fe5f
  %v3_fe62 = icmp ne i1 %tmp94, true
  %v4_fe62 = zext i1 %v3_fe62 to i64
  %v5_fe62 = load i64, i64* @rcx, align 8
  %v6_fe62 = and i64 %v5_fe62, -256
  %v7_fe62 = or i64 %v4_fe62, %v6_fe62
  store i64 %v7_fe62, i64* @rcx, align 8
  %v0_fe65 = load i64, i64* @rdx, align 8
  %v1_fe65 = add i64 %v0_fe65, -1
  store i64 %v1_fe65, i64* @rdx, align 8
  %tmp95 = or i1 %v0_fe5b, %tmp94
  %tmp96 = icmp eq i1 %tmp95, false
  %v5_fe69 = icmp eq i1 %tmp96, false
  store i1 %v5_fe69, i1* %zf.global-to-local, align 1
  %v1_fe6c = icmp eq i1 %v5_fe69, false
  br i1 %v1_fe6c, label %dec_label_pc_fe50, label %dec_label_pc_fe6e

dec_label_pc_fe6e:                                ; preds = %dec_label_pc_fe1f, %dec_label_pc_fe50, %dec_label_pc_fe45
  %v0_fe6e = phi i64 [ %v9_fe37, %dec_label_pc_fe45 ], [ %v9_fe37, %dec_label_pc_fe1f ], [ %v1_fe5f, %dec_label_pc_fe50 ]
  %v1_fe6e = inttoptr i64 %v0_fe6e to i8*
  store i8 0, i8* %v1_fe6e, align 1
  br label %dec_label_pc_fe71

dec_label_pc_fe71:                                ; preds = %dec_label_pc_100c9, %dec_label_pc_ff0a, %dec_label_pc_fe6e, %dec_label_pc_fddd
  %stack_var_-96.4 = phi i64 [ %stack_var_-96.3, %dec_label_pc_fddd ], [ %stack_var_-96.3, %dec_label_pc_fe6e ], [ 0, %dec_label_pc_ff0a ], [ %v3_fff5, %dec_label_pc_100c9 ]
  %v2_fe71 = load i32*, i32** %stack_var_-104, align 8
  %v3_fe71 = ptrtoint i32* %v2_fe71 to i64
  store i64 %v3_fe71, i64* @rdi, align 8
  %tmp97 = bitcast i32* %v2_fe71 to i64*
  call void @free(i64* %tmp97)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  store i64 %stack_var_-96.4, i64* @rdi, align 8
  %v1_fe7f = inttoptr i64 %stack_var_-96.4 to i64*
  call void @free(i64* %v1_fe7f)
  %v0_fe84 = load i64, i64* @rsp, align 8
  %v10_fe84 = icmp eq i64 %v0_fe84, -56
  store i1 %v10_fe84, i1* %zf.global-to-local, align 1
  %v0_fe88 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_fe88, i64* %rax.global-to-local, align 8
  %v2_fe8b = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_fe8b, i64* @rbx, align 8
  ret i64 %v0_fe88

dec_label_pc_fea9:                                ; preds = %dec_label_pc_10098, %dec_label_pc_fd8e
  %v0_feb2 = phi i64 [ %v2_fd8e, %dec_label_pc_fd8e ], [ %v2_10098, %dec_label_pc_10098 ]
  %v0_100fa = phi i64 [ %v1_fd92, %dec_label_pc_fd8e ], [ %v1_1009c, %dec_label_pc_10098 ]
  %stack_var_-96.5 = phi i64 [ %stack_var_-96.0, %dec_label_pc_fd8e ], [ 0, %dec_label_pc_10098 ]
  %v7_fea9 = icmp ugt i64 %v0_feb2, %v0_100fa
  %v12_fea9 = icmp eq i64 %v0_feb2, %v0_100fa
  store i1 %v12_fea9, i1* %zf.global-to-local, align 1
  %v1_feac = icmp eq i1 %v7_fea9, false
  br i1 %v1_feac, label %dec_label_pc_100fa, label %dec_label_pc_feb2

dec_label_pc_feb2:                                ; preds = %dec_label_pc_fea9
  %v2_feb2 = sub i64 %v0_feb2, %v0_100fa
  store i64 %v2_feb2, i64* @rdx, align 8
  %v1_febb = load i64, i64* %r12.global-to-local, align 8
  %v2_febb = inttoptr i64 %v1_febb to i64*
  store i64 %v0_100fa, i64* %v2_febb, align 8
  %v4_febf = and i64 %v0_fd5f, 4294967295
  store i64 %v4_febf, i64* %rax.global-to-local, align 8
  %v5_fec3 = icmp eq i32 %v1_fd5f, 0
  store i1 %v5_fec3, i1* %zf.global-to-local, align 1
  %v1_fec5 = icmp eq i1 %v5_fec3, false
  br i1 %v1_fec5, label %dec_label_pc_fdb0, label %dec_label_pc_fecb

dec_label_pc_fecb:                                ; preds = %dec_label_pc_feb2, %dec_label_pc_fda0
  %stack_var_-96.6 = phi i64 [ %stack_var_-96.1, %dec_label_pc_fda0 ], [ %stack_var_-96.5, %dec_label_pc_feb2 ]
  %v0_fecb = load i64, i64* @rdx, align 8
  store i64 %v0_fecb, i64* %rbp.global-to-local, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rdx, align 8
  br label %dec_label_pc_fdc3

dec_label_pc_fed8:                                ; preds = %dec_label_pc_fdd1
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_fddd

dec_label_pc_fee0:                                ; preds = %dec_label_pc_fd40
  %v0_fee0 = call i32 @__ctype_get_mb_cur_max()
  %v2_fee0 = sext i32 %v0_fee0 to i64
  store i64 %v2_fee0, i64* %rax.global-to-local, align 8
  %v10_fee5 = icmp eq i32 %v0_fee0, 1
  store i1 %v10_fee5, i1* %zf.global-to-local, align 1
  %tmp105 = or i32 %v0_fee0, 1
  %tmp106 = icmp eq i32 %tmp105, 1
  br i1 %tmp106, label %dec_label_pc_fd7a, label %dec_label_pc_feef

dec_label_pc_feef:                                ; preds = %dec_label_pc_fee0
  store i64 0, i64* @rdx, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rdi, align 8
  %v0_fef3 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_fef3, i64* @rsi, align 8
  %v4_fef6 = inttoptr i64 %v0_fef3 to i8*
  %v7_fef6 = call i32 @mbstowcs(i32* null, i8* %v4_fef6, i32 0)
  %v9_fef6 = sext i32 %v7_fef6 to i64
  store i64 %v9_fef6, i64* %rax.global-to-local, align 8
  %v1_fefb = add nsw i64 %v9_fef6, 1
  %v10_fefb = icmp eq i64 %v1_fefb, 0
  store i1 %v10_fefb, i1* %zf.global-to-local, align 1
  %v1_feff = icmp eq i1 %v10_fefb, false
  br i1 %v1_feff, label %dec_label_pc_ff30, label %dec_label_pc_ff01

dec_label_pc_ff01:                                ; preds = %dec_label_pc_feef
  %v0_ff01 = load i64, i64* %rbx.global-to-local, align 8
  %v2_ff01 = urem i64 %v0_ff01, 2
  %v3_ff01 = icmp eq i64 %v2_ff01, 0
  store i1 %v3_ff01, i1* %zf.global-to-local, align 1
  %v1_ff04 = icmp eq i1 %v3_ff01, false
  br i1 %v1_ff04, label %dec_label_pc_fd7a, label %dec_label_pc_ff0a

dec_label_pc_ff0a:                                ; preds = %dec_label_pc_100d5, %dec_label_pc_ff01
  store i32* null, i32** %stack_var_-104, align 8
  store i64 -1, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_fe71

dec_label_pc_ff30:                                ; preds = %dec_label_pc_feef
  store i64 %v1_fefb, i64* %rbp.global-to-local, align 8
  %v1_ff34 = mul nsw i64 %v1_fefb, 4
  store i64 %v1_ff34, i64* %rax.global-to-local, align 8
  %v1_ff3c = trunc i64 %v1_ff34 to i32
  store i64 %v1_ff34, i64* @rdi, align 8
  %v3_ff44 = call i64* @malloc(i32 %v1_ff3c)
  %v4_ff44 = ptrtoint i64* %v3_ff44 to i64
  store i64 %v4_ff44, i64* %rax.global-to-local, align 8
  %v2_ff49 = icmp eq i64* %v3_ff44, null
  store i1 %v2_ff49, i1* %zf.global-to-local, align 1
  %tmp101 = bitcast i32** %stack_var_-104 to i64*
  store i64 %v4_ff44, i64* %tmp101, align 8
  br i1 %v2_ff49, label %dec_label_pc_100d5, label %dec_label_pc_ff56

dec_label_pc_ff56:                                ; preds = %dec_label_pc_ff30
  %tmp102 = bitcast i64* %v3_ff44 to i32*
  store i64 %v4_ff44, i64* @rdi, align 8
  %v0_ff5a = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_ff5a, i64* @rdx, align 8
  %v0_ff5d = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_ff5d, i64* @rsi, align 8
  %v4_ff60 = inttoptr i64 %v0_ff5d to i8*
  %v6_ff60 = trunc i64 %v0_ff5a to i32
  %v7_ff60 = call i32 @mbstowcs(i32* %tmp102, i8* %v4_ff60, i32 %v6_ff60)
  %v9_ff60 = sext i32 %v7_ff60 to i64
  store i64 %v9_ff60, i64* %rax.global-to-local, align 8
  %v1_ff65 = icmp eq i32 %v7_ff60, 0
  store i1 %v1_ff65, i1* %zf.global-to-local, align 1
  br i1 %v1_ff65, label %dec_label_pc_10074, label %dec_label_pc_ff6e

dec_label_pc_ff6e:                                ; preds = %dec_label_pc_ff56
  %v2_ff6e = load i32*, i32** %stack_var_-104, align 8
  %v3_ff6e = ptrtoint i32* %v2_ff6e to i64
  store i64 %v3_ff6e, i64* %rax.global-to-local, align 8
  store i64 %v1_ff34, i64* @rcx, align 8
  %v3_ff77 = add i64 %v1_ff34, -4
  %v4_ff77 = add i64 %v3_ff77, %v3_ff6e
  %v5_ff77 = inttoptr i64 %v4_ff77 to i32*
  store i32 0, i32* %v5_ff77, align 4
  %v0_ff7f = load i64, i64* %rax.global-to-local, align 8
  %v1_ff7f = inttoptr i64 %v0_ff7f to i32*
  %v2_ff7f = load i32, i32* %v1_ff7f, align 4
  %v3_ff7f = zext i32 %v2_ff7f to i64
  store i64 %v3_ff7f, i64* @rdi, align 8
  store i64 %v0_ff7f, i64* @rdx, align 8
  %v5_ff84 = icmp eq i32 %v2_ff7f, 0
  store i1 %v5_ff84, i1* %zf.global-to-local, align 1
  br i1 %v5_ff84, label %dec_label_pc_10085, label %dec_label_pc_ff98

dec_label_pc_ff98:                                ; preds = %dec_label_pc_ff6e, %dec_label_pc_ffb6
  %v0_ff9d = phi i32 [ %v2_ffba, %dec_label_pc_ffb6 ], [ %v2_ff7f, %dec_label_pc_ff6e ]
  %v0_ff98 = phi i64 [ %v1_ffb6, %dec_label_pc_ffb6 ], [ %v0_ff7f, %dec_label_pc_ff6e ]
  %stack_var_-72.0 = phi i64 [ %stack_var_-72.1, %dec_label_pc_ffb6 ], [ 0, %dec_label_pc_ff6e ]
  %v2_ff9d = call i32 @iswprint(i32 %v0_ff9d)
  %v4_ff9d = sext i32 %v2_ff9d to i64
  store i64 %v4_ff9d, i64* %rax.global-to-local, align 8
  %v5_ffa2 = icmp eq i32 %v2_ff9d, 0
  store i1 %v5_ffa2, i1* %zf.global-to-local, align 1
  store i64 %v0_ff98, i64* @rdx, align 8
  %v1_ffa9 = icmp eq i1 %v5_ffa2, false
  br i1 %v1_ffa9, label %dec_label_pc_ffb6, label %dec_label_pc_ffab

dec_label_pc_ffab:                                ; preds = %dec_label_pc_ff98
  %v1_ffab = inttoptr i64 %v0_ff98 to i32*
  store i32 65533, i32* %v1_ffab, align 4
  %v0_ffb6.pre = load i64, i64* @rdx, align 8
  br label %dec_label_pc_ffb6

dec_label_pc_ffb6:                                ; preds = %dec_label_pc_ffab, %dec_label_pc_ff98
  %v0_ffb6 = phi i64 [ %v0_ff98, %dec_label_pc_ff98 ], [ %v0_ffb6.pre, %dec_label_pc_ffab ]
  %stack_var_-72.1 = phi i64 [ %stack_var_-72.0, %dec_label_pc_ff98 ], [ 1, %dec_label_pc_ffab ]
  %v1_ffb6 = add i64 %v0_ffb6, 4
  store i64 %v1_ffb6, i64* @rdx, align 8
  %v1_ffba = inttoptr i64 %v1_ffb6 to i32*
  %v2_ffba = load i32, i32* %v1_ffba, align 4
  %v3_ffba = zext i32 %v2_ffba to i64
  store i64 %v3_ffba, i64* @rdi, align 8
  %v5_ffbc = icmp eq i32 %v2_ffba, 0
  store i1 %v5_ffbc, i1* %zf.global-to-local, align 1
  %v1_ffbe = icmp eq i1 %v5_ffbc, false
  br i1 %v1_ffbe, label %dec_label_pc_ff98, label %dec_label_pc_ffc0

dec_label_pc_ffc0:                                ; preds = %dec_label_pc_ffb6
  %v2_ffc0 = load i32*, i32** %stack_var_-104, align 8
  %v3_ffc0 = ptrtoint i32* %v2_ffc0 to i64
  store i64 %v3_ffc0, i64* @rdi, align 8
  %v0_ffc4 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_ffc4, i64* @rsi, align 8
  %v4_ffc7 = trunc i64 %v0_ffc4 to i32
  %v5_ffc7 = call i32 @wcswidth(i32* %v2_ffc0, i32 %v4_ffc7)
  %v7_ffc7 = sext i32 %v5_ffc7 to i64
  store i64 %v7_ffc7, i64* %rax.global-to-local, align 8
  %v4_ffcc = trunc i64 %stack_var_-72.1 to i8
  %v11_ffcc = icmp eq i8 %v4_ffcc, 0
  store i1 %v11_ffcc, i1* %zf.global-to-local, align 1
  store i64 %v7_ffc7, i64* %rbp.global-to-local, align 8
  br i1 %v11_ffcc, label %dec_label_pc_10098, label %dec_label_pc_ffda

dec_label_pc_ffda:                                ; preds = %dec_label_pc_ffc0
  %v2_ffda = load i32*, i32** %stack_var_-104, align 8
  %v3_ffda = ptrtoint i32* %v2_ffda to i64
  store i64 %v3_ffda, i64* @rsi, align 8
  store i64 0, i64* @rdx, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* @rdi, align 8
  %v7_ffe2 = call i32 @wcstombs(i8* null, i32* %v2_ffda, i32 0)
  %v9_ffe2 = sext i32 %v7_ffe2 to i64
  br label %dec_label_pc_fff0

dec_label_pc_fff0:                                ; preds = %dec_label_pc_100a5, %dec_label_pc_ffda
  %storemerge = phi i64 [ %v9_ffe2, %dec_label_pc_ffda ], [ %v4_fd64, %dec_label_pc_100a5 ]
  %storemerge43.in.in = phi i64 [ %v9_ffe2, %dec_label_pc_ffda ], [ %v4_fd64, %dec_label_pc_100a5 ]
  store i64 %storemerge, i64* %rax.global-to-local, align 8
  %storemerge43.in = add nsw i64 %storemerge43.in.in, 1
  %storemerge43 = icmp eq i64 %storemerge43.in, 0
  store i1 %storemerge43, i1* %zf.global-to-local, align 1
  store i64 %storemerge43.in, i64* %rax.global-to-local, align 8
  store i64 %storemerge43.in, i64* @rdi, align 8
  %v1_fff5 = trunc i64 %storemerge43.in to i32
  %v2_fff5 = call i64* @malloc(i32 %v1_fff5)
  %v3_fff5 = ptrtoint i64* %v2_fff5 to i64
  store i64 %v3_fff5, i64* %rax.global-to-local, align 8
  %v1_fffa = icmp eq i64* %v2_fff5, null
  store i1 %v1_fffa, i1* %zf.global-to-local, align 1
  br i1 %v1_fffa, label %dec_label_pc_100c0, label %dec_label_pc_10008

dec_label_pc_10008:                               ; preds = %dec_label_pc_fff0
  %v2_10008 = load i32*, i32** %stack_var_-104, align 8
  %v3_10008 = ptrtoint i32* %v2_10008 to i64
  store i64 %v3_10008, i64* %r15.global-to-local, align 8
  %v2_1000c = load i64, i64* @rcx, align 8
  store i64 %v2_1000c, i64* %r14.global-to-local, align 8
  %v2_10010 = load i32, i32* %v2_10008, align 4
  %v3_10010 = zext i32 %v2_10010 to i64
  store i64 %v3_10010, i64* @rdi, align 8
  %v5_10013 = icmp eq i32 %v2_10010, 0
  store i1 %v5_10013, i1* %zf.global-to-local, align 1
  br i1 %v5_10013, label %dec_label_pc_100ef, label %dec_label_pc_1001b

dec_label_pc_1001b:                               ; preds = %dec_label_pc_10008
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_1002e

dec_label_pc_10020:                               ; preds = %dec_label_pc_10047
  %v1_10020 = add i64 %v0_10020, 4
  store i64 %v1_10020, i64* %r15.global-to-local, align 8
  %v1_10024 = inttoptr i64 %v1_10020 to i32*
  %v2_10024 = load i32, i32* %v1_10024, align 4
  %v3_10024 = zext i32 %v2_10024 to i64
  store i64 %v3_10024, i64* @rdi, align 8
  store i64 %v2_10047, i64* %rbp.global-to-local, align 8
  %v5_1002a = icmp eq i32 %v2_10024, 0
  store i1 %v5_1002a, i1* %zf.global-to-local, align 1
  br i1 %v5_1002a, label %dec_label_pc_1004f.loopexit, label %dec_label_pc_1002e

dec_label_pc_1002e:                               ; preds = %dec_label_pc_10020, %dec_label_pc_1001b
  %v0_1002e = phi i32 [ %v2_10024, %dec_label_pc_10020 ], [ %v2_10010, %dec_label_pc_1001b ]
  %v2_1002e = call i32 @wcwidth(i32 %v0_1002e)
  %v4_1002e = sext i32 %v2_1002e to i64
  store i64 %v4_1002e, i64* %rax.global-to-local, align 8
  %v11_10033 = icmp eq i32 %v2_1002e, -1
  store i1 %v11_10033, i1* %zf.global-to-local, align 1
  store i64 %v4_1002e, i64* @rdx, align 8
  %v1_10039 = icmp eq i1 %v11_10033, false
  br i1 %v1_10039, label %dec_label_pc_10047, label %dec_label_pc_1003b

dec_label_pc_1003b:                               ; preds = %dec_label_pc_1002e
  %v0_1003b = load i64, i64* %r15.global-to-local, align 8
  %v1_1003b = inttoptr i64 %v0_1003b to i32*
  store i32 65533, i32* %v1_1003b, align 4
  store i64 1, i64* @rdx, align 8
  br label %dec_label_pc_10047

dec_label_pc_10047:                               ; preds = %dec_label_pc_1003b, %dec_label_pc_1002e
  %v0_10047 = phi i64 [ 1, %dec_label_pc_1003b ], [ %v4_1002e, %dec_label_pc_1002e ]
  %v1_10047 = load i64, i64* %rbp.global-to-local, align 8
  %v2_10047 = add i64 %v1_10047, %v0_10047
  store i64 %v2_10047, i64* @rdx, align 8
  %v0_1004a = load i64, i64* %r14.global-to-local, align 8
  %v7_1004a = icmp ult i64 %v0_1004a, %v2_10047
  %v12_1004a = icmp eq i64 %v0_1004a, %v2_10047
  store i1 %v12_1004a, i1* %zf.global-to-local, align 1
  %v1_1004d = icmp eq i1 %v7_1004a, false
  %v0_10020 = load i64, i64* %r15.global-to-local, align 8
  br i1 %v1_1004d, label %dec_label_pc_10020, label %dec_label_pc_1004f.loopexit

dec_label_pc_1004f.loopexit:                      ; preds = %dec_label_pc_10047, %dec_label_pc_10020
  %v0_1005d.pre = phi i64 [ %v1_10020, %dec_label_pc_10020 ], [ %v0_10020, %dec_label_pc_10047 ]
  %v2_10059.pre = load i32*, i32** %stack_var_-104, align 8
  br label %dec_label_pc_1004f

dec_label_pc_1004f:                               ; preds = %dec_label_pc_1004f.loopexit, %dec_label_pc_100ef
  %v0_1005d = phi i64 [ %v0_1005d.pre, %dec_label_pc_1004f.loopexit ], [ %v3_10008, %dec_label_pc_100ef ]
  %v2_10059 = phi i32* [ %v2_10059.pre, %dec_label_pc_1004f.loopexit ], [ %v2_10008, %dec_label_pc_100ef ]
  store i64 %v3_fff5, i64* %r14.global-to-local, align 8
  store i64 %storemerge43.in, i64* @rdx, align 8
  %v3_10059 = ptrtoint i32* %v2_10059 to i64
  store i64 %v3_10059, i64* @rsi, align 8
  %v1_1005d = inttoptr i64 %v0_1005d to i32*
  store i32 0, i32* %v1_1005d, align 4
  %v0_10064 = load i64, i64* %r14.global-to-local, align 8
  %v1_10064 = inttoptr i64 %v0_10064 to i8*
  store i64 %v0_10064, i64* @rdi, align 8
  %v3_10067 = load i64, i64* @rsi, align 8
  %v4_10067 = inttoptr i64 %v3_10067 to i32*
  %v5_10067 = load i64, i64* @rdx, align 8
  %v6_10067 = trunc i64 %v5_10067 to i32
  %v7_10067 = call i32 @wcstombs(i8* %v1_10064, i32* %v4_10067, i32 %v6_10067)
  %v9_10067 = sext i32 %v7_10067 to i64
  store i64 %v9_10067, i64* %rax.global-to-local, align 8
  store i64 %v9_10067, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_fd8e

dec_label_pc_10074:                               ; preds = %dec_label_pc_ff56
  %v0_10074 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_10074, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_fd8e

dec_label_pc_10085:                               ; preds = %dec_label_pc_ff6e
  %v2_10085 = load i32*, i32** %stack_var_-104, align 8
  %v3_10085 = ptrtoint i32* %v2_10085 to i64
  store i64 %v3_10085, i64* @rdi, align 8
  %v0_10089 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_10089, i64* @rsi, align 8
  %v4_1008c = trunc i64 %v0_10089 to i32
  %v5_1008c = call i32 @wcswidth(i32* %v2_10085, i32 %v4_1008c)
  %v7_1008c = sext i32 %v5_1008c to i64
  store i64 %v7_1008c, i64* %rax.global-to-local, align 8
  store i64 %v7_1008c, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_10098

dec_label_pc_10098:                               ; preds = %dec_label_pc_10085, %dec_label_pc_ffc0
  %v1_1009c = phi i64 [ %v7_1008c, %dec_label_pc_10085 ], [ %v7_ffc7, %dec_label_pc_ffc0 ]
  %v2_10098 = load i64, i64* @rcx, align 8
  store i64 %v2_10098, i64* %rax.global-to-local, align 8
  %v7_1009c = icmp ult i64 %v2_10098, %v1_1009c
  %v12_1009c = icmp eq i64 %v2_10098, %v1_1009c
  store i1 %v12_1009c, i1* %zf.global-to-local, align 1
  %v1_1009f = icmp eq i1 %v7_1009c, false
  br i1 %v1_1009f, label %dec_label_pc_fea9, label %dec_label_pc_100a5

dec_label_pc_100a5:                               ; preds = %dec_label_pc_10098
  br label %dec_label_pc_fff0

dec_label_pc_100c0:                               ; preds = %dec_label_pc_fff0
  %v0_100c0 = load i64, i64* %rbx.global-to-local, align 8
  %v2_100c0 = urem i64 %v0_100c0, 2
  %v3_100c0 = icmp eq i64 %v2_100c0, 0
  store i1 %v3_100c0, i1* %zf.global-to-local, align 1
  %v1_100c3 = icmp eq i1 %v3_100c0, false
  br i1 %v1_100c3, label %dec_label_pc_fd8e, label %dec_label_pc_100c9

dec_label_pc_100c9:                               ; preds = %dec_label_pc_100c0
  store i64 -1, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_fe71

dec_label_pc_100d5:                               ; preds = %dec_label_pc_ff30
  %v0_100d5 = load i64, i64* %rbx.global-to-local, align 8
  %v2_100d5 = urem i64 %v0_100d5, 2
  %v3_100d5 = icmp eq i64 %v2_100d5, 0
  store i1 %v3_100d5, i1* %zf.global-to-local, align 1
  %v0_100d8 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_100d8, i64* %rbp.global-to-local, align 8
  %v1_100e4 = icmp eq i1 %v3_100d5, false
  br i1 %v1_100e4, label %dec_label_pc_fd8e, label %dec_label_pc_ff0a

dec_label_pc_100ef:                               ; preds = %dec_label_pc_10008
  store i64 %v3_10008, i64* %r15.global-to-local, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_1004f

dec_label_pc_100fa:                               ; preds = %dec_label_pc_fea9
  store i64 %v0_100fa, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_fda0
}

define i64 @function_10110(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_10110:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_10110 = load i64, i64* %r15.global-to-local, align 8
  %v0_10112 = load i64, i64* %r14.global-to-local, align 8
  %v0_10114 = load i64, i64* @rdi, align 8
  store i64 %v0_10114, i64* @r15, align 8
  %v0_10117 = load i64, i64* %r13.global-to-local, align 8
  %v0_10119 = load i64, i64* %r12.global-to-local, align 8
  store i64 0, i64* @r12, align 8
  %v0_1011e = load i64, i64* %rbp.global-to-local, align 8
  %v0_1011f = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_1011f, i64* %stack_var_-48, align 8
  %v0_10120 = load i64, i64* @rsi, align 8
  store i64 %v0_10120, i64* @rbp, align 8
  store i64 %v0_10120, i64* @r13, align 8
  %v0_1012a = load i64, i64* @rdx, align 8
  %v0_1012e = load i64, i64* @rcx, align 8
  %v5_10169 = trunc i64 %v0_1012a to i32
  %v7_10169 = trunc i64 %v0_1012e to i32
  br label %dec_label_pc_10138

dec_label_pc_10138:                               ; preds = %dec_label_pc_10174, %dec_label_pc_10110
  %v0_1013c = phi i64 [ %v0_10177, %dec_label_pc_10174 ], [ 0, %dec_label_pc_10110 ]
  %v0_10138 = phi i64 [ %v8_10169, %dec_label_pc_10174 ], [ %v0_10120, %dec_label_pc_10110 ]
  %v1_10138 = add i64 %v0_10138, 1
  store i64 %v1_10138, i64* @rbx, align 8
  store i64 %v0_1013c, i64* @rdi, align 8
  %v1_1013f = trunc i64 %v1_10138 to i32
  store i64 %v1_10138, i64* @rsi, align 8
  %v1_10142 = inttoptr i64 %v0_1013c to i64*
  %v5_10142 = call i64* @realloc(i64* %v1_10142, i32 %v1_1013f)
  %v6_10142 = ptrtoint i64* %v5_10142 to i64
  %v1_10147 = icmp eq i64* %v5_10142, null
  store i64 %v6_10142, i64* @r14, align 8
  br i1 %v1_10147, label %dec_label_pc_10190, label %dec_label_pc_1014f

dec_label_pc_1014f:                               ; preds = %dec_label_pc_10138
  store i64 %v0_1012a, i64* @r8, align 8
  %v0_10159 = load i64, i64* @rbp, align 8
  store i64 %v0_10159, i64* @rcx, align 8
  %v0_1015c = load i64, i64* @r13, align 8
  %v2_1015c = inttoptr i64 %v0_10159 to i64*
  store i64 %v0_1015c, i64* %v2_1015c, align 8
  %v0_10160 = load i64, i64* @rbx, align 8
  store i64 %v0_10160, i64* @rdx, align 8
  store i64 %v6_10142, i64* @rsi, align 8
  %v0_10166 = load i64, i64* @r15, align 8
  store i64 %v0_10166, i64* @rdi, align 8
  %v8_10169 = call i64 @function_fd40(i64 %v0_10166, i64 %v6_10142, i64 %v0_10160, i64 %v0_10159, i32 %v5_10169, i32 %v7_10169)
  %v10_1016e = icmp eq i64 %v8_10169, -1
  br i1 %v10_1016e, label %dec_label_pc_101a0, label %dec_label_pc_10174

dec_label_pc_10174:                               ; preds = %dec_label_pc_1014f
  %v0_10174 = load i64, i64* @rbx, align 8
  %v0_10177 = load i64, i64* @r14, align 8
  store i64 %v0_10177, i64* @r12, align 8
  %tmp266 = icmp ugt i64 %v0_10174, %v8_10169
  br i1 %tmp266, label %dec_label_pc_1017c, label %dec_label_pc_10138

dec_label_pc_1017c:                               ; preds = %dec_label_pc_10174, %dec_label_pc_101a0, %dec_label_pc_10190
  %v0_10180 = load i64, i64* @r14, align 8
  %v2_10183 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_10183, i64* %rbx.global-to-local, align 8
  store i64 %v0_1011e, i64* %rbp.global-to-local, align 8
  store i64 %v0_10119, i64* %r12.global-to-local, align 8
  store i64 %v0_10117, i64* %r13.global-to-local, align 8
  store i64 %v0_10112, i64* %r14.global-to-local, align 8
  store i64 %v0_10110, i64* %r15.global-to-local, align 8
  ret i64 %v0_10180

dec_label_pc_10190:                               ; preds = %dec_label_pc_10138
  %v0_10190 = load i64, i64* @r12, align 8
  store i64 %v0_10190, i64* @rdi, align 8
  %v1_10193 = inttoptr i64 %v0_10190 to i64*
  call void @free(i64* %v1_10193)
  br label %dec_label_pc_1017c

dec_label_pc_101a0:                               ; preds = %dec_label_pc_1014f
  %v0_101a0 = load i64, i64* @r14, align 8
  store i64 %v0_101a0, i64* @rdi, align 8
  store i64 0, i64* @r14, align 8
  %v1_101a6 = inttoptr i64 %v0_101a0 to i64*
  call void @free(i64* %v1_101a6)
  br label %dec_label_pc_1017c
}

define i64 @function_101b0(i64 %arg1, i64 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_101b0:
  %tmp31 = sext i32 %arg3 to i64
  store i64 %tmp31, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-76 = alloca i64, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_101b0 = load i64, i64* @r15, align 8
  %v0_101b2 = load i64, i64* @r14, align 8
  %v0_101b4 = load i64, i64* @r13, align 8
  %v0_101b6 = load i64, i64* @r12, align 8
  %v0_101b8 = load i64, i64* @rdi, align 8
  %v1_101b8 = load i64, i64* @rsi, align 8
  %v3_101b8 = add i64 %v1_101b8, %v0_101b8
  store i64 %v3_101b8, i64* @r13, align 8
  %v0_101bc = load i64, i64* @rbp, align 8
  %v0_101bd = load i64, i64* @rbx, align 8
  store i64 %v0_101bd, i64* %stack_var_-48, align 8
  store i64 %v0_101b8, i64* @rbx, align 8
  %v0_101c5 = call i64 @__readfsqword(i64 40)
  %v0_101d5 = load i64, i64* @rdx, align 8
  %v0_101d9 = call i32 @__ctype_get_mb_cur_max()
  %tmp59 = or i32 %v0_101d9, 1
  %tmp60 = icmp eq i32 %tmp59, 1
  store i64 0, i64* @rbp, align 8
  %v0_1031a = load i64, i64* @rbx, align 8
  %v1_1031a = load i64, i64* @r13, align 8
  %v7_1031a = icmp ult i64 %v0_1031a, %v1_1031a
  %v1_1031d = icmp eq i1 %v7_1031a, false
  br i1 %tmp60, label %dec_label_pc_10318, label %dec_label_pc_101e8

dec_label_pc_101e8:                               ; preds = %dec_label_pc_101b0
  br i1 %v1_1031d, label %dec_label_pc_102dd, label %dec_label_pc_101f3

dec_label_pc_101f3:                               ; preds = %dec_label_pc_101e8
  %v2_101f3 = ptrtoint i64* %stack_var_-72 to i64
  store i64 %v2_101f3, i64* @r12, align 8
  %v2_101f8 = ptrtoint i64* %stack_var_-76 to i64
  store i64 %v2_101f8, i64* @r14, align 8
  %tmp61 = bitcast i64* %stack_var_-72 to %_TYPEDEF___mbstate_t*
  %v5_1029c = and i64 %v0_101d5, 2
  %v6_1029c = icmp eq i64 %v5_1029c, 0
  %v1_102a1 = icmp eq i1 %v6_1029c, false
  %v5_102c8 = urem i64 %v0_101d5, 2
  %v6_102c8 = icmp eq i64 %v5_102c8, 0
  %v1_10305 = icmp eq i1 %v6_102c8, false
  br label %dec_label_pc_1021b

dec_label_pc_10200:                               ; preds = %dec_label_pc_1021b
  %v7_10202 = icmp slt i8 %v2_1021b, 37
  br i1 %v7_10202, label %dec_label_pc_10204, label %dec_label_pc_1020b

dec_label_pc_10204:                               ; preds = %dec_label_pc_10200
  %tmp79 = and i8 %v2_1021b, -4
  %tmp80 = icmp eq i8 %tmp79, 32
  br i1 %tmp80, label %dec_label_pc_1020b, label %dec_label_pc_10231

dec_label_pc_1020b:                               ; preds = %dec_label_pc_102c8.dec_label_pc_1020b_crit_edge, %dec_label_pc_10204, %dec_label_pc_10200, %dec_label_pc_10226, %dec_label_pc_1022a
  %v0_1020b = phi i64 [ %v0_1020b.pre, %dec_label_pc_102c8.dec_label_pc_1020b_crit_edge ], [ %v0_1021b, %dec_label_pc_10204 ], [ %v0_1021b, %dec_label_pc_10200 ], [ %v0_1021b, %dec_label_pc_10226 ], [ %v0_1021b, %dec_label_pc_1022a ]
  %v1_1020b = add i64 %v0_1020b, 1
  store i64 %v1_1020b, i64* @rbx, align 8
  %v0_1020f = load i64, i64* @rbp, align 8
  %v2_1020f = add i64 %v0_1020f, 1
  %v17_1020f = and i64 %v2_1020f, 4294967295
  store i64 %v17_1020f, i64* @rbp, align 8
  br label %dec_label_pc_10212

dec_label_pc_10212.loopexit:                      ; preds = %dec_label_pc_10251
  %v0_10212.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_10212

dec_label_pc_10212:                               ; preds = %dec_label_pc_10212.loopexit, %dec_label_pc_10307, %dec_label_pc_1020b
  %v0_10212 = phi i64 [ %v0_10212.pre, %dec_label_pc_10212.loopexit ], [ %v0_1030a, %dec_label_pc_10307 ], [ %v1_1020b, %dec_label_pc_1020b ]
  %v1_10212 = load i64, i64* @r13, align 8
  %v7_10212 = icmp ult i64 %v0_10212, %v1_10212
  %v1_10215 = icmp eq i1 %v7_10212, false
  br i1 %v1_10215, label %dec_label_pc_102dd, label %dec_label_pc_1021b

dec_label_pc_1021b:                               ; preds = %dec_label_pc_10212, %dec_label_pc_101f3
  %v0_1026011 = phi i64 [ %v1_10212, %dec_label_pc_10212 ], [ %v1_1031a, %dec_label_pc_101f3 ]
  %v0_1021b = phi i64 [ %v0_10212, %dec_label_pc_10212 ], [ %v0_1031a, %dec_label_pc_101f3 ]
  %v1_1021b = inttoptr i64 %v0_1021b to i8*
  %v2_1021b = load i8, i8* %v1_1021b, align 1
  %v9_10220 = icmp sgt i8 %v2_1021b, 63
  br i1 %v9_10220, label %dec_label_pc_10222, label %dec_label_pc_10200

dec_label_pc_10222:                               ; preds = %dec_label_pc_1021b
  %v7_10222 = icmp eq i8 %v2_1021b, 64
  br i1 %v7_10222, label %dec_label_pc_10231, label %dec_label_pc_10226

dec_label_pc_10226:                               ; preds = %dec_label_pc_10222
  %v9_10228 = icmp sgt i8 %v2_1021b, 95
  br i1 %v9_10228, label %dec_label_pc_1022a, label %dec_label_pc_1020b

dec_label_pc_1022a:                               ; preds = %dec_label_pc_10226
  %v2_1022a = add i8 %v2_1021b, -97
  %tmp81 = icmp ult i8 %v2_1022a, 30
  br i1 %tmp81, label %dec_label_pc_1020b, label %dec_label_pc_10231

dec_label_pc_10231:                               ; preds = %dec_label_pc_10204, %dec_label_pc_1022a, %dec_label_pc_10222
  store i64 0, i64* %stack_var_-72, align 8
  br label %dec_label_pc_10260

dec_label_pc_10240:                               ; preds = %dec_label_pc_10283
  %v5_10293 = sext i32 %v3_10293 to i64
  %v2_10245 = load i64, i64* @rbp, align 8
  %v4_10245 = sub i64 2147483647, %v2_10245
  %v20_10245 = and i64 %v4_10245, 4294967295
  store i64 %v20_10245, i64* @rcx, align 8
  %v5_10249 = icmp slt i64 %v20_10245, %v5_10293
  br i1 %v5_10249, label %dec_label_pc_10360, label %dec_label_pc_1024f

dec_label_pc_1024f:                               ; preds = %dec_label_pc_10240
  %v3_10245 = trunc i64 %v2_10245 to i32
  %v4_1024f = add i32 %v3_10245, %v3_10293
  %v20_1024f = zext i32 %v4_1024f to i64
  store i64 %v20_1024f, i64* @rbp, align 8
  br label %dec_label_pc_10251

dec_label_pc_10251:                               ; preds = %dec_label_pc_1024f, %dec_label_pc_102bc, %dec_label_pc_102a3
  store i64 %v2_101f3, i64* @rdi, align 8
  %v0_10254 = load i64, i64* @rbx, align 8
  %v1_10254 = load i64, i64* @r15, align 8
  %v2_10254 = add i64 %v1_10254, %v0_10254
  store i64 %v2_10254, i64* @rbx, align 8
  %v3_10257 = call i32 @mbsinit(%_TYPEDEF___mbstate_t* %tmp61)
  %v5_1025c = icmp eq i32 %v3_10257, 0
  %v1_1025e = icmp eq i1 %v5_1025c, false
  br i1 %v1_1025e, label %dec_label_pc_10212.loopexit, label %dec_label_pc_10251.dec_label_pc_10260_crit_edge

dec_label_pc_10251.dec_label_pc_10260_crit_edge:  ; preds = %dec_label_pc_10251
  %v0_10260.pre = load i64, i64* @r13, align 8
  %v0_10266.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_10260

dec_label_pc_10260:                               ; preds = %dec_label_pc_10251.dec_label_pc_10260_crit_edge, %dec_label_pc_10231
  %v0_10266 = phi i64 [ %v0_10266.pre, %dec_label_pc_10251.dec_label_pc_10260_crit_edge ], [ %v0_1021b, %dec_label_pc_10231 ]
  %v0_10260 = phi i64 [ %v0_10260.pre, %dec_label_pc_10251.dec_label_pc_10260_crit_edge ], [ %v0_1026011, %dec_label_pc_10231 ]
  store i64 %v2_101f3, i64* @rcx, align 8
  store i64 %v0_10266, i64* @rsi, align 8
  %v2_10269 = sub i64 %v0_10260, %v0_10266
  store i64 %v2_10269, i64* @rdx, align 8
  store i64 %v2_101f8, i64* @rdi, align 8
  %v3_1026f = call i64 @function_15310(i64 %v2_101f8, i64 %v0_10266, i64 %v2_10269)
  %v10_10274 = icmp eq i64 %v3_1026f, -1
  store i64 %v3_1026f, i64* @r15, align 8
  br i1 %v10_10274, label %dec_label_pc_102c8, label %dec_label_pc_1027d

dec_label_pc_1027d:                               ; preds = %dec_label_pc_10260
  %v10_1027d = icmp eq i64 %v3_1026f, -2
  br i1 %v10_1027d, label %dec_label_pc_10300, label %dec_label_pc_10283

dec_label_pc_10283:                               ; preds = %dec_label_pc_1027d
  %v3_10283 = load i64, i64* %stack_var_-76, align 8
  %v4_10283 = trunc i64 %v3_10283 to i32
  store i64 %v3_10283, i64* @rdi, align 8
  %v1_10287 = icmp eq i64 %v3_1026f, 0
  %v3_1028f = select i1 %v1_10287, i64 1, i64 %v3_1026f
  store i64 %v3_1028f, i64* @r15, align 8
  %v3_10293 = call i32 @wcwidth(i32 %v4_10283)
  %v6_10298 = icmp slt i32 %v3_10293, 0
  %v1_1029a = icmp eq i1 %v6_10298, false
  br i1 %v1_1029a, label %dec_label_pc_10240, label %dec_label_pc_1029c

dec_label_pc_1029c:                               ; preds = %dec_label_pc_10283
  br i1 %v1_102a1, label %dec_label_pc_102d8, label %dec_label_pc_102a3

dec_label_pc_102a3:                               ; preds = %dec_label_pc_1029c
  %v3_102a3 = load i64, i64* %stack_var_-76, align 8
  %v4_102a3 = trunc i64 %v3_102a3 to i32
  store i64 %v3_102a3, i64* @rdi, align 8
  %v3_102a7 = call i32 @iswcntrl(i32 %v4_102a3)
  %v5_102ac = icmp eq i32 %v3_102a7, 0
  %v1_102ae = icmp eq i1 %v5_102ac, false
  br i1 %v1_102ae, label %dec_label_pc_10251, label %dec_label_pc_102b0

dec_label_pc_102b0:                               ; preds = %dec_label_pc_102a3
  %v0_102b0 = load i64, i64* @rbp, align 8
  %v1_102b0 = trunc i64 %v0_102b0 to i32
  %v11_102b0 = icmp eq i32 %v1_102b0, 2147483647
  br i1 %v11_102b0, label %dec_label_pc_10360, label %dec_label_pc_102bc

dec_label_pc_102bc:                               ; preds = %dec_label_pc_102b0
  %v2_102bc = add i64 %v0_102b0, 1
  %v17_102bc = and i64 %v2_102bc, 4294967295
  store i64 %v17_102bc, i64* @rbp, align 8
  br label %dec_label_pc_10251

dec_label_pc_102c8:                               ; preds = %dec_label_pc_10260
  br i1 %v6_102c8, label %dec_label_pc_102c8.dec_label_pc_1020b_crit_edge, label %dec_label_pc_102d8

dec_label_pc_102c8.dec_label_pc_1020b_crit_edge:  ; preds = %dec_label_pc_102c8
  %v0_1020b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_1020b

dec_label_pc_102d8:                               ; preds = %dec_label_pc_102c8, %dec_label_pc_10300, %dec_label_pc_1029c, %dec_label_pc_10341
  store i64 4294967295, i64* @rbp, align 8
  br label %dec_label_pc_102dd

dec_label_pc_102dd:                               ; preds = %dec_label_pc_10212, %dec_label_pc_10354, %dec_label_pc_10349, %dec_label_pc_10360, %dec_label_pc_10318, %dec_label_pc_102d8, %dec_label_pc_101e8
  store i64 %v0_101c5, i64* @rsi, align 8
  %v1_102e2 = call i64 @__readfsqword(i64 40)
  %v2_102e2 = xor i64 %v1_102e2, %v0_101c5
  %v3_102e2 = icmp eq i64 %v2_102e2, 0
  store i64 %v2_102e2, i64* @rsi, align 8
  %v1_102ed = icmp eq i1 %v3_102e2, false
  br i1 %v1_102ed, label %dec_label_pc_1036a, label %dec_label_pc_102ef

dec_label_pc_102ef:                               ; preds = %dec_label_pc_102dd
  %v0_102eb = load i64, i64* @rbp, align 8
  %v2_102f3 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_102f3, i64* @rbx, align 8
  store i64 %v0_101bc, i64* @rbp, align 8
  store i64 %v0_101b6, i64* @r12, align 8
  store i64 %v0_101b4, i64* @r13, align 8
  store i64 %v0_101b2, i64* @r14, align 8
  store i64 %v0_101b0, i64* @r15, align 8
  ret i64 %v0_102eb

dec_label_pc_10300:                               ; preds = %dec_label_pc_1027d
  br i1 %v1_10305, label %dec_label_pc_102d8, label %dec_label_pc_10307

dec_label_pc_10307:                               ; preds = %dec_label_pc_10300
  %v0_10307 = load i64, i64* @rbp, align 8
  %v2_10307 = add i64 %v0_10307, 1
  %v17_10307 = and i64 %v2_10307, 4294967295
  store i64 %v17_10307, i64* @rbp, align 8
  %v0_1030a = load i64, i64* @r13, align 8
  store i64 %v0_1030a, i64* @rbx, align 8
  br label %dec_label_pc_10212

dec_label_pc_10318:                               ; preds = %dec_label_pc_101b0
  br i1 %v1_1031d, label %dec_label_pc_102dd, label %dec_label_pc_1031f

dec_label_pc_1031f:                               ; preds = %dec_label_pc_10318
  %v0_1031f = call i16** @__ctype_b_loc()
  %v4_10324 = and i64 %v0_101d5, 4294967295
  store i64 %v4_10324, i64* @rdx, align 8
  %v1_10328 = bitcast i16** %v0_1031f to i64*
  %v2_10328 = load i64, i64* %v1_10328, align 8
  store i64 %v2_10328, i64* @rcx, align 8
  store i64 0, i64* @rbp, align 8
  %v1_1032d = trunc i64 %v0_101d5 to i32
  %v2_1032d = and i32 %v1_1032d, 2
  %v3_1032d = icmp eq i32 %v2_1032d, 0
  %v9_1032d = zext i32 %v2_1032d to i64
  store i64 %v9_1032d, i64* @rdx, align 8
  %v0_10330.pre = load i64, i64* @rbx, align 8
  %v1_10343 = icmp eq i1 %v3_1032d, false
  br label %dec_label_pc_10330

dec_label_pc_10330:                               ; preds = %dec_label_pc_10354, %dec_label_pc_1031f
  %v0_10351 = phi i64 [ %v0_1034920, %dec_label_pc_10354 ], [ 0, %dec_label_pc_1031f ]
  %v0_10330 = phi i64 [ %v1_10330, %dec_label_pc_10354 ], [ %v0_10330.pre, %dec_label_pc_1031f ]
  %v1_10330 = add i64 %v0_10330, 1
  store i64 %v1_10330, i64* @rbx, align 8
  %v2_10334 = inttoptr i64 %v0_10330 to i8*
  %v3_10334 = load i8, i8* %v2_10334, align 1
  %v4_10334 = zext i8 %v3_10334 to i64
  %v2_10338 = mul nuw nsw i64 %v4_10334, 2
  %v3_10338 = add i64 %v2_10338, %v2_10328
  %v4_10338 = inttoptr i64 %v3_10338 to i16*
  %v5_10338 = load i16, i16* %v4_10338, align 2
  %v3_1033c = and i16 %v5_10338, 16384
  %v4_1033c = icmp eq i16 %v3_1033c, 0
  %v1_1033f = icmp eq i1 %v4_1033c, false
  br i1 %v1_1033f, label %dec_label_pc_10349, label %dec_label_pc_10341

dec_label_pc_10341:                               ; preds = %dec_label_pc_10330
  br i1 %v1_10343, label %dec_label_pc_102d8, label %dec_label_pc_10345

dec_label_pc_10345:                               ; preds = %dec_label_pc_10341
  %v2_10345 = and i16 %v5_10338, 2
  %v3_10345 = icmp eq i16 %v2_10345, 0
  %v1_10347 = icmp eq i1 %v3_10345, false
  br i1 %v1_10347, label %dec_label_pc_10354, label %dec_label_pc_10349

dec_label_pc_10349:                               ; preds = %dec_label_pc_10345, %dec_label_pc_10330
  %v1_10349 = trunc i64 %v0_10351 to i32
  %v11_10349 = icmp eq i32 %v1_10349, 2147483647
  br i1 %v11_10349, label %dec_label_pc_102dd, label %dec_label_pc_10351

dec_label_pc_10351:                               ; preds = %dec_label_pc_10349
  %v2_10351 = add i64 %v0_10351, 1
  %v17_10351 = and i64 %v2_10351, 4294967295
  store i64 %v17_10351, i64* @rbp, align 8
  br label %dec_label_pc_10354

dec_label_pc_10354:                               ; preds = %dec_label_pc_10351, %dec_label_pc_10345
  %v0_1034920 = phi i64 [ %v17_10351, %dec_label_pc_10351 ], [ %v0_10351, %dec_label_pc_10345 ]
  %v0_10354 = load i64, i64* @r13, align 8
  %v12_10354 = icmp eq i64 %v0_10354, %v1_10330
  %v1_10357 = icmp eq i1 %v12_10354, false
  br i1 %v1_10357, label %dec_label_pc_10330, label %dec_label_pc_102dd

dec_label_pc_10360:                               ; preds = %dec_label_pc_10240, %dec_label_pc_102b0
  store i64 2147483647, i64* @rbp, align 8
  br label %dec_label_pc_102dd

dec_label_pc_1036a:                               ; preds = %dec_label_pc_102dd
  call void @__stack_chk_fail()
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_10370(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10370:
  %tmp5 = sext i32 %arg2 to i64
  store i64 %tmp5, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_10370 = load i64, i64* @rbp, align 8
  %v0_10371 = load i64, i64* @rbx, align 8
  store i64 %v0_10371, i64* %stack_var_-16, align 8
  %v0_10372 = load i64, i64* @rsi, align 8
  %v1_1037b = inttoptr i64 %arg1 to i8*
  %v2_1037b = call i32 @strlen(i8* %v1_1037b)
  %v4_1037b = sext i32 %v2_1037b to i64
  %v1_10384 = trunc i64 %v0_10372 to i32
  store i64 %v0_10372, i64* @rdx, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_10389 = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_10389, i64* @rbx, align 8
  store i64 %v0_10370, i64* @rbp, align 8
  store i64 %v4_1037b, i64* @rsi, align 8
  %v5_1038e = call i64 @function_101b0(i64 %arg1, i64 %v4_1037b, i32 %v1_10384)
  ret i64 %v5_1038e
}

define i64 @function_103a0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_103a0:
  %r12.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-104 = alloca i64, align 8
  %v0_103a0 = load i64, i64* @r15, align 8
  %v0_103a2 = load i64, i64* @r14, align 8
  %v0_103a4 = load i64, i64* @r13, align 8
  %v0_103a6 = load i64, i64* @r12, align 8
  %v0_103a8 = load i64, i64* @rdi, align 8
  store i64 %v0_103a8, i64* @r13, align 8
  %v0_103ab = load i64, i64* @rbp, align 8
  %v0_103ac = load i64, i64* @rbx, align 8
  %v0_103ad = load i64, i64* @rcx, align 8
  store i64 %v0_103ad, i64* @rbx, align 8
  %v0_103b4 = load i64, i64* @rsi, align 8
  store i64 %v0_103b4, i64* %stack_var_-104, align 8
  %v0_103bc = load i64, i64* @rdx, align 8
  %tmp95 = icmp ult i64 %v0_103b4, 3
  br i1 %tmp95, label %dec_label_pc_103c3, label %dec_label_pc_103f0

dec_label_pc_103c3:                               ; preds = %dec_label_pc_103a0
  %v10_103b4 = icmp eq i64 %v0_103b4, 2
  %v1_103c3 = icmp eq i1 %v10_103b4, false
  br i1 %v1_103c3, label %dec_label_pc_103e0, label %dec_label_pc_103c5

dec_label_pc_103c5:                               ; preds = %dec_label_pc_103c3
  %v1_103c5 = add i64 %v0_103a8, 8
  %v2_103c5 = inttoptr i64 %v1_103c5 to i64*
  %v3_103c5 = load i64, i64* %v2_103c5, align 8
  store i64 %v3_103c5, i64* %r12.global-to-local, align 8
  store i64 %v0_103a8, i64* %rbp.global-to-local, align 8
  store i64 %v3_103c5, i64* @rsi, align 8
  %v0_103d4 = load i64, i64* @rax, align 8
  %v4_103d4 = trunc i64 %v0_103d4 to i32
  %tmp82 = icmp slt i32 %v4_103d4, 1
  br i1 %tmp82, label %dec_label_pc_103e0, label %dec_label_pc_103d8

dec_label_pc_103d8:                               ; preds = %dec_label_pc_103c5
  %v2_103d8 = inttoptr i64 %v0_103a8 to i64*
  store i64 %v3_103c5, i64* %v2_103d8, align 8
  %v0_103dc = load i64, i64* %rbp.global-to-local, align 8
  %v1_103dc = load i64, i64* @r13, align 8
  %v2_103dc = add i64 %v1_103dc, 8
  %v3_103dc = inttoptr i64 %v2_103dc to i64*
  store i64 %v0_103dc, i64* %v3_103dc, align 8
  br label %dec_label_pc_103e0

dec_label_pc_103e0.loopexit:                      ; preds = %dec_label_pc_10484
  br label %dec_label_pc_103e0

dec_label_pc_103e0:                               ; preds = %dec_label_pc_103e0.loopexit, %dec_label_pc_103d8, %dec_label_pc_103c5, %dec_label_pc_103c3
  store i64 %v0_103ac, i64* @rbx, align 8
  store i64 %v0_103ab, i64* @rbp, align 8
  store i64 %v0_103a6, i64* @r12, align 8
  store i64 %v0_103a4, i64* @r13, align 8
  store i64 %v0_103a2, i64* @r14, align 8
  store i64 %v0_103a0, i64* @r15, align 8
  %v0_103ee = load i64, i64* @rax, align 8
  ret i64 %v0_103ee

dec_label_pc_103f0:                               ; preds = %dec_label_pc_103a0
  store i64 %v0_103b4, i64* @rax, align 8
  store i64 %v0_103bc, i64* @r15, align 8
  %v2_10402 = udiv i64 %v0_103b4, 2
  %v2_10405 = mul i64 %v2_10402, 8
  %v3_10405 = add i64 %v2_10405, %v0_103a8
  store i64 %v3_10405, i64* @rdi, align 8
  %v2_10409 = sub i64 %v0_103b4, %v2_10402
  store i64 %v2_10409, i64* @rsi, align 8
  store i64 %v2_10402, i64* @r14, align 8
  %v4_1041c = call i64 @function_103a0(i64 %v3_10405, i64 %v2_10409, i64 %v0_103bc, i64 %v0_103ad)
  store i64 %v4_1041c, i64* @rax, align 8
  %v0_10421 = load i64, i64* @r14, align 8
  %v10_10421 = icmp eq i64 %v0_10421, 1
  %v1_10425 = icmp eq i1 %v10_10421, false
  br i1 %v1_10425, label %dec_label_pc_104f0, label %dec_label_pc_1042b

dec_label_pc_1042b:                               ; preds = %dec_label_pc_103f0
  store i64 %v3_10405, i64* %r14.global-to-local, align 8
  %v1_1042f = load i64, i64* @r15, align 8
  %v2_1042f = inttoptr i64 %v1_1042f to i64*
  store i64 %v3_10405, i64* %v2_1042f, align 8
  %v0_10453.pre.pre = load i64, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_10432

dec_label_pc_10432:                               ; preds = %dec_label_pc_105af, %dec_label_pc_1042b
  %v0_10453.pre = phi i64 [ %v3_105d2, %dec_label_pc_105af ], [ %v0_10453.pre.pre, %dec_label_pc_1042b ]
  store i64 %v3_10405, i64* @rax, align 8
  store i64 %v2_10402, i64* %r15.global-to-local, align 8
  store i64 0, i64* %r12.global-to-local, align 8
  %v1_10448 = inttoptr i64 %v3_10405 to i64*
  %v2_10448 = load i64, i64* %v1_10448, align 8
  store i64 %v2_10448, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_10450

dec_label_pc_10450:                               ; preds = %dec_label_pc_1049f, %dec_label_pc_10432
  %v0_1045c = phi i64 [ %v3_10405, %dec_label_pc_10432 ], [ %v4_1048f, %dec_label_pc_1049f ]
  %stack_var_-96.0 = phi i64 [ 0, %dec_label_pc_10432 ], [ %v4_1048f, %dec_label_pc_1049f ]
  %v0_10456 = phi i64 [ 0, %dec_label_pc_10432 ], [ %v0_10456.pre, %dec_label_pc_1049f ]
  %v0_10453 = phi i64 [ %v0_10453.pre, %dec_label_pc_10432 ], [ %v5_104a4, %dec_label_pc_1049f ]
  %v0_10450 = phi i64 [ %v2_10448, %dec_label_pc_10432 ], [ %v0_10450.pre, %dec_label_pc_1049f ]
  store i64 %v0_10450, i64* @rsi, align 8
  store i64 %v0_10453, i64* @rdi, align 8
  %v1_10456 = add i64 %v0_10456, 1
  store i64 %v1_10456, i64* %r12.global-to-local, align 8
  %v4_1045c = trunc i64 %v0_1045c to i32
  %tmp86 = icmp slt i32 %v4_1045c, 1
  br i1 %tmp86, label %dec_label_pc_10450.dec_label_pc_10484_crit_edge, label %dec_label_pc_10460.preheader

dec_label_pc_10450.dec_label_pc_10484_crit_edge:  ; preds = %dec_label_pc_10450
  %v1_1048a.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_10484

dec_label_pc_10460.preheader:                     ; preds = %dec_label_pc_10450
  %v0_10460.pre = load i64, i64* %r15.global-to-local, align 8
  %v1_10468.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_10460

dec_label_pc_10460:                               ; preds = %dec_label_pc_10460.preheader, %dec_label_pc_1046f
  %v2_10468 = phi i64 [ %v1_10456, %dec_label_pc_10460.preheader ], [ %v1_10477, %dec_label_pc_1046f ]
  %v1_10468 = phi i64 [ %v1_10468.pre, %dec_label_pc_10460.preheader ], [ %v0_1046f, %dec_label_pc_1046f ]
  %v0_10468 = phi i64 [ %v0_10450, %dec_label_pc_10460.preheader ], [ %v5_1046f, %dec_label_pc_1046f ]
  %v0_10460 = phi i64 [ %v0_10460.pre, %dec_label_pc_10460.preheader ], [ %v1_1046f, %dec_label_pc_1046f ]
  %v1_10460 = add i64 %v0_10460, 1
  store i64 %v1_10460, i64* %r15.global-to-local, align 8
  %v2_10464 = load i64, i64* %stack_var_-104, align 8
  %v14_10464 = icmp eq i64 %v2_10464, %v1_10460
  %v3_10468 = mul i64 %v2_10468, 8
  %v4_10468 = add i64 %v1_10468, -8
  %v5_10468 = add i64 %v4_10468, %v3_10468
  %v6_10468 = inttoptr i64 %v5_10468 to i64*
  store i64 %v0_10468, i64* %v6_10468, align 8
  br i1 %v14_10464, label %dec_label_pc_104b0, label %dec_label_pc_1046f

dec_label_pc_1046f:                               ; preds = %dec_label_pc_10460
  %v0_1046f = load i64, i64* @r13, align 8
  %v1_1046f = load i64, i64* %r15.global-to-local, align 8
  %v2_1046f = mul i64 %v1_1046f, 8
  %v3_1046f = add i64 %v2_1046f, %v0_1046f
  %v4_1046f = inttoptr i64 %v3_1046f to i64*
  %v5_1046f = load i64, i64* %v4_1046f, align 8
  store i64 %v5_1046f, i64* %rbp.global-to-local, align 8
  %v0_10474 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_10474, i64* @rdi, align 8
  %v0_10477 = load i64, i64* %r12.global-to-local, align 8
  %v1_10477 = add i64 %v0_10477, 1
  store i64 %v1_10477, i64* %r12.global-to-local, align 8
  store i64 %v5_1046f, i64* @rsi, align 8
  %v0_10480 = load i64, i64* @rax, align 8
  %v4_10480 = trunc i64 %v0_10480 to i32
  %v5_10480 = icmp eq i32 %v4_10480, 0
  %v6_10480 = icmp slt i32 %v4_10480, 0
  %v3_10482 = icmp eq i1 %v6_10480, false
  %v4_10482 = icmp eq i1 %v5_10480, false
  %v5_10482 = icmp eq i1 %v3_10482, %v4_10482
  br i1 %v5_10482, label %dec_label_pc_10460, label %dec_label_pc_10484

dec_label_pc_10484:                               ; preds = %dec_label_pc_1046f, %dec_label_pc_10450.dec_label_pc_10484_crit_edge
  %v2_1048a = phi i64 [ %v1_10456, %dec_label_pc_10450.dec_label_pc_10484_crit_edge ], [ %v1_10477, %dec_label_pc_1046f ]
  %v1_1048a = phi i64 [ %v1_1048a.pre, %dec_label_pc_10450.dec_label_pc_10484_crit_edge ], [ %v0_1046f, %dec_label_pc_1046f ]
  %v0_1048a = phi i64 [ %v0_10453, %dec_label_pc_10450.dec_label_pc_10484_crit_edge ], [ %v0_10474, %dec_label_pc_1046f ]
  %v3_1048a = mul i64 %v2_1048a, 8
  %v4_1048a = add i64 %v1_1048a, -8
  %v5_1048a = add i64 %v4_1048a, %v3_1048a
  %v6_1048a = inttoptr i64 %v5_1048a to i64*
  store i64 %v0_1048a, i64* %v6_1048a, align 8
  %v5_10484 = mul i64 %stack_var_-96.0, 4294967296
  %sext8 = add i64 %v5_10484, 4294967296
  %v4_1048f = sdiv i64 %sext8, 4294967296
  store i64 %v4_1048f, i64* @rax, align 8
  %v15_10494 = icmp eq i64 %v2_10402, %v4_1048f
  br i1 %v15_10494, label %dec_label_pc_103e0.loopexit, label %dec_label_pc_1049f

dec_label_pc_1049f:                               ; preds = %dec_label_pc_10484
  store i64 %v0_103bc, i64* @rdx, align 8
  %v2_104a4 = mul nsw i64 %v4_1048f, 8
  %v3_104a4 = add i64 %v2_104a4, %v0_103bc
  %v4_104a4 = inttoptr i64 %v3_104a4 to i64*
  %v5_104a4 = load i64, i64* %v4_104a4, align 8
  store i64 %v5_104a4, i64* %r14.global-to-local, align 8
  %v0_10450.pre = load i64, i64* %rbp.global-to-local, align 8
  %v0_10456.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_10450

dec_label_pc_104b0:                               ; preds = %dec_label_pc_10460
  store i64 %stack_var_-96.0, i64* %rax.global-to-local, align 8
  %v0_104b5 = load i64, i64* @r13, align 8
  %v1_104b5 = load i64, i64* %r12.global-to-local, align 8
  %v2_104b5 = mul i64 %v1_104b5, 8
  %v3_104b5 = add i64 %v2_104b5, %v0_104b5
  store i64 %v3_104b5, i64* @rdi, align 8
  store i64 %v0_103bc, i64* @rcx, align 8
  store i64 %v0_103ac, i64* @rbx, align 8
  %v2_104c9 = sub i64 %v2_10402, %stack_var_-96.0
  store i64 %v0_103ab, i64* @rbp, align 8
  %v1_104cd = mul i64 %v2_104c9, 8
  %v2_104cd = trunc i64 %v1_104cd to i32
  store i64 %v1_104cd, i64* @rdx, align 8
  %v2_104d5 = mul nsw i64 %stack_var_-96.0, 8
  %v3_104d5 = add i64 %v2_104d5, %v0_103bc
  store i64 %v3_104d5, i64* @rsi, align 8
  store i64 %v0_103a6, i64* @r12, align 8
  store i64 %v0_103a4, i64* @r13, align 8
  store i64 %v0_103a2, i64* @r14, align 8
  store i64 %v0_103a0, i64* @r15, align 8
  %v1_104e1 = inttoptr i64 %v3_104b5 to i64*
  %v3_104e1 = inttoptr i64 %v3_104d5 to i64*
  %v7_104e1 = call i64* @memcpy(i64* %v1_104e1, i64* %v3_104e1, i32 %v2_104cd)
  %v9_104e1 = ptrtoint i64* %v7_104e1 to i64
  store i64 %v9_104e1, i64* %rax.global-to-local, align 8
  ret i64 %v9_104e1

dec_label_pc_104f0:                               ; preds = %dec_label_pc_103f0
  %v2_104f0 = load i64, i64* %stack_var_-104, align 8
  store i64 %v0_103bc, i64* @r12, align 8
  %v0_104f9 = load i64, i64* @rbx, align 8
  store i64 %v0_104f9, i64* @rcx, align 8
  %v2_10501 = udiv i64 %v2_104f0, 4
  store i64 %v2_10501, i64* @r14, align 8
  store i64 %v0_103bc, i64* @rdx, align 8
  %v0_10508 = load i64, i64* @r13, align 8
  %v2_10508 = mul i64 %v2_10501, 8
  %v3_10508 = add i64 %v0_10508, %v2_10508
  store i64 %v3_10508, i64* @r15, align 8
  %v2_1050d = sub nsw i64 %v2_10402, %v2_10501
  store i64 %v2_1050d, i64* @rsi, align 8
  store i64 %v2_10501, i64* @rbp, align 8
  store i64 %v3_10508, i64* @rdi, align 8
  %v4_1051b = call i64 @function_103a0(i64 %v3_10508, i64 %v2_1050d, i64 %v0_103bc, i64 %v0_104f9)
  store i64 %v4_1051b, i64* @rax, align 8
  %v0_10520 = load i64, i64* @r14, align 8
  store i64 %v0_10520, i64* @rsi, align 8
  %v0_10523 = load i64, i64* @rbx, align 8
  store i64 %v0_10523, i64* @rcx, align 8
  %v0_10526 = load i64, i64* @r12, align 8
  store i64 %v0_10526, i64* @rdx, align 8
  %v0_10529 = load i64, i64* @r13, align 8
  store i64 %v0_10529, i64* @rdi, align 8
  %v4_1052c = call i64 @function_103a0(i64 %v0_10529, i64 %v0_10520, i64 %v0_10526, i64 %v0_10523)
  store i64 %v4_1052c, i64* %rax.global-to-local, align 8
  store i64 %v0_10529, i64* %r14.global-to-local, align 8
  %v0_10535 = load i64, i64* @r15, align 8
  %v1_10535 = inttoptr i64 %v0_10535 to i64*
  %v2_10535 = load i64, i64* %v1_10535, align 8
  store i64 %v2_10535, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_10548

dec_label_pc_10548:                               ; preds = %dec_label_pc_10594, %dec_label_pc_104f0
  %v0_10554 = phi i64 [ %v4_1052c, %dec_label_pc_104f0 ], [ %v4_10588, %dec_label_pc_10594 ]
  %v0_1054b = phi i64 [ %v0_10529, %dec_label_pc_104f0 ], [ %v5_10594, %dec_label_pc_10594 ]
  %v0_10548 = phi i64 [ %v2_10535, %dec_label_pc_104f0 ], [ %v0_10548.pre, %dec_label_pc_10594 ]
  %stack_var_-96.1 = phi i32 [ 0, %dec_label_pc_104f0 ], [ %v23_1057d, %dec_label_pc_10594 ]
  store i64 %v0_10548, i64* @rsi, align 8
  store i64 %v0_1054b, i64* @rdi, align 8
  %v0_1054e = load i64, i64* @r12, align 8
  %v1_1054e = add i64 %v0_1054e, 8
  store i64 %v1_1054e, i64* @r12, align 8
  %v4_10554 = trunc i64 %v0_10554 to i32
  %tmp87 = icmp slt i32 %v4_10554, 1
  br i1 %tmp87, label %dec_label_pc_1057d, label %dec_label_pc_10558.preheader

dec_label_pc_10558.preheader:                     ; preds = %dec_label_pc_10548
  %v0_10558.pre = load i64, i64* @rbp, align 8
  br label %dec_label_pc_10558

dec_label_pc_10558:                               ; preds = %dec_label_pc_10558.preheader, %dec_label_pc_10568
  %v1_10561 = phi i64 [ %v1_1054e, %dec_label_pc_10558.preheader ], [ %v1_10570, %dec_label_pc_10568 ]
  %v0_10561 = phi i64 [ %v0_10548, %dec_label_pc_10558.preheader ], [ %v5_10568, %dec_label_pc_10568 ]
  %v0_10558 = phi i64 [ %v0_10558.pre, %dec_label_pc_10558.preheader ], [ %v1_10568, %dec_label_pc_10568 ]
  %v1_10558 = add i64 %v0_10558, 1
  store i64 %v1_10558, i64* @rbp, align 8
  %v15_1055c = icmp eq i64 %v2_10402, %v1_10558
  %v2_10561 = add i64 %v1_10561, -8
  %v3_10561 = inttoptr i64 %v2_10561 to i64*
  store i64 %v0_10561, i64* %v3_10561, align 8
  br i1 %v15_1055c, label %dec_label_pc_105af.loopexit, label %dec_label_pc_10568

dec_label_pc_10568:                               ; preds = %dec_label_pc_10558
  %v0_10568 = load i64, i64* @r13, align 8
  %v1_10568 = load i64, i64* @rbp, align 8
  %v2_10568 = mul i64 %v1_10568, 8
  %v3_10568 = add i64 %v2_10568, %v0_10568
  %v4_10568 = inttoptr i64 %v3_10568 to i64*
  %v5_10568 = load i64, i64* %v4_10568, align 8
  store i64 %v5_10568, i64* %r15.global-to-local, align 8
  %v0_1056d = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_1056d, i64* @rdi, align 8
  %v0_10570 = load i64, i64* @r12, align 8
  %v1_10570 = add i64 %v0_10570, 8
  store i64 %v1_10570, i64* @r12, align 8
  store i64 %v5_10568, i64* @rsi, align 8
  %v0_10579 = load i64, i64* %rax.global-to-local, align 8
  %v4_10579 = trunc i64 %v0_10579 to i32
  %v5_10579 = icmp eq i32 %v4_10579, 0
  %v6_10579 = icmp slt i32 %v4_10579, 0
  %v3_1057b = icmp eq i1 %v6_10579, false
  %v4_1057b = icmp eq i1 %v5_10579, false
  %v5_1057b = icmp eq i1 %v3_1057b, %v4_1057b
  br i1 %v5_1057b, label %dec_label_pc_10558, label %dec_label_pc_1057d

dec_label_pc_1057d:                               ; preds = %dec_label_pc_10568, %dec_label_pc_10548
  %v1_10583 = phi i64 [ %v1_1054e, %dec_label_pc_10548 ], [ %v1_10570, %dec_label_pc_10568 ]
  %v0_10583 = phi i64 [ %v0_1054b, %dec_label_pc_10548 ], [ %v0_1056d, %dec_label_pc_10568 ]
  %v4_1057d = sext i32 %stack_var_-96.1 to i64
  %v5_1057d = add nsw i64 %v4_1057d, 1
  %v2_10583 = add i64 %v1_10583, -8
  %v3_10583 = inttoptr i64 %v2_10583 to i64*
  store i64 %v0_10583, i64* %v3_10583, align 8
  %sext = mul i64 %v5_1057d, 4294967296
  %v4_10588 = sdiv i64 %sext, 4294967296
  store i64 %v4_10588, i64* %rax.global-to-local, align 8
  %v15_1058d = icmp eq i64 %v2_10501, %v4_10588
  br i1 %v15_1058d, label %dec_label_pc_105a0, label %dec_label_pc_10594

dec_label_pc_10594:                               ; preds = %dec_label_pc_1057d
  %v23_1057d = trunc i64 %v5_1057d to i32
  %v0_10594 = load i64, i64* @r13, align 8
  %v2_10594 = mul nsw i64 %v4_10588, 8
  %v3_10594 = add i64 %v0_10594, %v2_10594
  %v4_10594 = inttoptr i64 %v3_10594 to i64*
  %v5_10594 = load i64, i64* %v4_10594, align 8
  store i64 %v5_10594, i64* %r14.global-to-local, align 8
  %v0_10548.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_10548

dec_label_pc_105a0:                               ; preds = %dec_label_pc_1057d
  store i64 %v2_10402, i64* %rax.global-to-local, align 8
  %v0_105a5 = load i64, i64* @rbp, align 8
  %v4_105a5 = trunc i64 %v0_105a5 to i32
  br label %dec_label_pc_105af

dec_label_pc_105af.loopexit:                      ; preds = %dec_label_pc_10558
  br label %dec_label_pc_105af

dec_label_pc_105af:                               ; preds = %dec_label_pc_105af.loopexit, %dec_label_pc_105a0
  %stack_var_-96.2 = phi i32 [ %v4_105a5, %dec_label_pc_105a0 ], [ %stack_var_-96.1, %dec_label_pc_105af.loopexit ]
  %stack_var_-72.0 = phi i64 [ %v2_10402, %dec_label_pc_105a0 ], [ %v2_10501, %dec_label_pc_105af.loopexit ]
  %v4_105af = sext i32 %stack_var_-96.2 to i64
  store i64 %v4_105af, i64* %rax.global-to-local, align 8
  %v0_105b9 = load i64, i64* @r12, align 8
  store i64 %v0_105b9, i64* @rdi, align 8
  %v2_105bc = sub i64 %stack_var_-72.0, %v4_105af
  %v0_105bf = load i64, i64* @r13, align 8
  %v2_105bf = mul nsw i64 %v4_105af, 8
  %v3_105bf = add i64 %v0_105bf, %v2_105bf
  store i64 %v3_105bf, i64* @rsi, align 8
  %v2_105c4 = mul i64 %v2_105bc, 8
  %v9_105c4 = trunc i64 %v2_105c4 to i32
  store i64 %v2_105c4, i64* @rdx, align 8
  %v1_105c8 = inttoptr i64 %v0_105b9 to i64*
  %v3_105c8 = inttoptr i64 %v3_105bf to i64*
  %v7_105c8 = call i64* @memcpy(i64* %v1_105c8, i64* %v3_105c8, i32 %v9_105c4)
  store i64 %v0_103bc, i64* %rax.global-to-local, align 8
  %sext9 = mul i64 %v2_105bc, 34359738368
  %v3_105d2 = sdiv i64 %sext9, 4294967296
  store i64 %v3_105d2, i64* %r14.global-to-local, align 8
  br label %dec_label_pc_10432
}

define i64 @function_105e0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_105e0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v2_105e0 = mul i64 %arg2, 8
  %v3_105e0 = add i64 %v2_105e0, %arg1
  store i64 %v3_105e0, i64* @rax, align 8
  store i64 %arg3, i64* @rcx, align 8
  store i64 %v3_105e0, i64* @rdx, align 8
  %v4_105ea = call i64 @function_103a0(i64 %arg1, i64 %arg2, i64 %v3_105e0, i64 %arg3)
  ret i64 %v4_105ea
}

define i64 @function_105f0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_105f0:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v1_105f0 = icmp eq i64 %arg3, 0
  %v0_105f6 = load i64, i64* @rdi, align 8
  store i64 %v0_105f6, i64* %rbp.global-to-local, align 8
  %v0_105f9 = load i64, i64* @rbx, align 8
  store i64 %v0_105f9, i64* %stack_var_-24, align 8
  br i1 %v1_105f0, label %dec_label_pc_10629, label %dec_label_pc_105fc

dec_label_pc_105fc:                               ; preds = %dec_label_pc_105f0
  %v0_105fc = load i64, i64* @rsi, align 8
  store i64 %v0_105fc, i64* %r12.global-to-local, align 8
  %v1_105ff = add i64 %arg3, -1
  store i64 %v1_105ff, i64* %rbx.global-to-local, align 8
  %v0_10603 = call i32** @__ctype_tolower_loc()
  %v2_10603 = ptrtoint i32** %v0_10603 to i64
  store i64 %v2_10603, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_10610

dec_label_pc_10610:                               ; preds = %dec_label_pc_10610.dec_label_pc_10610_crit_edge, %dec_label_pc_105fc
  %v0_10615 = phi i64 [ %v0_10615.pre, %dec_label_pc_10610.dec_label_pc_10610_crit_edge ], [ %v2_10603, %dec_label_pc_105fc ]
  %v3_1061b = phi i64 [ %v1_1061f, %dec_label_pc_10610.dec_label_pc_10610_crit_edge ], [ %v1_105ff, %dec_label_pc_105fc ]
  %v0_10610 = load i64, i64* %r12.global-to-local, align 8
  %v3_10610 = add i64 %v0_10610, %v3_1061b
  %v4_10610 = inttoptr i64 %v3_10610 to i8*
  %v5_10610 = load i8, i8* %v4_10610, align 1
  %v6_10610 = zext i8 %v5_10610 to i64
  store i64 %v6_10610, i64* @rcx, align 8
  %v1_10615 = inttoptr i64 %v0_10615 to i64*
  %v2_10615 = load i64, i64* %v1_10615, align 8
  store i64 %v2_10615, i64* @rdx, align 8
  %v2_10618 = mul nuw nsw i64 %v6_10610, 4
  %v3_10618 = add i64 %v2_10615, %v2_10618
  %v4_10618 = inttoptr i64 %v3_10618 to i32*
  %v5_10618 = load i32, i32* %v4_10618, align 4
  %v6_10618 = zext i32 %v5_10618 to i64
  store i64 %v6_10618, i64* @rdx, align 8
  %v1_1061b = trunc i32 %v5_10618 to i8
  %v2_1061b = load i64, i64* %rbp.global-to-local, align 8
  %v5_1061b = add i64 %v2_1061b, %v3_1061b
  %v6_1061b = inttoptr i64 %v5_1061b to i8*
  store i8 %v1_1061b, i8* %v6_1061b, align 1
  %v0_1061f = load i64, i64* %rbx.global-to-local, align 8
  %v1_1061f = add i64 %v0_1061f, -1
  %v5_1061f = icmp eq i64 %v0_1061f, 0
  store i64 %v1_1061f, i64* %rbx.global-to-local, align 8
  %v1_10627 = icmp eq i1 %v5_1061f, false
  br i1 %v1_10627, label %dec_label_pc_10610.dec_label_pc_10610_crit_edge, label %dec_label_pc_10629.loopexit

dec_label_pc_10610.dec_label_pc_10610_crit_edge:  ; preds = %dec_label_pc_10610
  %v0_10615.pre = load i64, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_10610

dec_label_pc_10629.loopexit:                      ; preds = %dec_label_pc_10610
  %v0_10629.pre = load i64, i64* %rbp.global-to-local, align 8
  %v2_1062c.pre = load i64, i64* %stack_var_-24, align 8
  br label %dec_label_pc_10629

dec_label_pc_10629:                               ; preds = %dec_label_pc_10629.loopexit, %dec_label_pc_105f0
  %v2_1062c = phi i64 [ %v2_1062c.pre, %dec_label_pc_10629.loopexit ], [ %v0_105f9, %dec_label_pc_105f0 ]
  %v0_10629 = phi i64 [ %v0_10629.pre, %dec_label_pc_10629.loopexit ], [ %v0_105f6, %dec_label_pc_105f0 ]
  store i64 %v0_10629, i64* %rax.global-to-local, align 8
  store i64 %v2_1062c, i64* @rbx, align 8
  ret i64 %v0_10629
}

define i64 @function_10640(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_10640:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v1_10640 = icmp eq i64 %arg3, 0
  %v0_10646 = load i64, i64* @rdi, align 8
  store i64 %v0_10646, i64* %rbp.global-to-local, align 8
  %v0_10649 = load i64, i64* @rbx, align 8
  store i64 %v0_10649, i64* %stack_var_-24, align 8
  br i1 %v1_10640, label %dec_label_pc_10679, label %dec_label_pc_1064c

dec_label_pc_1064c:                               ; preds = %dec_label_pc_10640
  %v0_1064c = load i64, i64* @rsi, align 8
  store i64 %v0_1064c, i64* %r12.global-to-local, align 8
  %v1_1064f = add i64 %arg3, -1
  store i64 %v1_1064f, i64* %rbx.global-to-local, align 8
  %v0_10653 = call i32** @__ctype_toupper_loc()
  %v2_10653 = ptrtoint i32** %v0_10653 to i64
  store i64 %v2_10653, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_10660

dec_label_pc_10660:                               ; preds = %dec_label_pc_10660.dec_label_pc_10660_crit_edge, %dec_label_pc_1064c
  %v0_10665 = phi i64 [ %v0_10665.pre, %dec_label_pc_10660.dec_label_pc_10660_crit_edge ], [ %v2_10653, %dec_label_pc_1064c ]
  %v3_1066b = phi i64 [ %v1_1066f, %dec_label_pc_10660.dec_label_pc_10660_crit_edge ], [ %v1_1064f, %dec_label_pc_1064c ]
  %v0_10660 = load i64, i64* %r12.global-to-local, align 8
  %v3_10660 = add i64 %v0_10660, %v3_1066b
  %v4_10660 = inttoptr i64 %v3_10660 to i8*
  %v5_10660 = load i8, i8* %v4_10660, align 1
  %v6_10660 = zext i8 %v5_10660 to i64
  store i64 %v6_10660, i64* @rcx, align 8
  %v1_10665 = inttoptr i64 %v0_10665 to i64*
  %v2_10665 = load i64, i64* %v1_10665, align 8
  store i64 %v2_10665, i64* @rdx, align 8
  %v2_10668 = mul nuw nsw i64 %v6_10660, 4
  %v3_10668 = add i64 %v2_10665, %v2_10668
  %v4_10668 = inttoptr i64 %v3_10668 to i32*
  %v5_10668 = load i32, i32* %v4_10668, align 4
  %v6_10668 = zext i32 %v5_10668 to i64
  store i64 %v6_10668, i64* @rdx, align 8
  %v1_1066b = trunc i32 %v5_10668 to i8
  %v2_1066b = load i64, i64* %rbp.global-to-local, align 8
  %v5_1066b = add i64 %v2_1066b, %v3_1066b
  %v6_1066b = inttoptr i64 %v5_1066b to i8*
  store i8 %v1_1066b, i8* %v6_1066b, align 1
  %v0_1066f = load i64, i64* %rbx.global-to-local, align 8
  %v1_1066f = add i64 %v0_1066f, -1
  %v5_1066f = icmp eq i64 %v0_1066f, 0
  store i64 %v1_1066f, i64* %rbx.global-to-local, align 8
  %v1_10677 = icmp eq i1 %v5_1066f, false
  br i1 %v1_10677, label %dec_label_pc_10660.dec_label_pc_10660_crit_edge, label %dec_label_pc_10679.loopexit

dec_label_pc_10660.dec_label_pc_10660_crit_edge:  ; preds = %dec_label_pc_10660
  %v0_10665.pre = load i64, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_10660

dec_label_pc_10679.loopexit:                      ; preds = %dec_label_pc_10660
  %v0_10679.pre = load i64, i64* %rbp.global-to-local, align 8
  %v2_1067c.pre = load i64, i64* %stack_var_-24, align 8
  br label %dec_label_pc_10679

dec_label_pc_10679:                               ; preds = %dec_label_pc_10679.loopexit, %dec_label_pc_10640
  %v2_1067c = phi i64 [ %v2_1067c.pre, %dec_label_pc_10679.loopexit ], [ %v0_10649, %dec_label_pc_10640 ]
  %v0_10679 = phi i64 [ %v0_10679.pre, %dec_label_pc_10679.loopexit ], [ %v0_10646, %dec_label_pc_10640 ]
  store i64 %v0_10679, i64* %rax.global-to-local, align 8
  store i64 %v2_1067c, i64* @rbx, align 8
  ret i64 %v0_10679
}

define i64 @function_10690(i32 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8) local_unnamed_addr {
dec_label_pc_10690:
  %r10.global-to-local = alloca i64, align 8
  %r11.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg6, i64* @r9, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  %tmp231 = sext i32 %arg1 to i64
  store i64 %tmp231, i64* @rdi, align 8
  %stack_var_-1096 = alloca i64, align 8
  %tmp266 = call i64 @__decompiler_undefined_function_0()
  %tmp268 = call i64 @__decompiler_undefined_function_0()
  %tmp272 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-1099 = alloca i64, align 8
  %stack_var_-1101 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_10690 = load i64, i64* @r15, align 8
  %v0_10692 = load i64, i64* @r14, align 8
  %v0_10694 = load i64, i64* @rdi, align 8
  store i64 %v0_10694, i64* @r15, align 8
  %v0_10697 = load i64, i64* @r13, align 8
  %v0_10699 = load i64, i64* @r12, align 8
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* %rax.global-to-local, align 8
  %v0_106a2 = load i64, i64* @rbp, align 8
  %v0_106a3 = load i64, i64* @rbx, align 8
  store i64 %v0_106a3, i64* %stack_var_-48, align 8
  %v0_106a4 = load i64, i64* @rsi, align 8
  store i64 %v0_106a4, i64* %r10.global-to-local, align 8
  %v0_106a7 = load i64, i64* @rdx, align 8
  store i64 %v0_106a7, i64* %r11.global-to-local, align 8
  %v0_106b1 = load i64, i64* @rcx, align 8
  %v1_106b1 = add i64 %v0_106b1, 48
  %v2_106b1 = inttoptr i64 %v1_106b1 to i64*
  %v3_106b1 = load i64, i64* %v2_106b1, align 8
  store i64 %v3_106b1, i64* @rbx, align 8
  %v1_106b5 = add i64 %v0_106b1, 8
  %v2_106b5 = inttoptr i64 %v1_106b5 to i32*
  %v3_106b5 = load i32, i32* %v2_106b5, align 4
  %v4_106b5 = zext i32 %v3_106b5 to i64
  store i64 %v4_106b5, i64* %r14.global-to-local, align 8
  store i64 %arg7, i64* @rdi, align 8
  %v0_106cb = load i64, i64* @r8, align 8
  %v0_106d5 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* @rdi, align 8
  %v0_106e8 = load i64, i64* @rbx, align 8
  %v1_106e8 = icmp eq i64 %v0_106e8, 0
  %v1_106eb = icmp eq i1 %v1_106e8, false
  %v2_106eb = load i64, i64* %rax.global-to-local, align 8
  %v4_106eb = select i1 %v1_106eb, i64 %v0_106e8, i64 %v2_106eb
  store i64 %v4_106eb, i64* %rax.global-to-local, align 8
  %v0_106ef = load i64, i64* %r14.global-to-local, align 8
  %v1_106ef = trunc i64 %v0_106ef to i32
  %v9_106f8 = icmp sgt i32 %v1_106ef, 12
  br i1 %v9_106f8, label %dec_label_pc_106fe, label %dec_label_pc_10810

dec_label_pc_106fe:                               ; preds = %dec_label_pc_10690
  %v3_106ef = add i64 %v0_106ef, 4294967284
  %v17_106fe = and i64 %v3_106ef, 4294967295
  br label %dec_label_pc_10702

dec_label_pc_10702:                               ; preds = %dec_label_pc_10810, %dec_label_pc_106fe
  %storemerge33 = phi i64 [ %v6_10818, %dec_label_pc_10810 ], [ %v17_106fe, %dec_label_pc_106fe ]
  store i64 %storemerge33, i64* @r14, align 8
  %v2_10702 = load i8, i8* bitcast (i64* @rdx to i8*), align 8
  %v3_10702 = zext i8 %v2_10702 to i64
  store i64 %v3_10702, i64* %rax.global-to-local, align 8
  store i64 0, i64* @r13, align 8
  %v5_10709 = icmp eq i8 %v2_10702, 0
  br i1 %v5_10709, label %dec_label_pc_10762, label %dec_label_pc_1070d

dec_label_pc_1070d:                               ; preds = %dec_label_pc_10702
  %v2_1070d = ptrtoint i64* %stack_var_-1101 to i64
  store i64 %v2_1070d, i64* @rsi, align 8
  %v2_10715 = ptrtoint i64* %stack_var_-1099 to i64
  store i64 %v2_10715, i64* @rdi, align 8
  %v0_10722 = load i64, i64* %r10.global-to-local, align 8
  store i64 %v0_10722, i64* @r12, align 8
  %tmp318 = bitcast i64* %stack_var_-1101 to i8*
  br label %dec_label_pc_1072f

dec_label_pc_1072f:                               ; preds = %dec_label_pc_10752, %dec_label_pc_1070d
  %v0_10744 = phi i8 [ %v3_10752, %dec_label_pc_10752 ], [ %v2_10702, %dec_label_pc_1070d ]
  %stack_var_-1272.0 = phi i8* [ %stack_var_-1272.1, %dec_label_pc_10752 ], [ %tmp318, %dec_label_pc_1070d ]
  %stack_var_-1256.0 = phi i64 [ %stack_var_-1256.1, %dec_label_pc_10752 ], [ %tmp268, %dec_label_pc_1070d ]
  %stack_var_-1264.0 = phi i64 [ %stack_var_-1264.1, %dec_label_pc_10752 ], [ %tmp266, %dec_label_pc_1070d ]
  %v11_1072f = icmp eq i8 %v0_10744, 37
  br i1 %v11_1072f, label %dec_label_pc_107b0, label %dec_label_pc_10733

dec_label_pc_10733:                               ; preds = %dec_label_pc_1072f
  %v0_10733 = load i64, i64* @r12, align 8
  %v1_10736 = load i64, i64* @r13, align 8
  %v2_10736 = sub i64 %v0_10733, %v1_10736
  store i64 %v2_10736, i64* @rdx, align 8
  %tmp382 = or i64 %v2_10736, 1
  %tmp383 = icmp eq i64 %tmp382, 1
  br i1 %tmp383, label %dec_label_pc_10778, label %dec_label_pc_1073f

dec_label_pc_1073f:                               ; preds = %dec_label_pc_10733
  %v0_1073f = load i64, i64* @r15, align 8
  %v1_1073f = icmp eq i64 %v0_1073f, 0
  br i1 %v1_1073f, label %dec_label_pc_1074b, label %dec_label_pc_10744

dec_label_pc_10744:                               ; preds = %dec_label_pc_1073f
  %v3_10744 = inttoptr i64 %v0_1073f to i8*
  store i8 %v0_10744, i8* %v3_10744, align 1
  %v0_10747 = load i64, i64* @r15, align 8
  %v1_10747 = add i64 %v0_10747, 1
  store i64 %v1_10747, i64* @r15, align 8
  %v0_1074b.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_1074b

dec_label_pc_1074b:                               ; preds = %dec_label_pc_10744, %dec_label_pc_1073f
  %v0_1074b = phi i64 [ %v0_1074b.pre, %dec_label_pc_10744 ], [ %v1_10736, %dec_label_pc_1073f ]
  %v1_1074b = add i64 %v0_1074b, 1
  store i64 %v1_1074b, i64* @r13, align 8
  %v0_1074f = load i64, i64* %r11.global-to-local, align 8
  store i64 %v0_1074f, i64* @r14, align 8
  br label %dec_label_pc_10752

dec_label_pc_10752:                               ; preds = %dec_label_pc_10ae1, %dec_label_pc_11f6a, %dec_label_pc_1092d, %dec_label_pc_1074b
  %stack_var_-1272.1 = phi i8* [ %stack_var_-1272.4, %dec_label_pc_11f6a ], [ %stack_var_-1272.5, %dec_label_pc_1092d ], [ %stack_var_-1272.0, %dec_label_pc_1074b ], [ %stack_var_-1272.4, %dec_label_pc_10ae1 ]
  %stack_var_-1256.1 = phi i64 [ %stack_var_-1256.4, %dec_label_pc_11f6a ], [ %stack_var_-1256.7, %dec_label_pc_1092d ], [ %stack_var_-1256.0, %dec_label_pc_1074b ], [ %v0_11973, %dec_label_pc_10ae1 ]
  %stack_var_-1264.1 = phi i64 [ %stack_var_-1264.4, %dec_label_pc_11f6a ], [ %stack_var_-1264.6, %dec_label_pc_1092d ], [ %stack_var_-1264.0, %dec_label_pc_1074b ], [ %v1_10a20, %dec_label_pc_10ae1 ]
  %v0_10752 = load i64, i64* @r14, align 8
  %v1_10752 = add i64 %v0_10752, 1
  %v2_10752 = inttoptr i64 %v1_10752 to i8*
  %v3_10752 = load i8, i8* %v2_10752, align 1
  %v4_10752 = zext i8 %v3_10752 to i64
  store i64 %v4_10752, i64* %rax.global-to-local, align 8
  store i64 %v1_10752, i64* %r11.global-to-local, align 8
  %v5_1075b = icmp eq i8 %v3_10752, 0
  %v1_1075d = icmp eq i1 %v5_1075b, false
  br i1 %v1_1075d, label %dec_label_pc_1072f, label %dec_label_pc_1075f

dec_label_pc_1075f:                               ; preds = %dec_label_pc_10752
  %v0_1075f = load i64, i64* @r12, align 8
  store i64 %v0_1075f, i64* %r10.global-to-local, align 8
  br label %dec_label_pc_10762

dec_label_pc_10762:                               ; preds = %dec_label_pc_1075f, %dec_label_pc_10702
  %stack_var_-1272.2 = phi i8* [ %tmp272, %dec_label_pc_10702 ], [ %stack_var_-1272.1, %dec_label_pc_1075f ]
  %stack_var_-1256.2 = phi i64 [ %tmp268, %dec_label_pc_10702 ], [ %stack_var_-1256.1, %dec_label_pc_1075f ]
  %stack_var_-1264.2 = phi i64 [ %tmp266, %dec_label_pc_10702 ], [ %stack_var_-1264.1, %dec_label_pc_1075f ]
  %v0_10762 = load i64, i64* @r15, align 8
  %v1_10762 = icmp eq i64 %v0_10762, 0
  br i1 %v1_10762, label %dec_label_pc_1077b, label %dec_label_pc_10767

dec_label_pc_10767:                               ; preds = %dec_label_pc_10762
  %v0_10767 = load i64, i64* %r10.global-to-local, align 8
  %v1_10767 = icmp eq i64 %v0_10767, 0
  br i1 %v1_10767, label %dec_label_pc_1077b, label %dec_label_pc_1076c

dec_label_pc_1076c:                               ; preds = %dec_label_pc_10767
  %v1_1076c = inttoptr i64 %v0_10762 to i8*
  store i8 0, i8* %v1_1076c, align 1
  br label %dec_label_pc_1077b

dec_label_pc_10778:                               ; preds = %dec_label_pc_10899, %dec_label_pc_10a20, %dec_label_pc_10733
  %stack_var_-1272.3 = phi i8* [ %stack_var_-1272.0, %dec_label_pc_10899 ], [ %stack_var_-1272.0, %dec_label_pc_10733 ], [ %stack_var_-1272.4, %dec_label_pc_10a20 ]
  %stack_var_-1256.3 = phi i64 [ %stack_var_-1256.5.ph, %dec_label_pc_10899 ], [ %stack_var_-1256.0, %dec_label_pc_10733 ], [ %stack_var_-1256.4, %dec_label_pc_10a20 ]
  %stack_var_-1264.3 = phi i64 [ %stack_var_-1264.5.ph47, %dec_label_pc_10899 ], [ %stack_var_-1264.0, %dec_label_pc_10733 ], [ %stack_var_-1264.4, %dec_label_pc_10a20 ]
  store i64 0, i64* @r13, align 8
  br label %dec_label_pc_1077b

dec_label_pc_1077b:                               ; preds = %dec_label_pc_10778, %dec_label_pc_1076c, %dec_label_pc_10767, %dec_label_pc_10762
  %stack_var_-1272.4 = phi i8* [ %stack_var_-1272.2, %dec_label_pc_10762 ], [ %stack_var_-1272.3, %dec_label_pc_10778 ], [ %stack_var_-1272.2, %dec_label_pc_10767 ], [ %stack_var_-1272.2, %dec_label_pc_1076c ]
  %stack_var_-1256.4 = phi i64 [ %stack_var_-1256.2, %dec_label_pc_10762 ], [ %stack_var_-1256.3, %dec_label_pc_10778 ], [ %stack_var_-1256.2, %dec_label_pc_10767 ], [ %stack_var_-1256.2, %dec_label_pc_1076c ]
  %stack_var_-1264.4 = phi i64 [ %stack_var_-1264.2, %dec_label_pc_10762 ], [ %stack_var_-1264.3, %dec_label_pc_10778 ], [ %stack_var_-1264.2, %dec_label_pc_10767 ], [ %stack_var_-1264.2, %dec_label_pc_1076c ]
  store i64 %v0_106d5, i64* @rdi, align 8
  %v1_10783 = call i64 @__readfsqword(i64 40)
  %v2_10783 = xor i64 %v1_10783, %v0_106d5
  %v3_10783 = icmp eq i64 %v2_10783, 0
  store i64 %v2_10783, i64* @rdi, align 8
  %v0_1078c = load i64, i64* @r13, align 8
  store i64 %v0_1078c, i64* %rax.global-to-local, align 8
  %v1_1078f = icmp eq i1 %v3_10783, false
  br i1 %v1_1078f, label %dec_label_pc_11f6a, label %dec_label_pc_10795

dec_label_pc_10795:                               ; preds = %dec_label_pc_1077b
  %v2_1079c = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_1079c, i64* @rbx, align 8
  store i64 %v0_106a2, i64* @rbp, align 8
  store i64 %v0_10699, i64* @r12, align 8
  store i64 %v0_10697, i64* @r13, align 8
  store i64 %v0_10692, i64* @r14, align 8
  %sext349 = mul i64 %v0_10690, 4294967296
  %v3_107a4 = sdiv i64 %sext349, 4294967296
  store i64 %v3_107a4, i64* @r15, align 8
  ret i64 %v0_1078c

dec_label_pc_107b0:                               ; preds = %dec_label_pc_1072f
  store i64 %v0_106cb, i64* %rax.global-to-local, align 8
  store i64 0, i64* @r8, align 8
  %v0_107c4.pre.pre.pre = load i64, i64* %r11.global-to-local, align 8
  br label %dec_label_pc_107c4.outer

dec_label_pc_107c4.outer:                         ; preds = %dec_label_pc_10800, %dec_label_pc_10828, %dec_label_pc_107c4, %dec_label_pc_107b0
  %v0_107c4.pre.pre = phi i64 [ %v0_107c4.pre.pre.pre, %dec_label_pc_107b0 ], [ %v1_107c4, %dec_label_pc_107c4 ], [ %v1_107c4, %dec_label_pc_10828 ], [ %v1_107c4, %dec_label_pc_10800 ]
  %stack_var_-1256.5.ph = phi i64 [ 0, %dec_label_pc_107b0 ], [ %v3_107c8, %dec_label_pc_107c4 ], [ %v3_107c8, %dec_label_pc_10828 ], [ %v3_107c8, %dec_label_pc_10800 ]
  %stack_var_-1264.5.ph = phi i64 [ %v0_106cb, %dec_label_pc_107b0 ], [ %stack_var_-1264.5.ph47, %dec_label_pc_107c4 ], [ %stack_var_-1264.5.ph47, %dec_label_pc_10828 ], [ %stack_var_-1264.5.ph47, %dec_label_pc_10800 ]
  br label %dec_label_pc_107c4.outer46

dec_label_pc_107c4.outer46:                       ; preds = %dec_label_pc_107c4.outer, %dec_label_pc_107f0
  %v0_107c4.pre = phi i64 [ %v0_107c4.pre.pre, %dec_label_pc_107c4.outer ], [ %v1_107c4, %dec_label_pc_107f0 ]
  %stack_var_-1264.5.ph47 = phi i64 [ %stack_var_-1264.5.ph, %dec_label_pc_107c4.outer ], [ 1, %dec_label_pc_107f0 ]
  br label %dec_label_pc_107c4

dec_label_pc_107c4:                               ; preds = %dec_label_pc_107c4.outer46, %dec_label_pc_107de
  %v0_107c4 = phi i64 [ %v0_107c4.pre, %dec_label_pc_107c4.outer46 ], [ %v1_107c4, %dec_label_pc_107de ]
  %v1_107c4 = add i64 %v0_107c4, 1
  store i64 %v1_107c4, i64* %r11.global-to-local, align 8
  %v1_107c8 = inttoptr i64 %v1_107c4 to i8*
  %v2_107c8 = load i8, i8* %v1_107c8, align 1
  %v3_107c8 = sext i8 %v2_107c8 to i64
  store i64 %v3_107c8, i64* @rbp, align 8
  %v11_107cc = icmp eq i8 %v2_107c8, 48
  store i64 %v3_107c8, i64* @rcx, align 8
  store i64 %v3_107c8, i64* @rdi, align 8
  br i1 %v11_107cc, label %dec_label_pc_107c4.outer, label %dec_label_pc_107d6

dec_label_pc_107d6:                               ; preds = %dec_label_pc_107c4
  %v10_107d6 = icmp sgt i8 %v2_107c8, 48
  br i1 %v10_107d6, label %dec_label_pc_107f0, label %dec_label_pc_107d8

dec_label_pc_107d8:                               ; preds = %dec_label_pc_107d6
  %v11_107d8 = icmp eq i8 %v2_107c8, 35
  %v1_107dc = icmp eq i1 %v11_107d8, false
  br i1 %v1_107dc, label %dec_label_pc_10800, label %dec_label_pc_107de

dec_label_pc_107de:                               ; preds = %dec_label_pc_107d8
  store i64 1, i64* @r8, align 8
  br label %dec_label_pc_107c4

dec_label_pc_107f0:                               ; preds = %dec_label_pc_107d6
  %v11_107f0 = icmp eq i8 %v2_107c8, 94
  %v1_107f4 = icmp eq i1 %v11_107f0, false
  br i1 %v1_107f4, label %dec_label_pc_10828, label %dec_label_pc_107c4.outer46

dec_label_pc_10800:                               ; preds = %dec_label_pc_107d8
  %v11_10800 = icmp eq i8 %v2_107c8, 45
  %v1_10804 = icmp eq i1 %v11_10800, false
  br i1 %v1_10804, label %dec_label_pc_1082e, label %dec_label_pc_107c4.outer

dec_label_pc_10810:                               ; preds = %dec_label_pc_10690
  %v5_10810 = icmp eq i32 %v1_106ef, 0
  store i64 12, i64* %rax.global-to-local, align 8
  %tmp328 = and i64 %v0_106ef, 4294967295
  %v6_10818 = select i1 %v5_10810, i64 12, i64 %tmp328
  br label %dec_label_pc_10702

dec_label_pc_10828:                               ; preds = %dec_label_pc_107f0
  %v11_10828 = icmp eq i8 %v2_107c8, 95
  br i1 %v11_10828, label %dec_label_pc_107c4.outer, label %dec_label_pc_1082e

dec_label_pc_1082e:                               ; preds = %dec_label_pc_10828, %dec_label_pc_10800
  %v1_1082e = add nsw i64 %v3_107c8, -48
  store i64 %v1_1082e, i64* %rax.global-to-local, align 8
  store i64 4294967295, i64* @rbx, align 8
  %v1_10836 = trunc i64 %v1_1082e to i32
  %tmp384 = icmp ult i32 %v1_10836, 10
  br i1 %tmp384, label %dec_label_pc_10938, label %dec_label_pc_1083f

dec_label_pc_1083f:                               ; preds = %dec_label_pc_10990, %dec_label_pc_10965, %dec_label_pc_1082e
  %v0_108ce = phi i64 [ 2147483647, %dec_label_pc_10990 ], [ %v0_1093f69, %dec_label_pc_10965 ], [ 4294967295, %dec_label_pc_1082e ]
  %v0_10868 = phi i64 [ %v1_1093a, %dec_label_pc_10990 ], [ %v0_1093a67, %dec_label_pc_10965 ], [ %v1_107c4, %dec_label_pc_1082e ]
  %v0_10844 = phi i64 [ %v4_1093a, %dec_label_pc_10990 ], [ %v0_10965, %dec_label_pc_10965 ], [ %v3_107c8, %dec_label_pc_1082e ]
  %v1_1083f = trunc i64 %v0_10844 to i8
  %v11_1083f = icmp eq i8 %v1_1083f, 69
  br i1 %v11_1083f, label %dec_label_pc_10868, label %dec_label_pc_10844

dec_label_pc_10844:                               ; preds = %dec_label_pc_1083f
  %v11_10844 = icmp eq i8 %v1_1083f, 79
  br i1 %v11_10844, label %dec_label_pc_10868, label %dec_label_pc_10849

dec_label_pc_10849:                               ; preds = %dec_label_pc_10844
  store i64 0, i64* @rbp, align 8
  br label %dec_label_pc_1084b

dec_label_pc_1084b:                               ; preds = %dec_label_pc_10868, %dec_label_pc_10849
  %v0_108a9 = phi i64 [ %v1_10868, %dec_label_pc_10868 ], [ %v0_10868, %dec_label_pc_10849 ]
  %v0_10857 = phi i64 [ %v4_10868, %dec_label_pc_10868 ], [ %v0_10844, %dec_label_pc_10849 ]
  %v1_1084b = trunc i64 %v0_10857 to i8
  %tmp385 = icmp ult i8 %v1_1084b, 123
  br i1 %tmp385, label %dec_label_pc_10850, label %dec_label_pc_10880

dec_label_pc_10850:                               ; preds = %dec_label_pc_1084b
  store i64 ptrtoint (i64* @global_var_1a47c.434 to i64), i64* @rsi, align 8
  store i64 %v0_10857, i64* %rax.global-to-local, align 8
  %v2_1085a = mul nsw i64 %v0_10857, 4
  %v3_1085a = add i64 %v2_1085a, ptrtoint (i64* @global_var_1a47c.434 to i64)
  %v4_1085a = inttoptr i64 %v3_1085a to i32*
  %v5_1085a = load i32, i32* %v4_1085a, align 4
  %v6_1085a = sext i32 %v5_1085a to i64
  %v2_1085e = add i64 %v6_1085a, ptrtoint (i64* @global_var_1a47c.434 to i64)
  store i64 %v2_1085e, i64* %rax.global-to-local, align 8
  ret i64 %v2_1085e

dec_label_pc_10868:                               ; preds = %dec_label_pc_10844, %dec_label_pc_1083f
  %v1_10868 = add i64 %v0_10868, 1
  %v2_10868 = inttoptr i64 %v1_10868 to i8*
  %v3_10868 = load i8, i8* %v2_10868, align 1
  %v4_10868 = sext i8 %v3_10868 to i64
  store i64 %v4_10868, i64* @rdi, align 8
  store i64 %v1_10868, i64* %r11.global-to-local, align 8
  store i64 %v4_10868, i64* @rcx, align 8
  br label %dec_label_pc_1084b

dec_label_pc_10880:                               ; preds = %dec_label_pc_1084b
  %v1_10880 = add i64 %v0_108a9, -1
  store i64 %v1_10880, i64* %rax.global-to-local, align 8
  store i64 1, i64* @rcx, align 8
  br label %dec_label_pc_10889

dec_label_pc_10889:                               ; preds = %dec_label_pc_10889, %dec_label_pc_10880
  %v0_10890 = phi i32 [ %v2_10890, %dec_label_pc_10889 ], [ 1, %dec_label_pc_10880 ]
  %v0_108de = phi i64 [ %v1_1088c, %dec_label_pc_10889 ], [ %v1_10880, %dec_label_pc_10880 ]
  store i64 %v0_108de, i64* @r8, align 8
  %v1_1088c = add i64 %v0_108de, -1
  store i64 %v1_1088c, i64* %rax.global-to-local, align 8
  %v2_10890 = add i32 %v0_10890, 1
  %v17_10890 = zext i32 %v2_10890 to i64
  store i64 %v17_10890, i64* @rcx, align 8
  %v2_10893 = inttoptr i64 %v0_108de to i8*
  %v3_10893 = load i8, i8* %v2_10893, align 1
  %v13_10893 = icmp eq i8 %v3_10893, 37
  %v1_10897 = icmp eq i1 %v13_10893, false
  br i1 %v1_10897, label %dec_label_pc_10889, label %dec_label_pc_10899

dec_label_pc_10899:                               ; preds = %dec_label_pc_10889
  %v0_10899 = load i64, i64* @r12, align 8
  store i64 %v17_10890, i64* @rbp, align 8
  %v1_108a4 = load i64, i64* @r13, align 8
  %v2_108a4 = sub i64 %v0_10899, %v1_108a4
  store i64 %v2_108a4, i64* @rdx, align 8
  %v4_108a7 = trunc i64 %v0_108ce to i32
  %v6_108a7 = icmp slt i32 %v4_108a7, 0
  store i64 %v0_108a9, i64* @r14, align 8
  %v1_108ac = icmp eq i1 %v6_108a7, false
  %v0_108ce.op = and i64 %v0_108ce, 4294967295
  %v7_108ac = select i1 %v1_108ac, i64 %v0_108ce.op, i64 0
  store i64 %v7_108ac, i64* %rax.global-to-local, align 8
  %v7_108b1 = icmp ult i64 %v17_10890, %v7_108ac
  %v1_108b7 = icmp eq i1 %v7_108b1, false
  %v4_108b7 = select i1 %v1_108b7, i64 %v17_10890, i64 %v7_108ac
  store i64 %v4_108b7, i64* @r9, align 8
  %tmp386 = icmp ugt i64 %v2_108a4, %v4_108b7
  br i1 %tmp386, label %dec_label_pc_108c4, label %dec_label_pc_10778

dec_label_pc_108c4:                               ; preds = %dec_label_pc_10899
  %v0_108c4 = load i64, i64* @r15, align 8
  %v1_108c4 = icmp eq i64 %v0_108c4, 0
  br i1 %v1_108c4, label %dec_label_pc_1092d, label %dec_label_pc_108c9

dec_label_pc_108c9:                               ; preds = %dec_label_pc_108c4
  br i1 %v1_108b7, label %dec_label_pc_10907, label %dec_label_pc_108ce

dec_label_pc_108ce:                               ; preds = %dec_label_pc_108c9
  %v2_108d6 = sub i64 %v0_108ce, %v17_10890
  %v18_108d6 = trunc i64 %v2_108d6 to i32
  store i64 %v2_108d6, i64* @rdx, align 8
  %v4_108d9 = trunc i64 %stack_var_-1256.5.ph to i32
  %v13_108d9 = icmp eq i32 %v4_108d9, 48
  %sext40 = mul i64 %v2_108d6, 4294967296
  %v2_108e3 = sdiv i64 %sext40, 4294967296
  %v4_108e3 = add i64 %v0_108c4, %v2_108e3
  store i64 %v4_108e3, i64* @rbx, align 8
  store i64 %v0_108c4, i64* @rdi, align 8
  br i1 %v13_108d9, label %dec_label_pc_11a4f, label %dec_label_pc_108ed

dec_label_pc_108ed:                               ; preds = %dec_label_pc_108ce
  store i64 32, i64* @rsi, align 8
  store i64 %v4_108e3, i64* @r15, align 8
  %sext29 = mul i64 %v0_108c4, 4294967296
  %v1_108f8 = sdiv i64 %sext29, 4294967296
  %v2_108f8 = inttoptr i64 %v1_108f8 to i64*
  %v9_108f8 = call i64* @memset(i64* %v2_108f8, i32 32, i32 %v18_108d6)
  %v11_108f8 = ptrtoint i64* %v9_108f8 to i64
  store i64 %v11_108f8, i64* %rax.global-to-local, align 8
  %sext41 = mul i64 %v4_108b7, 72057594037927936
  %v4_108fd = sdiv i64 %sext41, 72057594037927936
  store i64 %v0_108de, i64* @r8, align 8
  br label %dec_label_pc_10907

dec_label_pc_10907:                               ; preds = %dec_label_pc_11a4f, %dec_label_pc_108ed, %dec_label_pc_108c9
  %v0_1090f = phi i64 [ %v17_10890, %dec_label_pc_108c9 ], [ %v4_11a64, %dec_label_pc_11a4f ], [ %v4_108fd, %dec_label_pc_108ed ]
  %stack_var_-1256.6 = phi i64 [ %stack_var_-1256.5.ph, %dec_label_pc_108c9 ], [ %v0_108de, %dec_label_pc_11a4f ], [ %v0_108de, %dec_label_pc_108ed ]
  %v4_10907 = trunc i64 %stack_var_-1264.5.ph47 to i8
  %v11_10907 = icmp eq i8 %v4_10907, 0
  %v0_1090c = load i64, i64* @rbp, align 8
  store i64 %v0_1090c, i64* @rdx, align 8
  store i64 %v0_108de, i64* @rsi, align 8
  %v0_10917 = load i64, i64* @r15, align 8
  store i64 %v0_10917, i64* @rdi, align 8
  %v1_1091a = icmp eq i1 %v11_10907, false
  %sext42 = mul i64 %v0_10917, 4294967296
  %v1_109a0 = sdiv i64 %sext42, 4294967296
  br i1 %v1_1091a, label %dec_label_pc_109a0, label %dec_label_pc_10920

dec_label_pc_10920:                               ; preds = %dec_label_pc_10907
  %v1_1090c = trunc i64 %v0_1090c to i32
  %v2_10920 = inttoptr i64 %v1_109a0 to i64*
  %v4_10920 = inttoptr i64 %v0_108de to i64*
  %v8_10920 = call i64* @memcpy(i64* %v2_10920, i64* %v4_10920, i32 %v1_1090c)
  %v10_10920 = ptrtoint i64* %v8_10920 to i64
  br label %dec_label_pc_1092a

dec_label_pc_1092a:                               ; preds = %dec_label_pc_109a0, %dec_label_pc_10920
  %storemerge43 = phi i64 [ %v10_10920, %dec_label_pc_10920 ], [ %v5_109a0, %dec_label_pc_109a0 ]
  store i64 %storemerge43, i64* %rax.global-to-local, align 8
  store i64 %v0_1090f, i64* @r9, align 8
  %v0_1092a = load i64, i64* @r15, align 8
  %v1_1092a = load i64, i64* @rbp, align 8
  %v2_1092a = add i64 %v1_1092a, %v0_1092a
  store i64 %v2_1092a, i64* @r15, align 8
  %v0_1092d.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_1092d

dec_label_pc_1092d:                               ; preds = %dec_label_pc_10a49, %dec_label_pc_1092a, %dec_label_pc_108c4
  %v1_1092d = phi i64 [ %v4_108b7, %dec_label_pc_108c4 ], [ %v0_1090f, %dec_label_pc_1092a ], [ %v4_10a39, %dec_label_pc_10a49 ]
  %stack_var_-1264.6 = phi i64 [ %stack_var_-1264.5.ph47, %dec_label_pc_108c4 ], [ %v0_1090f, %dec_label_pc_1092a ], [ %stack_var_-1264.4, %dec_label_pc_10a49 ]
  %v0_1092d = phi i64 [ %v1_108a4, %dec_label_pc_108c4 ], [ %v0_1092d.pre, %dec_label_pc_1092a ], [ %v1_10a3d, %dec_label_pc_10a49 ]
  %stack_var_-1272.5 = phi i8* [ %stack_var_-1272.0, %dec_label_pc_108c4 ], [ %stack_var_-1272.0, %dec_label_pc_1092a ], [ %stack_var_-1272.4, %dec_label_pc_10a49 ]
  %stack_var_-1256.7 = phi i64 [ %stack_var_-1256.5.ph, %dec_label_pc_108c4 ], [ %stack_var_-1256.6, %dec_label_pc_1092a ], [ %stack_var_-1256.4, %dec_label_pc_10a49 ]
  %v2_1092d = add i64 %v0_1092d, %v1_1092d
  store i64 %v2_1092d, i64* @r13, align 8
  br label %dec_label_pc_10752

dec_label_pc_10938:                               ; preds = %dec_label_pc_1082e
  br label %dec_label_pc_1093a

dec_label_pc_1093a:                               ; preds = %dec_label_pc_10960, %dec_label_pc_10938
  %v0_10956 = phi i64 [ %v0_1093f69, %dec_label_pc_10960 ], [ 0, %dec_label_pc_10938 ]
  %v0_10984 = phi i64 [ %v0_1093a67, %dec_label_pc_10960 ], [ %v1_107c4, %dec_label_pc_10938 ]
  %v1_1093a = add i64 %v0_10984, 1
  %v2_1093a = inttoptr i64 %v1_1093a to i8*
  %v3_1093a = load i8, i8* %v2_1093a, align 1
  %v4_1093a = sext i8 %v3_1093a to i64
  store i64 %v4_1093a, i64* @rbp, align 8
  %v1_1093f = trunc i64 %v0_10956 to i32
  store i64 %v1_1093a, i64* @rsi, align 8
  store i64 %v4_1093a, i64* @rcx, align 8
  %v1_1094b = add nsw i64 %v4_1093a, -48
  store i64 %v1_1094b, i64* %rax.global-to-local, align 8
  %v10_1094e = icmp sgt i32 %v1_1093f, 214748364
  br i1 %v10_1094e, label %dec_label_pc_10975, label %dec_label_pc_10950

dec_label_pc_10950:                               ; preds = %dec_label_pc_1093a
  %v12_1093f = icmp eq i32 %v1_1093f, 214748364
  %v1_10950 = inttoptr i64 %v0_10984 to i8*
  %v2_10950 = load i8, i8* %v1_10950, align 1
  %v3_10950 = sext i8 %v2_10950 to i64
  store i64 %v3_10950, i64* @rdx, align 8
  br i1 %v12_1093f, label %dec_label_pc_10970, label %dec_label_pc_10956

dec_label_pc_10956:                               ; preds = %dec_label_pc_10970, %dec_label_pc_10950
  %v3_10956 = mul i64 %v0_10956, 5
  store i64 %v3_10956, i64* @rdi, align 8
  store i64 %v1_1093a, i64* %r11.global-to-local, align 8
  %v2_1095c = mul i64 %v0_10956, 10
  %v3_1095c = add i64 %v2_1095c, -48
  %v4_1095c = add i64 %v3_1095c, %v3_10950
  store i64 %v4_1095c, i64* @rbx, align 8
  br label %dec_label_pc_10960

dec_label_pc_10960:                               ; preds = %dec_label_pc_1097a, %dec_label_pc_10956
  %v0_10965 = phi i64 [ %v4_1097a, %dec_label_pc_1097a ], [ %v4_1093a, %dec_label_pc_10956 ]
  %v0_10960 = phi i64 [ %v1_1098a, %dec_label_pc_1097a ], [ %v1_1094b, %dec_label_pc_10956 ]
  %v0_1093f69 = phi i64 [ 2147483647, %dec_label_pc_1097a ], [ %v4_1095c, %dec_label_pc_10956 ]
  %v0_1093a67 = phi i64 [ %v1_1097a, %dec_label_pc_1097a ], [ %v1_1093a, %dec_label_pc_10956 ]
  %v1_10960 = trunc i64 %v0_10960 to i32
  %tmp387 = icmp ult i32 %v1_10960, 10
  br i1 %tmp387, label %dec_label_pc_1093a, label %dec_label_pc_10965

dec_label_pc_10965:                               ; preds = %dec_label_pc_10960
  store i64 %v0_10965, i64* @rdi, align 8
  br label %dec_label_pc_1083f

dec_label_pc_10970:                               ; preds = %dec_label_pc_10950
  %v9_10973 = icmp sgt i8 %v2_10950, 55
  br i1 %v9_10973, label %dec_label_pc_10975, label %dec_label_pc_10956

dec_label_pc_10975:                               ; preds = %dec_label_pc_10970, %dec_label_pc_1093a
  %v1_10975 = trunc i64 %v1_1094b to i32
  %tmp388 = icmp ult i32 %v1_10975, 10
  br i1 %tmp388, label %dec_label_pc_1097a, label %dec_label_pc_10990

dec_label_pc_1097a:                               ; preds = %dec_label_pc_10975
  %v1_1097a = add i64 %v0_10984, 2
  %v2_1097a = inttoptr i64 %v1_1097a to i8*
  %v3_1097a = load i8, i8* %v2_1097a, align 1
  %v4_1097a = sext i8 %v3_1097a to i64
  store i64 %v4_1097a, i64* @rbp, align 8
  store i64 2147483647, i64* @rbx, align 8
  store i64 %v1_1097a, i64* %r11.global-to-local, align 8
  store i64 %v4_1097a, i64* @rcx, align 8
  %v1_1098a = add nsw i64 %v4_1097a, -48
  store i64 %v1_1098a, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_10960

dec_label_pc_10990:                               ; preds = %dec_label_pc_10975
  store i64 %v4_1093a, i64* @rdi, align 8
  store i64 %v1_1093a, i64* %r11.global-to-local, align 8
  store i64 2147483647, i64* @rbx, align 8
  br label %dec_label_pc_1083f

dec_label_pc_109a0:                               ; preds = %dec_label_pc_10907
  %sext44 = mul i64 %v0_1090c, 4294967296
  %v4_109a0 = sdiv i64 %sext44, 4294967296
  %v5_109a0 = call i64 @function_10640(i64 %v1_109a0, i64 %v0_108de, i64 %v4_109a0)
  br label %dec_label_pc_1092a

dec_label_pc_10a20:                               ; preds = %dec_label_pc_11f6a
  %v1_10a20 = add nsw i64 %v12_10a12, -1
  store i64 %v1_10a20, i64* @rcx, align 8
  %v0_10a24 = load i64, i64* @rbx, align 8
  %v4_10a24 = trunc i64 %v0_10a24 to i32
  %v6_10a24 = icmp slt i32 %v4_10a24, 0
  %v1_10a2b = icmp eq i1 %v6_10a24, false
  %tmp344 = and i64 %v0_10a24, 4294967295
  %v7_10a2b = select i1 %v1_10a2b, i64 %tmp344, i64 0
  %v0_10a2e = load i64, i64* @r12, align 8
  store i64 %v7_10a2b, i64* %rax.global-to-local, align 8
  %v7_10a33 = icmp ult i64 %v1_10a20, %v7_10a2b
  %v1_10a39 = icmp eq i1 %v7_10a33, false
  %v4_10a39 = select i1 %v1_10a39, i64 %v1_10a20, i64 %v7_10a2b
  store i64 %v4_10a39, i64* @r9, align 8
  %v1_10a3d = load i64, i64* @r13, align 8
  %v2_10a3d = sub i64 %v0_10a2e, %v1_10a3d
  store i64 %v2_10a3d, i64* @rdx, align 8
  %tmp389 = icmp ugt i64 %v2_10a3d, %v4_10a39
  br i1 %tmp389, label %dec_label_pc_10a49, label %dec_label_pc_10778

dec_label_pc_10a49:                               ; preds = %dec_label_pc_10a20
  %v0_10a49 = load i64, i64* @r15, align 8
  %v1_10a49 = icmp eq i64 %v0_10a49, 0
  br i1 %v1_10a49, label %dec_label_pc_1092d, label %dec_label_pc_10a52

dec_label_pc_10a52:                               ; preds = %dec_label_pc_10a49
  %v0_10a52 = load i64, i64* @rbp, align 8
  %v4_10a52 = trunc i64 %v0_10a52 to i32
  %v5_10a52 = icmp eq i32 %v4_10a52, 0
  store i64 %v0_10a08, i64* @r8, align 8
  %v1_10a5a = icmp eq i1 %v5_10a52, false
  br i1 %v1_10a5a, label %dec_label_pc_10aa5, label %dec_label_pc_10a5c

dec_label_pc_10a5c:                               ; preds = %dec_label_pc_10a52
  br i1 %v1_10a39, label %dec_label_pc_10aa5, label %dec_label_pc_10a61

dec_label_pc_10a61:                               ; preds = %dec_label_pc_10a5c
  %v2_10a6e = sub i64 %v0_10a24, %v1_10a20
  %v18_10a6e = trunc i64 %v2_10a6e to i32
  store i64 %v2_10a6e, i64* @rdx, align 8
  %v4_10a71 = trunc i64 %stack_var_-1256.4 to i32
  %v13_10a71 = icmp eq i32 %v4_10a71, 48
  %sext34 = mul i64 %v2_10a6e, 4294967296
  %v2_10a7b = sdiv i64 %sext34, 4294967296
  %v4_10a7b = add i64 %v0_10a49, %v2_10a7b
  store i64 %v4_10a7b, i64* @rbp, align 8
  store i64 %v0_10a49, i64* @rdi, align 8
  br i1 %v13_10a71, label %dec_label_pc_11a2a, label %dec_label_pc_10a85

dec_label_pc_10a85:                               ; preds = %dec_label_pc_10a61
  store i64 32, i64* @rsi, align 8
  store i64 %v4_10a7b, i64* @r15, align 8
  %sext = mul i64 %v0_10a49, 4294967296
  %v1_10a90 = sdiv i64 %sext, 4294967296
  %v2_10a90 = inttoptr i64 %v1_10a90 to i64*
  %v9_10a90 = call i64* @memset(i64* %v2_10a90, i32 32, i32 %v18_10a6e)
  %v11_10a90 = ptrtoint i64* %v9_10a90 to i64
  store i64 %v11_10a90, i64* %rax.global-to-local, align 8
  store i64 %v0_10a08, i64* @r8, align 8
  %sext35 = mul i64 %v4_10a39, 4294967296
  %v4_10a9b = sdiv i64 %sext35, 4294967296
  store i64 %v1_10a20, i64* @rcx, align 8
  br label %dec_label_pc_10aa5

dec_label_pc_10aa5:                               ; preds = %dec_label_pc_11a2a, %dec_label_pc_10a85, %dec_label_pc_10a5c, %dec_label_pc_10a52
  %v0_11973 = phi i64 [ %v4_11a45, %dec_label_pc_11a2a ], [ %v4_10a9b, %dec_label_pc_10a85 ], [ %v1_10a20, %dec_label_pc_10a5c ], [ %v4_10a39, %dec_label_pc_10a52 ]
  %v4_10aa5 = trunc i64 %v0_10a08 to i8
  %v5_10aa5 = icmp eq i8 %v4_10aa5, 0
  %v1_10aa8 = icmp eq i1 %v5_10aa5, false
  br i1 %v1_10aa8, label %dec_label_pc_11968, label %dec_label_pc_10aae

dec_label_pc_10aae:                               ; preds = %dec_label_pc_10aa5
  %v4_10aae = trunc i64 %stack_var_-1264.4 to i8
  %v11_10aae = icmp eq i8 %v4_10aae, 0
  %sext36 = mul i64 %v2_109ee, 72057594037927936
  %v4_10ab8 = sdiv i64 %sext36, 72057594037927936
  store i64 %v1_10a20, i64* @rdx, align 8
  %v1_11943 = or i64 %v4_10ab8, 1
  store i64 %v1_11943, i64* @rsi, align 8
  %v0_11947 = load i64, i64* @r15, align 8
  store i64 %v0_11947, i64* @rdi, align 8
  %sext23 = mul i64 %v0_11947, 4294967296
  %v1_1194f = sdiv i64 %sext23, 4294967296
  br i1 %v11_10aae, label %dec_label_pc_11940, label %dec_label_pc_10ac3

dec_label_pc_10ac3:                               ; preds = %dec_label_pc_10aae
  %v4_10ad2 = call i64 @function_10640(i64 %v1_1194f, i64 %v1_11943, i64 %v1_10a20)
  store i64 %v4_10ad2, i64* %rax.global-to-local, align 8
  store i64 %v1_10a20, i64* @rcx, align 8
  store i64 %v0_11973, i64* @r9, align 8
  br label %dec_label_pc_10ae1

dec_label_pc_10ae1:                               ; preds = %dec_label_pc_11968, %dec_label_pc_11940, %dec_label_pc_10ac3
  %v0_10ae1 = load i64, i64* @r15, align 8
  %v2_10ae1 = add i64 %v0_10ae1, %v1_10a20
  store i64 %v2_10ae1, i64* @r15, align 8
  %v0_10ae4 = load i64, i64* @r13, align 8
  %v2_10ae4 = add i64 %v0_10ae4, %v0_11973
  store i64 %v2_10ae4, i64* @r13, align 8
  br label %dec_label_pc_10752

dec_label_pc_11940:                               ; preds = %dec_label_pc_10aae
  %v2_1194f = inttoptr i64 %v1_1194f to i64*
  %v4_1194f = inttoptr i64 %v1_11943 to i64*
  %v6_1194f = trunc i64 %v1_10a20 to i32
  %v7_1194f = call i64* @memcpy(i64* %v2_1194f, i64* %v4_1194f, i32 %v6_1194f)
  %v9_1194f = ptrtoint i64* %v7_1194f to i64
  store i64 %v9_1194f, i64* %rax.global-to-local, align 8
  store i64 %v0_11973, i64* @r9, align 8
  store i64 %v1_10a20, i64* @rcx, align 8
  br label %dec_label_pc_10ae1

dec_label_pc_11968:                               ; preds = %dec_label_pc_10aa5
  %sext37 = mul i64 %v2_109ee, 72057594037927936
  %v4_11968 = sdiv i64 %sext37, 72057594037927936
  store i64 %v1_10a20, i64* @rdx, align 8
  %v0_11970 = load i64, i64* @r15, align 8
  store i64 %v0_11970, i64* @rdi, align 8
  %v1_1197d = or i64 %v4_11968, 1
  store i64 %v1_1197d, i64* @rsi, align 8
  %sext38 = mul i64 %v0_11970, 4294967296
  %v1_11981 = sdiv i64 %sext38, 4294967296
  %v4_11981 = call i64 @function_105f0(i64 %v1_11981, i64 %v1_1197d, i64 %v1_10a20)
  store i64 %v4_11981, i64* %rax.global-to-local, align 8
  store i64 %v1_10a20, i64* @rcx, align 8
  store i64 %v0_11973, i64* @r9, align 8
  br label %dec_label_pc_10ae1

dec_label_pc_11a2a:                               ; preds = %dec_label_pc_10a61
  store i64 48, i64* @rsi, align 8
  store i64 %v4_10a7b, i64* @r15, align 8
  %sext24 = mul i64 %v0_10a49, 4294967296
  %v1_11a35 = sdiv i64 %sext24, 4294967296
  %v2_11a35 = inttoptr i64 %v1_11a35 to i64*
  %v9_11a35 = call i64* @memset(i64* %v2_11a35, i32 48, i32 %v18_10a6e)
  %v11_11a35 = ptrtoint i64* %v9_11a35 to i64
  store i64 %v11_11a35, i64* %rax.global-to-local, align 8
  store i64 %v0_10a08, i64* @r8, align 8
  store i64 %v1_10a20, i64* @rcx, align 8
  %sext39 = mul i64 %v4_10a39, 4294967296
  %v4_11a45 = sdiv i64 %sext39, 4294967296
  br label %dec_label_pc_10aa5

dec_label_pc_11a4f:                               ; preds = %dec_label_pc_108ce
  store i64 48, i64* @rsi, align 8
  store i64 %v4_108e3, i64* @r15, align 8
  %sext30 = mul i64 %v0_108c4, 4294967296
  %v1_11a5a = sdiv i64 %sext30, 4294967296
  %v2_11a5a = inttoptr i64 %v1_11a5a to i64*
  %v9_11a5a = call i64* @memset(i64* %v2_11a5a, i32 48, i32 %v18_108d6)
  %v11_11a5a = ptrtoint i64* %v9_11a5a to i64
  store i64 %v11_11a5a, i64* %rax.global-to-local, align 8
  store i64 %v0_108de, i64* @r8, align 8
  %sext45 = mul i64 %v4_108b7, 72057594037927936
  %v4_11a64 = sdiv i64 %sext45, 72057594037927936
  br label %dec_label_pc_10907

dec_label_pc_11f6a:                               ; preds = %dec_label_pc_1077b
  call void @__stack_chk_fail()
  store i64 0, i64* %r10.global-to-local, align 8
  %v4_10b9c = ptrtoint i8* %stack_var_-1272.4 to i64
  %v0_10ba1 = load i64, i64* @rbp, align 8
  store i64 %v0_10ba1, i64* %stack_var_-1099, align 8
  %v0_10ba9 = load i64, i64* %r11.global-to-local, align 8
  store i64 %v0_10ba9, i64* @r14, align 8
  store i64 0, i64* @rbp, align 8
  %v1_10baf = add i64 %v4_10b9c, 3
  store i64 %v1_10baf, i64* %rax.global-to-local, align 8
  %v0_109e8 = load i64, i64* @rcx, align 8
  %v1_109e8 = trunc i64 %v0_109e8 to i8
  %v3_109e8 = inttoptr i64 %v1_10baf to i8*
  store i8 %v1_109e8, i8* %v3_109e8, align 1
  %v0_109ea = load i64, i64* %rax.global-to-local, align 8
  %v1_109ea = add i64 %v0_109ea, 1
  %v2_109ea = inttoptr i64 %v1_109ea to i8*
  store i8 0, i8* %v2_109ea, align 1
  %v2_109ee = ptrtoint i64* %stack_var_-1096 to i64
  store i64 %v2_109ee, i64* %rax.global-to-local, align 8
  store i64 %v0_106b1, i64* @rcx, align 8
  store i64 %v4_10b9c, i64* @rdx, align 8
  store i64 ptrtoint (i32* @global_var_400.157 to i64), i64* @rsi, align 8
  %tmp348 = bitcast i64* %stack_var_-1096 to i8*
  store i64 %v2_109ee, i64* @rdi, align 8
  %v0_10a08 = load i64, i64* @r8, align 8
  %v10_10a12 = inttoptr i64 %v0_106b1 to %tm*
  %v11_10a12 = call i32 @strftime(i8* %tmp348, i32 ptrtoint (i32* @global_var_400.157 to i32), i8* %stack_var_-1272.4, %tm* %v10_10a12)
  %v12_10a12 = sext i32 %v11_10a12 to i64
  store i64 %v12_10a12, i64* %rax.global-to-local, align 8
  %v1_10a17 = icmp eq i32 %v11_10a12, 0
  br i1 %v1_10a17, label %dec_label_pc_10752, label %dec_label_pc_10a20
}

define i64 @function_11f80(i64 %arg1, i64* %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_11f80:
  %r9.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg6, i64* %r9.global-to-local, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  %tmp8 = ptrtoint i64* %arg2 to i64
  store i64 %tmp8, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-17 = alloca i8, align 1
  %v0_11f84 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  store i8 0, i8* %stack_var_-17, align 1
  %v0_11f99 = load i64, i64* %r9.global-to-local, align 8
  %v0_11f9b = load i64, i64* @r8, align 8
  store i64 0, i64* @r8, align 8
  %v2_11fa0 = ptrtoint i8* %stack_var_-17 to i64
  store i64 %v2_11fa0, i64* %r9.global-to-local, align 8
  %v1_11fa5 = trunc i64 %arg1 to i32
  %v9_11fa5 = call i64 @function_10690(i32 %v1_11fa5, i64 %tmp8, i64 %arg3, i64 %arg4, i64 0, i64 %v2_11fa0, i64 %v0_11f9b, i64 %v0_11f99)
  store i64 %v9_11fa5, i64* %rax.global-to-local, align 8
  store i64 %v0_11f99, i64* @rcx, align 8
  store i64 %v0_11f84, i64* @rdx, align 8
  %v1_11fb1 = call i64 @__readfsqword(i64 40)
  %v2_11fb1 = xor i64 %v1_11fb1, %v0_11f84
  %v3_11fb1 = icmp eq i64 %v2_11fb1, 0
  store i64 %v2_11fb1, i64* @rdx, align 8
  %v1_11fba = icmp eq i1 %v3_11fb1, false
  br i1 %v1_11fba, label %dec_label_pc_11fc1, label %dec_label_pc_11fbc

dec_label_pc_11fbc:                               ; preds = %dec_label_pc_11f80
  %v0_11fc0 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_11fc0

dec_label_pc_11fc1:                               ; preds = %dec_label_pc_11f80
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_11fd0(i64 %arg1) local_unnamed_addr {
dec_label_pc_11fd0:
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v1_11fd0 = icmp eq i64 %arg1, 0
  %v0_11fd3 = load i64, i64* @rbx, align 8
  store i64 %v0_11fd3, i64* %stack_var_-8, align 8
  br i1 %v1_11fd0, label %dec_label_pc_12047, label %dec_label_pc_11fd6

dec_label_pc_11fd6:                               ; preds = %dec_label_pc_11fd0
  store i64 47, i64* @rsi, align 8
  store i64 %arg1, i64* %rbx.global-to-local, align 8
  %v1_11fde = inttoptr i64 %arg1 to i8*
  %v5_11fde = call i8* @strrchr(i8* %v1_11fde, i32 47)
  %v6_11fde = ptrtoint i8* %v5_11fde to i64
  %v1_11fe3 = icmp eq i8* %v5_11fde, null
  br i1 %v1_11fe3, label %dec_label_pc_11fd6.dec_label_pc_12037_crit_edge, label %dec_label_pc_11fe8

dec_label_pc_11fd6.dec_label_pc_12037_crit_edge:  ; preds = %dec_label_pc_11fd6
  %v0_12037.pre = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_12037

dec_label_pc_11fe8:                               ; preds = %dec_label_pc_11fd6
  %v1_11fe8 = add i64 %v6_11fde, 1
  store i64 %v1_11fe8, i64* @rdx, align 8
  %v1_11fef = load i64, i64* %rbx.global-to-local, align 8
  %v2_11fef = sub i64 %v1_11fe8, %v1_11fef
  store i64 %v2_11fef, i64* @rcx, align 8
  %v7_11ff6 = icmp sgt i64 %v2_11fef, 6
  br i1 %v7_11ff6, label %dec_label_pc_11ff8, label %dec_label_pc_12037

dec_label_pc_11ff8:                               ; preds = %dec_label_pc_11fe8
  %v1_11ff8 = add i64 %v6_11fde, -6
  store i64 %v1_11ff8, i64* @rsi, align 8
  store i64 ptrtoint ([8 x i8]* @global_var_1a6a0.442 to i64), i64* @rdi, align 8
  store i64 7, i64* @rcx, align 8
  br label %bb

bb:                                               ; preds = %bb31, %dec_label_pc_11ff8
  %v0_120209 = phi i1 [ %v13_12008, %bb31 ], [ false, %dec_label_pc_11ff8 ]
  %v24_12008 = phi i64 [ %v27_12008, %bb31 ], [ ptrtoint ([8 x i8]* @global_var_1a6a0.442 to i64), %dec_label_pc_11ff8 ]
  %v23_12008 = phi i64 [ %v28_12008, %bb31 ], [ %v1_11ff8, %dec_label_pc_11ff8 ]
  %v0_12008 = phi i64 [ %v29_12008, %bb31 ], [ 7, %dec_label_pc_11ff8 ]
  %v0_1200a.pr = phi i1 [ true, %bb31 ], [ false, %dec_label_pc_11ff8 ]
  %v1_12008 = icmp eq i64 %v0_12008, 0
  br i1 %v1_12008, label %bb32, label %bb31

bb31:                                             ; preds = %bb
  %v3_12008 = inttoptr i64 %v23_12008 to i8*
  %v4_12008 = load i8, i8* %v3_12008, align 1
  %v6_12008 = inttoptr i64 %v24_12008 to i8*
  %v7_12008 = load i8, i8* %v6_12008, align 1
  %v13_12008 = icmp ult i8 %v4_12008, %v7_12008
  %v18_12008 = icmp eq i8 %v4_12008, %v7_12008
  %v25_12008 = load i1, i1* @df, align 1
  %v26_12008 = select i1 %v25_12008, i64 -1, i64 1
  %v27_12008 = add i64 %v26_12008, %v24_12008
  %v28_12008 = add i64 %v26_12008, %v23_12008
  store i64 %v27_12008, i64* @rdi, align 8
  store i64 %v28_12008, i64* @rsi, align 8
  %v29_12008 = add nsw i64 %v0_12008, -1
  store i64 %v29_12008, i64* @rcx, align 8
  br i1 %v18_12008, label %bb, label %dec_label_pc_12037

bb32:                                             ; preds = %bb
  %v1_1200a = icmp eq i1 %v0_1200a.pr, false
  br i1 %v1_1200a, label %dec_label_pc_12037, label %dec_label_pc_1200c

dec_label_pc_1200c:                               ; preds = %bb32
  store i64 ptrtoint ([4 x i8]* @global_var_1a6a8.443 to i64), i64* @rdi, align 8
  store i64 3, i64* @rcx, align 8
  store i64 %v1_11fe8, i64* @rsi, align 8
  store i64 %v1_11fe8, i64* %rbx.global-to-local, align 8
  br label %bb33

bb33:                                             ; preds = %bb34, %dec_label_pc_1200c
  %v0_120208 = phi i1 [ %v13_1201e, %bb34 ], [ %v0_120209, %dec_label_pc_1200c ]
  %v24_1201e = phi i64 [ %v27_1201e, %bb34 ], [ ptrtoint ([4 x i8]* @global_var_1a6a8.443 to i64), %dec_label_pc_1200c ]
  %v23_1201e = phi i64 [ %v28_1201e, %bb34 ], [ %v1_11fe8, %dec_label_pc_1200c ]
  %v0_1201e = phi i64 [ %v29_1201e, %bb34 ], [ 3, %dec_label_pc_1200c ]
  %v1_1201e = icmp eq i64 %v0_1201e, 0
  br i1 %v1_1201e, label %bb35, label %bb34

bb34:                                             ; preds = %bb33
  %v3_1201e = inttoptr i64 %v23_1201e to i8*
  %v4_1201e = load i8, i8* %v3_1201e, align 1
  %v6_1201e = inttoptr i64 %v24_1201e to i8*
  %v7_1201e = load i8, i8* %v6_1201e, align 1
  %v13_1201e = icmp ult i8 %v4_1201e, %v7_1201e
  %v18_1201e = icmp eq i8 %v4_1201e, %v7_1201e
  %v25_1201e = load i1, i1* @df, align 1
  %v26_1201e = select i1 %v25_1201e, i64 -1, i64 1
  %v27_1201e = add i64 %v26_1201e, %v24_1201e
  %v28_1201e = add i64 %v26_1201e, %v23_1201e
  store i64 %v27_1201e, i64* @rdi, align 8
  store i64 %v28_1201e, i64* @rsi, align 8
  %v29_1201e = add nsw i64 %v0_1201e, -1
  store i64 %v29_1201e, i64* @rcx, align 8
  br i1 %v18_1201e, label %bb33, label %bb35

bb35:                                             ; preds = %bb33, %bb34
  %v2_12024 = phi i64 [ 0, %bb33 ], [ %v29_1201e, %bb34 ]
  %v5_12020 = phi i64 [ %v23_1201e, %bb33 ], [ %v28_1201e, %bb34 ]
  %v0_12024 = phi i1 [ %v0_120208, %bb33 ], [ %v13_1201e, %bb34 ]
  %v1_12020 = phi i1 [ true, %bb33 ], [ false, %bb34 ]
  %v2_12020 = or i1 %v1_12020, %v0_12024
  %v3_12020 = icmp ne i1 %v2_12020, true
  %v4_12020 = zext i1 %v3_12020 to i64
  %v6_12020 = and i64 %v5_12020, -256
  %v7_12020 = or i64 %v4_12020, %v6_12020
  store i64 %v7_12020, i64* @rsi, align 8
  %v1_12024 = zext i1 %v0_12024 to i64
  %v3_12024 = and i64 %v2_12024, -256
  %v4_12024 = or i64 %v1_12024, %v3_12024
  store i64 %v4_12024, i64* @rcx, align 8
  %v14_12027 = icmp eq i1 %v3_12020, %v0_12024
  %v1_1202a = icmp eq i1 %v14_12027, false
  br i1 %v1_1202a, label %dec_label_pc_12037, label %dec_label_pc_1202c

dec_label_pc_1202c:                               ; preds = %bb35
  %v1_1202c = add i64 %v6_11fde, 4
  store i64 %v1_1202c, i64* %rbx.global-to-local, align 8
  store i64 %v1_1202c, i64* @global_var_220280.444, align 8
  br label %dec_label_pc_12037

dec_label_pc_12037:                               ; preds = %bb31, %dec_label_pc_11fd6.dec_label_pc_12037_crit_edge, %dec_label_pc_11fe8, %dec_label_pc_1202c, %bb35, %bb32
  %v0_12037 = phi i64 [ %v0_12037.pre, %dec_label_pc_11fd6.dec_label_pc_12037_crit_edge ], [ %v1_11fef, %dec_label_pc_11fe8 ], [ %v1_1202c, %dec_label_pc_1202c ], [ %v1_11fe8, %bb35 ], [ %v1_11fef, %bb32 ], [ %v1_11fef, %bb31 ]
  store i64 %v0_12037, i64* @global_var_221400.340, align 8
  store i64 %v0_12037, i64* @global_var_2202a8.445, align 8
  %v2_12045 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_12045, i64* @rbx, align 8
  ret i64 %v6_11fde

dec_label_pc_12047:                               ; preds = %dec_label_pc_11fd0
  %v0_12047 = load %_IO_FILE*, %_IO_FILE** @global_var_2202c0.221, align 8
  %v1_12047 = ptrtoint %_IO_FILE* %v0_12047 to i64
  store i64 %v1_12047, i64* @rcx, align 8
  store i64 ptrtoint ([56 x i8]* @global_var_1a668.446 to i64), i64* @rdi, align 8
  store i64 55, i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %v11_1205f = call i32 @fwrite(i64* bitcast ([56 x i8]* @global_var_1a668.446 to i64*), i32 1, i32 55, %_IO_FILE* %v0_12047)
  call void @abort()
  unreachable
}

define i64 @function_12070(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_12070:
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_12070 = load i64, i64* %rbp.global-to-local, align 8
  %v0_12071 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_12071, i64* %stack_var_-16, align 8
  %v0_12072 = load i64, i64* @rdi, align 8
  store i64 %v0_12072, i64* @rbp, align 8
  %v0_12075 = load i64, i64* @rsi, align 8
  store i64 %v0_12075, i64* @rbx, align 8
  %v0_1207b = call i64 @function_15d50()
  %v1_12080 = inttoptr i64 %v0_1207b to i8*
  %v2_12080 = load i8, i8* %v1_12080, align 1
  %v1_12083 = zext i8 %v2_12080 to i32
  %v2_12083 = and i32 %v1_12083, 223
  %v5_12083 = trunc i32 %v2_12083 to i8
  %v9_12083 = zext i32 %v2_12083 to i64
  store i64 %v9_12083, i64* @rdx, align 8
  %v11_12086 = icmp eq i8 %v5_12083, 85
  br i1 %v11_12086, label %dec_label_pc_12100, label %dec_label_pc_1208b

dec_label_pc_1208b:                               ; preds = %dec_label_pc_12070
  %v11_1208b = icmp eq i8 %v5_12083, 71
  br i1 %v11_1208b, label %dec_label_pc_120b0, label %dec_label_pc_12090

dec_label_pc_12090:                               ; preds = %dec_label_pc_12130, %dec_label_pc_12126, %dec_label_pc_1211c, %dec_label_pc_1210c, %dec_label_pc_12100, %dec_label_pc_120da, %dec_label_pc_120d4, %dec_label_pc_120ce, %dec_label_pc_120c8, %dec_label_pc_120c2, %dec_label_pc_120bc, %dec_label_pc_120b0, %dec_label_pc_1208b
  store i64 ptrtoint (i8** @global_var_1b032.448 to i64), i64* @rdx, align 8
  %v0_1209e = load i64, i64* @rbx, align 8
  %v1_1209e = trunc i64 %v0_1209e to i32
  %v11_1209e = icmp eq i32 %v1_1209e, 9
  %v1_120a1 = icmp eq i1 %v11_1209e, false
  %v4_120a1 = select i1 %v1_120a1, i64 ptrtoint (i8** @global_var_1b032.448 to i64), i64 ptrtoint (i64* @global_var_1a6bb.447 to i64)
  %v2_120a9 = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_120a9, i64* %rbx.global-to-local, align 8
  store i64 %v0_12070, i64* %rbp.global-to-local, align 8
  ret i64 %v4_120a1

dec_label_pc_120b0:                               ; preds = %dec_label_pc_1208b
  %v1_120b0 = add i64 %v0_1207b, 1
  %v2_120b0 = inttoptr i64 %v1_120b0 to i8*
  %v3_120b0 = load i8, i8* %v2_120b0, align 1
  %v1_120b4 = zext i8 %v3_120b0 to i32
  %v2_120b4 = and i32 %v1_120b4, 223
  %v9_120b4 = zext i32 %v2_120b4 to i64
  store i64 %v9_120b4, i64* @rdx, align 8
  %v11_120b7 = icmp eq i32 %v2_120b4, 66
  %v1_120ba = icmp eq i1 %v11_120b7, false
  br i1 %v1_120ba, label %dec_label_pc_12090, label %dec_label_pc_120bc

dec_label_pc_120bc:                               ; preds = %dec_label_pc_120b0
  %v1_120bc = add i64 %v0_1207b, 2
  %v2_120bc = inttoptr i64 %v1_120bc to i8*
  %v3_120bc = load i8, i8* %v2_120bc, align 1
  %v13_120bc = icmp eq i8 %v3_120bc, 49
  %v1_120c0 = icmp eq i1 %v13_120bc, false
  br i1 %v1_120c0, label %dec_label_pc_12090, label %dec_label_pc_120c2

dec_label_pc_120c2:                               ; preds = %dec_label_pc_120bc
  %v1_120c2 = add i64 %v0_1207b, 3
  %v2_120c2 = inttoptr i64 %v1_120c2 to i8*
  %v3_120c2 = load i8, i8* %v2_120c2, align 1
  %v13_120c2 = icmp eq i8 %v3_120c2, 56
  %v1_120c6 = icmp eq i1 %v13_120c2, false
  br i1 %v1_120c6, label %dec_label_pc_12090, label %dec_label_pc_120c8

dec_label_pc_120c8:                               ; preds = %dec_label_pc_120c2
  %v1_120c8 = add i64 %v0_1207b, 4
  %v2_120c8 = inttoptr i64 %v1_120c8 to i8*
  %v3_120c8 = load i8, i8* %v2_120c8, align 1
  %v12_120c8 = icmp eq i8 %v3_120c8, 48
  %v1_120cc = icmp eq i1 %v12_120c8, false
  br i1 %v1_120cc, label %dec_label_pc_12090, label %dec_label_pc_120ce

dec_label_pc_120ce:                               ; preds = %dec_label_pc_120c8
  %v1_120ce = add i64 %v0_1207b, 5
  %v2_120ce = inttoptr i64 %v1_120ce to i8*
  %v3_120ce = load i8, i8* %v2_120ce, align 1
  %v13_120ce = icmp eq i8 %v3_120ce, 51
  %v1_120d2 = icmp eq i1 %v13_120ce, false
  br i1 %v1_120d2, label %dec_label_pc_12090, label %dec_label_pc_120d4

dec_label_pc_120d4:                               ; preds = %dec_label_pc_120ce
  %v1_120d4 = add i64 %v0_1207b, 6
  %v2_120d4 = inttoptr i64 %v1_120d4 to i8*
  %v3_120d4 = load i8, i8* %v2_120d4, align 1
  %v12_120d4 = icmp eq i8 %v3_120d4, 48
  %v1_120d8 = icmp eq i1 %v12_120d4, false
  br i1 %v1_120d8, label %dec_label_pc_12090, label %dec_label_pc_120da

dec_label_pc_120da:                               ; preds = %dec_label_pc_120d4
  %v1_120da = add i64 %v0_1207b, 7
  %v2_120da = inttoptr i64 %v1_120da to i8*
  %v3_120da = load i8, i8* %v2_120da, align 1
  %v10_120da = icmp eq i8 %v3_120da, 0
  %v1_120de = icmp eq i1 %v10_120da, false
  br i1 %v1_120de, label %dec_label_pc_12090, label %dec_label_pc_120e0

dec_label_pc_120e0:                               ; preds = %dec_label_pc_120da
  %v2_120e0 = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v11_120e0 = icmp eq i8 %v2_120e0, 96
  store i64 ptrtoint (i64* @global_var_1a6b8.450 to i64), i64* @rdx, align 8
  %v1_120f2 = icmp eq i1 %v11_120e0, false
  %v4_120f2 = select i1 %v1_120f2, i64 ptrtoint (i64* @global_var_1a6b8.450 to i64), i64 ptrtoint (i64* @global_var_1a6b4.449 to i64)
  %v2_120fa = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_120fa, i64* %rbx.global-to-local, align 8
  store i64 %v0_12070, i64* %rbp.global-to-local, align 8
  ret i64 %v4_120f2

dec_label_pc_12100:                               ; preds = %dec_label_pc_12070
  %v1_12100 = add i64 %v0_1207b, 1
  %v2_12100 = inttoptr i64 %v1_12100 to i8*
  %v3_12100 = load i8, i8* %v2_12100, align 1
  %v1_12104 = zext i8 %v3_12100 to i32
  %v2_12104 = and i32 %v1_12104, 223
  %v9_12104 = zext i32 %v2_12104 to i64
  store i64 %v9_12104, i64* @rdx, align 8
  %v11_12107 = icmp eq i32 %v2_12104, 84
  %v1_1210a = icmp eq i1 %v11_12107, false
  br i1 %v1_1210a, label %dec_label_pc_12090, label %dec_label_pc_1210c

dec_label_pc_1210c:                               ; preds = %dec_label_pc_12100
  %v1_1210c = add i64 %v0_1207b, 2
  %v2_1210c = inttoptr i64 %v1_1210c to i8*
  %v3_1210c = load i8, i8* %v2_1210c, align 1
  %v1_12110 = zext i8 %v3_1210c to i32
  %v2_12110 = and i32 %v1_12110, 223
  %v9_12110 = zext i32 %v2_12110 to i64
  store i64 %v9_12110, i64* @rdx, align 8
  %v11_12113 = icmp eq i32 %v2_12110, 70
  %v1_12116 = icmp eq i1 %v11_12113, false
  br i1 %v1_12116, label %dec_label_pc_12090, label %dec_label_pc_1211c

dec_label_pc_1211c:                               ; preds = %dec_label_pc_1210c
  %v1_1211c = add i64 %v0_1207b, 3
  %v2_1211c = inttoptr i64 %v1_1211c to i8*
  %v3_1211c = load i8, i8* %v2_1211c, align 1
  %v13_1211c = icmp eq i8 %v3_1211c, 45
  %v1_12120 = icmp eq i1 %v13_1211c, false
  br i1 %v1_12120, label %dec_label_pc_12090, label %dec_label_pc_12126

dec_label_pc_12126:                               ; preds = %dec_label_pc_1211c
  %v1_12126 = add i64 %v0_1207b, 4
  %v2_12126 = inttoptr i64 %v1_12126 to i8*
  %v3_12126 = load i8, i8* %v2_12126, align 1
  %v13_12126 = icmp eq i8 %v3_12126, 56
  %v1_1212a = icmp eq i1 %v13_12126, false
  br i1 %v1_1212a, label %dec_label_pc_12090, label %dec_label_pc_12130

dec_label_pc_12130:                               ; preds = %dec_label_pc_12126
  %v1_12130 = add i64 %v0_1207b, 5
  %v2_12130 = inttoptr i64 %v1_12130 to i8*
  %v3_12130 = load i8, i8* %v2_12130, align 1
  %v10_12130 = icmp eq i8 %v3_12130, 0
  %v1_12134 = icmp eq i1 %v10_12130, false
  br i1 %v1_12134, label %dec_label_pc_12090, label %dec_label_pc_1213a

dec_label_pc_1213a:                               ; preds = %dec_label_pc_12130
  %v2_1213a = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v11_1213a = icmp eq i8 %v2_1213a, 96
  store i64 ptrtoint (i64* @global_var_1a6b0.452 to i64), i64* @rdx, align 8
  %v1_1214c = icmp eq i1 %v11_1213a, false
  %v4_1214c = select i1 %v1_1214c, i64 ptrtoint (i64* @global_var_1a6b0.452 to i64), i64 ptrtoint (i64* @global_var_1a6ac.451 to i64)
  %v2_12154 = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_12154, i64* %rbx.global-to-local, align 8
  store i64 %v0_12070, i64* %rbp.global-to-local, align 8
  ret i64 %v4_1214c
}

define i64 @function_12160(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i32 %arg6, i64 %arg7, i64 %arg8, i64 %arg9, i64 %arg10, i64 %arg11, i64 %arg12, i64 %arg13, i64 %arg14, i64 %arg15, i64 %arg16, i64 %arg17, i64 %arg18, i64 %arg19, i64 %arg20, i64 %arg21, i64 %arg22, i64 %arg23, i64 %arg24, i64 %arg25, i64 %arg26, i64 %arg27, i64 %arg28, i64 %arg29, i64 %arg30) local_unnamed_addr {
dec_label_pc_12160:
  %r9.global-to-local = alloca i64, align 8
  %tmp52 = sext i32 %arg6 to i64
  store i64 %tmp52, i64* %r9.global-to-local, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_12164 = load i64, i64* @r8, align 8
  store i64 %v0_12164, i64* @r15, align 8
  %v0_1216b = load i64, i64* @rdi, align 8
  store i64 %v0_1216b, i64* @r14, align 8
  %v0_12170 = load i64, i64* %r9.global-to-local, align 8
  %v0_12173 = load i64, i64* @rsi, align 8
  store i64 %v0_12173, i64* @r13, align 8
  %v0_12176 = load i64, i64* @rcx, align 8
  store i64 %v0_12176, i64* @rbp, align 8
  %v2_12179 = and i64 %v0_12170, 2
  store i64 %v2_12179, i64* @rbx, align 8
  %v0_121b9 = call i64 @__readfsqword(i64 40)
  %v0_121cc = call i32 @__ctype_get_mb_cur_max()
  %v0_121d1 = load i64, i64* @r15, align 8
  %v1_121d1 = trunc i64 %v0_121d1 to i32
  %tmp116 = icmp ult i32 %v1_121d1, 11
  br i1 %tmp116, label %dec_label_pc_121e0, label %dec_label_pc_1338f

dec_label_pc_121e0:                               ; preds = %dec_label_pc_12160
  store i64 ptrtoint (i64* @global_var_1a720.453 to i64), i64* @rcx, align 8
  store i64 %v0_121d1, i64* @rdx, align 8
  %v2_121ea = mul i64 %v0_121d1, 4
  %v3_121ea = add i64 %v2_121ea, ptrtoint (i64* @global_var_1a720.453 to i64)
  %v4_121ea = inttoptr i64 %v3_121ea to i32*
  %v5_121ea = load i32, i32* %v4_121ea, align 4
  %v6_121ea = sext i32 %v5_121ea to i64
  %v2_121ee = add i64 %v6_121ea, ptrtoint (i64* @global_var_1a720.453 to i64)
  ret i64 %v2_121ee

dec_label_pc_1338f:                               ; preds = %dec_label_pc_12160
  call void @abort()
  unreachable
}

define i64 @function_133a0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_133a0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_133a0 = load i64, i64* %r15.global-to-local, align 8
  %v0_133a2 = load i64, i64* %r14.global-to-local, align 8
  store i64 %arg1, i64* %r15.global-to-local, align 8
  %v0_133a7 = load i64, i64* %r13.global-to-local, align 8
  %v0_133a9 = load i64, i64* %r12.global-to-local, align 8
  %v0_133ab = load i64, i64* @rdx, align 8
  store i64 %v0_133ab, i64* %r14.global-to-local, align 8
  %v0_133ae = load i64, i64* %rbp.global-to-local, align 8
  %v0_133af = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_133af, i64* %stack_var_-48, align 8
  %v0_133b0 = load i64, i64* @rcx, align 8
  store i64 %v0_133b0, i64* %rbp.global-to-local, align 8
  %v0_133b7 = load i64, i64* @rsi, align 8
  %v0_133bc = call i32* @__errno_location()
  %v2_133bc = ptrtoint i32* %v0_133bc to i64
  store i64 %v2_133bc, i64* %rax.global-to-local, align 8
  store i64 %v2_133bc, i64* %r13.global-to-local, align 8
  %v2_133c4 = load i32, i32* %v0_133bc, align 4
  %v3_133c4 = zext i32 %v2_133c4 to i64
  store i64 %v3_133c4, i64* %rax.global-to-local, align 8
  %v0_133c6 = load i64, i64* %r15.global-to-local, align 8
  %v4_133c6 = trunc i64 %v0_133c6 to i32
  %v6_133c6 = icmp slt i32 %v4_133c6, 0
  %v0_133c9 = load i64, i64* bitcast (i64** @global_var_220240.458 to i64*), align 8
  store i64 %v0_133c9, i64* @rbx, align 8
  br i1 %v6_133c6, label %dec_label_pc_13541, label %dec_label_pc_133da

dec_label_pc_133da:                               ; preds = %dec_label_pc_133a0
  %v0_133da = load i32, i32* @global_var_220238.459, align 4
  %v8_133e1 = sext i32 %v0_133da to i64
  %v9_133e1 = icmp sgt i64 %v8_133e1, %v0_133c6
  br i1 %v9_133e1, label %dec_label_pc_13445, label %dec_label_pc_133e3

dec_label_pc_133e3:                               ; preds = %dec_label_pc_133da
  %tmp294 = icmp ult i32 %v4_133c6, 2147483647
  br i1 %tmp294, label %dec_label_pc_133f0, label %dec_label_pc_13546

dec_label_pc_133f0:                               ; preds = %dec_label_pc_133e3
  %v1_133f0 = add i64 %v0_133c6, 1
  store i64 %v1_133f0, i64* %r12.global-to-local, align 8
  store i64 ptrtoint (i128* @global_var_220250.457 to i64), i64* %rax.global-to-local, align 8
  %v2_133fe = mul i64 %v1_133f0, 16
  store i64 %v2_133fe, i64* @rsi, align 8
  %v12_13402 = icmp eq i64 %v0_133c9, ptrtoint (i128* @global_var_220250.457 to i64)
  br i1 %v12_13402, label %dec_label_pc_13520, label %dec_label_pc_1340b

dec_label_pc_1340b:                               ; preds = %dec_label_pc_133f0
  store i64 %v0_133c9, i64* @rdi, align 8
  %sext = mul i64 %v1_133f0, 68719476736
  %v2_1340e = sdiv i64 %sext, 4294967296
  %v3_1340e = call i64 @function_144e0(i64 %v0_133c9, i64 %v2_1340e)
  store i64 %v3_1340e, i64* %rax.global-to-local, align 8
  store i64 %v3_1340e, i64* %rbx.global-to-local, align 8
  store i64 %v3_1340e, i64* bitcast (i64** @global_var_220240.458 to i64*), align 8
  br label %dec_label_pc_1341d

dec_label_pc_1341d:                               ; preds = %dec_label_pc_13520, %dec_label_pc_1340b
  %v1_13432 = phi i64 [ %v3_13522, %dec_label_pc_13520 ], [ %v3_1340e, %dec_label_pc_1340b ]
  %v0_1341d = load i32, i32* @global_var_220238.459, align 4
  %v1_1341d = sext i32 %v0_1341d to i64
  %v0_13424 = load i64, i64* %r12.global-to-local, align 8
  store i64 0, i64* @rsi, align 8
  %v1_13429 = trunc i64 %v0_13424 to i32
  %v4_13429 = sub i32 %v1_13429, %v0_1341d
  %v20_13429 = zext i32 %v4_13429 to i64
  %v2_1342b = mul nsw i64 %v1_1341d, 16
  %v2_13432 = add i64 %v2_1342b, %v1_13432
  store i64 %v2_13432, i64* @rdi, align 8
  %v2_13435 = mul nuw nsw i64 %v20_13429, 16
  %v9_13435 = trunc i64 %v2_13435 to i32
  store i64 %v2_13435, i64* @rdx, align 8
  %v1_13439 = inttoptr i64 %v2_13432 to i64*
  %v8_13439 = call i64* @memset(i64* %v1_13439, i32 0, i32 %v9_13435)
  %v10_13439 = ptrtoint i64* %v8_13439 to i64
  store i64 %v10_13439, i64* %rax.global-to-local, align 8
  %v0_1343e = load i64, i64* %r12.global-to-local, align 8
  %v1_1343e = trunc i64 %v0_1343e to i32
  store i32 %v1_1343e, i32* @global_var_220238.459, align 4
  %v0_13448.pre = load i64, i64* %r15.global-to-local, align 8
  %v0_13450.pre = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_13445

dec_label_pc_13445:                               ; preds = %dec_label_pc_1341d, %dec_label_pc_133da
  %v0_13450 = phi i64 [ %v0_13450.pre, %dec_label_pc_1341d ], [ %v0_133c9, %dec_label_pc_133da ]
  %v0_13448 = phi i64 [ %v0_13448.pre, %dec_label_pc_1341d ], [ %v0_133c6, %dec_label_pc_133da ]
  %v0_13445 = load i64, i64* %rbp.global-to-local, align 8
  %v1_13445 = add i64 %v0_13445, 4
  %v2_13445 = inttoptr i64 %v1_13445 to i32*
  %v3_13445 = load i32, i32* %v2_13445, align 4
  %v4_13445 = zext i32 %v3_13445 to i64
  store i64 %v4_13445, i64* %rax.global-to-local, align 8
  %v2_13448 = mul i64 %v0_13448, 16
  %v2_13450 = add i64 %v2_13448, %v0_13450
  store i64 %v2_13450, i64* @rbx, align 8
  %v1_13453 = add i64 %v0_13445, 8
  store i64 %v1_13453, i64* %r15.global-to-local, align 8
  %v2_13457 = load i32, i32* bitcast (i64* @rcx to i32*), align 8
  %v3_13457 = zext i32 %v2_13457 to i64
  store i64 %v3_13457, i64* @r8, align 8
  %v1_1345b = inttoptr i64 %v2_13450 to i64*
  %v2_1345b = load i64, i64* %v1_1345b, align 8
  %v1_1345e = add i64 %v2_13450, 8
  %v2_1345e = inttoptr i64 %v1_1345e to i64*
  %v3_1345e = load i64, i64* %v2_1345e, align 8
  store i64 %v3_1345e, i64* %r12.global-to-local, align 8
  %v0_13462 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_13462, i64* @rcx, align 8
  %v2_13465 = or i32 %v3_13445, 1
  %v9_13465 = zext i32 %v2_13465 to i64
  store i64 %v9_13465, i64* %rax.global-to-local, align 8
  %v1_1346c = add i64 %v0_13445, 48
  %v2_1346c = inttoptr i64 %v1_1346c to i64*
  %v3_1346c = load i64, i64* %v2_1346c, align 8
  %v1_13472 = add i64 %v0_13445, 40
  %v2_13472 = inttoptr i64 %v1_13472 to i64*
  %v3_13472 = load i64, i64* %v2_13472, align 8
  store i64 %v2_1345b, i64* @rsi, align 8
  store i64 %v0_133b7, i64* @rdx, align 8
  store i64 %v3_1345e, i64* @rdi, align 8
  %v32_13487 = call i64 @function_12160(i64 %v3_1345e, i64 %v2_1345b, i64 %v0_133b7, i64 %v0_13462, i64 %v3_13457, i32 %v2_13465, i64 %v1_13453, i64 %v3_13472, i64 %v3_1346c, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v32_13487, i64* %rax.global-to-local, align 8
  %tmp295 = icmp ugt i64 %v2_1345b, %v32_13487
  br i1 %tmp295, label %dec_label_pc_13501, label %dec_label_pc_1349a

dec_label_pc_1349a:                               ; preds = %dec_label_pc_13445
  %v1_1349a = add i64 %v32_13487, 1
  store i64 %v1_1349a, i64* @rsi, align 8
  store i64 ptrtoint (i64* @global_var_221420.460 to i64), i64* %rax.global-to-local, align 8
  %v0_134a5 = load i64, i64* %r12.global-to-local, align 8
  %v12_134a5 = icmp eq i64 %v0_134a5, ptrtoint (i64* @global_var_221420.460 to i64)
  %v1_134a8 = load i64, i64* @rbx, align 8
  %v2_134a8 = inttoptr i64 %v1_134a8 to i64*
  store i64 %v1_1349a, i64* %v2_134a8, align 8
  br i1 %v12_134a5, label %dec_label_pc_1349a.dec_label_pc_134bf_crit_edge, label %dec_label_pc_134ad

dec_label_pc_1349a.dec_label_pc_134bf_crit_edge:  ; preds = %dec_label_pc_1349a
  %v0_134bf.pre = load i64, i64* @rsi, align 8
  br label %dec_label_pc_134bf

dec_label_pc_134ad:                               ; preds = %dec_label_pc_1349a
  %v0_134ad = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_134ad, i64* @rdi, align 8
  %v0_134b0 = load i64, i64* @rsi, align 8
  %v1_134b5 = inttoptr i64 %v0_134ad to i64*
  call void @free(i64* %v1_134b5)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  store i64 %v0_134b0, i64* @rsi, align 8
  br label %dec_label_pc_134bf

dec_label_pc_134bf:                               ; preds = %dec_label_pc_1349a.dec_label_pc_134bf_crit_edge, %dec_label_pc_134ad
  %v0_134bf = phi i64 [ %v0_134bf.pre, %dec_label_pc_1349a.dec_label_pc_134bf_crit_edge ], [ %v0_134b0, %dec_label_pc_134ad ]
  store i64 %v0_134bf, i64* @rdi, align 8
  %v1_134c7 = call i64 @function_14480(i64 %v0_134bf)
  store i64 %v1_134c7, i64* %rax.global-to-local, align 8
  %v1_134d0 = load i64, i64* @rbx, align 8
  %v2_134d0 = add i64 %v1_134d0, 8
  %v3_134d0 = inttoptr i64 %v2_134d0 to i64*
  store i64 %v1_134c7, i64* %v3_134d0, align 8
  %v2_134d4 = load i32, i32* bitcast (i64* @rcx to i32*), align 8
  %v3_134d4 = zext i32 %v2_134d4 to i64
  store i64 %v3_134d4, i64* @r8, align 8
  %v0_134d8 = load i64, i64* @rbp, align 8
  %v1_134d8 = add i64 %v0_134d8, 48
  %v2_134d8 = inttoptr i64 %v1_134d8 to i64*
  %v3_134d8 = load i64, i64* %v2_134d8, align 8
  %v1_134db = add i64 %v0_134d8, 40
  %v2_134db = inttoptr i64 %v1_134db to i64*
  %v3_134db = load i64, i64* %v2_134db, align 8
  %v0_134de = load i64, i64* @r14, align 8
  store i64 %v0_134de, i64* @rcx, align 8
  %v0_134e1 = load i64, i64* @r15, align 8
  %v0_134e8 = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_134e8, i64* @rdi, align 8
  store i64 %v0_133b7, i64* @rdx, align 8
  store i64 %v0_134bf, i64* @rsi, align 8
  store i64 %v0_134e8, i64* %r12.global-to-local, align 8
  %v32_134f8 = call i64 @function_12160(i64 %v0_134e8, i64 %v0_134bf, i64 %v0_133b7, i64 %v0_134de, i64 %v3_134d4, i32 %v2_13465, i64 %v0_134e1, i64 %v3_134db, i64 %v3_134d8, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v32_134f8, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_13501

dec_label_pc_13501:                               ; preds = %dec_label_pc_13445, %dec_label_pc_134bf
  %v2_13505 = load i64, i64* @r13, align 8
  %v3_13505 = inttoptr i64 %v2_13505 to i32*
  store i32 %v2_133c4, i32* %v3_13505, align 4
  %v0_1350d = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_1350d, i64* %rax.global-to-local, align 8
  %v2_13510 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_13510, i64* %rbx.global-to-local, align 8
  store i64 %v0_133ae, i64* %rbp.global-to-local, align 8
  store i64 %v0_133a9, i64* %r12.global-to-local, align 8
  store i64 %v0_133a7, i64* %r13.global-to-local, align 8
  store i64 %v0_133a2, i64* %r14.global-to-local, align 8
  store i64 %v0_133a0, i64* %r15.global-to-local, align 8
  ret i64 %v0_1350d

dec_label_pc_13520:                               ; preds = %dec_label_pc_133f0
  store i64 0, i64* @rdi, align 8
  %sext4 = mul i64 %v1_133f0, 68719476736
  %v2_13522 = sdiv i64 %sext4, 4294967296
  %v3_13522 = call i64 @function_144e0(i64 0, i64 %v2_13522)
  store i64 %v3_13522, i64* %rax.global-to-local, align 8
  %v0_13527 = load i128, i128* @global_var_220250.457, align 8
  %v1_13527 = call i128 @__asm_movdqa(i128 %v0_13527)
  store i64 %v3_13522, i64* %rbx.global-to-local, align 8
  store i64 %v3_13522, i64* bitcast (i64** @global_var_220240.458 to i64*), align 8
  %v1_13539 = inttoptr i64 %v3_13522 to i128*
  %v2_13539 = load i128, i128* %v1_13539, align 8
  call void @__asm_movups(i128 %v2_13539, i128 %v1_13527)
  br label %dec_label_pc_1341d

dec_label_pc_13541:                               ; preds = %dec_label_pc_133a0
  call void @abort()
  unreachable

dec_label_pc_13546:                               ; preds = %dec_label_pc_133e3
  %v1_13546 = call i64 @function_146d0(i64 %arg1)
  unreachable
}

define i64 @function_13550(i32 %arg1) local_unnamed_addr {
dec_label_pc_13550:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %tmp4 = sext i32 %arg1 to i64
  store i64 %tmp4, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_13552 = load i64, i64* @rbp, align 8
  %v0_13553 = load i64, i64* @rbx, align 8
  store i64 %v0_13553, i64* %stack_var_-24, align 8
  %v0_13554 = load i64, i64* @rdi, align 8
  %v1_13554 = trunc i64 %v0_13554 to i32
  %v0_13557 = call i32* @__errno_location()
  %v2_13557 = ptrtoint i32* %v0_13557 to i64
  store i64 %v2_13557, i64* %rax.global-to-local, align 8
  %v2_1355c = load i32, i32* %v0_13557, align 4
  %v3_1355c = zext i32 %v2_1355c to i64
  store i64 %v3_1355c, i64* %r12.global-to-local, align 8
  store i64 %v2_13557, i64* @rbp, align 8
  store i64 ptrtoint (i128* @global_var_221520.461 to i64), i64* %rax.global-to-local, align 8
  %v2_13569 = icmp eq i32 %v1_13554, 0
  store i64 56, i64* @rsi, align 8
  %sext = mul i64 %v0_13554, 4294967296
  %v2_13571 = sdiv i64 %sext, 4294967296
  %v4_13571 = select i1 %v2_13569, i64 ptrtoint (i128* @global_var_221520.461 to i64), i64 %v2_13571
  store i64 %v4_13571, i64* @rbx, align 8
  store i64 %v4_13571, i64* @rdi, align 8
  %v2_13578 = call i64 @function_14680(i64 %v4_13571, i64 56)
  store i64 %v2_13578, i64* %rax.global-to-local, align 8
  %v0_1357d = load i64, i64* %r12.global-to-local, align 8
  %v1_1357d = trunc i64 %v0_1357d to i32
  %v2_1357d = load i64, i64* @rbp, align 8
  %v3_1357d = inttoptr i64 %v2_1357d to i32*
  store i32 %v1_1357d, i32* %v3_1357d, align 4
  %v2_13581 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_13581, i64* @rbx, align 8
  store i64 %v0_13552, i64* @rbp, align 8
  %v0_13585 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13585
}

define i64 @function_13590(i32 %arg1) local_unnamed_addr {
dec_label_pc_13590:
  %tmp2 = sext i32 %arg1 to i64
  %v2_13597 = icmp eq i32 %arg1, 0
  %v4_1359a = select i1 %v2_13597, i64 ptrtoint (i128* @global_var_221520.461 to i64), i64 %tmp2
  store i64 %v4_1359a, i64* @rdi, align 8
  %v1_1359e = inttoptr i64 %v4_1359a to i32*
  %v2_1359e = load i32, i32* %v1_1359e, align 4
  %v3_1359e = zext i32 %v2_1359e to i64
  ret i64 %v3_1359e
}

define i64 @function_135b0(i32 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_135b0:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  %tmp2 = sext i32 %arg1 to i64
  store i64 ptrtoint (i128* @global_var_221520.461 to i64), i64* %rax.global-to-local, align 8
  %v2_135b7 = icmp eq i32 %arg1, 0
  %v4_135ba = select i1 %v2_135b7, i64 ptrtoint (i128* @global_var_221520.461 to i64), i64 %tmp2
  store i64 %v4_135ba, i64* @rdi, align 8
  %v1_135be = trunc i64 %arg2 to i32
  %v3_135be = inttoptr i64 %v4_135ba to i32*
  store i32 %v1_135be, i32* %v3_135be, align 4
  %v0_135c0 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_135c0
}

define i64 @function_135d0(i64 %arg1, i8 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_135d0:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  %tmp6 = sext i8 %arg2 to i64
  store i64 %tmp6, i64* @rsi, align 8
  %v1_135d7 = icmp eq i64 %arg1, 0
  %tmp11 = urem i8 %arg2, 32
  %v2_135e2 = zext i8 %tmp11 to i32
  %v9_135e2 = zext i8 %tmp11 to i64
  store i64 %v9_135e2, i64* @rcx, align 8
  %v3_135e5 = udiv i8 %arg2, 32
  %v9_135e5 = zext i8 %v3_135e5 to i64
  %v11_135e5 = and i64 %tmp6, -256
  %v12_135e5 = or i64 %v11_135e5, %v9_135e5
  store i64 %v12_135e5, i64* %rax.global-to-local, align 8
  %v2_135eb = mul nsw i64 %v12_135e5, 4
  %arg1.op = add i64 %arg1, 8
  %v3_135eb = select i1 %v1_135d7, i64 add (i64 ptrtoint (i128* @global_var_221520.461 to i64), i64 8), i64 %arg1.op
  %v4_135eb = add i64 %v3_135eb, %v2_135eb
  store i64 %v4_135eb, i64* @rdi, align 8
  %v1_135f0 = inttoptr i64 %v4_135eb to i32*
  %v2_135f0 = load i32, i32* %v1_135f0, align 4
  %v3_135f0 = zext i32 %v2_135f0 to i64
  store i64 %v3_135f0, i64* @rsi, align 8
  %v6_135f4 = icmp eq i8 %tmp11, 0
  br i1 %v6_135f4, label %bb7, label %bb

bb:                                               ; preds = %dec_label_pc_135d0
  %v7_135f4 = lshr i32 %v2_135f0, %v2_135e2
  %v14_135f4 = zext i32 %v7_135f4 to i64
  br label %bb7

bb7:                                              ; preds = %dec_label_pc_135d0, %bb
  %v0_135f8 = phi i64 [ %v14_135f4, %bb ], [ %v3_135f0, %dec_label_pc_135d0 ]
  %v4_135f61 = xor i64 %v0_135f8, %arg3
  %v2_135f8 = urem i64 %v0_135f8, 2
  store i64 %v2_135f8, i64* %rax.global-to-local, align 8
  %v1_135fb = trunc i64 %v4_135f61 to i32
  %v2_135fb = urem i32 %v1_135fb, 2
  br i1 %v6_135f4, label %bb9, label %bb8

bb8:                                              ; preds = %bb7
  %v7_135fe = shl i32 %v2_135fb, %v2_135e2
  br label %bb9

bb9:                                              ; preds = %bb7, %bb8
  %v0_13600.in = phi i32 [ %v7_135fe, %bb8 ], [ %v2_135fb, %bb7 ]
  %v4_13600210 = xor i32 %v0_13600.in, %v2_135f0
  %v4_136002 = zext i32 %v4_13600210 to i64
  store i64 %v4_136002, i64* @rdx, align 8
  store i32 %v4_13600210, i32* %v1_135f0, align 4
  %v0_13604 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13604
}

define i64 @function_13610(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_13610:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 ptrtoint (i128* @global_var_221520.461 to i64), i64* %rax.global-to-local, align 8
  %v1_13617 = icmp eq i64 %arg1, 0
  %v3_1361a = select i1 %v1_13617, i64 ptrtoint (i128* @global_var_221520.461 to i64), i64 %arg1
  store i64 %v3_1361a, i64* @rdi, align 8
  %v1_1361e = add i64 %v3_1361a, 4
  %v2_1361e = inttoptr i64 %v1_1361e to i32*
  %v3_1361e = load i32, i32* %v2_1361e, align 4
  %v4_1361e = zext i32 %v3_1361e to i64
  store i64 %v4_1361e, i64* %rax.global-to-local, align 8
  %v1_13621 = trunc i64 %arg2 to i32
  store i32 %v1_13621, i32* %v2_1361e, align 4
  %v0_13624 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13624
}

define i64 @function_13630(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_13630:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 ptrtoint (i128* @global_var_221520.461 to i64), i64* %rax.global-to-local, align 8
  %v1_13637 = icmp eq i64 %arg1, 0
  %v3_1363a = select i1 %v1_13637, i64 ptrtoint (i128* @global_var_221520.461 to i64), i64 %arg1
  store i64 %v3_1363a, i64* @rdi, align 8
  %v1_1363e = icmp eq i64 %arg2, 0
  %v1_13641 = inttoptr i64 %v3_1363a to i32*
  store i32 10, i32* %v1_13641, align 4
  br i1 %v1_1363e, label %dec_label_pc_13657, label %dec_label_pc_13649

dec_label_pc_13649:                               ; preds = %dec_label_pc_13630
  %v1_13649 = icmp eq i64 %arg3, 0
  br i1 %v1_13649, label %dec_label_pc_13657, label %dec_label_pc_1364e

dec_label_pc_1364e:                               ; preds = %dec_label_pc_13649
  %v1_1364e = load i64, i64* @rdi, align 8
  %v2_1364e = add i64 %v1_1364e, 40
  %v3_1364e = inttoptr i64 %v2_1364e to i64*
  store i64 %arg2, i64* %v3_1364e, align 8
  %v1_13652 = load i64, i64* @rdi, align 8
  %v2_13652 = add i64 %v1_13652, 48
  %v3_13652 = inttoptr i64 %v2_13652 to i64*
  store i64 %arg3, i64* %v3_13652, align 8
  %v0_13656 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13656

dec_label_pc_13657:                               ; preds = %dec_label_pc_13649, %dec_label_pc_13630
  call void @abort()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_13660(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_13660:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  %tmp8 = ptrtoint i64* %arg1 to i64
  store i64 %tmp8, i64* @rdi, align 8
  store i64 ptrtoint (i128* @global_var_221520.461 to i64), i64* %rax.global-to-local, align 8
  %v0_1366f = load i64, i64* @rdi, align 8
  store i64 %v0_1366f, i64* %r13.global-to-local, align 8
  %v0_13672 = load i64, i64* @rbp, align 8
  %v0_13673 = load i64, i64* @rbx, align 8
  %v0_13677 = load i64, i64* @rsi, align 8
  store i64 %v0_13677, i64* %r14.global-to-local, align 8
  %v0_1367a = load i64, i64* @rdx, align 8
  store i64 %v0_1367a, i64* %r15.global-to-local, align 8
  %v1_13681 = icmp eq i64 %arg5, 0
  %v3_13684 = select i1 %v1_13681, i64 ptrtoint (i128* @global_var_221520.461 to i64), i64 %arg5
  store i64 %v3_13684, i64* @rbx, align 8
  %v0_13688 = load i64, i64* @rcx, align 8
  %v0_1368d = call i32* @__errno_location()
  %v2_1368d = ptrtoint i32* %v0_1368d to i64
  store i64 %v2_1368d, i64* %rax.global-to-local, align 8
  %v2_13692 = load i32, i32* %v0_1368d, align 4
  %v3_13692 = zext i32 %v2_13692 to i64
  store i64 %v3_13692, i64* %r12.global-to-local, align 8
  %v0_13698 = load i64, i64* @rbx, align 8
  %v1_13698 = add i64 %v0_13698, 8
  store i64 %v1_13698, i64* %rax.global-to-local, align 8
  %v1_136a0 = add i64 %v0_13698, 4
  %v2_136a0 = inttoptr i64 %v1_136a0 to i32*
  %v3_136a0 = load i32, i32* %v2_136a0, align 4
  %v1_136a4 = add i64 %v0_13698, 48
  %v2_136a4 = inttoptr i64 %v1_136a4 to i64*
  %v3_136a4 = load i64, i64* %v2_136a4, align 8
  %v1_136a7 = inttoptr i64 %v0_13698 to i32*
  %v2_136a7 = load i32, i32* %v1_136a7, align 4
  %v3_136a7 = zext i32 %v2_136a7 to i64
  store i64 %v3_136a7, i64* @r8, align 8
  %v1_136aa = add i64 %v0_13698, 40
  %v2_136aa = inttoptr i64 %v1_136aa to i64*
  %v3_136aa = load i64, i64* %v2_136aa, align 8
  %v0_136ad = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_136ad, i64* @rdx, align 8
  store i64 %v0_13688, i64* @rcx, align 8
  %v0_136b6 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_136b6, i64* @rsi, align 8
  %v0_136b9 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_136b9, i64* @rdi, align 8
  %v32_136bc = call i64 @function_12160(i64 %v0_136b9, i64 %v0_136b6, i64 %v0_136ad, i64 %v0_13688, i64 %v3_136a7, i32 %v3_136a0, i64 %v1_13698, i64 %v3_136aa, i64 %v3_136a4, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  store i64 %v32_136bc, i64* %rax.global-to-local, align 8
  %v0_136c1 = load i64, i64* %r12.global-to-local, align 8
  %v1_136c1 = trunc i64 %v0_136c1 to i32
  %v2_136c1 = load i64, i64* @rbp, align 8
  %v3_136c1 = inttoptr i64 %v2_136c1 to i32*
  store i32 %v1_136c1, i32* %v3_136c1, align 4
  store i64 %v0_13673, i64* @rbx, align 8
  store i64 %v0_13672, i64* @rbp, align 8
  %v0_136d3 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_136d3
}

define i64 @function_136e0(i64 %arg1, i64 %arg2, i32 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_136e0:
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @rcx, align 8
  %tmp23 = sext i32 %arg3 to i64
  store i64 %tmp23, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_136e0 = load i64, i64* @r15, align 8
  %v0_136e2 = load i64, i64* @r14, align 8
  %v0_136ef = load i64, i64* @rdx, align 8
  %v1_136ef = trunc i64 %v0_136ef to i32
  %v0_136f7 = load i64, i64* @rdi, align 8
  store i64 %v0_136f7, i64* %r14.global-to-local, align 8
  %v0_136fa = load i64, i64* @rsi, align 8
  store i64 %v0_136fa, i64* %r15.global-to-local, align 8
  %v1_13701 = icmp eq i64 %arg4, 0
  %v3_13704 = select i1 %v1_13701, i64 ptrtoint (i128* @global_var_221520.461 to i64), i64 %arg4
  store i64 %v3_13704, i64* @rbx, align 8
  %v0_1370a = call i32* @__errno_location()
  %v2_1370f = icmp eq i32 %v1_136ef, 0
  %v2_13715 = load i32, i32* %v0_1370a, align 4
  %v1_1371b = zext i1 %v2_1370f to i32
  %v2_1371b = load i64, i64* @rbx, align 8
  %v3_1371b = add i64 %v2_1371b, 4
  %v4_1371b = inttoptr i64 %v3_1371b to i32*
  %v5_1371b = load i32, i32* %v4_1371b, align 4
  %v6_1371b = or i32 %v1_1371b, %v5_1371b
  %v1_1371e = add i64 %v2_1371b, 8
  %v1_13726 = inttoptr i64 %v2_1371b to i32*
  %v2_13726 = load i32, i32* %v1_13726, align 4
  %v3_13726 = zext i32 %v2_13726 to i64
  store i64 %v3_13726, i64* @r8, align 8
  %v0_13729 = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_13729, i64* @rcx, align 8
  %v1_13730 = add i64 %v2_1371b, 48
  %v2_13730 = inttoptr i64 %v1_13730 to i64*
  %v3_13730 = load i64, i64* %v2_13730, align 8
  %v0_13733 = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_13733, i64* @rdx, align 8
  %v1_13736 = add i64 %v2_1371b, 40
  %v2_13736 = inttoptr i64 %v1_13736 to i64*
  %v3_13736 = load i64, i64* %v2_13736, align 8
  store i64 0, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v32_13747 = call i64 @function_12160(i64 0, i64 0, i64 %v0_13733, i64 %v0_13729, i64 %v3_13726, i32 %v6_1371b, i64 %v1_1371e, i64 %v3_13736, i64 %v3_13730, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  %v1_1374c = add i64 %v32_13747, 1
  store i64 %v1_1374c, i64* @rsi, align 8
  store i64 %v1_1374c, i64* @rdi, align 8
  %v1_13761 = call i64 @function_14480(i64 %v1_1374c)
  %v0_1376f = load i64, i64* @rbx, align 8
  %v1_1376f = add i64 %v0_1376f, 48
  %v2_1376f = inttoptr i64 %v1_1376f to i64*
  %v3_1376f = load i64, i64* %v2_1376f, align 8
  %v1_13772 = add i64 %v0_1376f, 40
  %v2_13772 = inttoptr i64 %v1_13772 to i64*
  %v3_13772 = load i64, i64* %v2_13772, align 8
  %v0_1377a = load i64, i64* @rbp, align 8
  %v1_1377a = trunc i64 %v0_1377a to i32
  %v1_1377d = inttoptr i64 %v0_1376f to i32*
  %v2_1377d = load i32, i32* %v1_1377d, align 4
  %v3_1377d = zext i32 %v2_1377d to i64
  store i64 %v3_1377d, i64* @r8, align 8
  %v0_13780 = load i64, i64* @r15, align 8
  store i64 %v0_13780, i64* @rcx, align 8
  %v0_13783 = load i64, i64* @r14, align 8
  store i64 %v0_13783, i64* @rdx, align 8
  store i64 %v1_13761, i64* @rdi, align 8
  store i64 %v1_1374c, i64* @rsi, align 8
  %v32_13790 = call i64 @function_12160(i64 %v1_13761, i64 %v1_1374c, i64 %v0_13783, i64 %v0_13780, i64 %v3_1377d, i32 %v1_1377a, i64 %v1_1371e, i64 %v3_13772, i64 %v3_1376f, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64))
  %v2_137a0 = load i64, i64* @r13, align 8
  %v3_137a0 = inttoptr i64 %v2_137a0 to i32*
  store i32 %v2_13715, i32* %v3_137a0, align 4
  br i1 %v2_1370f, label %dec_label_pc_137af, label %dec_label_pc_137a6

dec_label_pc_137a6:                               ; preds = %dec_label_pc_136e0
  %sext = mul i64 %v0_136ef, 4294967296
  %v2_137ab = sdiv i64 %sext, 4294967296
  %v3_137ab = inttoptr i64 %v2_137ab to i64*
  store i64 %v32_13747, i64* %v3_137ab, align 8
  br label %dec_label_pc_137af

dec_label_pc_137af:                               ; preds = %dec_label_pc_137a6, %dec_label_pc_136e0
  store i64 %v0_136e2, i64* %r14.global-to-local, align 8
  store i64 %v0_136e0, i64* %r15.global-to-local, align 8
  ret i64 %v1_13761
}

define i64 @function_137d0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_137d0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 %arg3, i64* @rcx, align 8
  store i64 0, i64* @rdx, align 8
  %v6_137d5 = call i64 @function_136e0(i64 %arg1, i64 %arg2, i32 0, i64 %arg3)
  ret i64 %v6_137d5
}

define i64 @function_137e0() local_unnamed_addr {
dec_label_pc_137e0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_137e0 = load i32, i32* @global_var_220238.459, align 4
  %v1_137e0 = zext i32 %v0_137e0 to i64
  %v0_137e6 = load i64, i64* %r12.global-to-local, align 8
  %v0_137e8 = load i64, i64* bitcast (i64** @global_var_220240.458 to i64*), align 8
  store i64 %v0_137e8, i64* %r12.global-to-local, align 8
  %v0_137ef = load i64, i64* %rbp.global-to-local, align 8
  %v0_137f0 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_137f0, i64* %stack_var_-24, align 8
  %v9_137f4 = icmp sgt i32 %v0_137e0, 1
  br i1 %v9_137f4, label %dec_label_pc_137f6, label %dec_label_pc_13821

dec_label_pc_137f6:                               ; preds = %dec_label_pc_137e0
  %v2_137f6 = add i32 %v0_137e0, -2
  %v17_137f6 = zext i32 %v2_137f6 to i64
  store i64 ptrtoint (i64** @global_var_220258.462 to i64), i64* %rbx.global-to-local, align 8
  %v2_137fe = mul nuw nsw i64 %v17_137f6, 16
  %v3_13802 = add nuw nsw i64 %v2_137fe, 40
  %v4_13802 = add i64 %v3_13802, %v0_137e8
  store i64 %v4_13802, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_13810

dec_label_pc_13810:                               ; preds = %dec_label_pc_13810, %dec_label_pc_137f6
  %v0_13810 = phi i64 [ %v1_13813, %dec_label_pc_13810 ], [ ptrtoint (i64** @global_var_220258.462 to i64), %dec_label_pc_137f6 ]
  %v1_13810 = inttoptr i64 %v0_13810 to i64*
  %v2_13810 = load i64, i64* %v1_13810, align 8
  store i64 %v2_13810, i64* @rdi, align 8
  %v1_13813 = add i64 %v0_13810, 16
  store i64 %v1_13813, i64* %rbx.global-to-local, align 8
  %v1_13817 = inttoptr i64 %v2_13810 to i64*
  call void @free(i64* %v1_13817)
  %v1_1381c = load i64, i64* %rbp.global-to-local, align 8
  %v12_1381c = icmp eq i64 %v1_13813, %v1_1381c
  %v1_1381f = icmp eq i1 %v12_1381c, false
  br i1 %v1_1381f, label %dec_label_pc_13810, label %dec_label_pc_13821

dec_label_pc_13821:                               ; preds = %dec_label_pc_13810, %dec_label_pc_137e0
  %v0_138724 = phi i64 [ %v1_137e0, %dec_label_pc_137e0 ], [ ptrtoint (i32* @0 to i64), %dec_label_pc_13810 ]
  %v3_13821 = load i64, i64* @global_var_220248.463, align 8
  store i64 %v3_13821, i64* @rdi, align 8
  store i64 ptrtoint (i64* @global_var_221420.460 to i64), i64* %rbx.global-to-local, align 8
  %v12_1382d = icmp eq i64 %v3_13821, ptrtoint (i64* @global_var_221420.460 to i64)
  br i1 %v12_1382d, label %dec_label_pc_13849, label %dec_label_pc_13832

dec_label_pc_13832:                               ; preds = %dec_label_pc_13821
  %v1_13832 = inttoptr i64 %v3_13821 to i64*
  call void @free(i64* %v1_13832)
  store i128 256, i128* @global_var_220250.457, align 8
  %v0_13842 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_13842, i64* bitcast (i64** @global_var_220258.462 to i64*), align 8
  br label %dec_label_pc_13849

dec_label_pc_13849:                               ; preds = %dec_label_pc_13832, %dec_label_pc_13821
  %v0_138723 = phi i64 [ ptrtoint (i32* @0 to i64), %dec_label_pc_13832 ], [ %v0_138724, %dec_label_pc_13821 ]
  store i64 ptrtoint (i128* @global_var_220250.457 to i64), i64* %rbx.global-to-local, align 8
  %v0_13850 = load i64, i64* %r12.global-to-local, align 8
  %v12_13850 = icmp eq i64 %v0_13850, ptrtoint (i128* @global_var_220250.457 to i64)
  br i1 %v12_13850, label %dec_label_pc_13864, label %dec_label_pc_13855

dec_label_pc_13855:                               ; preds = %dec_label_pc_13849
  store i64 %v0_13850, i64* @rdi, align 8
  %v1_13858 = inttoptr i64 %v0_13850 to i64*
  call void @free(i64* %v1_13858)
  %v0_1385d = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_1385d, i64* bitcast (i64** @global_var_220240.458 to i64*), align 8
  br label %dec_label_pc_13864

dec_label_pc_13864:                               ; preds = %dec_label_pc_13855, %dec_label_pc_13849
  %v0_13872 = phi i64 [ ptrtoint (i32* @0 to i64), %dec_label_pc_13855 ], [ %v0_138723, %dec_label_pc_13849 ]
  %v2_13864 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_13864, i64* %rbx.global-to-local, align 8
  store i32 1, i32* @global_var_220238.459, align 4
  store i64 %v0_137ef, i64* %rbp.global-to-local, align 8
  store i64 %v0_137e6, i64* %r12.global-to-local, align 8
  ret i64 %v0_13872
}

define i64 @function_13880() local_unnamed_addr {
dec_label_pc_13880:
  %rax.global-to-local = alloca i64, align 8
  store i64 ptrtoint (i128* @global_var_221520.461 to i64), i64* @rcx, align 8
  store i64 -1, i64* @rdx, align 8
  %v0_1388e = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_1388e
}

define i64 @function_138a0() local_unnamed_addr {
dec_label_pc_138a0:
  %rax.global-to-local = alloca i64, align 8
  store i64 ptrtoint (i128* @global_var_221520.461 to i64), i64* @rcx, align 8
  %v0_138a7 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_138a7
}

define i64 @function_138b0(i64 %arg1) local_unnamed_addr {
dec_label_pc_138b0:
  %rax.global-to-local = alloca i64, align 8
  store i64 ptrtoint (i128* @global_var_221520.461 to i64), i64* @rcx, align 8
  store i64 %arg1, i64* @rsi, align 8
  store i64 -1, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v0_138c3 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_138c3
}

define i64 @function_138d0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_138d0:
  %rax.global-to-local = alloca i64, align 8
  store i64 ptrtoint (i128* @global_var_221520.461 to i64), i64* @rcx, align 8
  store i64 %arg2, i64* @rdx, align 8
  store i64 %arg1, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v0_138df = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_138df
}

define i64 @function_138f0(i32 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_138f0:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  %tmp = sext i32 %arg1 to i64
  store i64 %tmp, i64* @rdi, align 8
  %stack_var_-144 = alloca i64, align 8
  %v0_138f4 = load i64, i64* @rdx, align 8
  store i64 %v0_138f4, i64* %rax.global-to-local, align 8
  %v0_138f7 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* @rdx, align 8
  %v0_13907 = load i64, i64* @rsi, align 8
  %v1_13907 = trunc i64 %v0_13907 to i32
  %v11_13907 = icmp eq i32 %v1_13907, 10
  br i1 %v11_13907, label %dec_label_pc_13974, label %dec_label_pc_1390c

dec_label_pc_1390c:                               ; preds = %dec_label_pc_138f0
  store i64 -1, i64* @rdx, align 8
  %v0_13919 = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_13919, i64* @rsi, align 8
  store i64 %v0_138f7, i64* @rcx, align 8
  %v1_13964 = call i64 @__readfsqword(i64 40)
  %v2_13964 = xor i64 %v1_13964, %v0_138f7
  %v3_13964 = icmp eq i64 %v2_13964, 0
  store i64 %v2_13964, i64* @rcx, align 8
  %v1_1396d = icmp eq i1 %v3_13964, false
  br i1 %v1_1396d, label %dec_label_pc_13979, label %dec_label_pc_1396f

dec_label_pc_1396f:                               ; preds = %dec_label_pc_1390c
  %v0_13973 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13973

dec_label_pc_13974:                               ; preds = %dec_label_pc_138f0
  call void @abort()
  unreachable

dec_label_pc_13979:                               ; preds = %dec_label_pc_1390c
  call void @__stack_chk_fail()
  %v0_13984 = load i64, i64* @rdx, align 8
  store i64 %v0_13984, i64* %rax.global-to-local, align 8
  %v0_13987 = load i64, i64* @rcx, align 8
  store i64 %v0_13987, i64* @rdx, align 8
  %v0_1398a = call i64 @__readfsqword(i64 40)
  store i64 0, i64* @rcx, align 8
  %v0_1399a = load i64, i64* @rsi, align 8
  %v1_1399a = trunc i64 %v0_1399a to i32
  %v11_1399a = icmp eq i32 %v1_1399a, 10
  br i1 %v11_1399a, label %dec_label_pc_13a00, label %dec_label_pc_1399f

dec_label_pc_1399f:                               ; preds = %dec_label_pc_13979
  %v16_13980 = ptrtoint i64* %stack_var_-144 to i64
  store i64 %v0_1399a, i64* %stack_var_-144, align 8
  store i64 %v16_13980, i64* @rcx, align 8
  %v0_139a5 = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_139a5, i64* @rsi, align 8
  store i64 %v0_1398a, i64* @rdx, align 8
  %v1_139f0 = call i64 @__readfsqword(i64 40)
  %v2_139f0 = xor i64 %v1_139f0, %v0_1398a
  %v3_139f0 = icmp eq i64 %v2_139f0, 0
  store i64 %v2_139f0, i64* @rdx, align 8
  %v1_139f9 = icmp eq i1 %v3_139f0, false
  br i1 %v1_139f9, label %dec_label_pc_13a05, label %dec_label_pc_139fb

dec_label_pc_139fb:                               ; preds = %dec_label_pc_1399f
  %v0_139ff = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_139ff

dec_label_pc_13a00:                               ; preds = %dec_label_pc_13979
  call void @abort()
  unreachable

dec_label_pc_13a05:                               ; preds = %dec_label_pc_1399f
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_13a10(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_13a10:
  store i64 %arg2, i64* @rdx, align 8
  store i64 %arg1, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v5_13a17 = call i64 @function_138f0(i32 0, i64 %arg1, i64 %arg2)
  ret i64 %v5_13a17
}

define i64 @function_13a20(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_13a20:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rcx, align 8
  store i64 %arg2, i64* @rdx, align 8
  store i64 %arg1, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v0_13a2a = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13a2a
}

define i64 @function_13a30(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_13a30:
  %of.global-to-local = alloca i1, align 1
  %r9.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-72 = alloca i64, align 8
  %v0_13a30 = load i64, i64* @rsp, align 8
  %tmp17 = sub i64 71, %v0_13a30
  %v8_13a30 = and i64 %tmp17, %v0_13a30
  %v9_13a30 = icmp slt i64 %v8_13a30, 0
  store i1 %v9_13a30, i1* %of.global-to-local, align 1
  %v16_13a30 = ptrtoint i64* %stack_var_-72 to i64
  %v0_13a34 = load i64, i64* @rdx, align 8
  store i64 %v0_13a34, i64* @rcx, align 8
  %v0_13a36 = call i64 @__readfsqword(i64 40)
  %v0_13a46 = load i64, i64* @global_var_221550.464, align 8
  store i64 %v0_13a46, i64* %rax.global-to-local, align 8
  store i64 %v16_13a30, i64* @r8, align 8
  %v0_13a50 = load i64, i64* @rcx, align 8
  %v1_13a50 = trunc i64 %v0_13a50 to i32
  %v2_13a50 = urem i32 %v1_13a50, 32
  store i1 false, i1* %of.global-to-local, align 1
  %v9_13a50 = zext i32 %v2_13a50 to i64
  store i64 %v9_13a50, i64* @rcx, align 8
  %v0_13a53 = load i128, i128* @global_var_221520.461, align 8
  %v1_13a53 = call i128 @__asm_movdqa(i128 %v0_13a53)
  %v0_13a60 = load i64, i64* @rdx, align 8
  store i64 %v0_13a60, i64* %rax.global-to-local, align 8
  %v1_13a62 = call i64 @__asm_movaps.5(i128 %v1_13a53)
  store i64 %v1_13a62, i64* %stack_var_-72, align 8
  %v1_13a66 = trunc i64 %v0_13a60 to i8
  %v3_13a66 = udiv i8 %v1_13a66, 32
  %v9_13a66 = zext i8 %v3_13a66 to i64
  %v11_13a66 = and i64 %v0_13a60, -256
  %v12_13a66 = or i64 %v9_13a66, %v11_13a66
  store i64 %v12_13a66, i64* %rax.global-to-local, align 8
  %v0_13a6c = load i64, i64* @r8, align 8
  %v2_13a6c = mul i64 %v12_13a66, 4
  %v3_13a6c = add i64 %v2_13a6c, 8
  %v4_13a6c = add i64 %v3_13a6c, %v0_13a6c
  store i64 %v4_13a6c, i64* %r9.global-to-local, align 8
  %v0_13a71 = load i128, i128* @global_var_221530.465, align 8
  %v1_13a71 = call i128 @__asm_movdqa(i128 %v0_13a71)
  %v1_13a79 = call i64 @__asm_movaps.5(i128 %v1_13a71)
  %v0_13a7e = load i128, i128* @global_var_221540.466, align 8
  %v1_13a7e = call i128 @__asm_movdqa(i128 %v0_13a7e)
  %v1_13a86 = call i64 @__asm_movaps.5(i128 %v1_13a7e)
  %v0_13a8b = load i64, i64* %r9.global-to-local, align 8
  %v1_13a8b = inttoptr i64 %v0_13a8b to i32*
  %v2_13a8b = load i32, i32* %v1_13a8b, align 4
  %v3_13a8b = zext i32 %v2_13a8b to i64
  store i64 %v3_13a8b, i64* @rdx, align 8
  store i64 %v3_13a8b, i64* %rax.global-to-local, align 8
  %v2_13a90 = load i64, i64* @rcx, align 8
  %v3_13a90 = trunc i64 %v2_13a90 to i32
  %v4_13a90 = urem i32 %v3_13a90, 32
  %v6_13a90 = icmp eq i32 %v4_13a90, 0
  br i1 %v6_13a90, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_13a30
  %v5_13a90 = load i1, i1* %of.global-to-local, align 1
  %v7_13a90 = lshr i32 %v2_13a8b, %v4_13a90
  %v14_13a90 = zext i32 %v7_13a90 to i64
  store i64 %v14_13a90, i64* %rax.global-to-local, align 8
  %v19_13a90 = icmp eq i32 %v4_13a90, 1
  %v20_13a90 = icmp slt i32 %v2_13a8b, 0
  %v21_13a90 = select i1 %v19_13a90, i1 %v20_13a90, i1 %v5_13a90
  store i1 %v21_13a90, i1* %of.global-to-local, align 1
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_13a30, %bb
  %v0_13a92 = phi i32 [ %v2_13a8b, %dec_label_pc_13a30 ], [ %v7_13a90, %bb ]
  %v3_13a92 = urem i32 %v0_13a92, 2
  %v2_13a94 = xor i32 %v3_13a92, 1
  store i1 false, i1* %of.global-to-local, align 1
  %v9_13a94 = zext i32 %v2_13a94 to i64
  store i64 %v9_13a94, i64* %rax.global-to-local, align 8
  br i1 %v6_13a90, label %bb20, label %bb19

bb19:                                             ; preds = %bb18
  %v7_13a97 = shl i32 %v2_13a94, %v4_13a90
  %v14_13a97 = zext i32 %v7_13a97 to i64
  store i64 %v14_13a97, i64* %rax.global-to-local, align 8
  %v15_13a97 = add nsw i32 %v4_13a90, -1
  %v16_13a97 = shl i32 %v2_13a94, %v15_13a97
  %tmp22 = icmp slt i32 %v16_13a97, 0
  %tmp23 = icmp slt i32 %v7_13a97, 0
  %v20_13a97 = icmp ne i1 %tmp23, %tmp22
  %v21_13a97 = icmp eq i32 %v4_13a90, 1
  %v22_13a97 = icmp eq i1 %v21_13a97, %v20_13a97
  store i1 %v22_13a97, i1* %of.global-to-local, align 1
  br label %bb20

bb20:                                             ; preds = %bb18, %bb19
  %v0_13a9c = phi i64 [ %v9_13a94, %bb18 ], [ %v14_13a97, %bb19 ]
  store i64 %v16_13a30, i64* @rcx, align 8
  %v4_13a9c2 = xor i64 %v0_13a9c, %v3_13a8b
  %v4_13a9c = trunc i64 %v4_13a9c2 to i32
  store i64 %v4_13a9c2, i64* %rax.global-to-local, align 8
  %v0_13a9e = load i64, i64* @rsi, align 8
  store i64 %v0_13a9e, i64* @rdx, align 8
  store i32 %v4_13a9c, i32* %v1_13a8b, align 4
  store i1 false, i1* %of.global-to-local, align 1
  store i64 0, i64* @rdi, align 8
  store i64 %v0_13a36, i64* @rsi, align 8
  %v1_13ab3 = call i64 @__readfsqword(i64 40)
  %v2_13ab3 = xor i64 %v1_13ab3, %v0_13a36
  store i1 false, i1* %of.global-to-local, align 1
  %v3_13ab3 = icmp eq i64 %v2_13ab3, 0
  store i64 %v2_13ab3, i64* @rsi, align 8
  %v1_13abc = icmp eq i1 %v3_13ab3, false
  br i1 %v1_13abc, label %dec_label_pc_13ac3, label %dec_label_pc_13abe

dec_label_pc_13abe:                               ; preds = %bb20
  %v0_13abe = load i64, i64* @rsp, align 8
  %v1_13abe = add i64 %v0_13abe, 72
  %tmp21 = xor i64 %v0_13abe, -9223372036854775808
  %v8_13abe = and i64 %v1_13abe, %tmp21
  %v9_13abe = icmp slt i64 %v8_13abe, 0
  store i1 %v9_13abe, i1* %of.global-to-local, align 1
  %v0_13ac2 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13ac2

dec_label_pc_13ac3:                               ; preds = %bb20
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_13ad0 = load i64, i64* @rsi, align 8
  store i64 %v0_13ad0, i64* @rdx, align 8
  store i64 -1, i64* @rsi, align 8
  %v3_13adb = call i64 @function_13a30(i64 0, i64 -1, i64 %v0_13ad0)
  store i64 %v3_13adb, i64* %rax.global-to-local, align 8
  ret i64 %v3_13adb
}

define i64 @function_13ae0(i64 %arg1) local_unnamed_addr {
dec_label_pc_13ae0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 58, i64* @rdx, align 8
  store i64 -1, i64* @rsi, align 8
  %v3_13aec = call i64 @function_13a30(i64 %arg1, i64 -1, i64 58)
  ret i64 %v3_13aec
}

define i64 @function_13b00() local_unnamed_addr {
dec_label_pc_13b00:
  store i64 58, i64* @rdx, align 8
  %v0_13b05 = load i64, i64* @rdi, align 8
  %v1_13b05 = load i64, i64* @rsi, align 8
  %v3_13b05 = call i64 @function_13a30(i64 %v0_13b05, i64 %v1_13b05, i64 58)
  ret i64 %v3_13b05
}

define i64 @function_13b10(i32 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_13b10:
  %r9.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %zf.global-to-local = alloca i1, align 1
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  %tmp5 = sext i32 %arg1 to i64
  store i64 %tmp5, i64* @rdi, align 8
  %v0_13b10 = load i64, i64* @rsp, align 8
  %v10_13b10 = icmp eq i64 %v0_13b10, 72
  store i1 %v10_13b10, i1* %zf.global-to-local, align 1
  %v0_13b14 = load i64, i64* @rdx, align 8
  store i64 %v0_13b14, i64* %rax.global-to-local, align 8
  %v0_13b17 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* @rdx, align 8
  %v0_13b27 = load i64, i64* @rsi, align 8
  %v1_13b27 = trunc i64 %v0_13b27 to i32
  %v11_13b27 = icmp eq i32 %v1_13b27, 10
  store i1 %v11_13b27, i1* %zf.global-to-local, align 1
  br i1 %v11_13b27, label %dec_label_pc_13b94, label %dec_label_pc_13b2c

dec_label_pc_13b2c:                               ; preds = %dec_label_pc_13b10
  store i64 -1, i64* @rdx, align 8
  %v0_13b39 = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_13b39, i64* @rsi, align 8
  store i64 %v0_13b17, i64* @rcx, align 8
  %v1_13b84 = call i64 @__readfsqword(i64 40)
  %v2_13b84 = xor i64 %v1_13b84, %v0_13b17
  %v3_13b84 = icmp eq i64 %v2_13b84, 0
  store i1 %v3_13b84, i1* %zf.global-to-local, align 1
  store i64 %v2_13b84, i64* @rcx, align 8
  %v1_13b8d = icmp eq i1 %v3_13b84, false
  br i1 %v1_13b8d, label %dec_label_pc_13b99, label %dec_label_pc_13b8f

dec_label_pc_13b8f:                               ; preds = %dec_label_pc_13b2c
  %v0_13b8f = load i64, i64* @rsp, align 8
  %v10_13b8f = icmp eq i64 %v0_13b8f, -72
  store i1 %v10_13b8f, i1* %zf.global-to-local, align 1
  %v0_13b93 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13b93

dec_label_pc_13b94:                               ; preds = %dec_label_pc_13b10
  call void @abort()
  unreachable

dec_label_pc_13b99:                               ; preds = %dec_label_pc_13b2c
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_13ba0

dec_label_pc_13ba0:                               ; preds = %dec_label_pc_13c2c, %dec_label_pc_13b99
  %v0_13ba0 = load i64, i64* @rsp, align 8
  %v10_13ba0 = icmp eq i64 %v0_13ba0, 72
  store i1 %v10_13ba0, i1* %zf.global-to-local, align 1
  %v0_13ba4 = load i64, i64* @rcx, align 8
  store i64 %v0_13ba4, i64* %r9.global-to-local, align 8
  %v0_13ba7 = load i64, i64* @global_var_221550.464, align 8
  store i64 %v0_13ba7, i64* @rcx, align 8
  %v0_13bae = load i128, i128* @global_var_221520.461, align 8
  %v1_13bae = call i128 @__asm_movdqa(i128 %v0_13bae)
  %v0_13bb6 = call i64 @__readfsqword(i64 40)
  %v1_13bbf = load i64, i64* @rsp, align 8
  %v2_13bbf = add i64 %v1_13bbf, 56
  %v3_13bbf = inttoptr i64 %v2_13bbf to i64*
  store i64 %v0_13bb6, i64* %v3_13bbf, align 8
  store i1 true, i1* %zf.global-to-local, align 1
  store i64 0, i64* %rax.global-to-local, align 8
  %v1_13bc6 = call i64 @__asm_movaps.5(i128 %v1_13bae)
  %v2_13bc6 = load i64, i64* @rsp, align 8
  %v3_13bc6 = sext i64 %v1_13bc6 to i128
  %v4_13bc6 = inttoptr i64 %v2_13bc6 to i128*
  store i128 %v3_13bc6, i128* %v4_13bc6, align 8
  %v0_13bca = load i64, i64* @rsi, align 8
  %v1_13bca = icmp eq i64 %v0_13bca, 0
  store i1 %v1_13bca, i1* %zf.global-to-local, align 1
  %v0_13bcd = load i64, i64* @rcx, align 8
  %v2_13bcd = add i64 %v2_13bc6, 48
  %v3_13bcd = inttoptr i64 %v2_13bcd to i64*
  store i64 %v0_13bcd, i64* %v3_13bcd, align 8
  %v0_13bd2 = load i64, i64* @rsp, align 8
  %v1_13bd2 = inttoptr i64 %v0_13bd2 to i32*
  store i32 10, i32* %v1_13bd2, align 4
  %v0_13bd9 = load i128, i128* @global_var_221530.465, align 8
  %v1_13bd9 = call i128 @__asm_movdqa(i128 %v0_13bd9)
  %v1_13be1 = call i64 @__asm_movaps.5(i128 %v1_13bd9)
  %v2_13be1 = load i64, i64* @rsp, align 8
  %v3_13be1 = add i64 %v2_13be1, 16
  %v4_13be1 = sext i64 %v1_13be1 to i128
  %v5_13be1 = inttoptr i64 %v3_13be1 to i128*
  store i128 %v4_13be1, i128* %v5_13be1, align 8
  %v0_13be6 = load i128, i128* @global_var_221540.466, align 8
  %v1_13be6 = call i128 @__asm_movdqa(i128 %v0_13be6)
  store i128 %v1_13be6, i128* @xmm0, align 8
  %v1_13bee = call i64 @__asm_movaps.5(i128 %v1_13be6)
  %v2_13bee = load i64, i64* @rsp, align 8
  %v3_13bee = add i64 %v2_13bee, 32
  %v4_13bee = sext i64 %v1_13bee to i128
  %v5_13bee = inttoptr i64 %v3_13bee to i128*
  store i128 %v4_13bee, i128* %v5_13bee, align 8
  %v0_13bf3 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_13bf3, label %dec_label_pc_13c27, label %dec_label_pc_13bf5

dec_label_pc_13bf5:                               ; preds = %dec_label_pc_13ba0
  %v0_13bf5 = load i64, i64* @rdx, align 8
  %v1_13bf5 = icmp eq i64 %v0_13bf5, 0
  store i1 %v1_13bf5, i1* %zf.global-to-local, align 1
  br i1 %v1_13bf5, label %dec_label_pc_13c27, label %dec_label_pc_13bfa

dec_label_pc_13bfa:                               ; preds = %dec_label_pc_13bf5
  %v0_13bfa = load i64, i64* @rsi, align 8
  %v2_13bfa = add i64 %v2_13bee, 40
  %v3_13bfa = inttoptr i64 %v2_13bfa to i64*
  store i64 %v0_13bfa, i64* %v3_13bfa, align 8
  %v0_13bff = load i64, i64* @rdx, align 8
  %v1_13bff = load i64, i64* @rsp, align 8
  %v2_13bff = add i64 %v1_13bff, 48
  %v3_13bff = inttoptr i64 %v2_13bff to i64*
  store i64 %v0_13bff, i64* %v3_13bff, align 8
  %v0_13c04 = load i64, i64* @rsp, align 8
  store i64 %v0_13c04, i64* @rcx, align 8
  %v0_13c07 = load i64, i64* @r8, align 8
  store i64 %v0_13c07, i64* @rdx, align 8
  %v0_13c0a = load i64, i64* %r9.global-to-local, align 8
  store i64 %v0_13c0a, i64* @rsi, align 8
  %v1_13c12 = add i64 %v0_13c04, 56
  %v2_13c12 = inttoptr i64 %v1_13c12 to i64*
  %v3_13c12 = load i64, i64* %v2_13c12, align 8
  store i64 %v3_13c12, i64* @rdi, align 8
  %v1_13c17 = call i64 @__readfsqword(i64 40)
  %v2_13c17 = xor i64 %v1_13c17, %v3_13c12
  %v3_13c17 = icmp eq i64 %v2_13c17, 0
  store i1 %v3_13c17, i1* %zf.global-to-local, align 1
  store i64 %v2_13c17, i64* @rdi, align 8
  %v1_13c20 = icmp eq i1 %v3_13c17, false
  br i1 %v1_13c20, label %dec_label_pc_13c2c, label %dec_label_pc_13c22

dec_label_pc_13c22:                               ; preds = %dec_label_pc_13bfa
  %v0_13c22 = load i64, i64* @rsp, align 8
  %v10_13c22 = icmp eq i64 %v0_13c22, -72
  store i1 %v10_13c22, i1* %zf.global-to-local, align 1
  %v0_13c26 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13c26

dec_label_pc_13c27:                               ; preds = %dec_label_pc_13bf5, %dec_label_pc_13ba0
  call void @abort()
  unreachable

dec_label_pc_13c2c:                               ; preds = %dec_label_pc_13bfa
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  store i64 -1, i64* @r8, align 8
  br label %dec_label_pc_13ba0
}

define i64 @function_13c50(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_13c50:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rcx, align 8
  store i64 -1, i64* @r8, align 8
  store i64 %arg2, i64* @rdx, align 8
  store i64 %arg1, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v0_13c62 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13c62
}

define i64 @function_13c70(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_13c70:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg4, i64* @r8, align 8
  store i64 %arg3, i64* @rcx, align 8
  store i64 %arg2, i64* @rdx, align 8
  store i64 %arg1, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v0_13c7e = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13c7e
}

define i64 @function_13c90() local_unnamed_addr {
dec_label_pc_13c90:
  %rax.global-to-local = alloca i64, align 8
  store i64 ptrtoint (i64* @global_var_220200.467 to i64), i64* @rcx, align 8
  %v0_13c97 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13c97
}

define i64 @function_13ca0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_13ca0:
  %rax.global-to-local = alloca i64, align 8
  store i64 ptrtoint (i64* @global_var_220200.467 to i64), i64* @rcx, align 8
  store i64 %arg2, i64* @rdx, align 8
  store i64 %arg1, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v0_13caf = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_13caf
}

define i64 @function_13cc0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_13cc0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  store i64 ptrtoint (i64* @global_var_220200.467 to i64), i64* @rcx, align 8
  store i64 -1, i64* @rdx, align 8
  %v0_13cce = load i64, i64* @rax, align 8
  ret i64 %v0_13cce
}

define i64 @function_13ce0(i64 %arg1) local_unnamed_addr {
dec_label_pc_13ce0:
  store i64 ptrtoint (i64* @global_var_220200.467 to i64), i64* @rcx, align 8
  store i64 %arg1, i64* @rsi, align 8
  store i64 -1, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v0_13cf3 = load i64, i64* @rax, align 8
  ret i64 %v0_13cf3
}

define i64 @function_13d00(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_13d00:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %tmp47 = call i64 @__decompiler_undefined_function_0()
  %tmp48 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-216 = alloca i64, align 8
  %stack_var_-360 = alloca i64, align 8
  %v0_13d02 = load i64, i64* @r14, align 8
  %v0_13d04 = load i64, i64* @r13, align 8
  %v0_13d06 = load i64, i64* @r12, align 8
  store i64 %arg1, i64* %r12.global-to-local, align 8
  %v0_13d0b = load i64, i64* @rbp, align 8
  store i64 %arg2, i64* @rbp, align 8
  store i64 0, i64* @rbx, align 8
  %v16_13d12 = ptrtoint i64* %stack_var_-360 to i64
  %v0_13d19 = call i64 @__readfsqword(i64 40)
  %v2_13d2c = call i64 @function_ce10(i64 %arg1, i64 %arg2)
  %v0_13d31 = load i64, i64* @rbp, align 8
  store i64 %v0_13d31, i64* @rdi, align 8
  store i64 %v2_13d2c, i64* %r13.global-to-local, align 8
  %v2_13d37 = call i64 @function_ce10(i64 %v0_13d31, i64 %arg2)
  store i64 %v2_13d2c, i64* @rdi, align 8
  store i64 %v2_13d37, i64* %r14.global-to-local, align 8
  %v1_13d42 = call i64 @function_ce70(i64 %v2_13d2c)
  store i64 %v2_13d37, i64* @rdi, align 8
  %v1_13d4d = call i64 @function_ce70(i64 %v2_13d37)
  %v12_13d52 = icmp eq i64 %v1_13d42, %v1_13d4d
  br i1 %v12_13d52, label %dec_label_pc_13d88, label %dec_label_pc_13d57

dec_label_pc_13d57:                               ; preds = %dec_label_pc_13dfd, %dec_label_pc_13d88, %dec_label_pc_13d00
  store i64 %v0_13d19, i64* @rcx, align 8
  %v1_13d5f = call i64 @__readfsqword(i64 40)
  %v2_13d5f = xor i64 %v1_13d5f, %v0_13d19
  %v3_13d5f = icmp eq i64 %v2_13d5f, 0
  store i64 %v2_13d5f, i64* @rcx, align 8
  %v1_13d6a = icmp eq i1 %v3_13d5f, false
  br i1 %v1_13d6a, label %dec_label_pc_13e62, label %dec_label_pc_13d70

dec_label_pc_13d70:                               ; preds = %dec_label_pc_13d57
  %v0_13d68 = load i64, i64* @rbx, align 8
  store i64 %v0_13d0b, i64* %rbp.global-to-local, align 8
  store i64 %v0_13d06, i64* %r12.global-to-local, align 8
  store i64 %v0_13d04, i64* %r13.global-to-local, align 8
  store i64 %v0_13d02, i64* %r14.global-to-local, align 8
  ret i64 %v0_13d68

dec_label_pc_13d88:                               ; preds = %dec_label_pc_13d00
  %v1_13d88 = trunc i64 %v1_13d42 to i32
  store i64 %v1_13d42, i64* @rdx, align 8
  %v0_13d8b = load i64, i64* %r14.global-to-local, align 8
  store i64 %v0_13d8b, i64* @rsi, align 8
  %v0_13d8e = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_13d8e, i64* @rdi, align 8
  %v1_13d91 = inttoptr i64 %v0_13d8e to i64*
  %v3_13d91 = inttoptr i64 %v0_13d8b to i64*
  %v7_13d91 = call i32 @memcmp(i64* %v1_13d91, i64* %v3_13d91, i32 %v1_13d88)
  %v5_13d96 = icmp eq i32 %v7_13d91, 0
  %v1_13d98 = icmp eq i1 %v5_13d96, false
  br i1 %v1_13d98, label %dec_label_pc_13d57, label %dec_label_pc_13d9a

dec_label_pc_13d9a:                               ; preds = %dec_label_pc_13d88
  %v0_13d9a = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_13d9a, i64* @rdi, align 8
  %v1_13d9d = call i64 @function_15cf0(i64 %v0_13d9a)
  %v0_13da2 = load i64, i64* @rbp, align 8
  store i64 %v0_13da2, i64* @rdi, align 8
  store i64 %v1_13d9d, i64* %r12.global-to-local, align 8
  %v1_13da8 = call i64 @function_15cf0(i64 %v0_13da2)
  %tmp61 = bitcast i64* %stack_var_-360 to %stat*
  store i64 %v16_13d12, i64* @rdx, align 8
  %v1_13db0 = inttoptr i64 %v1_13d9d to i8*
  store i64 %v1_13d9d, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  store i64 %v1_13da8, i64* %rbp.global-to-local, align 8
  %v9_13dbb = call i32 @__xstat(i32 1, i8* %v1_13db0, %stat* %tmp61)
  %v5_13dc0 = icmp eq i32 %v9_13dbb, 0
  %v1_13dc2 = icmp eq i1 %v5_13dc0, false
  br i1 %v1_13dc2, label %dec_label_pc_13e40, label %dec_label_pc_13dc4

dec_label_pc_13dc4:                               ; preds = %dec_label_pc_13e40, %dec_label_pc_13d9a
  %v2_13dc4 = ptrtoint i64* %stack_var_-216 to i64
  %tmp62 = bitcast i64* %stack_var_-216 to %stat*
  store i64 %v2_13dc4, i64* @rdx, align 8
  %v0_13dcc = load i64, i64* %rbp.global-to-local, align 8
  %v1_13dcc = inttoptr i64 %v0_13dcc to i8*
  store i64 %v0_13dcc, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v9_13dd4 = call i32 @__xstat(i32 1, i8* %v1_13dcc, %stat* %tmp62)
  %v5_13dd9 = icmp eq i32 %v9_13dd4, 0
  %v1_13ddb = icmp eq i1 %v5_13dd9, false
  br i1 %v1_13ddb, label %dec_label_pc_13e18, label %dec_label_pc_13ddd

dec_label_pc_13ddd:                               ; preds = %dec_label_pc_13e18, %dec_label_pc_13dc4
  store i64 0, i64* @rbx, align 8
  %v15_13de7 = icmp eq i64 %tmp47, %tmp48
  %v1_13dec = icmp eq i1 %v15_13de7, false
  br i1 %v1_13dec, label %dec_label_pc_13dfd, label %dec_label_pc_13dee

dec_label_pc_13dee:                               ; preds = %dec_label_pc_13ddd
  %v3_13dee = load i64, i64* %stack_var_-216, align 8
  %v2_13df6 = load i64, i64* %stack_var_-360, align 8
  %v14_13df6 = icmp eq i64 %v2_13df6, %v3_13dee
  %v1_13dfa = zext i1 %v14_13df6 to i64
  store i64 %v1_13dfa, i64* @rbx, align 8
  br label %dec_label_pc_13dfd

dec_label_pc_13dfd:                               ; preds = %dec_label_pc_13dee, %dec_label_pc_13ddd
  %v0_13dfd = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_13dfd, i64* @rdi, align 8
  %v1_13e00 = inttoptr i64 %v0_13dfd to i64*
  call void @free(i64* %v1_13e00)
  %v0_13e05 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_13e05, i64* @rdi, align 8
  %v1_13e08 = inttoptr i64 %v0_13e05 to i64*
  call void @free(i64* %v1_13e08)
  br label %dec_label_pc_13d57

dec_label_pc_13e18:                               ; preds = %dec_label_pc_13dc4
  %v0_13e18 = call i32* @__errno_location()
  %v2_13e1d = load i32, i32* %v0_13e18, align 4
  %v3_13e1d = zext i32 %v2_13e1d to i64
  store i64 %v3_13e1d, i64* @rsi, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_1a2fc.247 to i64), i64* @rdx, align 8
  %v0_13e26 = load i64, i64* %rbp.global-to-local, align 8
  %v1_13e26 = inttoptr i64 %v0_13e26 to i8*
  store i64 %v0_13e26, i64* @rcx, align 8
  store i64 1, i64* @rdi, align 8
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %v2_13e1d, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1a2fc.247, i64 0, i64 0), i8* %v1_13e26)
  br label %dec_label_pc_13ddd

dec_label_pc_13e40:                               ; preds = %dec_label_pc_13d9a
  %v0_13e40 = call i32* @__errno_location()
  %v2_13e45 = load i32, i32* %v0_13e40, align 4
  %v3_13e45 = zext i32 %v2_13e45 to i64
  store i64 %v3_13e45, i64* @rsi, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_1a2fc.247 to i64), i64* @rdx, align 8
  %v0_13e4e = load i64, i64* %r12.global-to-local, align 8
  %v1_13e4e = inttoptr i64 %v0_13e4e to i8*
  store i64 %v0_13e4e, i64* @rcx, align 8
  store i64 1, i64* @rdi, align 8
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %v2_13e45, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1a2fc.247, i64 0, i64 0), i8* %v1_13e4e)
  br label %dec_label_pc_13dc4

dec_label_pc_13e62:                               ; preds = %dec_label_pc_13d57
  call void @__stack_chk_fail()
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_13e70(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_13e70:
  store i64 %arg6, i64* @r9, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-88 = alloca i64, align 8
  %v0_13e70 = load i64, i64* @r15, align 8
  %v0_13e72 = load i64, i64* @r14, align 8
  %v0_13e74 = load i64, i64* @r13, align 8
  %v0_13e76 = load i64, i64* @r12, align 8
  %v0_13e78 = load i64, i64* @r9, align 8
  store i64 %v0_13e78, i64* @r12, align 8
  %v0_13e7b = load i64, i64* @rbp, align 8
  %v0_13e7c = load i64, i64* @rbx, align 8
  store i64 %arg1, i64* @rbp, align 8
  %v0_13e80 = load i64, i64* @r8, align 8
  store i64 %v0_13e80, i64* @rbx, align 8
  %v1_13e87 = icmp eq i64 %arg2, 0
  br i1 %v1_13e87, label %dec_label_pc_13f20, label %dec_label_pc_13e90

dec_label_pc_13e90:                               ; preds = %dec_label_pc_13e70
  %v0_13e90 = load i64, i64* @rdx, align 8
  store i64 %v0_13e90, i64* @r8, align 8
  store i64 ptrtoint ([12 x i8]* @global_var_1ab88.468 to i64), i64* @rdx, align 8
  %v0_13e9a = load i64, i64* @rcx, align 8
  store i64 %v0_13e9a, i64* @r9, align 8
  store i64 %arg2, i64* @rcx, align 8
  store i64 1, i64* @rsi, align 8
  %v1_13ea7 = inttoptr i64 %arg1 to %_IO_FILE*
  %v9_13ea7 = inttoptr i64 %arg2 to i8*
  %v11_13ea7 = inttoptr i64 %v0_13e90 to i8*
  %v13_13ea7 = inttoptr i64 %v0_13e9a to i8*
  %v14_13ea7 = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v1_13ea7, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_1ab88.468, i64 0, i64 0), i8* %v9_13ea7, i8* %v11_13ea7, i8* %v13_13ea7)
  br label %dec_label_pc_13eac

dec_label_pc_13eac:                               ; preds = %dec_label_pc_13f20, %dec_label_pc_13e90
  store i64 ptrtoint ([4 x i8]* @global_var_1ab9b.469 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_13eba = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_1ab9b.469, i64 0, i64 0), i32 5)
  %v11_13eba = ptrtoint i8* %v9_13eba to i64
  store i64 ptrtoint ([47 x i8]* @global_var_1aec0.470 to i64), i64* @rdx, align 8
  store i64 %v11_13eba, i64* @rcx, align 8
  store i64 ptrtoint (i64* @global_var_7e1.471 to i64), i64* @r8, align 8
  store i64 1, i64* @rsi, align 8
  %v0_13ed4 = load i64, i64* @rbp, align 8
  store i64 %v0_13ed4, i64* @rdi, align 8
  %v1_13ed9 = inttoptr i64 %v0_13ed4 to %_IO_FILE*
  %v12_13ed9 = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v1_13ed9, i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @global_var_1aec0.470, i64 0, i64 0), i8* %v9_13eba, i64 ptrtoint (i64* @global_var_7e1.471 to i64))
  store i64 ptrtoint ([203 x i8]* @global_var_1ac28.472 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_13eec = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([203 x i8], [203 x i8]* @global_var_1ac28.472, i64 0, i64 0), i32 5)
  %v11_13eec = ptrtoint i8* %v9_13eec to i64
  %v0_13ef1 = load i64, i64* @rbp, align 8
  store i64 %v0_13ef1, i64* @rsi, align 8
  store i64 %v11_13eec, i64* @rdi, align 8
  %v4_13ef7 = inttoptr i64 %v0_13ef1 to %_IO_FILE*
  %v5_13ef7 = call i32 @fputs_unlocked(i8* %v9_13eec, %_IO_FILE* %v4_13ef7)
  %v0_13efc = load i64, i64* @r12, align 8
  %tmp169 = icmp ult i64 %v0_13efc, 10
  br i1 %tmp169, label %dec_label_pc_13f06, label %dec_label_pc_14230

dec_label_pc_13f06:                               ; preds = %dec_label_pc_13eac
  store i64 ptrtoint (i64* @global_var_1ae80.473 to i64), i64* @rdx, align 8
  %v2_13f0d = mul i64 %v0_13efc, 4
  %v3_13f0d = add i64 %v2_13f0d, ptrtoint (i64* @global_var_1ae80.473 to i64)
  %v4_13f0d = inttoptr i64 %v3_13f0d to i32*
  %v5_13f0d = load i32, i32* %v4_13f0d, align 4
  %v6_13f0d = sext i32 %v5_13f0d to i64
  %v2_13f11 = add i64 %v6_13f0d, ptrtoint (i64* @global_var_1ae80.473 to i64)
  ret i64 %v2_13f11

dec_label_pc_13f20:                               ; preds = %dec_label_pc_13e70
  %v0_13f20 = load i64, i64* @rcx, align 8
  store i64 %v0_13f20, i64* @r8, align 8
  %v0_13f23 = load i64, i64* @rdx, align 8
  store i64 %v0_13f23, i64* @rcx, align 8
  store i64 ptrtoint ([7 x i8]* @global_var_1ab94.474 to i64), i64* @rdx, align 8
  store i64 1, i64* @rsi, align 8
  %v1_13f34 = inttoptr i64 %arg1 to %_IO_FILE*
  %v9_13f34 = inttoptr i64 %v0_13f23 to i8*
  %v11_13f34 = inttoptr i64 %v0_13f20 to i8*
  %v12_13f34 = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v1_13f34, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_1ab94.474, i64 0, i64 0), i8* %v9_13f34, i8* %v11_13f34)
  br label %dec_label_pc_13eac

dec_label_pc_14230:                               ; preds = %dec_label_pc_13eac
  %v0_14230 = load i64, i64* @rbx, align 8
  %v1_14230 = add i64 %v0_14230, 64
  %v2_14230 = inttoptr i64 %v1_14230 to i64*
  %v3_14230 = load i64, i64* %v2_14230, align 8
  store i64 5, i64* @rdx, align 8
  %v1_1423d = add i64 %v0_14230, 16
  %v2_1423d = inttoptr i64 %v1_1423d to i64*
  %v3_1423d = load i64, i64* %v2_1423d, align 8
  %v1_14241 = add i64 %v0_14230, 8
  %v2_14241 = inttoptr i64 %v1_14241 to i64*
  %v3_14241 = load i64, i64* %v2_14241, align 8
  store i64 %v3_14241, i64* @r8, align 8
  store i64 ptrtoint ([60 x i8]* @global_var_1ae00.484 to i64), i64* @rsi, align 8
  store i64 %v3_1423d, i64* %stack_var_-88, align 8
  store i64 0, i64* @rdi, align 8
  %v9_1400c = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @global_var_1ae00.484, i64 0, i64 0), i32 5)
  %v11_1400c = ptrtoint i8* %v9_1400c to i64
  store i64 %v3_14230, i64* @r10, align 8
  store i64 %v3_14241, i64* @rcx, align 8
  store i64 %v11_1400c, i64* @rdx, align 8
  %v0_13f8f = load i64, i64* @rbp, align 8
  store i64 %v0_13f8f, i64* @rdi, align 8
  store i64 1, i64* @rsi, align 8
  %v3_13fa3 = load i64, i64* %stack_var_-88, align 8
  store i64 %v3_13fa3, i64* @r9, align 8
  store i64 %v3_14241, i64* @r8, align 8
  %v1_13fad = inttoptr i64 %v0_13f8f to %_IO_FILE*
  %v8_13fad = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v1_13fad, i32 1, i8* %v9_1400c)
  %v10_13fad = sext i32 %v8_13fad to i64
  store i64 %v0_13e7c, i64* @rbx, align 8
  store i64 %v0_13e7b, i64* @rbp, align 8
  store i64 %v0_13e76, i64* @r12, align 8
  store i64 %v0_13e74, i64* @r13, align 8
  store i64 %v0_13e72, i64* @r14, align 8
  store i64 %v0_13e70, i64* @r15, align 8
  ret i64 %v10_13fad
}

define i64 @function_14277() local_unnamed_addr {
dec_label_pc_14277:
  call void @abort()
  unreachable
}

define i64 @function_14280(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_14280:
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v9_14283 = icmp eq i64 %arg5, 0
  br i1 %v9_14283, label %dec_label_pc_1429b, label %dec_label_pc_14290

dec_label_pc_14290:                               ; preds = %dec_label_pc_14280, %dec_label_pc_14290
  %v0_14290 = phi i64 [ %v1_14290, %dec_label_pc_14290 ], [ 0, %dec_label_pc_14280 ]
  %v1_14290 = add i64 %v0_14290, 1
  %v2_14294 = mul i64 %v1_14290, 8
  %v3_14294 = add i64 %v2_14294, %arg5
  %v4_14294 = inttoptr i64 %v3_14294 to i64*
  %v5_14294 = load i64, i64* %v4_14294, align 8
  %v12_14294 = icmp eq i64 %v5_14294, 0
  %v1_14299 = icmp eq i1 %v12_14294, false
  br i1 %v1_14299, label %dec_label_pc_14290, label %dec_label_pc_1429b.loopexit

dec_label_pc_1429b.loopexit:                      ; preds = %dec_label_pc_14290
  br label %dec_label_pc_1429b

dec_label_pc_1429b:                               ; preds = %dec_label_pc_1429b.loopexit, %dec_label_pc_14280
  %v5_1429b = phi i64 [ %v1_14290, %dec_label_pc_1429b.loopexit ], [ 0, %dec_label_pc_14280 ]
  %v7_1429b = call i64 @function_13e70(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %v5_1429b, i64 ptrtoint (i32* @0 to i64))
  ret i64 %v7_1429b
}

define i64 @function_142a0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_142a0:
  %r11.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-104 = alloca i64, align 8
  %v16_142a0 = ptrtoint i64* %stack_var_-104 to i64
  %v0_142a4 = load i64, i64* @r8, align 8
  store i64 %v0_142a4, i64* @r10, align 8
  store i64 0, i64* @r9, align 8
  %v0_142aa = call i64 @__readfsqword(i64 40)
  store i64 %v16_142a0, i64* @r8, align 8
  %tmp247 = trunc i64 %v16_142a0 to i32
  br label %dec_label_pc_142c0

dec_label_pc_142c0:                               ; preds = %dec_label_pc_142e1.dec_label_pc_142c0_crit_edge, %dec_label_pc_142a0
  %v2_142c0 = phi i32 [ %v2_142c0.pre, %dec_label_pc_142e1.dec_label_pc_142c0_crit_edge ], [ %tmp247, %dec_label_pc_142a0 ]
  %v3_142c0 = zext i32 %v2_142c0 to i64
  %tmp252 = icmp ult i32 %v2_142c0, 48
  br i1 %tmp252, label %dec_label_pc_142c8, label %dec_label_pc_1430a

dec_label_pc_142c8:                               ; preds = %dec_label_pc_142c0
  store i64 %v3_142c0, i64* %r11.global-to-local, align 8
  %v1_142cb = load i64, i64* @r10, align 8
  %v2_142cb = add i64 %v1_142cb, 16
  %v3_142cb = inttoptr i64 %v2_142cb to i64*
  %v4_142cb = load i64, i64* %v3_142cb, align 8
  %v5_142cb = add i64 %v4_142cb, %v3_142c0
  store i64 %v5_142cb, i64* %r11.global-to-local, align 8
  %v2_142cf = add i32 %v2_142c0, 8
  %v3_142d2 = inttoptr i64 %v1_142cb to i32*
  store i32 %v2_142cf, i32* %v3_142d2, align 4
  br label %dec_label_pc_142d5

dec_label_pc_142d5:                               ; preds = %dec_label_pc_1430a, %dec_label_pc_142c8
  %v0_142d5 = load i64, i64* %r11.global-to-local, align 8
  %v1_142d5 = inttoptr i64 %v0_142d5 to i64*
  %v2_142d5 = load i64, i64* %v1_142d5, align 8
  %v1_142d8 = icmp eq i64 %v2_142d5, 0
  %v2_142db = load i64, i64* @r9, align 8
  %v3_142db = mul i64 %v2_142db, 8
  %v4_142db = add i64 %v3_142db, %v16_142a0
  %v5_142db = inttoptr i64 %v4_142db to i64*
  store i64 %v2_142d5, i64* %v5_142db, align 8
  %v5_142eb.pre = load i64, i64* @r9, align 8
  br i1 %v1_142d8, label %dec_label_pc_142eb, label %dec_label_pc_142e1

dec_label_pc_142e1:                               ; preds = %dec_label_pc_142d5
  %v1_142e1 = add i64 %v5_142eb.pre, 1
  store i64 %v1_142e1, i64* @r9, align 8
  %v10_142e5 = icmp eq i64 %v5_142eb.pre, 9
  %v1_142e9 = icmp eq i1 %v10_142e5, false
  br i1 %v1_142e9, label %dec_label_pc_142e1.dec_label_pc_142c0_crit_edge, label %dec_label_pc_142eb

dec_label_pc_142e1.dec_label_pc_142c0_crit_edge:  ; preds = %dec_label_pc_142e1
  %v2_142c0.pre = load i32, i32* bitcast (i64* @r8 to i32*), align 8
  br label %dec_label_pc_142c0

dec_label_pc_142eb:                               ; preds = %dec_label_pc_142d5, %dec_label_pc_142e1
  %v5_142eb = phi i64 [ %v1_142e1, %dec_label_pc_142e1 ], [ %v5_142eb.pre, %dec_label_pc_142d5 ]
  %v7_142eb = call i64 @function_13e70(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %v16_142a0, i64 %v5_142eb, i64 ptrtoint (i32* @0 to i64))
  %v1_142f5 = call i64 @__readfsqword(i64 40)
  %v2_142f5 = xor i64 %v1_142f5, %v0_142aa
  %v3_142f5 = icmp eq i64 %v2_142f5, 0
  %v1_142fe = icmp eq i1 %v3_142f5, false
  br i1 %v1_142fe, label %dec_label_pc_14305, label %dec_label_pc_14300

dec_label_pc_14300:                               ; preds = %dec_label_pc_142eb
  ret i64 %v2_142f5

dec_label_pc_14305:                               ; preds = %dec_label_pc_142eb
  call void @__stack_chk_fail()
  br label %dec_label_pc_1430a

dec_label_pc_1430a:                               ; preds = %dec_label_pc_142c0, %dec_label_pc_14305
  %v0_1430a = load i64, i64* @r10, align 8
  %v1_1430a = add i64 %v0_1430a, 8
  %v2_1430a = inttoptr i64 %v1_1430a to i64*
  %v3_1430a = load i64, i64* %v2_1430a, align 8
  store i64 %v3_1430a, i64* %r11.global-to-local, align 8
  %v1_1430e = add i64 %v3_1430a, 8
  store i64 %v1_1430e, i64* %v2_1430a, align 8
  br label %dec_label_pc_142d5
}

define i64 @function_14320(i64 %arg1, i64 %arg2, i8* %arg3, i64 %arg4, i8* %arg5, i8* %arg6, i64 %arg7) local_unnamed_addr {
dec_label_pc_14320:
  %r10.global-to-local = alloca i64, align 8
  %r11.global-to-local = alloca i64, align 8
  %tmp21 = ptrtoint i8* %arg5 to i64
  store i64 %tmp21, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  %tmp22 = ptrtoint i8* %arg3 to i64
  store i64 %tmp22, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-168 = alloca i64, align 8
  %stack_var_8 = alloca i64, align 8
  store i64 32, i64* %r10.global-to-local, align 8
  store i64 0, i64* %r11.global-to-local, align 8
  %v0_14332 = call i64 @__readfsqword(i64 40)
  %v2_14342 = ptrtoint i64* %stack_var_8 to i64
  store i64 %v2_14342, i64* @rbx, align 8
  %v2_1435a = ptrtoint i64* %stack_var_-168 to i64
  store i64 %v2_1435a, i64* @r8, align 8
  %v2_14374 = ptrtoint i64* %stack_var_-72 to i64
  store i64 0, i64* @r9, align 8
  store i64 %v2_14374, i64* @rbp, align 8
  br label %dec_label_pc_14390

dec_label_pc_14390:                               ; preds = %dec_label_pc_143b2, %dec_label_pc_14320
  %v2_143ac = phi i64 [ %v1_143b2, %dec_label_pc_143b2 ], [ 0, %dec_label_pc_14320 ]
  %v0_14390 = load i64, i64* %r10.global-to-local, align 8
  %v1_14390 = trunc i64 %v0_14390 to i32
  %tmp39 = icmp ult i32 %v1_14390, 48
  br i1 %tmp39, label %dec_label_pc_14396, label %dec_label_pc_143ec

dec_label_pc_14396:                               ; preds = %dec_label_pc_14390
  store i64 1, i64* %r11.global-to-local, align 8
  %v2_1439f = add i64 %v0_14390, 8
  %v17_1439f = and i64 %v2_1439f, 4294967295
  store i64 %v17_1439f, i64* %r10.global-to-local, align 8
  %v1_143a3 = load i64, i64* @rbp, align 8
  %v2_143a3 = add i64 %v1_143a3, %v0_14390
  br label %dec_label_pc_143a6

dec_label_pc_143a6:                               ; preds = %dec_label_pc_143ec, %dec_label_pc_14396
  %v0_143a6 = phi i64 [ %v0_143ec, %dec_label_pc_143ec ], [ %v2_143a3, %dec_label_pc_14396 ]
  %v1_143a6 = inttoptr i64 %v0_143a6 to i64*
  %v2_143a6 = load i64, i64* %v1_143a6, align 8
  %v1_143a9 = icmp eq i64 %v2_143a6, 0
  %v3_143ac = mul i64 %v2_143ac, 8
  %v4_143ac = add i64 %v3_143ac, %v2_1435a
  %v5_143ac = inttoptr i64 %v4_143ac to i64*
  store i64 %v2_143a6, i64* %v5_143ac, align 8
  br i1 %v1_143a9, label %dec_label_pc_143bc, label %dec_label_pc_143b2

dec_label_pc_143b2:                               ; preds = %dec_label_pc_143a6
  %v0_143b2 = load i64, i64* @r9, align 8
  %v1_143b2 = add i64 %v0_143b2, 1
  store i64 %v1_143b2, i64* @r9, align 8
  %v10_143b6 = icmp eq i64 %v0_143b2, 9
  %v1_143ba = icmp eq i1 %v10_143b6, false
  br i1 %v1_143ba, label %dec_label_pc_14390, label %dec_label_pc_143bc

dec_label_pc_143bc:                               ; preds = %dec_label_pc_143b2, %dec_label_pc_143a6
  %v0_143bc = load i64, i64* %r11.global-to-local, align 8
  %v4_143bc = trunc i64 %v0_143bc to i8
  %v5_143bc = icmp eq i8 %v4_143bc, 0
  %v1_143bf = icmp eq i1 %v5_143bc, false
  br i1 %v1_143bf, label %dec_label_pc_143e5, label %dec_label_pc_143c1

dec_label_pc_143c1:                               ; preds = %dec_label_pc_143e5, %dec_label_pc_143bc
  %v6_143c1 = load i64, i64* @r9, align 8
  %v8_143c1 = call i64 @function_13e70(i64 %arg1, i64 %arg2, i64 %tmp22, i64 %arg4, i64 %v2_1435a, i64 %v6_143c1, i64 ptrtoint (i32* @0 to i64))
  %v1_143cb = call i64 @__readfsqword(i64 40)
  %v2_143cb = xor i64 %v1_143cb, %v0_14332
  %v3_143cb = icmp eq i64 %v2_143cb, 0
  %v1_143d4 = icmp eq i1 %v3_143cb, false
  br i1 %v1_143d4, label %dec_label_pc_143e0, label %dec_label_pc_143d6

dec_label_pc_143d6:                               ; preds = %dec_label_pc_143c1
  ret i64 %v2_143cb

dec_label_pc_143e0:                               ; preds = %dec_label_pc_143c1
  call void @__stack_chk_fail()
  br label %dec_label_pc_143e5

dec_label_pc_143e5:                               ; preds = %dec_label_pc_143e0, %dec_label_pc_143bc
  br label %dec_label_pc_143c1

dec_label_pc_143ec:                               ; preds = %dec_label_pc_14390
  %v0_143ec = load i64, i64* @rbx, align 8
  %v1_143ef = add i64 %v0_143ec, 8
  store i64 %v1_143ef, i64* @rbx, align 8
  br label %dec_label_pc_143a6
}

define i64 @function_14400(i64 %arg1) local_unnamed_addr {
dec_label_pc_14400:
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_14400 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_14400, i64* %stack_var_-8, align 8
  store i64 ptrtoint ([21 x i8]* @global_var_1abe2.485 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_1440f = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @global_var_1abe2.485, i64 0, i64 0), i32 5)
  %v11_1440f = ptrtoint i8* %v9_1440f to i64
  store i64 ptrtoint ([22 x i8]* @global_var_1abf7.486 to i64), i64* @rdx, align 8
  store i64 %v11_1440f, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v6_14425 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %v9_1440f)
  store i64 ptrtoint ([20 x i8]* @global_var_1ac0d.487 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_14438 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @global_var_1ac0d.487, i64 0, i64 0), i32 5)
  %v11_14438 = ptrtoint i8* %v9_14438 to i64
  store i64 ptrtoint ([39 x i8]* @global_var_19fb8.378 to i64), i64* @rcx, align 8
  store i64 ptrtoint ([14 x i8]* @global_var_17d77.74 to i64), i64* @rdx, align 8
  store i64 %v11_14438, i64* @rsi, align 8
  store i64 1, i64* @rdi, align 8
  %v6_14455 = call i32 (i32, i8*, ...) @__printf_chk(i32 1, i8* %v9_14438)
  %v0_1445a = load %_IO_FILE*, %_IO_FILE** @global_var_220288.71, align 8
  %v1_1445a = ptrtoint %_IO_FILE* %v0_1445a to i64
  store i64 %v1_1445a, i64* %rbx.global-to-local, align 8
  store i64 ptrtoint ([64 x i8]* @global_var_1ae40.488 to i64), i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  store i64 5, i64* @rdx, align 8
  %v9_1446f = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @global_var_1ae40.488, i64 0, i64 0), i32 5)
  %v11_1446f = ptrtoint i8* %v9_1446f to i64
  store i64 %v1_1445a, i64* @rsi, align 8
  store i64 %v11_1446f, i64* @rdi, align 8
  %v2_1447a = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_1447a, i64* %rbx.global-to-local, align 8
  %v6_1447b = call i32 @fputs_unlocked(i8* %v9_1446f, %_IO_FILE* %v0_1445a)
  %v8_1447b = sext i32 %v6_1447b to i64
  ret i64 %v8_1447b
}

define i64 @function_14480(i64 %arg1) local_unnamed_addr {
dec_label_pc_14480:
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_14480 = load i64, i64* @rbx, align 8
  store i64 %v0_14480, i64* %stack_var_-8, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v1_14484 = trunc i64 %arg1 to i32
  %v2_14484 = call i64* @malloc(i32 %v1_14484)
  %v3_14484 = ptrtoint i64* %v2_14484 to i64
  %v1_14489 = icmp eq i64* %v2_14484, null
  %v1_1448c = icmp eq i1 %v1_14489, false
  br i1 %v1_1448c, label %dec_label_pc_14493, label %dec_label_pc_1448e

dec_label_pc_1448e:                               ; preds = %dec_label_pc_14480
  %v1_1448e = icmp eq i64 %arg1, 0
  %v1_14491 = icmp eq i1 %v1_1448e, false
  br i1 %v1_14491, label %dec_label_pc_14495, label %dec_label_pc_14493

dec_label_pc_14493:                               ; preds = %dec_label_pc_1448e, %dec_label_pc_14480
  %v2_14493 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_14493, i64* @rbx, align 8
  ret i64 %v3_14484

dec_label_pc_14495:                               ; preds = %dec_label_pc_1448e
  %v1_14495 = call i64 @function_146d0(i64 %arg1)
  unreachable
}

define i64 @function_144a0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_144a0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_144a0 = load i64, i64* @rdi, align 8
  %v0_144a3 = load i64, i64* @rsi, align 8
  %v4_144a3 = mul i64 %v0_144a3, %v0_144a0
  store i64 %v4_144a3, i64* @rdi, align 8
  %v2_144ac = icmp slt i64 %v4_144a3, 0
  br i1 %v2_144ac, label %dec_label_pc_144bb, label %dec_label_pc_144b1

dec_label_pc_144b1:                               ; preds = %dec_label_pc_144a0
  %v1_144b4 = icmp ult i64 %v4_144a3, 256
  %v1_144b7 = icmp eq i1 %v1_144b4, false
  br i1 %v1_144b7, label %dec_label_pc_144bb, label %dec_label_pc_144b9

dec_label_pc_144b9:                               ; preds = %dec_label_pc_144b1
  %v1_144b9 = call i64 @function_14480(i64 %v4_144a3)
  ret i64 %v1_144b9

dec_label_pc_144bb:                               ; preds = %dec_label_pc_144b1, %dec_label_pc_144a0
  %v1_144bf = call i64 @function_146d0(i64 %v4_144a3)
  unreachable
}

define i64 @function_144d0() local_unnamed_addr {
dec_label_pc_144d0:
  %v0_144d0 = load i64, i64* @rdi, align 8
  %v1_144d0 = call i64 @function_14480(i64 %v0_144d0)
  ret i64 %v1_144d0
}

define i64 @function_144e0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_144e0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v1_144e0 = icmp eq i64 %arg2, 0
  %v0_144e3 = load i64, i64* @rbx, align 8
  store i64 %v0_144e3, i64* %stack_var_-8, align 8
  store i64 %arg2, i64* @rbx, align 8
  %v1_144e7 = icmp eq i1 %v1_144e0, false
  br i1 %v1_144e7, label %dec_label_pc_144ee, label %dec_label_pc_144e9

dec_label_pc_144e9:                               ; preds = %dec_label_pc_144e0
  %v1_144e9 = icmp eq i64 %arg1, 0
  %v1_144ec = icmp eq i1 %v1_144e9, false
  br i1 %v1_144ec, label %dec_label_pc_14508, label %dec_label_pc_144ee

dec_label_pc_144ee:                               ; preds = %dec_label_pc_144e9, %dec_label_pc_144e0
  store i64 %arg2, i64* @rsi, align 8
  %v1_144f1 = inttoptr i64 %arg1 to i64*
  %v3_144f1 = trunc i64 %arg2 to i32
  %v4_144f1 = call i64* @realloc(i64* %v1_144f1, i32 %v3_144f1)
  %v5_144f1 = ptrtoint i64* %v4_144f1 to i64
  %v1_144f6 = icmp eq i64* %v4_144f1, null
  %v1_144f9 = icmp eq i1 %v1_144f6, false
  br i1 %v1_144f9, label %dec_label_pc_14500, label %dec_label_pc_144fb

dec_label_pc_144fb:                               ; preds = %dec_label_pc_144ee
  br i1 %v1_144e7, label %dec_label_pc_14511, label %dec_label_pc_14500

dec_label_pc_14500:                               ; preds = %dec_label_pc_144fb, %dec_label_pc_144ee
  %v2_14500 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_14500, i64* @rbx, align 8
  ret i64 %v5_144f1

dec_label_pc_14508:                               ; preds = %dec_label_pc_144e9
  %v1_14508 = inttoptr i64 %arg1 to i64*
  call void @free(i64* %v1_14508)
  %v2_1450f = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_1450f, i64* @rbx, align 8
  ret i64 zext (i32 xor (i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)) to i64)

dec_label_pc_14511:                               ; preds = %dec_label_pc_144fb
  %v1_14511 = call i64 @function_146d0(i64 %arg1)
  unreachable
}

define i64 @function_14520(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14520:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_14520 = load i64, i64* @rsi, align 8
  %v0_14523 = load i64, i64* @rdx, align 8
  %v4_14523 = mul i64 %v0_14523, %v0_14520
  store i64 %v4_14523, i64* @rsi, align 8
  %v2_1452c = icmp slt i64 %v4_14523, 0
  br i1 %v2_1452c, label %dec_label_pc_1453b, label %dec_label_pc_14531

dec_label_pc_14531:                               ; preds = %dec_label_pc_14520
  %v1_14534 = icmp ult i64 %v4_14523, 256
  %v1_14537 = icmp eq i1 %v1_14534, false
  br i1 %v1_14537, label %dec_label_pc_1453b, label %dec_label_pc_14539

dec_label_pc_14539:                               ; preds = %dec_label_pc_14531
  %v2_14539 = call i64 @function_144e0(i64 %arg1, i64 %v4_14523)
  ret i64 %v2_14539

dec_label_pc_1453b:                               ; preds = %dec_label_pc_14531, %dec_label_pc_14520
  %v1_1453f = call i64 @function_146d0(i64 %arg1)
  unreachable
}

define i64 @function_14550(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_14550:
  %r9.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_14550 = icmp eq i64 %arg1, 0
  %v0_14553 = load i64, i64* @rdx, align 8
  store i64 %v0_14553, i64* %r9.global-to-local, align 8
  %v2_14556 = load i64, i64* @rsi, align 8
  store i64 %v2_14556, i64* @rcx, align 8
  br i1 %v1_14550, label %dec_label_pc_14590, label %dec_label_pc_1455b

dec_label_pc_1455b:                               ; preds = %dec_label_pc_14550
  %v8_14567 = udiv i64 6148914691236517204, %v0_14553
  %v10_14567 = urem i64 6148914691236517204, %v0_14553
  store i64 %v10_14567, i64* @rdx, align 8
  %tmp248 = icmp ugt i64 %v8_14567, %v2_14556
  br i1 %tmp248, label %dec_label_pc_1456f, label %dec_label_pc_145ab

dec_label_pc_1456f:                               ; preds = %dec_label_pc_1455b
  %v2_14572 = udiv i64 %v2_14556, 2
  %v3_14575 = add i64 %v2_14556, 1
  %v4_14575 = add i64 %v3_14575, %v2_14572
  store i64 %v4_14575, i64* @rcx, align 8
  br label %dec_label_pc_1457a

dec_label_pc_1457a:                               ; preds = %dec_label_pc_145a6, %dec_label_pc_1456f
  %v0_1457a = phi i64 [ %v0_14595, %dec_label_pc_145a6 ], [ %v4_14575, %dec_label_pc_1456f ]
  %v2_1457a = inttoptr i64 %v2_14556 to i64*
  store i64 %v0_1457a, i64* %v2_1457a, align 8
  %v0_1457d = load i64, i64* @rcx, align 8
  %v1_1457d = load i64, i64* %r9.global-to-local, align 8
  %v4_1457d = mul i64 %v1_1457d, %v0_1457d
  store i64 %v4_1457d, i64* @rcx, align 8
  store i64 %v4_1457d, i64* @rsi, align 8
  %v2_14584 = call i64 @function_144e0(i64 %arg1, i64 %v4_1457d)
  ret i64 %v2_14584

dec_label_pc_14590:                               ; preds = %dec_label_pc_14550
  %v1_14590 = icmp eq i64 %v2_14556, 0
  br i1 %v1_14590, label %dec_label_pc_145b8, label %dec_label_pc_14595

dec_label_pc_14595:                               ; preds = %dec_label_pc_14590, %dec_label_pc_145b8
  %v0_14595 = phi i64 [ %v3_145cc, %dec_label_pc_145b8 ], [ %v2_14556, %dec_label_pc_14590 ]
  %v4_14598 = mul i64 %v0_14595, %v0_14553
  store i64 0, i64* @rdx, align 8
  %v2_1459e = icmp slt i64 %v4_14598, 0
  br i1 %v2_1459e, label %dec_label_pc_145ab, label %dec_label_pc_145a6

dec_label_pc_145a6:                               ; preds = %dec_label_pc_14595
  br i1 true, label %dec_label_pc_1457a, label %dec_label_pc_145ab

dec_label_pc_145ab:                               ; preds = %dec_label_pc_1455b, %dec_label_pc_145a6, %dec_label_pc_14595
  %v1_145af = call i64 @function_146d0(i64 %arg1)
  unreachable

dec_label_pc_145b8:                               ; preds = %dec_label_pc_14590
  %v8_145c2 = udiv i64 128, %v0_14553
  %v10_145c2 = urem i64 128, %v0_14553
  store i64 %v10_145c2, i64* @rdx, align 8
  %v1_145c5 = icmp ugt i64 %v0_14553, 128
  %v1_145c8 = zext i1 %v1_145c5 to i64
  store i64 %v1_145c8, i64* @r8, align 8
  %v3_145cc = add nuw nsw i64 %v8_145c2, %v1_145c8
  store i64 %v3_145cc, i64* @rcx, align 8
  br label %dec_label_pc_14595
}

define i64 @function_145e0(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_145e0:
  %rax.global-to-local = alloca i64, align 8
  %tmp6 = ptrtoint i64* %arg2 to i64
  store i64 %tmp6, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_145e0 = icmp eq i64 %arg1, 0
  %v2_145e3 = load i64, i64* @rsi, align 8
  store i64 %v2_145e3, i64* %rax.global-to-local, align 8
  br i1 %v1_145e0, label %dec_label_pc_14610, label %dec_label_pc_145e8

dec_label_pc_145e8:                               ; preds = %dec_label_pc_145e0
  store i64 6148914691236517203, i64* @rdx, align 8
  %tmp10 = icmp ult i64 %v2_145e3, 6148914691236517204
  br i1 %tmp10, label %dec_label_pc_145f7, label %dec_label_pc_14621

dec_label_pc_145f7:                               ; preds = %dec_label_pc_145e8
  %v2_145fa = udiv i64 %v2_145e3, 2
  store i64 %v2_145fa, i64* @rdx, align 8
  %v3_145fd = add i64 %v2_145e3, 1
  %v4_145fd = add i64 %v3_145fd, %v2_145fa
  store i64 %v4_145fd, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_14602

dec_label_pc_14602:                               ; preds = %dec_label_pc_14610, %dec_label_pc_145f7
  %v0_14602 = phi i64 [ %v3_14618, %dec_label_pc_14610 ], [ %v4_145fd, %dec_label_pc_145f7 ]
  %v2_14602 = inttoptr i64 %v2_145e3 to i64*
  store i64 %v0_14602, i64* %v2_14602, align 8
  %v0_14605 = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_14605, i64* @rsi, align 8
  %v2_14608 = call i64 @function_144e0(i64 %arg1, i64 %v0_14605)
  store i64 %v2_14608, i64* %rax.global-to-local, align 8
  ret i64 %v2_14608

dec_label_pc_14610:                               ; preds = %dec_label_pc_145e0
  %v1_14610 = icmp eq i64 %v2_145e3, 0
  store i64 128, i64* @rdx, align 8
  %v3_14618 = select i1 %v1_14610, i64 128, i64 %v2_145e3
  store i64 %v3_14618, i64* %rax.global-to-local, align 8
  %v2_1461c = icmp slt i64 %v3_14618, 0
  %v1_1461f = icmp eq i1 %v2_1461c, false
  br i1 %v1_1461f, label %dec_label_pc_14602, label %dec_label_pc_14621

dec_label_pc_14621:                               ; preds = %dec_label_pc_145e8, %dec_label_pc_14610
  %v1_14625 = call i64 @function_146d0(i64 %arg1)
  unreachable
}

define i64 @function_14630(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14630:
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_14630 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_14630, i64* %stack_var_-8, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v1_14634 = call i64 @function_14480(i64 %arg1)
  %v0_14639 = load i64, i64* @rbx, align 8
  store i64 %v0_14639, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 %v1_14634, i64* @rdi, align 8
  %v2_14641 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_14641, i64* %rbx.global-to-local, align 8
  %v1_14642 = inttoptr i64 %v1_14634 to i64*
  %v6_14642 = trunc i64 %v0_14639 to i32
  %v7_14642 = call i64* @memset(i64* %v1_14642, i32 0, i32 %v6_14642)
  %v9_14642 = ptrtoint i64* %v7_14642 to i64
  ret i64 %v9_14642
}

define i64 @function_14650(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14650:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v4_14657 = mul i64 %arg2, %arg1
  store i64 0, i64* @rdx, align 8
  %v2_1465d = icmp slt i64 %v4_14657, 0
  br i1 %v2_1465d, label %dec_label_pc_14679, label %dec_label_pc_14662

dec_label_pc_14662:                               ; preds = %dec_label_pc_14650
  br i1 false, label %dec_label_pc_14679, label %dec_label_pc_1466a

dec_label_pc_1466a:                               ; preds = %dec_label_pc_14662
  %v1_1466a = trunc i64 %arg1 to i32
  %v3_1466a = trunc i64 %arg2 to i32
  %v4_1466a = call i64* @calloc(i32 %v1_1466a, i32 %v3_1466a)
  %v1_1466f = icmp eq i64* %v4_1466a, null
  br i1 %v1_1466f, label %dec_label_pc_14679, label %dec_label_pc_14674

dec_label_pc_14674:                               ; preds = %dec_label_pc_1466a
  %v5_1466a = ptrtoint i64* %v4_1466a to i64
  ret i64 %v5_1466a

dec_label_pc_14679:                               ; preds = %dec_label_pc_1466a, %dec_label_pc_14662, %dec_label_pc_14650
  %v1_14679 = call i64 @function_146d0(i64 %arg1)
  unreachable
}

define i64 @function_14680(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14680:
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-16 = alloca i64, align 8
  %v0_14681 = load i64, i64* @rbx, align 8
  store i64 %v0_14681, i64* %stack_var_-16, align 8
  %v0_14682 = load i64, i64* @rdi, align 8
  store i64 %v0_14682, i64* %rbp.global-to-local, align 8
  %v0_14685 = load i64, i64* @rsi, align 8
  store i64 %v0_14685, i64* @rdi, align 8
  store i64 %v0_14685, i64* @rbx, align 8
  %v1_1468f = call i64 @function_14480(i64 %v0_14685)
  %v0_14698 = load i64, i64* @rbx, align 8
  store i64 %v0_14698, i64* @rdx, align 8
  %v0_1469b = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_1469b, i64* @rsi, align 8
  %v2_1469e = load i64, i64* %stack_var_-16, align 8
  store i64 %v2_1469e, i64* @rbx, align 8
  store i64 %v1_1468f, i64* @rdi, align 8
  %v1_146a3 = inttoptr i64 %v1_1468f to i64*
  %v3_146a3 = inttoptr i64 %v0_1469b to i64*
  %v5_146a3 = trunc i64 %v0_14698 to i32
  %v6_146a3 = call i64* @memcpy(i64* %v1_146a3, i64* %v3_146a3, i32 %v5_146a3)
  %v8_146a3 = ptrtoint i64* %v6_146a3 to i64
  ret i64 %v8_146a3
}

define i64 @function_146b0(i64 %arg1) local_unnamed_addr {
dec_label_pc_146b0:
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_146b0 = load i64, i64* @rbx, align 8
  store i64 %v0_146b0, i64* %stack_var_-8, align 8
  %v1_146b4 = inttoptr i64 %arg1 to i8*
  %v2_146b4 = call i32 @strlen(i8* %v1_146b4)
  %v4_146b4 = sext i32 %v2_146b4 to i64
  store i64 %arg1, i64* @rdi, align 8
  %v1_146bc = add nsw i64 %v4_146b4, 1
  store i64 %v1_146bc, i64* @rsi, align 8
  %v2_146c0 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_146c0, i64* @rbx, align 8
  %v2_146c1 = call i64 @function_14680(i64 %arg1, i64 %v1_146bc)
  ret i64 %v2_146c1
}

define i64 @function_146d0(i64 %arg1) local_unnamed_addr {
dec_label_pc_146d0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 ptrtoint ([17 x i8]* @global_var_1aeef.489 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_146e2 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_1aeef.489, i64 0, i64 0), i32 5)
  %v11_146e2 = ptrtoint i8* %v9_146e2 to i64
  %v0_146e7 = load i32, i32* @global_var_2201f8.9, align 4
  %v1_146e7 = zext i32 %v0_146e7 to i64
  store i64 %v1_146e7, i64* @rdi, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_1a2fc.247 to i64), i64* @rdx, align 8
  store i64 %v11_146e2, i64* @rcx, align 8
  store i64 0, i64* @rsi, align 8
  call void (i32, i32, i8*, ...) @error(i32 %v0_146e7, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1a2fc.247, i64 0, i64 0), i8* %v9_146e2)
  call void @abort()
  unreachable
}

define i64 @function_14710(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14710:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_14710 = load i64, i64* %r15.global-to-local, align 8
  %v0_14712 = load i64, i64* %r14.global-to-local, align 8
  %v0_14714 = load i64, i64* @rcx, align 8
  store i64 %v0_14714, i64* @r15, align 8
  %v0_14717 = load i64, i64* %r13.global-to-local, align 8
  %v0_14719 = load i64, i64* %r12.global-to-local, align 8
  %v0_1471b = load i64, i64* @rdx, align 8
  store i64 %v0_1471b, i64* @r14, align 8
  %v0_1471e = load i64, i64* @rbp, align 8
  %v0_1471f = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_1471f, i64* %stack_var_-48, align 8
  %v0_14720 = load i64, i64* @rsi, align 8
  store i64 %v0_14720, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  store i64 %arg1, i64* @r12, align 8
  store i64 %arg6, i64* @r13, align 8
  %v16_1472a = ptrtoint i64* %stack_var_-72 to i64
  store i64 %v16_1472a, i64* @rcx, align 8
  %v4_14731 = zext i32 %arg7 to i64
  store i64 %v4_14731, i64* @rbx, align 8
  %v0_14735 = call i64 @__readfsqword(i64 40)
  %v1_14745 = load i64, i64* @rsi, align 8
  %v2_14745 = trunc i64 %v1_14745 to i32
  %v4_14745 = trunc i64 %v0_14720 to i32
  %v5_14745 = load i64, i64* @rcx, align 8
  %v6_14745 = inttoptr i64 %v5_14745 to i64*
  %v7_14745 = load i64, i64* @r8, align 8
  %v8_14745 = inttoptr i64 %v7_14745 to i64*
  %v10_14745 = call i64 @function_14e20(i64 %arg1, i32 %v2_14745, i32 %v4_14745, i64* %v6_14745, i64* %v8_14745, i64 %arg6)
  %v4_1474a = trunc i64 %v10_14745 to i32
  %v5_1474a = icmp eq i32 %v4_1474a, 0
  %v1_1474c = icmp eq i1 %v5_1474a, false
  br i1 %v1_1474c, label %dec_label_pc_147e0, label %dec_label_pc_14752

dec_label_pc_14752:                               ; preds = %dec_label_pc_14710
  %v2_14752 = load i64, i64* %stack_var_-72, align 8
  store i64 %v2_14752, i64* %rbp.global-to-local, align 8
  %v1_14756 = load i64, i64* @r14, align 8
  %v7_14756 = icmp ult i64 %v2_14752, %v1_14756
  br i1 %v7_14756, label %dec_label_pc_14760, label %dec_label_pc_1475b

dec_label_pc_1475b:                               ; preds = %dec_label_pc_14752
  %v1_1475b = load i64, i64* @r15, align 8
  %tmp264 = icmp ugt i64 %v2_14752, %v1_1475b
  br i1 %tmp264, label %dec_label_pc_14760, label %dec_label_pc_147b4

dec_label_pc_14760:                               ; preds = %dec_label_pc_1475b, %dec_label_pc_14752
  %v0_14760 = call i32* @__errno_location()
  %v2_14760 = ptrtoint i32* %v0_14760 to i64
  %v0_14765 = load i64, i64* %rbp.global-to-local, align 8
  %v4_14765 = icmp ult i64 %v0_14765, 1073741824
  store i64 %v2_14760, i64* %r14.global-to-local, align 8
  %v2_14774 = select i1 %v4_14765, i32 34, i32 75
  %v17_14774 = zext i32 %v2_14774 to i64
  store i64 %v17_14774, i64* @rax, align 8
  store i32 %v2_14774, i32* %v0_14760, align 4
  br label %dec_label_pc_1477a

dec_label_pc_1477a:                               ; preds = %dec_label_pc_14800, %dec_label_pc_147f4, %dec_label_pc_147ef, %dec_label_pc_14760
  %v0_1477a = load i64, i64* @r12, align 8
  store i64 %v0_1477a, i64* @rdi, align 8
  %v1_1477d = call i64 @function_13ce0(i64 %v0_1477a)
  %v0_14782 = load i64, i64* %r14.global-to-local, align 8
  %v1_14782 = inttoptr i64 %v0_14782 to i32*
  %v2_14782 = load i32, i32* %v1_14782, align 4
  %v3_14782 = zext i32 %v2_14782 to i64
  store i64 %v1_1477d, i64* @r8, align 8
  store i64 ptrtoint ([7 x i8]* @global_var_17dd8.124 to i64), i64* @rdx, align 8
  %v0_14794 = load i64, i64* @r13, align 8
  store i64 %v0_14794, i64* @rcx, align 8
  %v11_14797 = icmp eq i32 %v2_14782, 22
  %v6_1479a = select i1 %v11_14797, i64 0, i64 %v3_14782
  store i64 %v6_1479a, i64* @rsi, align 8
  %v0_1479d = load i64, i64* @rbx, align 8
  %v4_1479d = trunc i64 %v0_1479d to i32
  %v5_1479d = icmp eq i32 %v4_1479d, 0
  %tmp259 = and i64 %v0_1479d, 4294967295
  %v6_147a4 = select i1 %v5_1479d, i64 1, i64 %tmp259
  store i64 %v6_147a4, i64* %rbx.global-to-local, align 8
  %v1_147a9 = trunc i64 %v6_147a4 to i32
  store i64 %v6_147a4, i64* @rdi, align 8
  %v4_147ab = trunc i64 %v6_1479a to i32
  %v9_147ab = inttoptr i64 %v0_14794 to i8*
  %v11_147ab = inttoptr i64 %v1_1477d to i8*
  call void (i32, i32, i8*, ...) @error(i32 %v1_147a9, i32 %v4_147ab, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_17dd8.124, i64 0, i64 0), i8* %v9_147ab, i8* %v11_147ab)
  %v2_147b0 = load i64, i64* %stack_var_-72, align 8
  store i64 %v2_147b0, i64* %rbp.global-to-local, align 8
  br label %dec_label_pc_147b4

dec_label_pc_147b4:                               ; preds = %dec_label_pc_1475b, %dec_label_pc_1477a
  store i64 %v0_14735, i64* @rdx, align 8
  %v1_147b9 = call i64 @__readfsqword(i64 40)
  %v2_147b9 = xor i64 %v1_147b9, %v0_14735
  %v3_147b9 = icmp eq i64 %v2_147b9, 0
  store i64 %v2_147b9, i64* @rdx, align 8
  %v1_147c5 = icmp eq i1 %v3_147b9, false
  br i1 %v1_147c5, label %dec_label_pc_1480b, label %dec_label_pc_147c7

dec_label_pc_147c7:                               ; preds = %dec_label_pc_147b4
  %v0_147c2 = load i64, i64* %rbp.global-to-local, align 8
  %v2_147cb = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_147cb, i64* %rbx.global-to-local, align 8
  store i64 %v0_1471e, i64* %rbp.global-to-local, align 8
  store i64 %v0_14719, i64* %r12.global-to-local, align 8
  store i64 %v0_14717, i64* %r13.global-to-local, align 8
  store i64 %v0_14712, i64* %r14.global-to-local, align 8
  store i64 %v0_14710, i64* %r15.global-to-local, align 8
  ret i64 %v0_147c2

dec_label_pc_147e0:                               ; preds = %dec_label_pc_14710
  store i64 %v10_14745, i64* %rbp.global-to-local, align 8
  %v0_147e2 = call i32* @__errno_location()
  %v2_147e2 = ptrtoint i32* %v0_147e2 to i64
  store i64 %v2_147e2, i64* @rax, align 8
  %v1_147e7 = trunc i64 %v10_14745 to i32
  %v11_147e7 = icmp eq i32 %v1_147e7, 1
  store i64 %v2_147e2, i64* %r14.global-to-local, align 8
  br i1 %v11_147e7, label %dec_label_pc_14800, label %dec_label_pc_147ef

dec_label_pc_147ef:                               ; preds = %dec_label_pc_147e0
  %v11_147ef = icmp eq i32 %v1_147e7, 3
  %v1_147f2 = icmp eq i1 %v11_147ef, false
  br i1 %v1_147f2, label %dec_label_pc_1477a, label %dec_label_pc_147f4

dec_label_pc_147f4:                               ; preds = %dec_label_pc_147ef
  store i32 0, i32* %v0_147e2, align 4
  br label %dec_label_pc_1477a

dec_label_pc_14800:                               ; preds = %dec_label_pc_147e0
  store i32 75, i32* %v0_147e2, align 4
  br label %dec_label_pc_1477a

dec_label_pc_1480b:                               ; preds = %dec_label_pc_147b4
  call void @__stack_chk_fail()
  %v0_14819 = load i64, i64* @rcx, align 8
  store i64 %v0_14819, i64* @r8, align 8
  %v0_1481c = load i64, i64* @rdx, align 8
  store i64 %v0_1481c, i64* @rcx, align 8
  %v0_1481f = load i64, i64* @rsi, align 8
  store i64 %v0_1481f, i64* @rdx, align 8
  store i64 10, i64* @rsi, align 8
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_14840(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14840:
  %tmp9 = sext i32 %arg2 to i64
  store i64 %tmp9, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_14840 = load i64, i64* @rbx, align 8
  store i64 %v0_14840, i64* %stack_var_-8, align 8
  store i64 0, i64* @rsi, align 8
  store i64 0, i64* @rdi, align 8
  %v6_14845 = call i8* @getcwd(i8* null, i32 0)
  %v7_14845 = ptrtoint i8* %v6_14845 to i64
  %v1_1484a = icmp eq i8* %v6_14845, null
  store i64 %v7_14845, i64* @rbx, align 8
  br i1 %v1_1484a, label %dec_label_pc_14860, label %dec_label_pc_14852

dec_label_pc_14852:                               ; preds = %dec_label_pc_14860.dec_label_pc_14852_crit_edge, %dec_label_pc_14840
  %v0_14852 = phi i64 [ %v0_14852.pre, %dec_label_pc_14860.dec_label_pc_14852_crit_edge ], [ %v7_14845, %dec_label_pc_14840 ]
  %v2_14855 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_14855, i64* @rbx, align 8
  ret i64 %v0_14852

dec_label_pc_14860:                               ; preds = %dec_label_pc_14840
  %v0_14860 = call i32* @__errno_location()
  %v2_14865 = load i32, i32* %v0_14860, align 4
  %v12_14865 = icmp eq i32 %v2_14865, 12
  %v1_14868 = icmp eq i1 %v12_14865, false
  br i1 %v1_14868, label %dec_label_pc_14860.dec_label_pc_14852_crit_edge, label %dec_label_pc_1486a

dec_label_pc_14860.dec_label_pc_14852_crit_edge:  ; preds = %dec_label_pc_14860
  %v0_14852.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_14852

dec_label_pc_1486a:                               ; preds = %dec_label_pc_14860
  %v2_1486a = call i64 @function_146d0(i64 0)
  unreachable
}

define i64 @function_14870() local_unnamed_addr {
dec_label_pc_14870:
  %r14.global-to-local = alloca i64, align 8
  %stack_var_-56 = alloca i64, align 8
  %stack_var_-40 = alloca i64, align 8
  %v0_14870 = load i64, i64* @r14, align 8
  %v0_14872 = load i64, i64* @r13, align 8
  store i64 68723675137, i64* @r13, align 8
  %v0_1487e = load i64, i64* @r12, align 8
  %v0_14880 = load i64, i64* @rbp, align 8
  %v0_14881 = load i64, i64* @rbx, align 8
  store i64 %v0_14881, i64* %stack_var_-40, align 8
  store i64 0, i64* @rbx, align 8
  %v15_14884 = ptrtoint i64* %stack_var_-56 to i64
  %v0_14888 = call i64 @__readfsqword(i64 40)
  store i64 34, i64* %stack_var_-56, align 8
  store i64 %v15_14884, i64* @r12, align 8
  %v0_148a3 = call i32* @__errno_location()
  %v2_148a3 = ptrtoint i32* %v0_148a3 to i64
  store i64 %v2_148a3, i64* @rbp, align 8
  br label %dec_label_pc_148b0

dec_label_pc_148b0:                               ; preds = %dec_label_pc_14930, %dec_label_pc_148e2, %dec_label_pc_14870
  %v0_148b0 = load i64, i64* @rbx, align 8
  store i64 %v0_148b0, i64* @rdi, align 8
  store i64 %v15_14884, i64* @rsi, align 8
  %v3_148b6 = call i64 @function_145e0(i64 %v0_148b0, i64* nonnull %stack_var_-56)
  %v2_148bb = load i64, i64* %stack_var_-56, align 8
  %v1_148bf = inttoptr i64 %v3_148b6 to i8*
  store i64 %v3_148b6, i64* @rdi, align 8
  store i64 %v3_148b6, i64* @rbx, align 8
  %v3_148c5 = add i64 %v3_148b6, -2
  %v4_148c5 = add i64 %v3_148c5, %v2_148bb
  store i64 %v4_148c5, i64* %r14.global-to-local, align 8
  %v1_148ca = add i64 %v2_148bb, -1
  %v16_148ca = trunc i64 %v1_148ca to i32
  store i64 %v1_148ca, i64* @rsi, align 8
  %v1_148ce = inttoptr i64 %v4_148c5 to i8*
  store i8 0, i8* %v1_148ce, align 1
  %v0_148d2 = load i64, i64* @rbp, align 8
  %v1_148d2 = inttoptr i64 %v0_148d2 to i32*
  store i32 0, i32* %v1_148d2, align 4
  %v6_148d9 = call i32 @gethostname(i8* %v1_148bf, i32 %v16_148ca)
  %v5_148de = icmp eq i32 %v6_148d9, 0
  %v1_148e0 = icmp eq i1 %v5_148de, false
  br i1 %v1_148e0, label %dec_label_pc_14910, label %dec_label_pc_148e2

dec_label_pc_148e2:                               ; preds = %dec_label_pc_148b0
  %v0_148e2 = load i64, i64* %r14.global-to-local, align 8
  %v1_148e2 = inttoptr i64 %v0_148e2 to i8*
  %v2_148e2 = load i8, i8* %v1_148e2, align 1
  %v9_148e2 = icmp eq i8 %v2_148e2, 0
  %v1_148e6 = icmp eq i1 %v9_148e2, false
  br i1 %v1_148e6, label %dec_label_pc_148b0, label %dec_label_pc_148e8

dec_label_pc_148e8:                               ; preds = %dec_label_pc_148e2, %dec_label_pc_1491a
  store i64 %v0_14888, i64* @rdx, align 8
  %v1_148ed = call i64 @__readfsqword(i64 40)
  %v2_148ed = xor i64 %v1_148ed, %v0_14888
  %v3_148ed = icmp eq i64 %v2_148ed, 0
  store i64 %v2_148ed, i64* @rdx, align 8
  %v1_148f9 = icmp eq i1 %v3_148ed, false
  br i1 %v1_148f9, label %dec_label_pc_1493c, label %dec_label_pc_148fb

dec_label_pc_148fb:                               ; preds = %dec_label_pc_148e8
  %v0_148f6 = load i64, i64* @rbx, align 8
  %v2_148ff = load i64, i64* %stack_var_-40, align 8
  store i64 %v2_148ff, i64* @rbx, align 8
  store i64 %v0_14880, i64* @rbp, align 8
  store i64 %v0_1487e, i64* @r12, align 8
  store i64 %v0_14872, i64* @r13, align 8
  store i64 %v0_14870, i64* %r14.global-to-local, align 8
  ret i64 %v0_148f6

dec_label_pc_14910:                               ; preds = %dec_label_pc_148b0
  %v0_14910 = load i64, i64* @rbp, align 8
  %v1_14910 = inttoptr i64 %v0_14910 to i32*
  %v2_14910 = load i32, i32* %v1_14910, align 4
  %v3_14910 = zext i32 %v2_14910 to i64
  store i64 %v3_14910, i64* %r14.global-to-local, align 8
  %tmp22 = icmp ult i32 %v2_14910, 37
  br i1 %tmp22, label %dec_label_pc_14930, label %dec_label_pc_1491a

dec_label_pc_1491a:                               ; preds = %dec_label_pc_14930, %dec_label_pc_14910
  %v0_1491a = load i64, i64* @rbx, align 8
  store i64 %v0_1491a, i64* @rdi, align 8
  store i64 0, i64* @rbx, align 8
  %v1_1491f = inttoptr i64 %v0_1491a to i64*
  call void @free(i64* %v1_1491f)
  %v0_14924 = load i64, i64* %r14.global-to-local, align 8
  %v1_14924 = trunc i64 %v0_14924 to i32
  %v2_14924 = load i64, i64* @rbp, align 8
  %v3_14924 = inttoptr i64 %v2_14924 to i32*
  store i32 %v1_14924, i32* %v3_14924, align 4
  br label %dec_label_pc_148e8

dec_label_pc_14930:                               ; preds = %dec_label_pc_14910
  %v0_14930 = load i64, i64* @r13, align 8
  %tmp23 = urem i32 %v2_14910, 64
  %v2_14930 = zext i32 %tmp23 to i64
  %v3_14930 = shl i64 1, %v2_14930
  %v4_14930 = and i64 %v0_14930, %v3_14930
  %v5_14930 = icmp eq i64 %v4_14930, 0
  br i1 %v5_14930, label %dec_label_pc_1491a, label %dec_label_pc_148b0

dec_label_pc_1493c:                               ; preds = %dec_label_pc_148e8
  call void @__stack_chk_fail()
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_14950(i64 %arg1, i32 %arg2, i32 %arg3, i64* %arg4, i32 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_14950:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg6, i64* @r9, align 8
  %tmp74 = sext i32 %arg5 to i64
  store i64 %tmp74, i64* @r8, align 8
  %tmp75 = ptrtoint i64* %arg4 to i64
  store i64 %tmp75, i64* @rcx, align 8
  %tmp76 = sext i32 %arg3 to i64
  store i64 %tmp76, i64* @rdx, align 8
  %tmp77 = sext i32 %arg2 to i64
  store i64 %tmp77, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_14954 = load i64, i64* @r13, align 8
  %v0_14956 = load i64, i64* @r12, align 8
  %v0_14958 = load i64, i64* @rbp, align 8
  %v0_14959 = load i64, i64* @rbx, align 8
  store i64 %v0_14959, i64* %stack_var_-48, align 8
  %v0_1495e = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_1496e = load i64, i64* @rdx, align 8
  %v1_1496e = trunc i64 %v0_1496e to i32
  %tmp108 = icmp ult i32 %v1_1496e, 37
  br i1 %tmp108, label %dec_label_pc_14977, label %dec_label_pc_14cd5

dec_label_pc_14977:                               ; preds = %dec_label_pc_14950
  %v2_14977 = ptrtoint i64* %stack_var_-72 to i64
  store i64 %v2_14977, i64* %rax.global-to-local, align 8
  %v2_1497f = icmp eq i32 %arg2, 0
  %v0_14982 = load i64, i64* @rdi, align 8
  store i64 %v0_14982, i64* %rbp.global-to-local, align 8
  %v0_14989 = load i64, i64* @rcx, align 8
  store i64 %v0_14989, i64* @r14, align 8
  %v0_1498c = load i64, i64* @r8, align 8
  %v1_1498c = trunc i64 %v0_1498c to i32
  store i64 %v0_1498c, i64* @r13, align 8
  %v3_1498f = select i1 %v2_1497f, i64 %v2_14977, i64 %tmp77
  store i64 %v3_1498f, i64* @r15, align 8
  %v0_14993 = call i32* @__errno_location()
  %v2_14993 = ptrtoint i32* %v0_14993 to i64
  store i64 %v2_14993, i64* %rax.global-to-local, align 8
  store i32 0, i32* %v0_14993, align 4
  %v0_1499e = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_1499e, i64* %r12.global-to-local, align 8
  %v2_149a1 = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v3_149a1 = zext i8 %v2_149a1 to i64
  store i64 %v3_149a1, i64* %rbx.global-to-local, align 8
  %v0_149a5 = call i16** @__ctype_b_loc()
  %v2_149a5 = ptrtoint i16** %v0_149a5 to i64
  store i64 %v2_149a5, i64* %rax.global-to-local, align 8
  %v4_149aa = and i64 %v0_1496e, 4294967295
  store i64 %v4_149aa, i64* @rdx, align 8
  %v1_149ae = bitcast i16** %v0_149a5 to i64*
  %v2_149ae = load i64, i64* %v1_149ae, align 8
  store i64 %v2_149ae, i64* @rsi, align 8
  %v0_149b1 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_149b1, i64* %rax.global-to-local, align 8
  %v0_149c711 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_149c711, i64* @rcx, align 8
  %v2_149ca13 = mul i64 %v0_149c711, 2
  %v3_149ca14 = or i64 %v2_149ca13, 1
  %v4_149ca15 = add i64 %v3_149ca14, %v2_149ae
  %v5_149ca16 = inttoptr i64 %v4_149ca15 to i8*
  %v6_149ca17 = load i8, i8* %v5_149ca16, align 1
  %v7_149ca18 = and i8 %v6_149ca17, 32
  %v8_149ca19 = icmp eq i8 %v7_149ca18, 0
  %v1_149cf20 = icmp eq i1 %v8_149ca19, false
  br i1 %v1_149cf20, label %dec_label_pc_149c0, label %dec_label_pc_149d1

dec_label_pc_149c0:                               ; preds = %dec_label_pc_14977, %dec_label_pc_149c0
  %v0_149c0 = phi i64 [ %v1_149c0, %dec_label_pc_149c0 ], [ %v0_149b1, %dec_label_pc_14977 ]
  %v1_149c0 = add i64 %v0_149c0, 1
  store i64 %v1_149c0, i64* %rax.global-to-local, align 8
  %v1_149c4 = inttoptr i64 %v1_149c0 to i8*
  %v2_149c4 = load i8, i8* %v1_149c4, align 1
  %v3_149c4 = zext i8 %v2_149c4 to i64
  store i64 %v3_149c4, i64* %rbx.global-to-local, align 8
  store i64 %v3_149c4, i64* @rcx, align 8
  %v2_149ca = mul nuw nsw i64 %v3_149c4, 2
  %v3_149ca = or i64 %v2_149ca, 1
  %v4_149ca = add i64 %v3_149ca, %v2_149ae
  %v5_149ca = inttoptr i64 %v4_149ca to i8*
  %v6_149ca = load i8, i8* %v5_149ca, align 1
  %v7_149ca = and i8 %v6_149ca, 32
  %v8_149ca = icmp eq i8 %v7_149ca, 0
  %v1_149cf = icmp eq i1 %v8_149ca, false
  br i1 %v1_149cf, label %dec_label_pc_149c0, label %dec_label_pc_149d1

dec_label_pc_149d1:                               ; preds = %dec_label_pc_149c0, %dec_label_pc_14977
  %v0_149d1 = phi i64 [ %v0_149c711, %dec_label_pc_14977 ], [ %v3_149c4, %dec_label_pc_149c0 ]
  %v1_149d1 = trunc i64 %v0_149d1 to i8
  %v11_149d1 = icmp eq i8 %v1_149d1, 45
  br i1 %v11_149d1, label %dec_label_pc_14a28, label %dec_label_pc_149d6

dec_label_pc_149d6:                               ; preds = %dec_label_pc_149d1
  %v0_149d6 = load i64, i64* @r15, align 8
  %v1_149d6 = inttoptr i64 %v0_149d6 to i8**
  store i64 %v0_149d6, i64* @rsi, align 8
  store i64 %v0_149b1, i64* @rdi, align 8
  %v1_149dc = inttoptr i64 %v0_149b1 to i8*
  %v8_149dc = call i32 @strtoul(i8* %v1_149dc, i8** %v1_149d6, i32 %v1_1496e)
  %v10_149dc = sext i32 %v8_149dc to i64
  store i64 %v10_149dc, i64* %rax.global-to-local, align 8
  %v0_149e1 = load i64, i64* @r15, align 8
  %v1_149e1 = inttoptr i64 %v0_149e1 to i64*
  %v2_149e1 = load i64, i64* %v1_149e1, align 8
  store i64 %v2_149e1, i64* @rcx, align 8
  store i64 %v10_149dc, i64* @rbx, align 8
  %v1_149e7 = load i64, i64* %rbp.global-to-local, align 8
  %v12_149e7 = icmp eq i64 %v2_149e1, %v1_149e7
  br i1 %v12_149e7, label %dec_label_pc_14a18, label %dec_label_pc_149ec

dec_label_pc_149ec:                               ; preds = %dec_label_pc_149d6
  %v0_149ec = load i64, i64* %r12.global-to-local, align 8
  %v1_149ec = inttoptr i64 %v0_149ec to i32*
  %v2_149ec = load i32, i32* %v1_149ec, align 4
  %v3_149ec = zext i32 %v2_149ec to i64
  store i64 %v3_149ec, i64* %rax.global-to-local, align 8
  %v5_149f0 = icmp eq i32 %v2_149ec, 0
  br i1 %v5_149f0, label %dec_label_pc_14a58, label %dec_label_pc_149f4

dec_label_pc_149f4:                               ; preds = %dec_label_pc_149ec
  %v11_149f4 = icmp eq i32 %v2_149ec, 34
  store i64 1, i64* @rbp, align 8
  %v1_149fc = icmp eq i1 %v11_149f4, false
  br i1 %v1_149fc, label %dec_label_pc_14a28, label %dec_label_pc_149fe

dec_label_pc_149fe:                               ; preds = %dec_label_pc_14a58, %dec_label_pc_149f4
  %v2_149fe = icmp eq i32 %v1_1498c, 0
  br i1 %v2_149fe, label %dec_label_pc_14a0c, label %dec_label_pc_14a03

dec_label_pc_14a03:                               ; preds = %dec_label_pc_149fe
  %v1_14a03 = inttoptr i64 %v2_149e1 to i8*
  %v2_14a03 = load i8, i8* %v1_14a03, align 1
  %v3_14a03 = zext i8 %v2_14a03 to i64
  store i64 %v3_14a03, i64* %r12.global-to-local, align 8
  %v5_14a07 = icmp eq i8 %v2_14a03, 0
  %v1_14a0a = icmp eq i1 %v5_14a07, false
  br i1 %v1_14a0a, label %dec_label_pc_14a03.dec_label_pc_14a87_crit_edge, label %dec_label_pc_14a0c

dec_label_pc_14a03.dec_label_pc_14a87_crit_edge:  ; preds = %dec_label_pc_14a03
  %.pre = mul i64 %v0_1498c, 4294967296
  %.pre39 = sdiv i64 %.pre, 4294967296
  %.pre40 = inttoptr i64 %.pre39 to i8*
  br label %dec_label_pc_14a87

dec_label_pc_14a0c:                               ; preds = %dec_label_pc_14a03, %dec_label_pc_149fe
  %v1_14a0c = load i64, i64* @r14, align 8
  %v2_14a0c = inttoptr i64 %v1_14a0c to i64*
  store i64 %v10_149dc, i64* %v2_14a0c, align 8
  br label %dec_label_pc_14a2d

dec_label_pc_14a18:                               ; preds = %dec_label_pc_149d6
  %v2_14a18 = icmp eq i32 %v1_1498c, 0
  %v1_14a20 = icmp eq i1 %v2_14a18, false
  br i1 %v1_14a20, label %dec_label_pc_14a60, label %dec_label_pc_14a28

dec_label_pc_14a28:                               ; preds = %dec_label_pc_14a18, %dec_label_pc_14a6a, %dec_label_pc_14a60, %dec_label_pc_149f4, %dec_label_pc_149d1
  store i64 4, i64* @rbp, align 8
  br label %dec_label_pc_14a2d

dec_label_pc_14a2d:                               ; preds = %dec_label_pc_14c71, %dec_label_pc_14b6c, %dec_label_pc_14a28, %dec_label_pc_14a0c
  store i64 %v0_1495e, i64* @rdi, align 8
  %v1_14a32 = call i64 @__readfsqword(i64 40)
  %v2_14a32 = xor i64 %v1_14a32, %v0_1495e
  %v3_14a32 = icmp eq i64 %v2_14a32, 0
  store i64 %v2_14a32, i64* @rdi, align 8
  %v0_14a3b = load i64, i64* @rbp, align 8
  store i64 %v0_14a3b, i64* %rax.global-to-local, align 8
  %v1_14a3d = icmp eq i1 %v3_14a32, false
  br i1 %v1_14a3d, label %dec_label_pc_14cd0, label %dec_label_pc_14a43

dec_label_pc_14a43:                               ; preds = %dec_label_pc_14a2d
  %v2_14a47 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_14a47, i64* @rbx, align 8
  store i64 %v0_14958, i64* @rbp, align 8
  store i64 %v0_14956, i64* @r12, align 8
  store i64 %v0_14954, i64* @r13, align 8
  ret i64 %v0_14a3b

dec_label_pc_14a58:                               ; preds = %dec_label_pc_149ec
  store i64 0, i64* @rbp, align 8
  br label %dec_label_pc_149fe

dec_label_pc_14a60:                               ; preds = %dec_label_pc_14a18
  %v2_14a60 = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v3_14a60 = zext i8 %v2_14a60 to i64
  store i64 %v3_14a60, i64* %r12.global-to-local, align 8
  %v5_14a65 = icmp eq i8 %v2_14a60, 0
  br i1 %v5_14a65, label %dec_label_pc_14a28, label %dec_label_pc_14a6a

dec_label_pc_14a6a:                               ; preds = %dec_label_pc_14a60
  %v1_14a6a = zext i8 %v2_14a60 to i32
  store i64 %v3_14a60, i64* @rsi, align 8
  %sext8 = mul i64 %v0_1498c, 4294967296
  %v1_14a6e = sdiv i64 %sext8, 4294967296
  store i64 %v1_14a6e, i64* @rdi, align 8
  store i64 0, i64* @rbp, align 8
  %v2_14a73 = inttoptr i64 %v1_14a6e to i8*
  %v6_14a73 = call i8* @strchr(i8* %v2_14a73, i32 %v1_14a6a)
  %v8_14a73 = ptrtoint i8* %v6_14a73 to i64
  store i64 %v8_14a73, i64* %rax.global-to-local, align 8
  %v1_14a78 = icmp eq i8* %v6_14a73, null
  store i64 1, i64* @rbx, align 8
  %sext10 = mul i64 %v2_149e1, 4294967296
  %v4_14a80 = sdiv i64 %sext10, 4294967296
  store i64 %v4_14a80, i64* @rcx, align 8
  br i1 %v1_14a78, label %dec_label_pc_14a28, label %dec_label_pc_14a6a.dec_label_pc_14a87_crit_edge

dec_label_pc_14a6a.dec_label_pc_14a87_crit_edge:  ; preds = %dec_label_pc_14a6a
  %v0_14a87.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_14a87

dec_label_pc_14a87:                               ; preds = %dec_label_pc_14a03.dec_label_pc_14a87_crit_edge, %dec_label_pc_14a6a.dec_label_pc_14a87_crit_edge
  %v2_14a93.pre-phi = phi i8* [ %.pre40, %dec_label_pc_14a03.dec_label_pc_14a87_crit_edge ], [ %v2_14a73, %dec_label_pc_14a6a.dec_label_pc_14a87_crit_edge ]
  %v1_14a8b.pre-phi = phi i64 [ %.pre39, %dec_label_pc_14a03.dec_label_pc_14a87_crit_edge ], [ %v1_14a6e, %dec_label_pc_14a6a.dec_label_pc_14a87_crit_edge ]
  %v0_14a8e = phi i64 [ %v2_149e1, %dec_label_pc_14a03.dec_label_pc_14a87_crit_edge ], [ %v4_14a80, %dec_label_pc_14a6a.dec_label_pc_14a87_crit_edge ]
  %v0_14a87 = phi i64 [ %v3_14a03, %dec_label_pc_14a03.dec_label_pc_14a87_crit_edge ], [ %v0_14a87.pre, %dec_label_pc_14a6a.dec_label_pc_14a87_crit_edge ]
  %v1_14a87 = trunc i64 %v0_14a87 to i32
  store i64 %v0_14a87, i64* @rsi, align 8
  store i64 %v1_14a8b.pre-phi, i64* @rdi, align 8
  %v6_14a93 = call i8* @strchr(i8* %v2_14a93.pre-phi, i32 %v1_14a87)
  %v8_14a93 = ptrtoint i8* %v6_14a93 to i64
  store i64 %v8_14a93, i64* %rax.global-to-local, align 8
  %v1_14a98 = icmp eq i8* %v6_14a93, null
  %sext5 = mul i64 %v0_14a8e, 4294967296
  %v4_14a9b = sdiv i64 %sext5, 4294967296
  store i64 %v4_14a9b, i64* @rcx, align 8
  br i1 %v1_14a98, label %dec_label_pc_14b6c, label %dec_label_pc_14aa6

dec_label_pc_14aa6:                               ; preds = %dec_label_pc_14a87
  %v0_14aa6 = load i64, i64* %r12.global-to-local, align 8
  %v1_14aa6 = add i64 %v0_14aa6, -69
  store i64 %v1_14aa6, i64* %rax.global-to-local, align 8
  %v1_14aab = trunc i64 %v1_14aa6 to i8
  %tmp109 = icmp ult i8 %v1_14aab, 48
  br i1 %tmp109, label %dec_label_pc_14aaf, label %dec_label_pc_14b00

dec_label_pc_14aaf:                               ; preds = %dec_label_pc_14aa6
  store i64 142129060940101, i64* @rdx, align 8
  %v2_14ab9 = urem i64 %v1_14aa6, 64
  %v3_14ab9 = shl i64 1, %v2_14ab9
  %v4_14ab9 = and i64 %v3_14ab9, 142129060940101
  %v5_14ab9 = icmp ne i64 %v4_14ab9, 0
  %v1_14abd = icmp eq i1 %v5_14ab9, false
  br i1 %v1_14abd, label %dec_label_pc_14b00, label %dec_label_pc_14abf

dec_label_pc_14abf:                               ; preds = %dec_label_pc_14aaf
  store i64 48, i64* @rsi, align 8
  store i64 %v1_14a8b.pre-phi, i64* @rdi, align 8
  %v6_14acc = call i8* @strchr(i8* %v2_14a93.pre-phi, i32 48)
  %v8_14acc = ptrtoint i8* %v6_14acc to i64
  store i64 %v8_14acc, i64* %rax.global-to-local, align 8
  %v1_14ad1 = icmp eq i8* %v6_14acc, null
  store i64 %v4_14a9b, i64* @rcx, align 8
  br i1 %v1_14ad1, label %dec_label_pc_14b00, label %dec_label_pc_14adb

dec_label_pc_14adb:                               ; preds = %dec_label_pc_14abf
  %v1_14adb = add nsw i64 %v4_14a9b, 1
  %v2_14adb = inttoptr i64 %v1_14adb to i8*
  %v3_14adb = load i8, i8* %v2_14adb, align 1
  %v4_14adb = zext i8 %v3_14adb to i64
  store i64 %v4_14adb, i64* %rax.global-to-local, align 8
  %v11_14adf = icmp eq i8 %v3_14adb, 68
  br i1 %v11_14adf, label %dec_label_pc_14aef, label %dec_label_pc_14ae3

dec_label_pc_14ae3:                               ; preds = %dec_label_pc_14adb
  %v11_14ae3 = icmp eq i8 %v3_14adb, 105
  br i1 %v11_14ae3, label %dec_label_pc_14cb8, label %dec_label_pc_14aeb

dec_label_pc_14aeb:                               ; preds = %dec_label_pc_14ae3
  %v11_14aeb = icmp eq i8 %v3_14adb, 66
  %v1_14aed = icmp eq i1 %v11_14aeb, false
  br i1 %v1_14aed, label %dec_label_pc_14b00, label %dec_label_pc_14aef

dec_label_pc_14aef:                               ; preds = %dec_label_pc_14aeb, %dec_label_pc_14adb
  store i64 2, i64* @rdi, align 8
  store i64 ptrtoint (i128* @global_var_3e8.397 to i64), i64* @rsi, align 8
  br label %dec_label_pc_14b0a

dec_label_pc_14b00:                               ; preds = %dec_label_pc_14aa6, %dec_label_pc_14aeb, %dec_label_pc_14abf, %dec_label_pc_14aaf
  store i64 1, i64* @rdi, align 8
  store i64 ptrtoint (i32* @global_var_400.157 to i64), i64* @rsi, align 8
  br label %dec_label_pc_14b0a

dec_label_pc_14b0a:                               ; preds = %dec_label_pc_14cb8, %dec_label_pc_14b00, %dec_label_pc_14aef
  %v0_14b0a = load i64, i64* %r12.global-to-local, align 8
  %v1_14b0a = trunc i64 %v0_14b0a to i32
  %v2_14b0a = add i32 %v1_14b0a, -66
  %v13_14b0a = trunc i32 %v2_14b0a to i8
  %v17_14b0a = zext i32 %v2_14b0a to i64
  store i64 %v17_14b0a, i64* @r12, align 8
  %tmp110 = icmp ult i8 %v13_14b0a, 54
  br i1 %tmp110, label %dec_label_pc_14b14, label %dec_label_pc_14b6c

dec_label_pc_14b14:                               ; preds = %dec_label_pc_14b0a
  store i64 ptrtoint (i64* @global_var_1af38.490 to i64), i64* @rdx, align 8
  %v2_14b1f = mul nuw nsw i64 %v17_14b0a, 4
  %v3_14b1f = add i64 %v2_14b1f, ptrtoint (i64* @global_var_1af38.490 to i64)
  %v4_14b1f = inttoptr i64 %v3_14b1f to i32*
  %v5_14b1f = load i32, i32* %v4_14b1f, align 4
  %v6_14b1f = sext i32 %v5_14b1f to i64
  %v2_14b23 = add i64 %v6_14b1f, ptrtoint (i64* @global_var_1af38.490 to i64)
  store i64 %v2_14b23, i64* %rax.global-to-local, align 8
  ret i64 %v2_14b23

dec_label_pc_14b6c:                               ; preds = %dec_label_pc_14b0a, %dec_label_pc_14a87
  %v0_14b6c = load i64, i64* @rbx, align 8
  %v1_14b6c = load i64, i64* @r14, align 8
  %v2_14b6c = inttoptr i64 %v1_14b6c to i64*
  store i64 %v0_14b6c, i64* %v2_14b6c, align 8
  %v0_14b6f = load i64, i64* @rbp, align 8
  %v2_14b6f = and i64 %v0_14b6f, 4294967293
  %v9_14b6f = or i64 %v2_14b6f, 2
  store i64 %v9_14b6f, i64* @rbp, align 8
  br label %dec_label_pc_14a2d

dec_label_pc_14c5c:                               ; preds = %dec_label_pc_14c6b
  %v5_14c5f = mul i64 %v6_14c5f27, ptrtoint ([14 x i8]* @global_var_1af00.493 to i64)
  store i64 %v5_14c5f, i64* %rax.global-to-local, align 8
  br i1 undef, label %dec_label_pc_14c6b, label %dec_label_pc_14cf4.loopexit

dec_label_pc_14c6b:                               ; preds = %dec_label_pc_14c5c, %dec_label_pc_14cf4
  %v6_14c5f27 = phi i64 [ %v5_14c5f, %dec_label_pc_14c5c ], [ -1, %dec_label_pc_14cf4 ]
  %v17_14c6b21 = phi i64 [ %v17_14c6b, %dec_label_pc_14c5c ], [ %r8.promoted, %dec_label_pc_14cf4 ]
  %v1_14c6b = trunc i64 %v17_14c6b21 to i32
  %v2_14c6b = add i32 %v1_14c6b, -1
  %v11_14c6b = icmp eq i32 %v2_14c6b, 0
  %v17_14c6b = zext i32 %v2_14c6b to i64
  %v1_14c6f = icmp eq i1 %v11_14c6b, false
  br i1 %v1_14c6f, label %dec_label_pc_14c5c, label %dec_label_pc_14c71

dec_label_pc_14c71:                               ; preds = %dec_label_pc_14c6b
  store i64 %v6_14c5f27, i64* %rbx.global-to-local, align 8
  store i64 1, i64* @r9, align 8
  store i64 %v17_14c6b, i64* @r8, align 8
  %v0_14bc5 = load i64, i64* @rbp, align 8
  %v4_14bc52 = or i64 %v0_14bc5, 1
  %v11_14bc5 = and i64 %v4_14bc52, 4294967295
  store i64 %v11_14bc5, i64* %rbp.global-to-local, align 8
  store i64 ptrtoint ([38 x i8]* @global_var_1af10.491 to i64), i64* @rdi, align 8
  store i64 add (i64 ptrtoint ([9 x i8]* @global_var_1b010.492 to i64), i64 ptrtoint ([38 x i8]* @global_var_1af10.491 to i64)), i64* @rcx, align 8
  %v2_14b58 = and i64 %v4_14bc52, 4294967293
  %v9_14b58 = or i64 %v2_14b58, 2
  store i64 %v9_14b58, i64* %rax.global-to-local, align 8
  %v1_14b5b = load i64, i64* @r15, align 8
  %v2_14b5b = inttoptr i64 %v1_14b5b to i64*
  store i64 add (i64 ptrtoint ([9 x i8]* @global_var_1b010.492 to i64), i64 ptrtoint ([38 x i8]* @global_var_1af10.491 to i64)), i64* %v2_14b5b, align 8
  %v0_14b5e = load i64, i64* @rcx, align 8
  %v1_14b5e = inttoptr i64 %v0_14b5e to i8*
  %v2_14b5e = load i8, i8* %v1_14b5e, align 1
  %v9_14b5e = icmp eq i8 %v2_14b5e, 0
  %v0_14b61 = load i64, i64* %rbx.global-to-local, align 8
  %v1_14b61 = load i64, i64* @r14, align 8
  %v2_14b61 = inttoptr i64 %v1_14b61 to i64*
  store i64 %v0_14b61, i64* %v2_14b61, align 8
  %v1_14b64 = icmp eq i1 %v9_14b5e, false
  %v2_14b64 = load i64, i64* %rbp.global-to-local, align 8
  %v4_14b64 = load i64, i64* %rax.global-to-local, align 8
  %v6_14b64.v = select i1 %v1_14b64, i64 %v4_14b64, i64 %v2_14b64
  %v7_14b64 = and i64 %v6_14b64.v, 4294967295
  store i64 %v7_14b64, i64* @rbp, align 8
  br label %dec_label_pc_14a2d

dec_label_pc_14cb8:                               ; preds = %dec_label_pc_14ae3
  store i64 0, i64* @rdi, align 8
  %v1_14cba = add nsw i64 %v4_14a9b, 2
  %v2_14cba = inttoptr i64 %v1_14cba to i8*
  %v3_14cba = load i8, i8* %v2_14cba, align 1
  %v13_14cba = icmp eq i8 %v3_14cba, 66
  store i64 ptrtoint (i32* @global_var_400.157 to i64), i64* @rsi, align 8
  %v4_14cc7 = select i1 %v13_14cba, i64 3, i64 1
  store i64 %v4_14cc7, i64* @rdi, align 8
  br label %dec_label_pc_14b0a

dec_label_pc_14cd0:                               ; preds = %dec_label_pc_14a2d
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_14cd5

dec_label_pc_14cd5:                               ; preds = %dec_label_pc_14950, %dec_label_pc_14cd0
  store i64 ptrtoint ([9 x i8]* @global_var_1b010.492 to i64), i64* @rcx, align 8
  store i64 ptrtoint ([14 x i8]* @global_var_1af00.493 to i64), i64* @rsi, align 8
  store i64 ptrtoint ([38 x i8]* @global_var_1af10.491 to i64), i64* @rdi, align 8
  store i64 96, i64* @rdx, align 8
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @global_var_1af10.491, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_1af00.493, i64 0, i64 0), i32 96, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_1b010.492, i64 0, i64 0))
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %r8.promoted.pre = load i64, i64* @r8, align 8
  br label %dec_label_pc_14cf4

dec_label_pc_14cf4.loopexit:                      ; preds = %dec_label_pc_14c5c
  store i64 %v17_14c6b, i64* @r8, align 8
  br label %dec_label_pc_14cf4

dec_label_pc_14cf4:                               ; preds = %dec_label_pc_14cf4.loopexit, %dec_label_pc_14cd5
  %r8.promoted = phi i64 [ %v17_14c6b, %dec_label_pc_14cf4.loopexit ], [ %r8.promoted.pre, %dec_label_pc_14cd5 ]
  br label %dec_label_pc_14c6b
}

define i64 @function_14d70(i64 %arg1, i64 %arg2, i32 %arg3, [4 x i8]** %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_14d70:
  %r10.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg5, i64* @r8, align 8
  %tmp17 = ptrtoint [4 x i8]** %arg4 to i64
  store i64 %tmp17, i64* @rcx, align 8
  %tmp18 = sext i32 %arg3 to i64
  store i64 %tmp18, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-50 = alloca i32, align 4
  %v0_14d74 = load i64, i64* @rsi, align 8
  store i64 %v0_14d74, i64* %r10.global-to-local, align 8
  %v0_14d80 = call i64 @__readfsqword(i64 40)
  %v0_14d90 = load i64, i64* @rdi, align 8
  %v1_14d90 = trunc i64 %v0_14d90 to i32
  %v0_14d93 = load i32, i32* @global_var_2201f8.9, align 4
  %v1_14d93 = zext i32 %v0_14d93 to i64
  store i64 %v1_14d93, i64* %rbp.global-to-local, align 8
  %tmp35 = icmp ult i32 %v1_14d90, 4
  br i1 %tmp35, label %dec_label_pc_14d9b, label %dec_label_pc_14df4

dec_label_pc_14d9b:                               ; preds = %dec_label_pc_14d70
  %v6_14d9b = icmp ult i32 %v1_14d90, 2
  %v1_14d9e = icmp eq i1 %v6_14d9b, false
  br i1 %v1_14d9e, label %dec_label_pc_14deb, label %dec_label_pc_14da0

dec_label_pc_14da0:                               ; preds = %dec_label_pc_14d9b
  %v2_14da0 = add i32 %v1_14d90, -1
  %v11_14da0 = icmp eq i32 %v2_14da0, 0
  %v17_14da0 = zext i32 %v2_14da0 to i64
  store i64 %v17_14da0, i64* @rdi, align 8
  store i64 ptrtoint ([29 x i8]* @global_var_1b034.494 to i64), i64* @rsi, align 8
  %v1_14daa = icmp eq i1 %v11_14da0, false
  br i1 %v1_14daa, label %dec_label_pc_14de6, label %dec_label_pc_14dac

dec_label_pc_14dac:                               ; preds = %dec_label_pc_14df4, %dec_label_pc_14deb, %dec_label_pc_14da0
  %v3_14dca = phi i64 [ ptrtoint ([27 x i8]* @global_var_1b019.497 to i64), %dec_label_pc_14df4 ], [ ptrtoint ([37 x i8]* @global_var_1b058.496 to i64), %dec_label_pc_14deb ], [ ptrtoint ([29 x i8]* @global_var_1b034.494 to i64), %dec_label_pc_14da0 ]
  %v0_14dac = load i64, i64* %r10.global-to-local, align 8
  %v4_14dac = trunc i64 %v0_14dac to i32
  %v6_14dac = icmp slt i32 %v4_14dac, 0
  br i1 %v6_14dac, label %dec_label_pc_14e02, label %dec_label_pc_14db4

dec_label_pc_14db4:                               ; preds = %dec_label_pc_14dac
  %v2_14db4 = mul i64 %v0_14dac, 32
  store i64 ptrtoint ([3 x i8]* @global_var_1b051.495 to i64), i64* %rbx.global-to-local, align 8
  %v0_14dbf = load i64, i64* @rcx, align 8
  %v3_14dbf = add i64 %v0_14dbf, %v2_14db4
  %v4_14dbf = inttoptr i64 %v3_14dbf to i64*
  %v5_14dbf = load i64, i64* %v4_14dbf, align 8
  store i64 %v5_14dbf, i64* %r13.global-to-local, align 8
  br label %dec_label_pc_14dc3

dec_label_pc_14dc3:                               ; preds = %dec_label_pc_14e02, %dec_label_pc_14db4
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v4_14dca = inttoptr i64 %v3_14dca to i8*
  %v8_14dca = call i8* @dcgettext(i8* null, i8* %v4_14dca, i32 5)
  %v10_14dca = ptrtoint i8* %v8_14dca to i64
  store i64 %v10_14dca, i64* @rdx, align 8
  %v0_14dd5 = load i64, i64* %r13.global-to-local, align 8
  store i64 %v0_14dd5, i64* @r8, align 8
  %v0_14dd8 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_14dd8, i64* @rcx, align 8
  store i64 0, i64* @rsi, align 8
  %v0_14ddd = load i64, i64* %rbp.global-to-local, align 8
  %v1_14ddd = trunc i64 %v0_14ddd to i32
  store i64 %v0_14ddd, i64* @rdi, align 8
  call void (i32, i32, i8*, ...) @error(i32 %v1_14ddd, i32 0, i8* %v8_14dca)
  br label %dec_label_pc_14de6

dec_label_pc_14de6:                               ; preds = %dec_label_pc_14df4, %dec_label_pc_14dc3, %dec_label_pc_14da0
  call void @abort()
  unreachable

dec_label_pc_14deb:                               ; preds = %dec_label_pc_14d9b
  store i64 ptrtoint ([37 x i8]* @global_var_1b058.496 to i64), i64* @rsi, align 8
  br label %dec_label_pc_14dac

dec_label_pc_14df4:                               ; preds = %dec_label_pc_14d70
  %v11_14df4 = icmp eq i32 %v1_14d90, 4
  store i64 ptrtoint ([27 x i8]* @global_var_1b019.497 to i64), i64* @rsi, align 8
  br i1 %v11_14df4, label %dec_label_pc_14dac, label %dec_label_pc_14de6

dec_label_pc_14e02:                               ; preds = %dec_label_pc_14dac
  %v0_14e09 = load i64, i64* @rdx, align 8
  %tmp34 = trunc i64 %v0_14e09 to i32
  store i32 %tmp34, i32* %stack_var_-50, align 4
  %v2_14e12 = ptrtoint i32* %stack_var_-50 to i64
  store i64 %v2_14e12, i64* %r13.global-to-local, align 8
  %v2_14e17 = sub i64 ptrtoint ([3 x i8]* @global_var_1b051.495 to i64), %v0_14dac
  store i64 %v2_14e17, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_14dc3
}

define i64 @function_14e20(i64 %arg1, i32 %arg2, i32 %arg3, i64* %arg4, i64* %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_14e20:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg6, i64* @r9, align 8
  %tmp67 = ptrtoint i64* %arg5 to i64
  store i64 %tmp67, i64* @r8, align 8
  %tmp68 = ptrtoint i64* %arg4 to i64
  store i64 %tmp68, i64* @rcx, align 8
  %tmp69 = sext i32 %arg3 to i64
  store i64 %tmp69, i64* @rdx, align 8
  %tmp70 = sext i32 %arg2 to i64
  store i64 %tmp70, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_14e20 = load i64, i64* @r15, align 8
  %v0_14e22 = load i64, i64* @r14, align 8
  %v0_14e24 = load i64, i64* @r13, align 8
  %v0_14e26 = load i64, i64* @r12, align 8
  %v0_14e28 = load i64, i64* @rbp, align 8
  %v0_14e29 = load i64, i64* @rbx, align 8
  store i64 %v0_14e29, i64* %stack_var_-48, align 8
  %v0_14e2e = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_14e3e = load i64, i64* @rdx, align 8
  %v1_14e3e = trunc i64 %v0_14e3e to i32
  %tmp99 = icmp ult i32 %v1_14e3e, 37
  br i1 %tmp99, label %dec_label_pc_14e47, label %dec_label_pc_151a5

dec_label_pc_14e47:                               ; preds = %dec_label_pc_14e20
  %v2_14e47 = ptrtoint i64* %stack_var_-72 to i64
  store i64 %v2_14e47, i64* %rax.global-to-local, align 8
  %v2_14e4f = icmp eq i32 %arg2, 0
  %v0_14e52 = load i64, i64* @rdi, align 8
  store i64 %v0_14e52, i64* %rbp.global-to-local, align 8
  %v0_14e59 = load i64, i64* @rcx, align 8
  store i64 %v0_14e59, i64* @r14, align 8
  %v0_14e5c = load i64, i64* @r8, align 8
  store i64 %v0_14e5c, i64* @r13, align 8
  %v3_14e5f = select i1 %v2_14e4f, i64 %v2_14e47, i64 %tmp70
  store i64 %v3_14e5f, i64* @r15, align 8
  %v0_14e63 = call i32* @__errno_location()
  %v2_14e63 = ptrtoint i32* %v0_14e63 to i64
  store i64 %v2_14e63, i64* %rax.global-to-local, align 8
  store i32 0, i32* %v0_14e63, align 4
  %v0_14e6e = load i64, i64* %rax.global-to-local, align 8
  store i64 %v0_14e6e, i64* %r12.global-to-local, align 8
  %v2_14e71 = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v3_14e71 = zext i8 %v2_14e71 to i64
  store i64 %v3_14e71, i64* %rbx.global-to-local, align 8
  %v0_14e75 = call i16** @__ctype_b_loc()
  %v2_14e75 = ptrtoint i16** %v0_14e75 to i64
  store i64 %v2_14e75, i64* %rax.global-to-local, align 8
  %v4_14e7a = and i64 %v0_14e3e, 4294967295
  store i64 %v4_14e7a, i64* @rdx, align 8
  %v1_14e7e = bitcast i16** %v0_14e75 to i64*
  %v2_14e7e = load i64, i64* %v1_14e7e, align 8
  store i64 %v2_14e7e, i64* @rsi, align 8
  %v0_14e81 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_14e81, i64* %rax.global-to-local, align 8
  %v0_14e979 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_14e979, i64* @rcx, align 8
  %v2_14e9a11 = mul i64 %v0_14e979, 2
  %v3_14e9a12 = or i64 %v2_14e9a11, 1
  %v4_14e9a13 = add i64 %v3_14e9a12, %v2_14e7e
  %v5_14e9a14 = inttoptr i64 %v4_14e9a13 to i8*
  %v6_14e9a15 = load i8, i8* %v5_14e9a14, align 1
  %v7_14e9a16 = and i8 %v6_14e9a15, 32
  %v8_14e9a17 = icmp eq i8 %v7_14e9a16, 0
  %v1_14e9f18 = icmp eq i1 %v8_14e9a17, false
  br i1 %v1_14e9f18, label %dec_label_pc_14e90, label %dec_label_pc_14ea1

dec_label_pc_14e90:                               ; preds = %dec_label_pc_14e47, %dec_label_pc_14e90
  %v0_14e90 = phi i64 [ %v1_14e90, %dec_label_pc_14e90 ], [ %v0_14e81, %dec_label_pc_14e47 ]
  %v1_14e90 = add i64 %v0_14e90, 1
  store i64 %v1_14e90, i64* %rax.global-to-local, align 8
  %v1_14e94 = inttoptr i64 %v1_14e90 to i8*
  %v2_14e94 = load i8, i8* %v1_14e94, align 1
  %v3_14e94 = zext i8 %v2_14e94 to i64
  store i64 %v3_14e94, i64* %rbx.global-to-local, align 8
  store i64 %v3_14e94, i64* @rcx, align 8
  %v2_14e9a = mul nuw nsw i64 %v3_14e94, 2
  %v3_14e9a = or i64 %v2_14e9a, 1
  %v4_14e9a = add i64 %v3_14e9a, %v2_14e7e
  %v5_14e9a = inttoptr i64 %v4_14e9a to i8*
  %v6_14e9a = load i8, i8* %v5_14e9a, align 1
  %v7_14e9a = and i8 %v6_14e9a, 32
  %v8_14e9a = icmp eq i8 %v7_14e9a, 0
  %v1_14e9f = icmp eq i1 %v8_14e9a, false
  br i1 %v1_14e9f, label %dec_label_pc_14e90, label %dec_label_pc_14ea1

dec_label_pc_14ea1:                               ; preds = %dec_label_pc_14e90, %dec_label_pc_14e47
  %v0_14ea1 = phi i64 [ %v0_14e979, %dec_label_pc_14e47 ], [ %v3_14e94, %dec_label_pc_14e90 ]
  %v1_14ea1 = trunc i64 %v0_14ea1 to i8
  %v11_14ea1 = icmp eq i8 %v1_14ea1, 45
  br i1 %v11_14ea1, label %dec_label_pc_14ef8, label %dec_label_pc_14ea6

dec_label_pc_14ea6:                               ; preds = %dec_label_pc_14ea1
  store i64 0, i64* @rcx, align 8
  %v0_14ea8 = load i64, i64* @r15, align 8
  %v1_14ea8 = inttoptr i64 %v0_14ea8 to i8**
  store i64 %v0_14ea8, i64* @rsi, align 8
  store i64 %v0_14e81, i64* @rdi, align 8
  %v1_14eae = inttoptr i64 %v0_14e81 to i8*
  %v11_14eae = call i32 @__strtoul_internal(i8* %v1_14eae, i8** %v1_14ea8, i32 %v1_14e3e, i32 0)
  %v13_14eae = sext i32 %v11_14eae to i64
  store i64 %v13_14eae, i64* %rax.global-to-local, align 8
  %v0_14eb3 = load i64, i64* @r15, align 8
  %v1_14eb3 = inttoptr i64 %v0_14eb3 to i64*
  %v2_14eb3 = load i64, i64* %v1_14eb3, align 8
  store i64 %v2_14eb3, i64* @rcx, align 8
  store i64 %v13_14eae, i64* @rbx, align 8
  %v1_14eb9 = load i64, i64* %rbp.global-to-local, align 8
  %v12_14eb9 = icmp eq i64 %v2_14eb3, %v1_14eb9
  br i1 %v12_14eb9, label %dec_label_pc_14ee8, label %dec_label_pc_14ebe

dec_label_pc_14ebe:                               ; preds = %dec_label_pc_14ea6
  %v0_14ebe = load i64, i64* %r12.global-to-local, align 8
  %v1_14ebe = inttoptr i64 %v0_14ebe to i32*
  %v2_14ebe = load i32, i32* %v1_14ebe, align 4
  %v3_14ebe = zext i32 %v2_14ebe to i64
  store i64 %v3_14ebe, i64* %rax.global-to-local, align 8
  %v5_14ec2 = icmp eq i32 %v2_14ebe, 0
  br i1 %v5_14ec2, label %dec_label_pc_14f28, label %dec_label_pc_14ec6

dec_label_pc_14ec6:                               ; preds = %dec_label_pc_14ebe
  %v11_14ec6 = icmp eq i32 %v2_14ebe, 34
  store i64 1, i64* @rbp, align 8
  %v1_14ece = icmp eq i1 %v11_14ec6, false
  br i1 %v1_14ece, label %dec_label_pc_14ef8, label %dec_label_pc_14ed0

dec_label_pc_14ed0:                               ; preds = %dec_label_pc_14f28, %dec_label_pc_14ec6
  %v1_14ed0 = icmp eq i64 %v0_14e5c, 0
  br i1 %v1_14ed0, label %dec_label_pc_14ede, label %dec_label_pc_14ed5

dec_label_pc_14ed5:                               ; preds = %dec_label_pc_14ed0
  %v1_14ed5 = inttoptr i64 %v2_14eb3 to i8*
  %v2_14ed5 = load i8, i8* %v1_14ed5, align 1
  %v3_14ed5 = zext i8 %v2_14ed5 to i64
  store i64 %v3_14ed5, i64* %r12.global-to-local, align 8
  %v5_14ed9 = icmp eq i8 %v2_14ed5, 0
  %v1_14edc = icmp eq i1 %v5_14ed9, false
  br i1 %v1_14edc, label %dec_label_pc_14ed5.dec_label_pc_14f57_crit_edge, label %dec_label_pc_14ede

dec_label_pc_14ed5.dec_label_pc_14f57_crit_edge:  ; preds = %dec_label_pc_14ed5
  %.pre = inttoptr i64 %v0_14e5c to i8*
  br label %dec_label_pc_14f57

dec_label_pc_14ede:                               ; preds = %dec_label_pc_14ed5, %dec_label_pc_14ed0
  %v1_14ede = load i64, i64* @r14, align 8
  %v2_14ede = inttoptr i64 %v1_14ede to i64*
  store i64 %v13_14eae, i64* %v2_14ede, align 8
  br label %dec_label_pc_14efd

dec_label_pc_14ee8:                               ; preds = %dec_label_pc_14ea6
  %v1_14ee8 = icmp eq i64 %v0_14e5c, 0
  %v1_14ef0 = icmp eq i1 %v1_14ee8, false
  br i1 %v1_14ef0, label %dec_label_pc_14f30, label %dec_label_pc_14ef8

dec_label_pc_14ef8:                               ; preds = %dec_label_pc_14ee8, %dec_label_pc_14f3a, %dec_label_pc_14f30, %dec_label_pc_14ec6, %dec_label_pc_14ea1
  store i64 4, i64* @rbp, align 8
  br label %dec_label_pc_14efd

dec_label_pc_14efd:                               ; preds = %dec_label_pc_15141, %dec_label_pc_1503c, %dec_label_pc_14ef8, %dec_label_pc_14ede
  store i64 %v0_14e2e, i64* @rdi, align 8
  %v1_14f02 = call i64 @__readfsqword(i64 40)
  %v2_14f02 = xor i64 %v1_14f02, %v0_14e2e
  %v3_14f02 = icmp eq i64 %v2_14f02, 0
  store i64 %v2_14f02, i64* @rdi, align 8
  %v0_14f0b = load i64, i64* @rbp, align 8
  store i64 %v0_14f0b, i64* %rax.global-to-local, align 8
  %v1_14f0d = icmp eq i1 %v3_14f02, false
  br i1 %v1_14f0d, label %dec_label_pc_151a0, label %dec_label_pc_14f13

dec_label_pc_14f13:                               ; preds = %dec_label_pc_14efd
  %v2_14f17 = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_14f17, i64* @rbx, align 8
  store i64 %v0_14e28, i64* @rbp, align 8
  store i64 %v0_14e26, i64* @r12, align 8
  store i64 %v0_14e24, i64* @r13, align 8
  store i64 %v0_14e22, i64* @r14, align 8
  store i64 %v0_14e20, i64* @r15, align 8
  ret i64 %v0_14f0b

dec_label_pc_14f28:                               ; preds = %dec_label_pc_14ebe
  store i64 0, i64* @rbp, align 8
  br label %dec_label_pc_14ed0

dec_label_pc_14f30:                               ; preds = %dec_label_pc_14ee8
  %v2_14f30 = load i8, i8* bitcast (i64* @rdi to i8*), align 8
  %v3_14f30 = zext i8 %v2_14f30 to i64
  store i64 %v3_14f30, i64* %r12.global-to-local, align 8
  %v5_14f35 = icmp eq i8 %v2_14f30, 0
  br i1 %v5_14f35, label %dec_label_pc_14ef8, label %dec_label_pc_14f3a

dec_label_pc_14f3a:                               ; preds = %dec_label_pc_14f30
  %v1_14f3a = zext i8 %v2_14f30 to i32
  store i64 %v3_14f30, i64* @rsi, align 8
  store i64 %v0_14e5c, i64* @rdi, align 8
  store i64 0, i64* @rbp, align 8
  %v1_14f43 = inttoptr i64 %v0_14e5c to i8*
  %v5_14f43 = call i8* @strchr(i8* %v1_14f43, i32 %v1_14f3a)
  %v7_14f43 = ptrtoint i8* %v5_14f43 to i64
  store i64 %v7_14f43, i64* %rax.global-to-local, align 8
  %v1_14f48 = icmp eq i8* %v5_14f43, null
  store i64 1, i64* @rbx, align 8
  %sext8 = mul i64 %v2_14eb3, 4294967296
  %v4_14f50 = sdiv i64 %sext8, 4294967296
  store i64 %v4_14f50, i64* @rcx, align 8
  br i1 %v1_14f48, label %dec_label_pc_14ef8, label %dec_label_pc_14f3a.dec_label_pc_14f57_crit_edge

dec_label_pc_14f3a.dec_label_pc_14f57_crit_edge:  ; preds = %dec_label_pc_14f3a
  %v0_14f57.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_14f57

dec_label_pc_14f57:                               ; preds = %dec_label_pc_14ed5.dec_label_pc_14f57_crit_edge, %dec_label_pc_14f3a.dec_label_pc_14f57_crit_edge
  %v1_14f63.pre-phi = phi i8* [ %.pre, %dec_label_pc_14ed5.dec_label_pc_14f57_crit_edge ], [ %v1_14f43, %dec_label_pc_14f3a.dec_label_pc_14f57_crit_edge ]
  %v0_14f5e = phi i64 [ %v2_14eb3, %dec_label_pc_14ed5.dec_label_pc_14f57_crit_edge ], [ %v4_14f50, %dec_label_pc_14f3a.dec_label_pc_14f57_crit_edge ]
  %v0_14f57 = phi i64 [ %v3_14ed5, %dec_label_pc_14ed5.dec_label_pc_14f57_crit_edge ], [ %v0_14f57.pre, %dec_label_pc_14f3a.dec_label_pc_14f57_crit_edge ]
  %v1_14f57 = trunc i64 %v0_14f57 to i32
  store i64 %v0_14f57, i64* @rsi, align 8
  store i64 %v0_14e5c, i64* @rdi, align 8
  %v5_14f63 = call i8* @strchr(i8* %v1_14f63.pre-phi, i32 %v1_14f57)
  %v7_14f63 = ptrtoint i8* %v5_14f63 to i64
  store i64 %v7_14f63, i64* %rax.global-to-local, align 8
  %v1_14f68 = icmp eq i8* %v5_14f63, null
  %sext = mul i64 %v0_14f5e, 4294967296
  %v4_14f6b = sdiv i64 %sext, 4294967296
  store i64 %v4_14f6b, i64* @rcx, align 8
  br i1 %v1_14f68, label %dec_label_pc_1503c, label %dec_label_pc_14f76

dec_label_pc_14f76:                               ; preds = %dec_label_pc_14f57
  %v0_14f76 = load i64, i64* %r12.global-to-local, align 8
  %v1_14f76 = add i64 %v0_14f76, -69
  store i64 %v1_14f76, i64* %rax.global-to-local, align 8
  %v1_14f7b = trunc i64 %v1_14f76 to i8
  %tmp100 = icmp ult i8 %v1_14f7b, 48
  br i1 %tmp100, label %dec_label_pc_14f7f, label %dec_label_pc_14fd0

dec_label_pc_14f7f:                               ; preds = %dec_label_pc_14f76
  store i64 142129060940101, i64* @rdx, align 8
  %v2_14f89 = urem i64 %v1_14f76, 64
  %v3_14f89 = shl i64 1, %v2_14f89
  %v4_14f89 = and i64 %v3_14f89, 142129060940101
  %v5_14f89 = icmp ne i64 %v4_14f89, 0
  %v1_14f8d = icmp eq i1 %v5_14f89, false
  br i1 %v1_14f8d, label %dec_label_pc_14fd0, label %dec_label_pc_14f8f

dec_label_pc_14f8f:                               ; preds = %dec_label_pc_14f7f
  store i64 48, i64* @rsi, align 8
  store i64 %v0_14e5c, i64* @rdi, align 8
  %v5_14f9c = call i8* @strchr(i8* %v1_14f63.pre-phi, i32 48)
  %v7_14f9c = ptrtoint i8* %v5_14f9c to i64
  store i64 %v7_14f9c, i64* %rax.global-to-local, align 8
  %v1_14fa1 = icmp eq i8* %v5_14f9c, null
  store i64 %v4_14f6b, i64* @rcx, align 8
  br i1 %v1_14fa1, label %dec_label_pc_14fd0, label %dec_label_pc_14fab

dec_label_pc_14fab:                               ; preds = %dec_label_pc_14f8f
  %v1_14fab = add nsw i64 %v4_14f6b, 1
  %v2_14fab = inttoptr i64 %v1_14fab to i8*
  %v3_14fab = load i8, i8* %v2_14fab, align 1
  %v4_14fab = zext i8 %v3_14fab to i64
  store i64 %v4_14fab, i64* %rax.global-to-local, align 8
  %v11_14faf = icmp eq i8 %v3_14fab, 68
  br i1 %v11_14faf, label %dec_label_pc_14fbf, label %dec_label_pc_14fb3

dec_label_pc_14fb3:                               ; preds = %dec_label_pc_14fab
  %v11_14fb3 = icmp eq i8 %v3_14fab, 105
  br i1 %v11_14fb3, label %dec_label_pc_15188, label %dec_label_pc_14fbb

dec_label_pc_14fbb:                               ; preds = %dec_label_pc_14fb3
  %v11_14fbb = icmp eq i8 %v3_14fab, 66
  %v1_14fbd = icmp eq i1 %v11_14fbb, false
  br i1 %v1_14fbd, label %dec_label_pc_14fd0, label %dec_label_pc_14fbf

dec_label_pc_14fbf:                               ; preds = %dec_label_pc_14fbb, %dec_label_pc_14fab
  store i64 2, i64* @rdi, align 8
  store i64 ptrtoint (i128* @global_var_3e8.397 to i64), i64* @rsi, align 8
  br label %dec_label_pc_14fda

dec_label_pc_14fd0:                               ; preds = %dec_label_pc_14f76, %dec_label_pc_14fbb, %dec_label_pc_14f8f, %dec_label_pc_14f7f
  store i64 1, i64* @rdi, align 8
  store i64 ptrtoint (i32* @global_var_400.157 to i64), i64* @rsi, align 8
  br label %dec_label_pc_14fda

dec_label_pc_14fda:                               ; preds = %dec_label_pc_15188, %dec_label_pc_14fd0, %dec_label_pc_14fbf
  %v0_14fda = load i64, i64* %r12.global-to-local, align 8
  %v1_14fda = trunc i64 %v0_14fda to i32
  %v2_14fda = add i32 %v1_14fda, -66
  %v13_14fda = trunc i32 %v2_14fda to i8
  %v17_14fda = zext i32 %v2_14fda to i64
  store i64 %v17_14fda, i64* @r12, align 8
  %tmp101 = icmp ult i8 %v13_14fda, 54
  br i1 %tmp101, label %dec_label_pc_14fe4, label %dec_label_pc_1503c

dec_label_pc_14fe4:                               ; preds = %dec_label_pc_14fda
  store i64 ptrtoint (i64* @global_var_1b080.498 to i64), i64* @rdx, align 8
  %v2_14fef = mul nuw nsw i64 %v17_14fda, 4
  %v3_14fef = add i64 %v2_14fef, ptrtoint (i64* @global_var_1b080.498 to i64)
  %v4_14fef = inttoptr i64 %v3_14fef to i32*
  %v5_14fef = load i32, i32* %v4_14fef, align 4
  %v6_14fef = sext i32 %v5_14fef to i64
  %v2_14ff3 = add i64 %v6_14fef, ptrtoint (i64* @global_var_1b080.498 to i64)
  store i64 %v2_14ff3, i64* %rax.global-to-local, align 8
  ret i64 %v2_14ff3

dec_label_pc_1503c:                               ; preds = %dec_label_pc_14fda, %dec_label_pc_14f57
  %v0_1503c = load i64, i64* @rbx, align 8
  %v1_1503c = load i64, i64* @r14, align 8
  %v2_1503c = inttoptr i64 %v1_1503c to i64*
  store i64 %v0_1503c, i64* %v2_1503c, align 8
  %v0_1503f = load i64, i64* @rbp, align 8
  %v2_1503f = and i64 %v0_1503f, 4294967293
  %v9_1503f = or i64 %v2_1503f, 2
  store i64 %v9_1503f, i64* @rbp, align 8
  br label %dec_label_pc_14efd

dec_label_pc_1512c:                               ; preds = %dec_label_pc_1513b
  %v5_1512f = mul i64 %v6_1512f25, ptrtoint ([14 x i8]* @global_var_1af00.493 to i64)
  store i64 %v5_1512f, i64* %rax.global-to-local, align 8
  br i1 undef, label %dec_label_pc_1513b, label %dec_label_pc_151c4.loopexit

dec_label_pc_1513b:                               ; preds = %dec_label_pc_1512c, %dec_label_pc_151c4
  %v6_1512f25 = phi i64 [ %v5_1512f, %dec_label_pc_1512c ], [ -1, %dec_label_pc_151c4 ]
  %v17_1513b19 = phi i64 [ %v17_1513b, %dec_label_pc_1512c ], [ %r8.promoted, %dec_label_pc_151c4 ]
  %v1_1513b = trunc i64 %v17_1513b19 to i32
  %v2_1513b = add i32 %v1_1513b, -1
  %v11_1513b = icmp eq i32 %v2_1513b, 0
  %v17_1513b = zext i32 %v2_1513b to i64
  %v1_1513f = icmp eq i1 %v11_1513b, false
  br i1 %v1_1513f, label %dec_label_pc_1512c, label %dec_label_pc_15141

dec_label_pc_15141:                               ; preds = %dec_label_pc_1513b
  store i64 %v6_1512f25, i64* %rbx.global-to-local, align 8
  store i64 1, i64* @r9, align 8
  store i64 %v17_1513b, i64* @r8, align 8
  %v0_15095 = load i64, i64* @rbp, align 8
  %v4_150953 = or i64 %v0_15095, 1
  %v11_15095 = and i64 %v4_150953, 4294967295
  store i64 %v11_15095, i64* %rbp.global-to-local, align 8
  store i64 ptrtoint ([38 x i8]* @global_var_1af10.491 to i64), i64* @rdi, align 8
  store i64 add (i64 ptrtoint ([11 x i8]* @global_var_1b158.499 to i64), i64 ptrtoint ([38 x i8]* @global_var_1af10.491 to i64)), i64* @rcx, align 8
  %v2_15028 = and i64 %v4_150953, 4294967293
  %v9_15028 = or i64 %v2_15028, 2
  store i64 %v9_15028, i64* %rax.global-to-local, align 8
  %v1_1502b = load i64, i64* @r15, align 8
  %v2_1502b = inttoptr i64 %v1_1502b to i64*
  store i64 add (i64 ptrtoint ([11 x i8]* @global_var_1b158.499 to i64), i64 ptrtoint ([38 x i8]* @global_var_1af10.491 to i64)), i64* %v2_1502b, align 8
  %v0_1502e = load i64, i64* @rcx, align 8
  %v1_1502e = inttoptr i64 %v0_1502e to i8*
  %v2_1502e = load i8, i8* %v1_1502e, align 1
  %v9_1502e = icmp eq i8 %v2_1502e, 0
  %v0_15031 = load i64, i64* %rbx.global-to-local, align 8
  %v1_15031 = load i64, i64* @r14, align 8
  %v2_15031 = inttoptr i64 %v1_15031 to i64*
  store i64 %v0_15031, i64* %v2_15031, align 8
  %v1_15034 = icmp eq i1 %v9_1502e, false
  %v2_15034 = load i64, i64* %rbp.global-to-local, align 8
  %v4_15034 = load i64, i64* %rax.global-to-local, align 8
  %v6_15034.v = select i1 %v1_15034, i64 %v4_15034, i64 %v2_15034
  %v7_15034 = and i64 %v6_15034.v, 4294967295
  store i64 %v7_15034, i64* @rbp, align 8
  br label %dec_label_pc_14efd

dec_label_pc_15188:                               ; preds = %dec_label_pc_14fb3
  store i64 0, i64* @rdi, align 8
  %v1_1518a = add nsw i64 %v4_14f6b, 2
  %v2_1518a = inttoptr i64 %v1_1518a to i8*
  %v3_1518a = load i8, i8* %v2_1518a, align 1
  %v13_1518a = icmp eq i8 %v3_1518a, 66
  store i64 ptrtoint (i32* @global_var_400.157 to i64), i64* @rsi, align 8
  %v4_15197 = select i1 %v13_1518a, i64 3, i64 1
  store i64 %v4_15197, i64* @rdi, align 8
  br label %dec_label_pc_14fda

dec_label_pc_151a0:                               ; preds = %dec_label_pc_14efd
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  br label %dec_label_pc_151a5

dec_label_pc_151a5:                               ; preds = %dec_label_pc_14e20, %dec_label_pc_151a0
  store i64 ptrtoint ([11 x i8]* @global_var_1b158.499 to i64), i64* @rcx, align 8
  store i64 ptrtoint ([14 x i8]* @global_var_1af00.493 to i64), i64* @rsi, align 8
  store i64 ptrtoint ([38 x i8]* @global_var_1af10.491 to i64), i64* @rdi, align 8
  store i64 96, i64* @rdx, align 8
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @global_var_1af10.491, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_1af00.493, i64 0, i64 0), i32 96, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_1b158.499, i64 0, i64 0))
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %r8.promoted.pre = load i64, i64* @r8, align 8
  br label %dec_label_pc_151c4

dec_label_pc_151c4.loopexit:                      ; preds = %dec_label_pc_1512c
  store i64 %v17_1513b, i64* @r8, align 8
  br label %dec_label_pc_151c4

dec_label_pc_151c4:                               ; preds = %dec_label_pc_151c4.loopexit, %dec_label_pc_151a5
  %r8.promoted = phi i64 [ %v17_1513b, %dec_label_pc_151c4.loopexit ], [ %r8.promoted.pre, %dec_label_pc_151a5 ]
  br label %dec_label_pc_1513b
}

define i64 @function_15240(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15240:
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_15240 = load i64, i64* @rdi, align 8
  %v4_15240 = trunc i64 %v0_15240 to i32
  %v5_15240 = icmp eq i32 %v4_15240, 0
  %v0_15242 = load i64, i64* @rbx, align 8
  store i64 %v0_15242, i64* %stack_var_-8, align 8
  br i1 %v5_15240, label %dec_label_pc_15290, label %dec_label_pc_15245

dec_label_pc_15245:                               ; preds = %dec_label_pc_15240
  %v11_15245 = icmp eq i32 %v4_15240, 10
  br i1 %v11_15245, label %dec_label_pc_15250, label %dec_label_pc_1524c

dec_label_pc_1524c:                               ; preds = %bb9, %dec_label_pc_15245
  store i64 %v0_15242, i64* @rbx, align 8
  ret i64 %v0_15240

dec_label_pc_15250:                               ; preds = %dec_label_pc_15245
  %v2_15250 = load i64, i64* @rsi, align 8
  store i64 %v2_15250, i64* @rdx, align 8
  store i64 ptrtoint ([10 x i8]* @global_var_17cab.323 to i64), i64* @rdi, align 8
  store i64 %v2_15250, i64* %rbx.global-to-local, align 8
  store i64 10, i64* @rcx, align 8
  br label %bb

bb:                                               ; preds = %bb9, %dec_label_pc_15250
  %v24_15265 = phi i64 [ %v27_15265, %bb9 ], [ ptrtoint ([10 x i8]* @global_var_17cab.323 to i64), %dec_label_pc_15250 ]
  %v1_1526c = phi i64 [ %v28_15265, %bb9 ], [ %v2_15250, %dec_label_pc_15250 ]
  %v0_15265 = phi i64 [ %v29_15265, %bb9 ], [ 10, %dec_label_pc_15250 ]
  %v1_15265 = icmp eq i64 %v0_15265, 0
  br i1 %v1_15265, label %dec_label_pc_15269, label %bb9

bb9:                                              ; preds = %bb
  %v3_15265 = inttoptr i64 %v1_1526c to i8*
  %v4_15265 = load i8, i8* %v3_15265, align 1
  %v6_15265 = inttoptr i64 %v24_15265 to i8*
  %v7_15265 = load i8, i8* %v6_15265, align 1
  %v18_15265 = icmp eq i8 %v4_15265, %v7_15265
  %v25_15265 = load i1, i1* @df, align 1
  %v26_15265 = select i1 %v25_15265, i64 -1, i64 1
  %v27_15265 = add i64 %v26_15265, %v24_15265
  %v28_15265 = add i64 %v26_15265, %v1_1526c
  store i64 %v27_15265, i64* @rdi, align 8
  store i64 %v28_15265, i64* @rsi, align 8
  %v29_15265 = add nsw i64 %v0_15265, -1
  store i64 %v29_15265, i64* @rcx, align 8
  br i1 %v18_15265, label %bb, label %dec_label_pc_1524c

dec_label_pc_15269:                               ; preds = %bb
  store i64 %v2_15250, i64* @rdi, align 8
  %v2_1526c = call i64 @function_3da0(i64 %v2_15250, i64 %v1_1526c)
  %v0_15271 = load i64, i64* %rbx.global-to-local, align 8
  %v1_15271 = inttoptr i64 %v0_15271 to i64*
  store i64 0, i64* %v1_15271, align 8
  %v0_15278 = call i32* @__errno_location()
  store i32 61, i32* %v0_15278, align 4
  %v2_15288 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_15288, i64* @rbx, align 8
  ret i64 4294967295

dec_label_pc_15290:                               ; preds = %dec_label_pc_15240
  %v0_15290 = call i32* @__errno_location()
  store i32 95, i32* %v0_15290, align 4
  %v2_152a0 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_152a0, i64* @rbx, align 8
  ret i64 4294967295
}

define i64 @function_152b0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_152b0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_152b0 = load i64, i64* @rbx, align 8
  %v0_152b1 = load i64, i64* @rsi, align 8
  %v0_152b4 = call i64 @function_3ba0()
  store i64 %v0_152b1, i64* @rsi, align 8
  store i64 %v0_152b4, i64* @rdi, align 8
  store i64 %v0_152b0, i64* @rbx, align 8
  %v2_152bf = call i64 @function_15240(i64 %v0_152b4, i64 %v0_152b1)
  ret i64 %v2_152bf
}

define i64 @function_152d0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_152d0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_152d0 = load i64, i64* @rbx, align 8
  %v0_152d1 = load i64, i64* @rsi, align 8
  %v0_152d4 = call i64 @function_3b10()
  store i64 %v0_152d1, i64* @rsi, align 8
  store i64 %v0_152d4, i64* @rdi, align 8
  store i64 %v0_152d0, i64* @rbx, align 8
  %v2_152df = call i64 @function_15240(i64 %v0_152d4, i64 %v0_152d1)
  ret i64 %v2_152df
}

define i64 @function_152f0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_152f0:
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_152f0 = load i64, i64* %rbx.global-to-local, align 8
  %v0_152f1 = load i64, i64* @rsi, align 8
  store i64 %v0_152f1, i64* %rbx.global-to-local, align 8
  %v0_152f4 = call i64 @function_39f0()
  store i64 %v0_152f1, i64* @rsi, align 8
  store i64 %v0_152f4, i64* @rdi, align 8
  store i64 %v0_152f0, i64* @rbx, align 8
  %v2_152ff = call i64 @function_15240(i64 %v0_152f4, i64 %v0_152f1)
  ret i64 %v2_152ff
}

define i64 @function_15310(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_15310:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-52 = alloca i64, align 8
  %stack_var_-32 = alloca i64, align 8
  %v0_15310 = load i64, i64* @r13, align 8
  %v0_15312 = load i64, i64* @r12, align 8
  store i64 %arg2, i64* @r13, align 8
  %v0_15317 = load i64, i64* @rbp, align 8
  %v0_15318 = load i64, i64* @rbx, align 8
  store i64 %v0_15318, i64* %stack_var_-32, align 8
  store i64 %arg3, i64* @r12, align 8
  %v0_15323 = call i64 @__readfsqword(i64 40)
  %v2_15333 = ptrtoint i64* %stack_var_-52 to i64
  %v1_15338 = icmp eq i64 %arg1, 0
  %v3_1533b = select i1 %v1_15338, i64 %v2_15333, i64 %arg1
  store i64 %v3_1533b, i64* @rbx, align 8
  %v1_1533f = inttoptr i64 %v3_1533b to i32*
  store i64 %v3_1533b, i64* @rdi, align 8
  %v4_15342 = inttoptr i64 %arg2 to i8*
  %v6_15342 = trunc i64 %arg3 to i32
  %v7_15342 = load i64, i64* @rcx, align 8
  %v8_15342 = inttoptr i64 %v7_15342 to %_TYPEDEF___mbstate_t*
  %v9_15342 = call i32 @mbrtowc(i32* %v1_1533f, i8* %v4_15342, i32 %v6_15342, %_TYPEDEF___mbstate_t* %v8_15342)
  %v11_15342 = sext i32 %v9_15342 to i64
  store i64 %v11_15342, i64* @rbp, align 8
  %tmp21 = icmp ult i32 %v9_15342, -2
  br i1 %tmp21, label %dec_label_pc_15370, label %dec_label_pc_15350

dec_label_pc_15350:                               ; preds = %dec_label_pc_15310
  %v1_15350 = icmp eq i64 %arg3, 0
  br i1 %v1_15350, label %dec_label_pc_15370, label %dec_label_pc_15355

dec_label_pc_15355:                               ; preds = %dec_label_pc_15350
  store i64 0, i64* @rdi, align 8
  %v2_15357 = call i64 @function_d830(i64 0, i64 %arg2)
  %v4_1535c = trunc i64 %v2_15357 to i8
  %v5_1535c = icmp eq i8 %v4_1535c, 0
  %v1_1535e = icmp eq i1 %v5_1535c, false
  br i1 %v1_1535e, label %dec_label_pc_15370, label %dec_label_pc_15360

dec_label_pc_15360:                               ; preds = %dec_label_pc_15355
  %v2_15360 = load i8, i8* bitcast (i64* @rsi to i8*), align 8
  store i64 1, i64* @rbp, align 8
  %v1_1536a = zext i8 %v2_15360 to i32
  %v2_1536a = load i64, i64* @rbx, align 8
  %v3_1536a = inttoptr i64 %v2_1536a to i32*
  store i32 %v1_1536a, i32* %v3_1536a, align 4
  br label %dec_label_pc_15370

dec_label_pc_15370:                               ; preds = %dec_label_pc_15360, %dec_label_pc_15355, %dec_label_pc_15350, %dec_label_pc_15310
  store i64 %v0_15323, i64* @rdx, align 8
  %v1_15375 = call i64 @__readfsqword(i64 40)
  %v2_15375 = xor i64 %v1_15375, %v0_15323
  %v3_15375 = icmp eq i64 %v2_15375, 0
  store i64 %v2_15375, i64* @rdx, align 8
  %v1_15381 = icmp eq i1 %v3_15375, false
  br i1 %v1_15381, label %dec_label_pc_1538e, label %dec_label_pc_15383

dec_label_pc_15383:                               ; preds = %dec_label_pc_15370
  %v0_1537e = load i64, i64* @rbp, align 8
  %v2_15387 = load i64, i64* %stack_var_-32, align 8
  store i64 %v2_15387, i64* @rbx, align 8
  store i64 %v0_15317, i64* @rbp, align 8
  store i64 %v0_15312, i64* @r12, align 8
  store i64 %v0_15310, i64* @r13, align 8
  ret i64 %v0_1537e

dec_label_pc_1538e:                               ; preds = %dec_label_pc_15370
  call void @__stack_chk_fail()
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_153a0(i64 %arg1) local_unnamed_addr {
dec_label_pc_153a0:
  store i64 %arg1, i64* @rdi, align 8
  store i64 ptrtoint ([17 x i8]* @global_var_1aeef.489 to i64), i64* @rsi, align 8
  store i64 5, i64* @rdx, align 8
  store i64 0, i64* @rdi, align 8
  %v9_153b2 = call i8* @dcgettext(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_1aeef.489, i64 0, i64 0), i32 5)
  %v11_153b2 = ptrtoint i8* %v9_153b2 to i64
  %v0_153b7 = load %_IO_FILE*, %_IO_FILE** @global_var_2202c0.221, align 8
  %v1_153b7 = ptrtoint %_IO_FILE* %v0_153b7 to i64
  store i64 %v1_153b7, i64* @rdi, align 8
  store i64 ptrtoint ([4 x i8]* @global_var_1ab90.500 to i64), i64* @rdx, align 8
  store i64 %v11_153b2, i64* @rcx, align 8
  store i64 1, i64* @rsi, align 8
  %v12_153cf = call i32 (%_IO_FILE*, i32, i8*, ...) @__fprintf_chk(%_IO_FILE* %v0_153b7, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_1ab90.500, i64 0, i64 0), i8* %v9_153b2)
  %v0_153d4 = load i32, i32* @global_var_2201f8.9, align 4
  %v1_153d4 = zext i32 %v0_153d4 to i64
  store i64 %v1_153d4, i64* @rdi, align 8
  call void @exit(i32 %v0_153d4)
  unreachable
}

define i64 @function_153e0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_153e0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_153e0 = add i64 %arg1, 80
  %v2_153e0 = inttoptr i64 %v1_153e0 to i8*
  %v3_153e0 = load i8, i8* %v2_153e0, align 1
  %v4_153e0 = urem i8 %v3_153e0, 2
  %v5_153e0 = icmp eq i8 %v4_153e0, 0
  %v1_153e4 = add i64 %arg1, 56
  %v2_153e4 = inttoptr i64 %v1_153e4 to i64*
  %v3_153e4 = load i64, i64* %v2_153e4, align 8
  %v1_153e8 = icmp eq i1 %v5_153e0, false
  br i1 %v1_153e8, label %dec_label_pc_153f0, label %dec_label_pc_153ea

dec_label_pc_153ea:                               ; preds = %dec_label_pc_153e0
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %v3_153e4

dec_label_pc_153f0:                               ; preds = %dec_label_pc_153e0
  %v1_153f0 = add i64 %arg1, 72
  %v2_153f0 = inttoptr i64 %v1_153f0 to i64*
  %v3_153f0 = load i64, i64* %v2_153f0, align 8
  store i64 %v3_153f0, i64* @rdi, align 8
  ret i64 %v3_153e4
}

define i64 @function_15400(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15400:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_15400 = add i64 %arg1, 80
  %v2_15400 = inttoptr i64 %v1_15400 to i8*
  %v3_15400 = load i8, i8* %v2_15400, align 1
  %v4_15400 = urem i8 %v3_15400, 2
  %v5_15400 = icmp eq i8 %v4_15400, 0
  %v1_15404 = add i64 %arg1, 64
  %v2_15404 = inttoptr i64 %v1_15404 to i64*
  %v3_15404 = load i64, i64* %v2_15404, align 8
  %v1_15408 = icmp eq i1 %v5_15400, false
  br i1 %v1_15408, label %dec_label_pc_15410, label %dec_label_pc_1540a

dec_label_pc_1540a:                               ; preds = %dec_label_pc_15400
  store i64 %arg2, i64* @rdi, align 8
  ret i64 %v3_15404

dec_label_pc_15410:                               ; preds = %dec_label_pc_15400
  %v1_15410 = add i64 %arg1, 72
  %v2_15410 = inttoptr i64 %v1_15410 to i64*
  %v3_15410 = load i64, i64* %v2_15410, align 8
  store i64 %v3_15410, i64* @rdi, align 8
  ret i64 %v3_15404
}

define i64 @function_15420(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_15420:
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v1_15420 = icmp eq i64 %arg3, 0
  %v0_15423 = load i64, i64* @r12, align 8
  %v0_15425 = load i64, i64* @rbp, align 8
  %v0_15426 = load i64, i64* @rbx, align 8
  store i64 %v0_15426, i64* %stack_var_-24, align 8
  %v0_15427 = load i64, i64* @rdi, align 8
  store i64 %v0_15427, i64* @rbx, align 8
  %v1_1542c = add i64 %arg3, -1
  %storemerge1 = select i1 %v1_15420, i64 15, i64 %v1_1542c
  %storemerge = select i1 %v1_15420, i64 16, i64 %arg3
  store i64 %storemerge1, i64* @r12, align 8
  store i64 %storemerge, i64* @rbp, align 8
  %v1_15433 = icmp eq i64 %arg2, 0
  store i64 ptrtoint (i64* @global_var_fe0.501 to i64), i64* %rax.global-to-local, align 8
  %v2_1543b = add i64 %v0_15427, 48
  %v3_1543b = inttoptr i64 %v2_1543b to i64*
  store i64 %storemerge1, i64* %v3_1543b, align 8
  %v2_1543f = load i64, i64* %rax.global-to-local, align 8
  %v3_1543f = select i1 %v1_15433, i64 %v2_1543f, i64 %arg2
  store i64 %v3_1543f, i64* @rsi, align 8
  %v0_15443 = load i64, i64* @rbx, align 8
  store i64 %v0_15443, i64* @rdi, align 8
  %v2_15446 = inttoptr i64 %v0_15443 to i64*
  store i64 %v3_1543f, i64* %v2_15446, align 8
  %v2_15449 = call i64 @function_153e0(i64 %v0_15443, i64 %v3_1543f)
  store i64 %v2_15449, i64* %rax.global-to-local, align 8
  %v1_1544e = icmp eq i64 %v2_15449, 0
  %v1_15451 = load i64, i64* @rbx, align 8
  %v2_15451 = add i64 %v1_15451, 8
  %v3_15451 = inttoptr i64 %v2_15451 to i64*
  store i64 %v2_15449, i64* %v3_15451, align 8
  br i1 %v1_1544e, label %dec_label_pc_1549d, label %dec_label_pc_15457

dec_label_pc_15457:                               ; preds = %dec_label_pc_15420
  %v1_15457 = load i64, i64* @r12, align 8
  %v3_15457 = add i64 %v2_15449, 16
  %v4_15457 = add i64 %v3_15457, %v1_15457
  %v0_1545c = load i64, i64* @rbp, align 8
  %v1_1545c = sub i64 0, %v0_1545c
  %v2_1545f = and i64 %v4_15457, %v1_1545c
  store i64 %v2_1545f, i64* %rbp.global-to-local, align 8
  store i64 %v0_15443, i64* @rdx, align 8
  %v1_15465 = load i64, i64* @rbx, align 8
  %v2_15465 = add i64 %v1_15465, 16
  %v3_15465 = inttoptr i64 %v2_15465 to i64*
  store i64 %v2_1545f, i64* %v3_15465, align 8
  %v0_15469 = load i64, i64* %rbp.global-to-local, align 8
  %v1_15469 = load i64, i64* @rbx, align 8
  %v2_15469 = add i64 %v1_15469, 24
  %v3_15469 = inttoptr i64 %v2_15469 to i64*
  store i64 %v0_15469, i64* %v3_15469, align 8
  %v0_1546d = load i64, i64* @rdx, align 8
  %v2_1546d = add i64 %v0_1546d, %v2_15449
  store i64 %v2_1546d, i64* @rdx, align 8
  %v2_15470 = inttoptr i64 %v2_15449 to i64*
  store i64 %v2_1546d, i64* %v2_15470, align 8
  %v0_15473 = load i64, i64* @rdx, align 8
  %v1_15473 = load i64, i64* @rbx, align 8
  %v2_15473 = add i64 %v1_15473, 32
  %v3_15473 = inttoptr i64 %v2_15473 to i64*
  store i64 %v0_15473, i64* %v3_15473, align 8
  %v1_15477 = add i64 %v2_15449, 8
  %v2_15477 = inttoptr i64 %v1_15477 to i64*
  store i64 0, i64* %v2_15477, align 8
  store i64 1, i64* %rax.global-to-local, align 8
  %v0_15484 = load i64, i64* @rbx, align 8
  %v1_15484 = add i64 %v0_15484, 80
  %v2_15484 = inttoptr i64 %v1_15484 to i8*
  %v3_15484 = load i8, i8* %v2_15484, align 1
  %v4_15484 = and i8 %v3_15484, -7
  store i8 %v4_15484, i8* %v2_15484, align 1
  %v2_15488 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_15488, i64* @rbx, align 8
  store i64 %v0_15425, i64* @rbp, align 8
  store i64 %v0_15423, i64* @r12, align 8
  %v0_1548c = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_1548c

dec_label_pc_1549d:                               ; preds = %dec_label_pc_15420
  %v1_1549d = call i64 @function_153a0(i64 %v0_15443)
  unreachable
}

define i64 @_obstack_begin(i64* %arg1, i32 %arg2, i32 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_154b0:
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  %tmp5 = sext i32 %arg3 to i64
  store i64 %tmp5, i64* @rdx, align 8
  %tmp6 = sext i32 %arg2 to i64
  store i64 %tmp6, i64* @rsi, align 8
  %tmp7 = ptrtoint i64* %arg1 to i64
  store i64 %tmp7, i64* @rdi, align 8
  %v1_154b0 = add i64 %tmp7, 80
  %v2_154b0 = inttoptr i64 %v1_154b0 to i8*
  %v3_154b0 = load i8, i8* %v2_154b0, align 1
  %v4_154b0 = and i8 %v3_154b0, -2
  store i8 %v4_154b0, i8* %v2_154b0, align 1
  %v0_154b4 = load i64, i64* @rcx, align 8
  %v2_154b4 = add i64 %tmp7, 56
  %v3_154b4 = inttoptr i64 %v2_154b4 to i64*
  store i64 %v0_154b4, i64* %v3_154b4, align 8
  %v0_154b8 = load i64, i64* @r8, align 8
  %v2_154b8 = add i64 %tmp7, 64
  %v3_154b8 = inttoptr i64 %v2_154b8 to i64*
  store i64 %v0_154b8, i64* %v3_154b8, align 8
  %v5_154bc = call i64 @function_15420(i64 %tmp7, i64 %tmp6, i64 %tmp5)
  ret i64 %v5_154bc
}

define i64 @_obstack_begin_1(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_154d0:
  %r9.global-to-local = alloca i64, align 8
  store i64 %arg6, i64* %r9.global-to-local, align 8
  store i64 %arg5, i64* @r8, align 8
  store i64 %arg4, i64* @rcx, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_154d0 = add i64 %arg1, 80
  %v2_154d0 = inttoptr i64 %v1_154d0 to i8*
  %v3_154d0 = load i8, i8* %v2_154d0, align 1
  %v4_154d0 = or i8 %v3_154d0, 1
  store i8 %v4_154d0, i8* %v2_154d0, align 1
  %v0_154d4 = load i64, i64* @rcx, align 8
  %v2_154d4 = add i64 %arg1, 56
  %v3_154d4 = inttoptr i64 %v2_154d4 to i64*
  store i64 %v0_154d4, i64* %v3_154d4, align 8
  %v0_154d8 = load i64, i64* @r8, align 8
  %v2_154d8 = add i64 %arg1, 64
  %v3_154d8 = inttoptr i64 %v2_154d8 to i64*
  store i64 %v0_154d8, i64* %v3_154d8, align 8
  %v0_154dc = load i64, i64* %r9.global-to-local, align 8
  %v2_154dc = add i64 %arg1, 72
  %v3_154dc = inttoptr i64 %v2_154dc to i64*
  store i64 %v0_154dc, i64* %v3_154dc, align 8
  %v3_154e0 = call i64 @function_15420(i64 %arg1, i64 %arg2, i64 %arg3)
  ret i64 %v3_154e0
}

define i64 @_obstack_newchunk(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_154f0:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-40 = alloca i64, align 8
  %v0_154f0 = load i64, i64* @r14, align 8
  %v0_154f2 = load i64, i64* @r13, align 8
  store i64 0, i64* @rdx, align 8
  %v0_154f6 = load i64, i64* @r12, align 8
  %v0_154f8 = load i64, i64* @rbp, align 8
  %v0_154f9 = load i64, i64* @rbx, align 8
  store i64 %v0_154f9, i64* %stack_var_-40, align 8
  %v1_154fa = add i64 %arg1, 24
  %v2_154fa = inttoptr i64 %v1_154fa to i64*
  %v3_154fa = load i64, i64* %v2_154fa, align 8
  store i64 %v3_154fa, i64* %rbx.global-to-local, align 8
  %v2_154fe = add i64 %arg1, 16
  %v3_154fe = inttoptr i64 %v2_154fe to i64*
  %v4_154fe = load i64, i64* %v3_154fe, align 8
  %v5_154fe = sub i64 %v3_154fa, %v4_154fe
  store i64 %v5_154fe, i64* @rbx, align 8
  %v1_15502 = add i64 %arg1, 8
  %v2_15502 = inttoptr i64 %v1_15502 to i64*
  %v3_15502 = load i64, i64* %v2_15502, align 8
  store i64 %v3_15502, i64* @rbp, align 8
  %v0_15506 = load i64, i64* @rsi, align 8
  %v2_15506 = add i64 %v0_15506, %v5_154fe
  %v7_15506 = icmp ult i64 %v2_15506, %v0_15506
  store i64 %v2_15506, i64* @rsi, align 8
  store i64 %v5_154fe, i64* @rcx, align 8
  %v1_1550c = zext i1 %v7_15506 to i64
  store i64 %v1_1550c, i64* @rdx, align 8
  %v2_1550f = add i64 %arg1, 48
  %v3_1550f = inttoptr i64 %v2_1550f to i64*
  %v4_1550f = load i64, i64* %v3_1550f, align 8
  %v5_1550f = add i64 %v4_1550f, %v2_15506
  %v10_1550f = icmp ult i64 %v5_1550f, %v2_15506
  %v1_15513 = zext i1 %v10_1550f to i64
  %v2_15513 = load i64, i64* @rax, align 8
  %v3_15513 = and i64 %v2_15513, -256
  %v4_15513 = or i64 %v1_15513, %v3_15513
  store i64 %v4_15513, i64* %rax.global-to-local, align 8
  %v2_15516 = udiv i64 %v5_154fe, 8
  store i64 %v2_15516, i64* @rcx, align 8
  %v9_1551a = icmp ugt i64 %v5_1550f, %arg1
  %v3_1551d = add nuw nsw i64 %v2_15516, 100
  %v4_1551d = add i64 %v3_1551d, %v5_1550f
  %v1_15522 = icmp eq i1 %v9_1551a, false
  %v6_15522 = select i1 %v1_15522, i64 %arg1, i64 %v5_1550f
  store i64 %v6_15522, i64* @rsi, align 8
  %v7_15526 = icmp ult i64 %v6_15522, %v4_1551d
  %v1_15529 = icmp eq i1 %v7_15526, false
  %v4_15529 = select i1 %v1_15529, i64 %v6_15522, i64 %v4_1551d
  store i64 %v4_15529, i64* @r12, align 8
  %v1_1552d = icmp eq i1 %v7_15506, false
  %v1_15530 = icmp eq i1 %v1_1552d, false
  br i1 %v1_15530, label %dec_label_pc_155d5, label %dec_label_pc_15536

dec_label_pc_15536:                               ; preds = %dec_label_pc_154f0
  %v1_15539 = icmp eq i64 %v4_15513, 0
  %v1_1553c = icmp eq i1 %v1_15539, false
  br i1 %v1_1553c, label %dec_label_pc_155d5, label %dec_label_pc_15542

dec_label_pc_15542:                               ; preds = %dec_label_pc_15536
  store i64 %v4_15529, i64* @rsi, align 8
  store i64 %arg1, i64* @r13, align 8
  %v2_15548 = call i64 @function_153e0(i64 %arg1, i64 %v4_15529)
  store i64 %v2_15548, i64* %rax.global-to-local, align 8
  %v1_1554d = icmp eq i64 %v2_15548, 0
  store i64 %v2_15548, i64* @r14, align 8
  br i1 %v1_1554d, label %dec_label_pc_155d5, label %dec_label_pc_15559

dec_label_pc_15559:                               ; preds = %dec_label_pc_15542
  %v1_15559 = load i64, i64* @r12, align 8
  %v3_15559 = add i64 %v1_15559, %v2_15548
  store i64 %v3_15559, i64* @rsi, align 8
  %v1_1555d = load i64, i64* @r13, align 8
  %v2_1555d = add i64 %v1_1555d, 8
  %v3_1555d = inttoptr i64 %v2_1555d to i64*
  store i64 %v2_15548, i64* %v3_1555d, align 8
  %v0_15561 = load i64, i64* @rbp, align 8
  %v2_15561 = add i64 %v2_15548, 8
  %v3_15561 = inttoptr i64 %v2_15561 to i64*
  store i64 %v0_15561, i64* %v3_15561, align 8
  %v0_15565 = load i64, i64* @rbx, align 8
  %v1_15565 = trunc i64 %v0_15565 to i32
  store i64 %v0_15565, i64* @rdx, align 8
  %v0_15568 = load i64, i64* @rsi, align 8
  %v1_15568 = load i64, i64* @r13, align 8
  %v2_15568 = add i64 %v1_15568, 32
  %v3_15568 = inttoptr i64 %v2_15568 to i64*
  store i64 %v0_15568, i64* %v3_15568, align 8
  %v0_1556c = load i64, i64* @rsi, align 8
  %v2_1556c = inttoptr i64 %v2_15548 to i64*
  store i64 %v0_1556c, i64* %v2_1556c, align 8
  %v0_1556f = load i64, i64* @r13, align 8
  %v1_1556f = add i64 %v0_1556f, 48
  %v2_1556f = inttoptr i64 %v1_1556f to i64*
  %v3_1556f = load i64, i64* %v2_1556f, align 8
  store i64 %v3_1556f, i64* %rax.global-to-local, align 8
  %v1_15573 = add i64 %v0_1556f, 16
  %v2_15573 = inttoptr i64 %v1_15573 to i64*
  %v3_15573 = load i64, i64* %v2_15573, align 8
  store i64 %v3_15573, i64* @rsi, align 8
  %v0_15577 = load i64, i64* @r14, align 8
  %v3_15577 = add i64 %v3_1556f, 16
  %v4_15577 = add i64 %v3_15577, %v0_15577
  %v1_1557c = sub i64 -1, %v3_1556f
  store i64 %v1_1557c, i64* %rax.global-to-local, align 8
  %v2_1557f = and i64 %v4_15577, %v1_1557c
  store i64 %v2_1557f, i64* %r12.global-to-local, align 8
  store i64 %v2_1557f, i64* @rdi, align 8
  %v1_15585 = inttoptr i64 %v2_1557f to i64*
  %v3_15585 = inttoptr i64 %v3_15573 to i64*
  %v7_15585 = call i64* @memcpy(i64* %v1_15585, i64* %v3_15585, i32 %v1_15565)
  %v9_15585 = ptrtoint i64* %v7_15585 to i64
  store i64 %v9_15585, i64* %rax.global-to-local, align 8
  %v0_1558a = load i64, i64* @r13, align 8
  %v1_1558a = add i64 %v0_1558a, 80
  %v2_1558a = inttoptr i64 %v1_1558a to i8*
  %v3_1558a = load i8, i8* %v2_1558a, align 1
  %v4_1558a = and i8 %v3_1558a, 2
  %v5_1558a = icmp eq i8 %v4_1558a, 0
  %v1_1558f = icmp eq i1 %v5_1558a, false
  br i1 %v1_1558f, label %dec_label_pc_155a6, label %dec_label_pc_15591

dec_label_pc_15591:                               ; preds = %dec_label_pc_15559
  %v1_15591 = add i64 %v0_1558a, 48
  %v2_15591 = inttoptr i64 %v1_15591 to i64*
  %v3_15591 = load i64, i64* %v2_15591, align 8
  %v0_15595 = load i64, i64* @rbp, align 8
  %v3_15595 = add i64 %v3_15591, 16
  %v4_15595 = add i64 %v3_15595, %v0_15595
  store i64 %v4_15595, i64* @rdx, align 8
  %v1_1559a = sub i64 -1, %v3_15591
  %v2_1559d = and i64 %v4_15595, %v1_1559a
  store i64 %v2_1559d, i64* %rax.global-to-local, align 8
  %v1_155a0 = add i64 %v0_1558a, 16
  %v2_155a0 = inttoptr i64 %v1_155a0 to i64*
  %v3_155a0 = load i64, i64* %v2_155a0, align 8
  %v15_155a0 = icmp eq i64 %v3_155a0, %v2_1559d
  br i1 %v15_155a0, label %dec_label_pc_155c0, label %dec_label_pc_155a6

dec_label_pc_155a6:                               ; preds = %dec_label_pc_155c0, %dec_label_pc_15591, %dec_label_pc_15559
  %v10_155a6 = phi i64 [ %v0_155a6.pre, %dec_label_pc_155c0 ], [ %v0_1558a, %dec_label_pc_15591 ], [ %v0_1558a, %dec_label_pc_15559 ]
  %v1_155a6 = add i64 %v10_155a6, 80
  %v2_155a6 = inttoptr i64 %v1_155a6 to i8*
  %v3_155a6 = load i8, i8* %v2_155a6, align 1
  %v4_155a6 = and i8 %v3_155a6, -3
  store i8 %v4_155a6, i8* %v2_155a6, align 1
  %v0_155ab = load i64, i64* @rbx, align 8
  %v1_155ab = load i64, i64* %r12.global-to-local, align 8
  %v2_155ab = add i64 %v1_155ab, %v0_155ab
  store i64 %v2_155ab, i64* %rbx.global-to-local, align 8
  %v1_155ae = load i64, i64* @r13, align 8
  %v2_155ae = add i64 %v1_155ae, 16
  %v3_155ae = inttoptr i64 %v2_155ae to i64*
  store i64 %v1_155ab, i64* %v3_155ae, align 8
  %v0_155b2 = load i64, i64* %rbx.global-to-local, align 8
  %v1_155b2 = load i64, i64* @r13, align 8
  %v2_155b2 = add i64 %v1_155b2, 24
  %v3_155b2 = inttoptr i64 %v2_155b2 to i64*
  store i64 %v0_155b2, i64* %v3_155b2, align 8
  %v2_155b6 = load i64, i64* %stack_var_-40, align 8
  store i64 %v2_155b6, i64* @rbx, align 8
  store i64 %v0_154f8, i64* @rbp, align 8
  store i64 %v0_154f6, i64* @r12, align 8
  store i64 %v0_154f2, i64* @r13, align 8
  store i64 %v0_154f0, i64* @r14, align 8
  %v0_155be = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_155be

dec_label_pc_155c0:                               ; preds = %dec_label_pc_15591
  %v1_155c0 = add i64 %v0_15595, 8
  %v2_155c0 = inttoptr i64 %v1_155c0 to i64*
  %v3_155c0 = load i64, i64* %v2_155c0, align 8
  store i64 %v3_155c0, i64* %rax.global-to-local, align 8
  store i64 %v0_15595, i64* @rsi, align 8
  store i64 %v0_1558a, i64* @rdi, align 8
  %v1_155ca = load i64, i64* @r14, align 8
  %v2_155ca = add i64 %v1_155ca, 8
  %v3_155ca = inttoptr i64 %v2_155ca to i64*
  store i64 %v3_155c0, i64* %v3_155ca, align 8
  %v2_155ce = call i64 @function_15400(i64 %v0_1558a, i64 %v0_15595)
  store i64 %v2_155ce, i64* %rax.global-to-local, align 8
  %v0_155a6.pre = load i64, i64* @r13, align 8
  br label %dec_label_pc_155a6

dec_label_pc_155d5:                               ; preds = %dec_label_pc_15542, %dec_label_pc_15536, %dec_label_pc_154f0
  %v1_155d5 = call i64 @function_153a0(i64 %arg1)
  unreachable
}

define i64 @_obstack_allocated_p(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_155e0:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v1_155e0 = add i64 %arg1, 8
  %v2_155e0 = inttoptr i64 %v1_155e0 to i64*
  %v3_155e0 = load i64, i64* %v2_155e0, align 8
  %v1_155e4 = icmp eq i64 %v3_155e0, 0
  br i1 %v1_155e4, label %dec_label_pc_15616, label %dec_label_pc_155f0

dec_label_pc_155f0:                               ; preds = %dec_label_pc_155e0, %dec_label_pc_155fa
  %v0_155fa = phi i64 [ %v3_155fa, %dec_label_pc_155fa ], [ %v3_155e0, %dec_label_pc_155e0 ]
  %tmp238 = icmp ult i64 %v0_155fa, %arg2
  br i1 %tmp238, label %dec_label_pc_155f5, label %dec_label_pc_155fa

dec_label_pc_155f5:                               ; preds = %dec_label_pc_155f0
  %v1_155f5 = inttoptr i64 %v0_155fa to i64*
  %v2_155f5 = load i64, i64* %v1_155f5, align 8
  %v9_155f5 = icmp ult i64 %v2_155f5, %arg2
  %v1_155f8 = icmp eq i1 %v9_155f5, false
  br i1 %v1_155f8, label %dec_label_pc_15610, label %dec_label_pc_155fa

dec_label_pc_155fa:                               ; preds = %dec_label_pc_155f0, %dec_label_pc_155f5
  %v1_155fa = add i64 %v0_155fa, 8
  %v2_155fa = inttoptr i64 %v1_155fa to i64*
  %v3_155fa = load i64, i64* %v2_155fa, align 8
  %v1_155fe = icmp eq i64 %v3_155fa, 0
  %v1_15601 = icmp eq i1 %v1_155fe, false
  br i1 %v1_15601, label %dec_label_pc_155f0, label %dec_label_pc_15603

dec_label_pc_15603:                               ; preds = %dec_label_pc_155fa
  ret i64 0

dec_label_pc_15610:                               ; preds = %dec_label_pc_155f5
  ret i64 1

dec_label_pc_15616:                               ; preds = %dec_label_pc_155e0
  ret i64 0
}

define i64 @_obstack_free(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15620:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_15620 = load i64, i64* %r12.global-to-local, align 8
  %v0_15622 = load i64, i64* %rbp.global-to-local, align 8
  %v0_15623 = load i64, i64* @rsi, align 8
  store i64 %v0_15623, i64* %rbp.global-to-local, align 8
  %v0_15626 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_15626, i64* %stack_var_-24, align 8
  %v0_15627 = load i64, i64* @rdi, align 8
  %v1_15627 = add i64 %v0_15627, 8
  %v2_15627 = inttoptr i64 %v1_15627 to i64*
  %v3_15627 = load i64, i64* %v2_15627, align 8
  store i64 %v3_15627, i64* @rsi, align 8
  store i64 %v0_15627, i64* %rbx.global-to-local, align 8
  %v1_1562e = icmp eq i64 %v3_15627, 0
  br i1 %v1_1562e, label %dec_label_pc_1565d, label %dec_label_pc_15638

dec_label_pc_15638:                               ; preds = %dec_label_pc_15620, %dec_label_pc_15645
  %v1_1564c = phi i64 [ %v3_15645, %dec_label_pc_15645 ], [ %v3_15627, %dec_label_pc_15620 ]
  %v7_15638 = icmp ult i64 %v1_1564c, %v0_15623
  %v1_1563b = icmp eq i1 %v7_15638, false
  br i1 %v1_1563b, label %dec_label_pc_15645, label %dec_label_pc_1563d

dec_label_pc_1563d:                               ; preds = %dec_label_pc_15638
  %v1_1563d = inttoptr i64 %v1_1564c to i64*
  %v2_1563d = load i64, i64* %v1_1563d, align 8
  store i64 %v2_1563d, i64* %rax.global-to-local, align 8
  %v7_15640 = icmp ult i64 %v2_1563d, %v0_15623
  %v1_15643 = icmp eq i1 %v7_15640, false
  br i1 %v1_15643, label %dec_label_pc_15670, label %dec_label_pc_15645

dec_label_pc_15645:                               ; preds = %dec_label_pc_1563d, %dec_label_pc_15638
  %v1_15645 = add i64 %v1_1564c, 8
  %v2_15645 = inttoptr i64 %v1_15645 to i64*
  %v3_15645 = load i64, i64* %v2_15645, align 8
  store i64 %v3_15645, i64* %r12.global-to-local, align 8
  %v0_15649 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_15649, i64* @rdi, align 8
  %v2_1564c = call i64 @function_15400(i64 %v0_15649, i64 %v1_1564c)
  store i64 %v2_1564c, i64* %rax.global-to-local, align 8
  %v1_15651 = add i64 %v0_15649, 80
  %v2_15651 = inttoptr i64 %v1_15651 to i8*
  %v3_15651 = load i8, i8* %v2_15651, align 1
  %v4_15651 = or i8 %v3_15651, 2
  store i8 %v4_15651, i8* %v2_15651, align 1
  %v1_15655 = icmp eq i64 %v3_15645, 0
  store i64 %v3_15645, i64* @rsi, align 8
  %v1_1565b = icmp eq i1 %v1_15655, false
  br i1 %v1_1565b, label %dec_label_pc_15638, label %dec_label_pc_1565d

dec_label_pc_1565d:                               ; preds = %dec_label_pc_15645, %dec_label_pc_15620
  %v1_1565d = icmp eq i64 %v0_15623, 0
  %v1_15660 = icmp eq i1 %v1_1565d, false
  br i1 %v1_15660, label %dec_label_pc_15685, label %dec_label_pc_15662

dec_label_pc_15662:                               ; preds = %dec_label_pc_1565d
  %v2_15662 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_15662, i64* %rbx.global-to-local, align 8
  store i64 %v0_15622, i64* %rbp.global-to-local, align 8
  store i64 %v0_15620, i64* %r12.global-to-local, align 8
  %v0_15666 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_15666

dec_label_pc_15670:                               ; preds = %dec_label_pc_1563d
  %v1_15670 = load i64, i64* %rbx.global-to-local, align 8
  %v2_15670 = add i64 %v1_15670, 24
  %v3_15670 = inttoptr i64 %v2_15670 to i64*
  store i64 %v0_15623, i64* %v3_15670, align 8
  %v1_15674 = load i64, i64* %rbx.global-to-local, align 8
  %v2_15674 = add i64 %v1_15674, 16
  %v3_15674 = inttoptr i64 %v2_15674 to i64*
  store i64 %v0_15623, i64* %v3_15674, align 8
  %v0_15678 = load i64, i64* %rax.global-to-local, align 8
  %v1_15678 = load i64, i64* %rbx.global-to-local, align 8
  %v2_15678 = add i64 %v1_15678, 32
  %v3_15678 = inttoptr i64 %v2_15678 to i64*
  store i64 %v0_15678, i64* %v3_15678, align 8
  %v0_1567c = load i64, i64* @rsi, align 8
  %v1_1567c = load i64, i64* %rbx.global-to-local, align 8
  %v2_1567c = add i64 %v1_1567c, 8
  %v3_1567c = inttoptr i64 %v2_1567c to i64*
  store i64 %v0_1567c, i64* %v3_1567c, align 8
  %v2_15680 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_15680, i64* %rbx.global-to-local, align 8
  store i64 %v0_15622, i64* %rbp.global-to-local, align 8
  store i64 %v0_15620, i64* %r12.global-to-local, align 8
  %v0_15684 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_15684

dec_label_pc_15685:                               ; preds = %dec_label_pc_1565d
  call void @abort()
  unreachable
}

define i64 @_obstack_memory_used(i64 %arg1) local_unnamed_addr {
dec_label_pc_15690:
  store i64 %arg1, i64* @rdi, align 8
  %v1_15690 = add i64 %arg1, 8
  %v2_15690 = inttoptr i64 %v1_15690 to i64*
  %v3_15690 = load i64, i64* %v2_15690, align 8
  store i64 %v3_15690, i64* @rdx, align 8
  %v1_15696 = icmp eq i64 %v3_15690, 0
  br i1 %v1_15696, label %dec_label_pc_156b8, label %dec_label_pc_156a0

dec_label_pc_156a0:                               ; preds = %dec_label_pc_15690, %dec_label_pc_156a0
  %v0_156aa = phi i64 [ %v2_156aa, %dec_label_pc_156a0 ], [ 0, %dec_label_pc_15690 ]
  %v0_156a0 = phi i64 [ %v3_156a6, %dec_label_pc_156a0 ], [ %v3_15690, %dec_label_pc_15690 ]
  %v1_156a0 = inttoptr i64 %v0_156a0 to i64*
  %v2_156a0 = load i64, i64* %v1_156a0, align 8
  %v2_156a3 = sub i64 %v2_156a0, %v0_156a0
  store i64 %v2_156a3, i64* @rcx, align 8
  %v1_156a6 = add i64 %v0_156a0, 8
  %v2_156a6 = inttoptr i64 %v1_156a6 to i64*
  %v3_156a6 = load i64, i64* %v2_156a6, align 8
  store i64 %v3_156a6, i64* @rdx, align 8
  %v2_156aa = add i64 %v2_156a3, %v0_156aa
  %v1_156ad = icmp eq i64 %v3_156a6, 0
  %v1_156b0 = icmp eq i1 %v1_156ad, false
  br i1 %v1_156b0, label %dec_label_pc_156a0, label %dec_label_pc_156b2

dec_label_pc_156b2:                               ; preds = %dec_label_pc_156a0
  ret i64 %v2_156aa

dec_label_pc_156b8:                               ; preds = %dec_label_pc_15690
  ret i64 0
}

define i64 @function_156c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_156c0:
  %tmp10 = sext i32 %arg1 to i64
  store i64 %tmp10, i64* @rdi, align 8
  %v2_156c0 = icmp eq i32 %arg1, 0
  br i1 %v2_156c0, label %dec_label_pc_156e0, label %dec_label_pc_156c5

dec_label_pc_156c5:                               ; preds = %dec_label_pc_156c0
  store i64 %tmp10, i64* @rsi, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_17f3c.137 to i64), i64* @rdi, align 8
  store i64 1, i64* @rdx, align 8
  %v5_156d4 = inttoptr i64 %tmp10 to i8*
  %v9_156d4 = call i32 @setenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_17f3c.137, i64 0, i64 0), i8* %v5_156d4, i32 1)
  %v11_156d4 = sext i32 %v9_156d4 to i64
  ret i64 %v11_156d4

dec_label_pc_156e0:                               ; preds = %dec_label_pc_156c0
  store i64 ptrtoint ([3 x i8]* @global_var_17f3c.137 to i64), i64* @rdi, align 8
  %v3_156e7 = call i32 @unsetenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_17f3c.137, i64 0, i64 0))
  %v5_156e7 = sext i32 %v3_156e7 to i64
  ret i64 %v5_156e7
}

define i64 @function_156f0(i64 %arg1) local_unnamed_addr {
dec_label_pc_156f0:
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v0_156f0 = load i64, i64* @rdi, align 8
  %v1_156f0 = icmp eq i64 %v0_156f0, 0
  br i1 %v1_156f0, label %dec_label_pc_15718, label %dec_label_pc_156f5

dec_label_pc_156f5:                               ; preds = %dec_label_pc_156f0
  %v0_156f5 = load i64, i64* @rbx, align 8
  store i64 %v0_156f5, i64* %stack_var_-8, align 8
  br label %dec_label_pc_15700

dec_label_pc_15700:                               ; preds = %dec_label_pc_15700, %dec_label_pc_156f5
  %v0_15700 = phi i64 [ %v2_15700, %dec_label_pc_15700 ], [ %v0_156f0, %dec_label_pc_156f5 ]
  %v1_15700 = inttoptr i64 %v0_15700 to i64*
  %v2_15700 = load i64, i64* %v1_15700, align 8
  call void @free(i64* %v1_15700)
  %v1_15708 = icmp eq i64 %v2_15700, 0
  store i64 %v2_15700, i64* @rdi, align 8
  %v1_1570e = icmp eq i1 %v1_15708, false
  br i1 %v1_1570e, label %dec_label_pc_15700, label %dec_label_pc_15710

dec_label_pc_15710:                               ; preds = %dec_label_pc_15700
  %v2_15710 = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_15710, i64* @rbx, align 8
  ret i64 ptrtoint (i32* @0 to i64)

dec_label_pc_15718:                               ; preds = %dec_label_pc_156f0
  %v0_15718 = load i64, i64* @rax, align 8
  ret i64 %v0_15718
}

define i64 @function_15720(i64 %arg1) local_unnamed_addr {
dec_label_pc_15720:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_15726 = load i64, i64* @rdi, align 8
  store i64 %v0_15726, i64* %rbp.global-to-local, align 8
  %v0_1572d = call i32* @__errno_location()
  %v2_1572d = ptrtoint i32* %v0_1572d to i64
  %v1_15732 = add i64 %v0_15726, 8
  %v2_15732 = inttoptr i64 %v1_15732 to i8*
  %v3_15732 = load i8, i8* %v2_15732, align 1
  %v10_15732 = icmp eq i8 %v3_15732, 0
  store i64 %v2_1572d, i64* @rbx, align 8
  %v2_15739 = load i32, i32* %v0_1572d, align 4
  %v3_15739 = zext i32 %v2_15739 to i64
  store i64 %v3_15739, i64* %r12.global-to-local, align 8
  %v1_1573c = add i64 %v0_15726, 9
  %v1_15740 = icmp eq i1 %v10_15732, false
  br i1 %v1_15740, label %dec_label_pc_15744, label %dec_label_pc_15742

dec_label_pc_15742:                               ; preds = %dec_label_pc_15720
  br label %dec_label_pc_15744

dec_label_pc_15744:                               ; preds = %dec_label_pc_15742, %dec_label_pc_15720
  %storemerge13 = phi i64 [ 0, %dec_label_pc_15742 ], [ %v1_1573c, %dec_label_pc_15720 ]
  %v0_15744 = phi i64 [ 0, %dec_label_pc_15742 ], [ %v1_1573c, %dec_label_pc_15720 ]
  store i64 %storemerge13, i64* @rdi, align 8
  %v1_15744 = trunc i64 %v0_15744 to i32
  %v2_15744 = call i64 @function_156c0(i32 %v1_15744)
  store i64 %v2_15744, i64* @rax, align 8
  %v4_15749 = trunc i64 %v2_15744 to i32
  %v5_15749 = icmp eq i32 %v4_15749, 0
  br i1 %v5_15749, label %dec_label_pc_15770, label %dec_label_pc_1574d

dec_label_pc_1574d:                               ; preds = %dec_label_pc_15744
  %v0_1574d = load i64, i64* @rbx, align 8
  %v1_1574d = inttoptr i64 %v0_1574d to i32*
  %v2_1574d = load i32, i32* %v1_1574d, align 4
  %v3_1574d = zext i32 %v2_1574d to i64
  store i64 %v3_1574d, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_15753

dec_label_pc_15753:                               ; preds = %dec_label_pc_15770, %dec_label_pc_1574d
  %storemerge = phi i64 [ 1, %dec_label_pc_15770 ], [ 0, %dec_label_pc_1574d ]
  store i64 %storemerge, i64* %r13.global-to-local, align 8
  %v0_15753 = load i64, i64* %rbp.global-to-local, align 8
  store i64 %v0_15753, i64* @rdi, align 8
  %v1_15756 = call i64 @function_156f0(i64 %v0_15753)
  %v0_1575b = load i64, i64* %r12.global-to-local, align 8
  %v1_1575b = trunc i64 %v0_1575b to i32
  %v2_1575b = load i64, i64* @rbx, align 8
  %v3_1575b = inttoptr i64 %v2_1575b to i32*
  store i32 %v1_1575b, i32* %v3_1575b, align 4
  %v0_15762 = load i64, i64* %r13.global-to-local, align 8
  ret i64 %v0_15762

dec_label_pc_15770:                               ; preds = %dec_label_pc_15744
  call void @tzset()
  store i64 ptrtoint (i32* @0 to i64), i64* @rax, align 8
  br label %dec_label_pc_15753
}

define i64 @function_15780(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_15780:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v1_15780 = icmp eq i64 %arg1, 0
  %v0_15786 = load i64, i64* @rbx, align 8
  store i64 %v0_15786, i64* %stack_var_-24, align 8
  br i1 %v1_15780, label %dec_label_pc_157e8, label %dec_label_pc_15789

dec_label_pc_15789:                               ; preds = %dec_label_pc_15780
  store i64 %arg1, i64* %r12.global-to-local, align 8
  %v1_1578c = inttoptr i64 %arg1 to i8*
  %v2_1578c = call i32 @strlen(i8* %v1_1578c)
  %v4_1578c = sext i32 %v2_1578c to i64
  store i64 %v4_1578c, i64* %rax.global-to-local, align 8
  %v1_15791 = add nsw i64 %v4_1578c, 1
  store i64 %v1_15791, i64* %rbp.global-to-local, align 8
  %v5_1579a = icmp ult i64 %v1_15791, 118
  %v1_1579e = icmp eq i1 %v5_1579a, false
  %v1_15791.op = add nsw i64 %v4_1578c, 18
  %v1_15791.op.op = and i64 %v1_15791.op, -8
  %v1_157a6 = select i1 %v1_1579e, i64 %v1_15791.op.op, i64 128
  %v8_157a6 = trunc i64 %v1_157a6 to i32
  store i64 %v1_157a6, i64* @rdi, align 8
  %v3_157aa = call i64* @malloc(i32 %v8_157a6)
  %v4_157aa = ptrtoint i64* %v3_157aa to i64
  store i64 %v4_157aa, i64* %rax.global-to-local, align 8
  %v1_157af = icmp eq i64* %v3_157aa, null
  store i64 %v4_157aa, i64* %rbx.global-to-local, align 8
  br i1 %v1_157af, label %dec_label_pc_157db, label %dec_label_pc_157b7

dec_label_pc_157b7:                               ; preds = %dec_label_pc_15789
  store i64 0, i64* %v3_157aa, align 8
  %v0_157be = load i64, i64* %rbx.global-to-local, align 8
  %v1_157be = add i64 %v0_157be, 9
  store i64 %v1_157be, i64* @rdi, align 8
  store i64 1, i64* %rax.global-to-local, align 8
  %v3_157c7 = add i64 %v0_157be, 8
  %v4_157c7 = inttoptr i64 %v3_157c7 to i16*
  store i16 1, i16* %v4_157c7, align 2
  %v0_157cb = load i64, i64* %rbp.global-to-local, align 8
  %v1_157cb = trunc i64 %v0_157cb to i32
  store i64 %v0_157cb, i64* @rdx, align 8
  %v0_157ce = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_157ce, i64* @rsi, align 8
  %v1_157d1 = inttoptr i64 %v1_157be to i64*
  %v3_157d1 = inttoptr i64 %v0_157ce to i64*
  %v7_157d1 = call i64* @memcpy(i64* %v1_157d1, i64* %v3_157d1, i32 %v1_157cb)
  %v9_157d1 = ptrtoint i64* %v7_157d1 to i64
  store i64 %v9_157d1, i64* %rax.global-to-local, align 8
  %v0_157d6 = load i64, i64* %rbx.global-to-local, align 8
  %v1_157d6 = load i64, i64* %rbp.global-to-local, align 8
  %v3_157d6 = add i64 %v0_157d6, 9
  %v4_157d6 = add i64 %v3_157d6, %v1_157d6
  %v5_157d6 = inttoptr i64 %v4_157d6 to i8*
  store i8 0, i8* %v5_157d6, align 1
  %v0_157db.pre = load i64, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_157db

dec_label_pc_157db:                               ; preds = %dec_label_pc_157e8, %dec_label_pc_157b7, %dec_label_pc_15789
  %v0_157db = phi i64 [ %v4_157ed, %dec_label_pc_157e8 ], [ %v0_157db.pre, %dec_label_pc_157b7 ], [ %v4_157aa, %dec_label_pc_15789 ]
  store i64 %v0_157db, i64* %rax.global-to-local, align 8
  %v2_157de = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_157de, i64* @rbx, align 8
  ret i64 %v0_157db

dec_label_pc_157e8:                               ; preds = %dec_label_pc_15780
  store i64 128, i64* @rdi, align 8
  %v3_157ed = call i64* @malloc(i32 128)
  %v4_157ed = ptrtoint i64* %v3_157ed to i64
  store i64 %v4_157ed, i64* %rax.global-to-local, align 8
  %v1_157f2 = icmp eq i64* %v3_157ed, null
  store i64 %v4_157ed, i64* %rbx.global-to-local, align 8
  br i1 %v1_157f2, label %dec_label_pc_157db, label %dec_label_pc_157fa

dec_label_pc_157fa:                               ; preds = %dec_label_pc_157e8
  store i64 0, i64* @rdx, align 8
  store i64 0, i64* %v3_157ed, align 8
  %v0_15803 = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_15803, i64* %rax.global-to-local, align 8
  %v0_15806 = load i64, i64* @rdx, align 8
  %v1_15806 = trunc i64 %v0_15806 to i16
  %v3_15806 = add i64 %v0_15803, 8
  %v4_15806 = inttoptr i64 %v3_15806 to i16*
  store i16 %v1_15806, i16* %v4_15806, align 2
  %v2_1580a = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_1580a, i64* @rbx, align 8
  %v0_1580e = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_1580e
}

define i64 @function_15810(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15810:
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_1581b = load i64, i64* @r12, align 8
  %v0_1581e = load i64, i64* @rbx, align 8
  %v0_15823 = load i64, i64* @rsi, align 8
  %v1_15823 = add i64 %v0_15823, 48
  %v2_15823 = inttoptr i64 %v1_15823 to i64*
  %v3_15823 = load i64, i64* %v2_15823, align 8
  %v4_15823 = inttoptr i64 %v3_15823 to i8*
  %v2_15827 = icmp eq i64 %v3_15823, 0
  br i1 %v2_15827, label %dec_label_pc_158c0, label %dec_label_pc_15830

dec_label_pc_15830:                               ; preds = %dec_label_pc_15810
  %v0_15833 = load i64, i64* @rdi, align 8
  store i64 %v0_15833, i64* @r12, align 8
  store i64 %v0_15823, i64* %r13.global-to-local, align 8
  %tmp44 = icmp ugt i64 %v0_15823, %v3_15823
  br i1 %tmp44, label %dec_label_pc_15844, label %dec_label_pc_1583b

dec_label_pc_1583b:                               ; preds = %dec_label_pc_15830
  %v1_1583b = add i64 %v0_15823, 56
  store i64 %v1_1583b, i64* @rdx, align 8
  %v8_1583f = icmp ult i64 %v3_15823, %v1_1583b
  br i1 %v8_1583f, label %dec_label_pc_158c0, label %dec_label_pc_15844

dec_label_pc_15844:                               ; preds = %dec_label_pc_15830, %dec_label_pc_1583b
  %v3_15844 = load i8, i8* %v4_15823, align 1
  %v10_15844 = icmp eq i8 %v3_15844, 0
  %v1_15848 = add i64 %v0_15833, 9
  store i64 %v1_15848, i64* @rbx, align 8
  br i1 %v10_15844, label %dec_label_pc_158b0, label %dec_label_pc_15850.preheader

dec_label_pc_15850.preheader:                     ; preds = %dec_label_pc_15844
  store i64 %v3_15823, i64* @rsi, align 8
  %v1_1585338 = inttoptr i64 %v1_15848 to i8*
  store i64 %v1_15848, i64* @rdi, align 8
  %v5_1585639 = call i32 @strcmp(i8* %v1_1585338, i8* nonnull %v4_15823)
  %v5_1585b41 = icmp eq i32 %v5_1585639, 0
  br i1 %v5_1585b41, label %dec_label_pc_158b7, label %dec_label_pc_1585f.preheader

dec_label_pc_15850.loopexit:                      ; preds = %dec_label_pc_15876, %dec_label_pc_15888
  store i64 %v3_15823, i64* @rsi, align 8
  store i64 %v4_1587e, i64* @rdi, align 8
  %v5_15856 = call i32 @strcmp(i8* %v1_15883, i8* %v4_15823)
  %v5_1585b = icmp eq i32 %v5_15856, 0
  br i1 %v5_1585b, label %dec_label_pc_158b7, label %dec_label_pc_1585f.preheader

dec_label_pc_1585f.preheader:                     ; preds = %dec_label_pc_15850.preheader, %dec_label_pc_15850.loopexit
  br label %dec_label_pc_1585f

dec_label_pc_1585f:                               ; preds = %dec_label_pc_1585f.preheader, %dec_label_pc_15891
  %v0_1585f = load i64, i64* @rbx, align 8
  %v1_1585f = inttoptr i64 %v0_1585f to i8*
  %v2_1585f = load i8, i8* %v1_1585f, align 1
  %v9_1585f = icmp eq i8 %v2_1585f, 0
  %v1_15862 = icmp eq i1 %v9_1585f, false
  br i1 %v1_15862, label %dec_label_pc_15876, label %dec_label_pc_15864

dec_label_pc_15864:                               ; preds = %dec_label_pc_1585f
  %v0_15864 = load i64, i64* @r12, align 8
  %v1_15864 = add i64 %v0_15864, 9
  store i64 %v1_15864, i64* %r14.global-to-local, align 8
  %v12_15869 = icmp eq i64 %v1_15864, %v0_1585f
  %v1_1586c = icmp eq i1 %v12_15869, false
  br i1 %v1_1586c, label %dec_label_pc_158d0, label %dec_label_pc_1586e

dec_label_pc_1586e:                               ; preds = %dec_label_pc_15864
  %v1_1586e = add i64 %v0_15864, 8
  %v2_1586e = inttoptr i64 %v1_1586e to i8*
  %v3_1586e = load i8, i8* %v2_1586e, align 1
  %v10_1586e = icmp eq i8 %v3_1586e, 0
  br i1 %v10_1586e, label %dec_label_pc_158d0, label %dec_label_pc_15876

dec_label_pc_15876:                               ; preds = %dec_label_pc_1586e, %dec_label_pc_1585f
  store i64 %v0_1585f, i64* @rdi, align 8
  %v3_15879 = call i32 @strlen(i8* %v1_1585f)
  %v5_15879 = sext i32 %v3_15879 to i64
  %v0_1587e = load i64, i64* @rbx, align 8
  %v3_1587e = add nsw i64 %v5_15879, 1
  %v4_1587e = add i64 %v3_1587e, %v0_1587e
  store i64 %v4_1587e, i64* @rbx, align 8
  %v1_15883 = inttoptr i64 %v4_1587e to i8*
  %v2_15883 = load i8, i8* %v1_15883, align 1
  %v9_15883 = icmp eq i8 %v2_15883, 0
  %v1_15886 = icmp eq i1 %v9_15883, false
  br i1 %v1_15886, label %dec_label_pc_15850.loopexit, label %dec_label_pc_15888

dec_label_pc_15888:                               ; preds = %dec_label_pc_15876
  %v0_15888 = load i64, i64* @r12, align 8
  %v1_15888 = inttoptr i64 %v0_15888 to i64*
  %v2_15888 = load i64, i64* %v1_15888, align 8
  %v1_1588c = icmp eq i64 %v2_15888, 0
  br i1 %v1_1588c, label %dec_label_pc_15850.loopexit, label %dec_label_pc_15891

dec_label_pc_15891:                               ; preds = %dec_label_pc_15888
  %v1_15891 = add i64 %v2_15888, 9
  store i64 %v1_15891, i64* @rbx, align 8
  store i64 %v3_15823, i64* @rsi, align 8
  store i64 %v2_15888, i64* @r12, align 8
  %v1_1589b = inttoptr i64 %v1_15891 to i8*
  store i64 %v1_15891, i64* @rdi, align 8
  %v5_1589e = call i32 @strcmp(i8* %v1_1589b, i8* %v4_15823)
  %v5_158a3 = icmp eq i32 %v5_1589e, 0
  %v1_158a5 = icmp eq i1 %v5_158a3, false
  br i1 %v1_158a5, label %dec_label_pc_1585f, label %dec_label_pc_158b7

dec_label_pc_158b0:                               ; preds = %dec_label_pc_15844
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* @rbx, align 8
  br label %dec_label_pc_158b7

dec_label_pc_158b7:                               ; preds = %dec_label_pc_15850.preheader, %dec_label_pc_15850.loopexit, %dec_label_pc_15891, %dec_label_pc_15930, %dec_label_pc_1590f, %dec_label_pc_158b0
  %v0_158b7 = load i64, i64* @rbx, align 8
  %v1_158b7 = load i64, i64* %r13.global-to-local, align 8
  %v2_158b7 = add i64 %v1_158b7, 48
  %v3_158b7 = inttoptr i64 %v2_158b7 to i64*
  store i64 %v0_158b7, i64* %v3_158b7, align 8
  br label %dec_label_pc_158c0

dec_label_pc_158c0:                               ; preds = %dec_label_pc_15920, %dec_label_pc_158f9, %dec_label_pc_158b7, %dec_label_pc_1583b, %dec_label_pc_15810
  %v0_158ce = phi i64 [ 0, %dec_label_pc_15920 ], [ 0, %dec_label_pc_158f9 ], [ 1, %dec_label_pc_158b7 ], [ 1, %dec_label_pc_1583b ], [ 1, %dec_label_pc_15810 ]
  store i64 %v0_1581e, i64* @rbx, align 8
  store i64 %v0_1581b, i64* @r12, align 8
  ret i64 %v0_158ce

dec_label_pc_158d0:                               ; preds = %dec_label_pc_1586e, %dec_label_pc_15864
  store i64 %v3_15823, i64* @rdi, align 8
  %v3_158d3 = call i32 @strlen(i8* %v4_15823)
  %v5_158d3 = sext i32 %v3_158d3 to i64
  %v1_158d8 = add nsw i64 %v5_158d3, 1
  %v2_158d8 = trunc i64 %v1_158d8 to i32
  store i64 %v1_158d8, i64* @rdx, align 8
  store i64 %v5_158d3, i64* %r15.global-to-local, align 8
  %v0_158df = load i64, i64* @rbx, align 8
  %v1_158e2 = load i64, i64* %r14.global-to-local, align 8
  %v2_158e2 = sub i64 %v0_158df, %v1_158e2
  %v1_158e8 = sub i64 -1, %v2_158e2
  store i64 %v1_158e8, i64* @rcx, align 8
  %sext = mul i64 %v1_158d8, 4294967296
  %v2_158eb = sdiv i64 %sext, 4294967296
  %v8_158eb = icmp ult i64 %v1_158e8, %v2_158eb
  br i1 %v8_158eb, label %dec_label_pc_15920, label %dec_label_pc_158f0

dec_label_pc_158f0:                               ; preds = %dec_label_pc_158d0
  %v3_158f0 = add i64 %v2_158e2, %v2_158eb
  %tmp45 = icmp ult i64 %v3_158f0, 119
  br i1 %tmp45, label %dec_label_pc_15930, label %dec_label_pc_158f9

dec_label_pc_158f9:                               ; preds = %dec_label_pc_158f0
  store i64 %v3_15823, i64* @rdi, align 8
  %v1_158fc = load i64, i64* @rsi, align 8
  %v4_158fc = call i64 @function_15780(i64 %v3_15823, i64 %v1_158fc, i64 %v2_158eb)
  %v1_15904 = load i64, i64* @r12, align 8
  %v2_15904 = inttoptr i64 %v1_15904 to i64*
  store i64 %v4_158fc, i64* %v2_15904, align 8
  %v1_1590a = icmp eq i64 %v4_158fc, 0
  br i1 %v1_1590a, label %dec_label_pc_158c0, label %dec_label_pc_1590f

dec_label_pc_1590f:                               ; preds = %dec_label_pc_158f9
  %v1_1590f = add i64 %v4_158fc, 8
  %v2_1590f = inttoptr i64 %v1_1590f to i8*
  store i8 0, i8* %v2_1590f, align 1
  %v1_15913 = add i64 %v4_158fc, 9
  store i64 %v1_15913, i64* @rbx, align 8
  br label %dec_label_pc_158b7

dec_label_pc_15920:                               ; preds = %dec_label_pc_158d0
  %v0_15920 = call i32* @__errno_location()
  store i32 12, i32* %v0_15920, align 4
  br label %dec_label_pc_158c0

dec_label_pc_15930:                               ; preds = %dec_label_pc_158f0
  store i64 %v3_15823, i64* @rsi, align 8
  store i64 %v0_158df, i64* @rdi, align 8
  %v1_15936 = inttoptr i64 %v0_158df to i64*
  %v3_15936 = inttoptr i64 %v3_15823 to i64*
  %v7_15936 = call i64* @memcpy(i64* %v1_15936, i64* %v3_15936, i32 %v2_158d8)
  %v0_1593b = load i64, i64* @rbx, align 8
  %v1_1593b = load i64, i64* %r15.global-to-local, align 8
  %v3_1593b = add i64 %v0_1593b, 1
  %v4_1593b = add i64 %v3_1593b, %v1_1593b
  %v5_1593b = inttoptr i64 %v4_1593b to i8*
  store i8 0, i8* %v5_1593b, align 1
  br label %dec_label_pc_158b7
}

define i64 @function_15950(i64 %arg1) local_unnamed_addr {
dec_label_pc_15950:
  %r12.global-to-local = alloca i64, align 8
  %tmp16 = call i8* @__decompiler_undefined_function_1()
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_15950 = load i64, i64* @r12, align 8
  %v0_15952 = load i64, i64* @rbp, align 8
  %v0_15953 = load i64, i64* @rdi, align 8
  store i64 %v0_15953, i64* @rbp, align 8
  %v0_15956 = load i64, i64* @rbx, align 8
  store i64 %v0_15956, i64* %stack_var_-24, align 8
  store i64 ptrtoint ([3 x i8]* @global_var_17f3c.137 to i64), i64* @rdi, align 8
  %v3_15962 = call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_17f3c.137, i64 0, i64 0))
  %v4_15962 = ptrtoint i8* %v3_15962 to i64
  %v1_15967 = icmp eq i8* %v3_15962, null
  store i64 %v4_15962, i64* @rbx, align 8
  %v0_15a08 = load i64, i64* @rbp, align 8
  %v1_15a08 = add i64 %v0_15a08, 8
  %v2_15a08 = inttoptr i64 %v1_15a08 to i8*
  %v3_15a08 = load i8, i8* %v2_15a08, align 1
  %v10_15a08 = icmp eq i8 %v3_15a08, 0
  br i1 %v1_15967, label %dec_label_pc_15a08, label %dec_label_pc_15973

dec_label_pc_15973:                               ; preds = %dec_label_pc_15950
  %v1_15977 = icmp eq i1 %v10_15a08, false
  br i1 %v1_15977, label %dec_label_pc_159e0, label %dec_label_pc_15979

dec_label_pc_15979:                               ; preds = %dec_label_pc_159e0.dec_label_pc_15979_crit_edge, %dec_label_pc_15a08, %dec_label_pc_15973
  %v0_15979 = phi i64 [ %v4_15962, %dec_label_pc_15a08 ], [ %v0_15979.pre, %dec_label_pc_159e0.dec_label_pc_15979_crit_edge ], [ %v4_15962, %dec_label_pc_15973 ]
  %.0 = phi i8* [ %tmp16, %dec_label_pc_15a08 ], [ %v3_15962, %dec_label_pc_159e0.dec_label_pc_15979_crit_edge ], [ %tmp16, %dec_label_pc_15973 ]
  store i64 %v0_15979, i64* @rdi, align 8
  %sext = mul i64 %v0_15979, 4294967296
  %v1_1597c = sdiv i64 %sext, 4294967296
  %v3_1597c = ptrtoint i8* %.0 to i64
  %v4_1597c = load i64, i64* @rdx, align 8
  %v5_1597c = call i64 @function_15780(i64 %v1_1597c, i64 %v3_1597c, i64 %v4_1597c)
  %sext2 = mul i64 %v5_1597c, 4294967296
  %v2_15981 = icmp eq i64 %sext2, 0
  %v1_15984 = sdiv i64 %sext2, 4294967296
  store i64 %v1_15984, i64* %r12.global-to-local, align 8
  br i1 %v2_15981, label %dec_label_pc_159cd, label %dec_label_pc_15989

dec_label_pc_15989:                               ; preds = %dec_label_pc_15979
  store i64 0, i64* @rdi, align 8
  %v0_1598b = load i64, i64* @rbp, align 8
  %v1_1598b = add i64 %v0_1598b, 8
  %v2_1598b = inttoptr i64 %v1_1598b to i8*
  %v3_1598b = load i8, i8* %v2_1598b, align 1
  %v10_1598b = icmp eq i8 %v3_1598b, 0
  br i1 %v10_1598b, label %dec_label_pc_15995, label %dec_label_pc_15991

dec_label_pc_15991:                               ; preds = %dec_label_pc_15989
  %v1_15991 = add i64 %v0_1598b, 9
  store i64 %v1_15991, i64* @rdi, align 8
  %phitmp = trunc i64 %v1_15991 to i32
  br label %dec_label_pc_15995

dec_label_pc_15995:                               ; preds = %dec_label_pc_15991, %dec_label_pc_15989
  %v0_15995 = phi i32 [ %phitmp, %dec_label_pc_15991 ], [ 0, %dec_label_pc_15989 ]
  %v2_15995 = call i64 @function_156c0(i32 %v0_15995)
  %v4_1599a = trunc i64 %v2_15995 to i32
  %v5_1599a = icmp eq i32 %v4_1599a, 0
  br i1 %v5_1599a, label %dec_label_pc_15a28, label %dec_label_pc_159a2

dec_label_pc_159a2:                               ; preds = %dec_label_pc_15995
  %v0_159a2 = call i32* @__errno_location()
  %v2_159a2 = ptrtoint i32* %v0_159a2 to i64
  store i64 %v2_159a2, i64* @rax, align 8
  %v0_159a7 = load i64, i64* %r12.global-to-local, align 8
  %v10_159a7 = icmp eq i64 %v0_159a7, 1
  %v2_159ab = load i32, i32* %v0_159a2, align 4
  %v3_159ab = zext i32 %v2_159ab to i64
  store i64 %v3_159ab, i64* @rbx, align 8
  br i1 %v10_159a7, label %dec_label_pc_159c8, label %dec_label_pc_159af

dec_label_pc_159af:                               ; preds = %dec_label_pc_159a2
  store i64 %v0_159a7, i64* @rdi, align 8
  %v1_159b7 = call i64 @function_156f0(i64 %v0_159a7)
  %v0_159c8.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_159c8

dec_label_pc_159c8:                               ; preds = %dec_label_pc_159af, %dec_label_pc_159a2
  %v0_159c8 = phi i64 [ %v0_159c8.pre, %dec_label_pc_159af ], [ %v3_159ab, %dec_label_pc_159a2 ]
  %v1_159c8 = trunc i64 %v0_159c8 to i32
  store i32 %v1_159c8, i32* %v0_159a2, align 4
  store i64 0, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_159cd

dec_label_pc_159cd:                               ; preds = %dec_label_pc_15a28, %dec_label_pc_159c8, %dec_label_pc_15979
  %v0_159d1 = phi i64 [ %v0_159d1.pre, %dec_label_pc_15a28 ], [ 0, %dec_label_pc_159c8 ], [ %v1_15984, %dec_label_pc_15979 ]
  %v2_159d4 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_159d4, i64* @rbx, align 8
  store i64 %v0_15952, i64* @rbp, align 8
  store i64 %v0_15950, i64* %r12.global-to-local, align 8
  ret i64 %v0_159d1

dec_label_pc_159e0:                               ; preds = %dec_label_pc_15973
  %v1_159e0 = add i64 %v0_15a08, 9
  %v2_159e0 = inttoptr i64 %v1_159e0 to i8*
  store i64 %v1_159e0, i64* @rdi, align 8
  store i64 %v4_15962, i64* @rsi, align 8
  store i64 1, i64* @r12, align 8
  %v6_159ed = call i32 @strcmp(i8* %v2_159e0, i8* nonnull %v3_15962)
  %v5_159f2 = icmp eq i32 %v6_159ed, 0
  %v1_159f4 = icmp eq i1 %v5_159f2, false
  br i1 %v1_159f4, label %dec_label_pc_159e0.dec_label_pc_15979_crit_edge, label %dec_label_pc_159f6

dec_label_pc_159e0.dec_label_pc_15979_crit_edge:  ; preds = %dec_label_pc_159e0
  %v0_15979.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_15979

dec_label_pc_159f6:                               ; preds = %dec_label_pc_159e0
  %v0_159fa = load i64, i64* @r12, align 8
  %v2_159fd = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_159fd, i64* @rbx, align 8
  store i64 %v0_15952, i64* @rbp, align 8
  store i64 %v0_15950, i64* %r12.global-to-local, align 8
  ret i64 %v0_159fa

dec_label_pc_15a08:                               ; preds = %dec_label_pc_15950
  %v1_15a12 = icmp eq i1 %v10_15a08, false
  br i1 %v1_15a12, label %dec_label_pc_15979, label %dec_label_pc_15a18

dec_label_pc_15a18:                               ; preds = %dec_label_pc_15a08
  %v2_15a1f = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_15a1f, i64* @rbx, align 8
  store i64 %v0_15952, i64* @rbp, align 8
  store i64 %v0_15950, i64* %r12.global-to-local, align 8
  ret i64 1

dec_label_pc_15a28:                               ; preds = %dec_label_pc_15995
  call void @tzset()
  %v0_159d1.pre = load i64, i64* %r12.global-to-local, align 8
  br label %dec_label_pc_159cd
}

define i64 @function_15a30(i64 %arg1) local_unnamed_addr {
dec_label_pc_15a30:
  store i64 %arg1, i64* @rdi, align 8
  %v10_15a30 = icmp eq i64 %arg1, 1
  br i1 %v10_15a30, label %dec_label_pc_15a3b, label %dec_label_pc_15a36

dec_label_pc_15a36:                               ; preds = %dec_label_pc_15a30
  %v1_15a36 = call i64 @function_156f0(i64 %arg1)
  ret i64 %v1_15a36

dec_label_pc_15a3b:                               ; preds = %dec_label_pc_15a30
  %v0_15a3b = load i64, i64* @rax, align 8
  ret i64 %v0_15a3b
}

define i64 @function_15a40(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_15a40:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %v0_15a40 = load i64, i64* @r13, align 8
  %v0_15a42 = load i64, i64* @r12, align 8
  %v0_15a44 = load i64, i64* @rbp, align 8
  %v0_15a45 = load i64, i64* @rbx, align 8
  %v0_15a46 = load i64, i64* @rsi, align 8
  store i64 %v0_15a46, i64* @rbp, align 8
  %v1_15a4d = icmp eq i64 %arg1, 0
  br i1 %v1_15a4d, label %dec_label_pc_15ac0, label %dec_label_pc_15a52

dec_label_pc_15a52:                               ; preds = %dec_label_pc_15a40
  %v0_15a52 = load i64, i64* @rdx, align 8
  store i64 %v0_15a52, i64* @r13, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v1_15a58 = call i64 @function_15950(i64 %arg1)
  %v1_15a5d = icmp eq i64 %v1_15a58, 0
  store i64 %v1_15a58, i64* @r12, align 8
  br i1 %v1_15a5d, label %dec_label_pc_15aae, label %dec_label_pc_15a65

dec_label_pc_15a65:                               ; preds = %dec_label_pc_15a52
  %v0_15a65 = load i64, i64* @r13, align 8
  store i64 %v0_15a65, i64* @rsi, align 8
  %v0_15a68 = load i64, i64* @rbp, align 8
  store i64 %v0_15a68, i64* @rdi, align 8
  %v1_15a6b = inttoptr i64 %v0_15a68 to i32*
  %v3_15a6b = inttoptr i64 %v0_15a65 to %tm*
  %v4_15a6b = call %tm* @localtime_r(i32* %v1_15a6b, %tm* %v3_15a6b)
  %v1_15a70 = icmp eq %tm* %v4_15a6b, null
  br i1 %v1_15a70, label %dec_label_pc_15aa0, label %dec_label_pc_15a75

dec_label_pc_15a75:                               ; preds = %dec_label_pc_15a65
  %v0_15a75 = load i64, i64* @r13, align 8
  store i64 %v0_15a75, i64* @rsi, align 8
  %v0_15a78 = load i64, i64* @rbx, align 8
  store i64 %v0_15a78, i64* @rdi, align 8
  %v2_15a7b = call i64 @function_15810(i64 %v0_15a78, i64 %v0_15a75)
  %v4_15a80 = trunc i64 %v2_15a7b to i8
  %v5_15a80 = icmp eq i8 %v4_15a80, 0
  br i1 %v5_15a80, label %dec_label_pc_15aa0, label %dec_label_pc_15a84

dec_label_pc_15a84:                               ; preds = %dec_label_pc_15a75
  %v0_15a84 = load i64, i64* @r12, align 8
  %v10_15a84 = icmp eq i64 %v0_15a84, 1
  %v1_15a88 = icmp eq i1 %v10_15a84, false
  br i1 %v1_15a88, label %dec_label_pc_15ad5, label %dec_label_pc_15a8a

dec_label_pc_15a8a:                               ; preds = %dec_label_pc_15ad5, %dec_label_pc_15a84
  %v0_15a8e = load i64, i64* @r13, align 8
  store i64 %v0_15a45, i64* @rbx, align 8
  store i64 %v0_15a44, i64* @rbp, align 8
  store i64 %v0_15a42, i64* @r12, align 8
  store i64 %v0_15a40, i64* @r13, align 8
  ret i64 %v0_15a8e

dec_label_pc_15aa0:                               ; preds = %dec_label_pc_15a75, %dec_label_pc_15a65
  %v0_15aa0 = load i64, i64* @r12, align 8
  %v10_15aa0 = icmp eq i64 %v0_15aa0, 1
  br i1 %v10_15aa0, label %dec_label_pc_15aae, label %dec_label_pc_15aa6

dec_label_pc_15aa6:                               ; preds = %dec_label_pc_15aa0
  store i64 %v0_15aa0, i64* @rdi, align 8
  %v1_15aa9 = call i64 @function_15720(i64 %v0_15aa0)
  br label %dec_label_pc_15aae

dec_label_pc_15aae:                               ; preds = %dec_label_pc_15ad5, %dec_label_pc_15aa6, %dec_label_pc_15aa0, %dec_label_pc_15a52
  store i64 %v0_15a45, i64* @rbx, align 8
  store i64 %v0_15a44, i64* @rbp, align 8
  store i64 %v0_15a42, i64* @r12, align 8
  store i64 %v0_15a40, i64* @r13, align 8
  ret i64 0

dec_label_pc_15ac0:                               ; preds = %dec_label_pc_15a40
  store i64 %v0_15a46, i64* @rdi, align 8
  %v0_15ac7 = load i64, i64* @rdx, align 8
  store i64 %v0_15ac7, i64* @rsi, align 8
  store i64 %v0_15a44, i64* @rbp, align 8
  %v1_15ad0 = inttoptr i64 %v0_15a46 to i32*
  %v3_15ad0 = inttoptr i64 %v0_15ac7 to %tm*
  %v4_15ad0 = call %tm* @gmtime_r(i32* %v1_15ad0, %tm* %v3_15ad0)
  %v6_15ad0 = ptrtoint %tm* %v4_15ad0 to i64
  ret i64 %v6_15ad0

dec_label_pc_15ad5:                               ; preds = %dec_label_pc_15a84
  store i64 %v0_15a84, i64* @rdi, align 8
  %v1_15ad8 = call i64 @function_15720(i64 %v0_15a84)
  %v4_15add = trunc i64 %v1_15ad8 to i8
  %v5_15add = icmp eq i8 %v4_15add, 0
  %v1_15adf = icmp eq i1 %v5_15add, false
  br i1 %v1_15adf, label %dec_label_pc_15a8a, label %dec_label_pc_15aae
}

define i64 @function_15af0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_15af0:
  %rax.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %tmp21 = call i32 @__decompiler_undefined_function_2()
  %tmp22 = call i32 @__decompiler_undefined_function_2()
  %tmp23 = call i32 @__decompiler_undefined_function_2()
  %tmp24 = call i32 @__decompiler_undefined_function_2()
  %tmp25 = call i32 @__decompiler_undefined_function_2()
  %tmp26 = call i32 @__decompiler_undefined_function_2()
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-96 = alloca i64, align 8
  %v0_15af4 = load i64, i64* @rsi, align 8
  store i64 %v0_15af4, i64* @rbx, align 8
  %v0_15afb = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v1_15b0b = icmp eq i64 %arg1, 0
  br i1 %v1_15b0b, label %dec_label_pc_15c10, label %dec_label_pc_15b14

dec_label_pc_15b14:                               ; preds = %dec_label_pc_15af0
  store i64 %arg1, i64* @rbp, align 8
  %v1_15b17 = call i64 @function_15950(i64 %arg1)
  store i64 %v1_15b17, i64* %rax.global-to-local, align 8
  %v1_15b1c = icmp eq i64 %v1_15b17, 0
  store i64 %v1_15b17, i64* @r12, align 8
  br i1 %v1_15b1c, label %dec_label_pc_15c20, label %dec_label_pc_15b28

dec_label_pc_15b28:                               ; preds = %dec_label_pc_15b14
  %v0_15b28 = load i64, i64* @rbx, align 8
  store i64 %v0_15b28, i64* @rdi, align 8
  %v1_15b2b = inttoptr i64 %v0_15b28 to %tm*
  %v2_15b2b = call i32 @mktime(%tm* %v1_15b2b)
  %v4_15b2b = sext i32 %v2_15b2b to i64
  store i64 %v4_15b2b, i64* %rax.global-to-local, align 8
  %v10_15b30 = icmp eq i32 %v2_15b2b, -1
  store i64 %v4_15b2b, i64* %stack_var_-96, align 8
  br i1 %v10_15b30, label %dec_label_pc_15b90, label %dec_label_pc_15b28.dec_label_pc_15b3b_crit_edge

dec_label_pc_15b28.dec_label_pc_15b3b_crit_edge:  ; preds = %dec_label_pc_15b28
  %v0_15b3b.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_15b3b

dec_label_pc_15b3b:                               ; preds = %dec_label_pc_15b28.dec_label_pc_15b3b_crit_edge, %dec_label_pc_15bfb
  %v0_15b3b = phi i64 [ %v0_15b3b.pre, %dec_label_pc_15b28.dec_label_pc_15b3b_crit_edge ], [ %v0_15ba6, %dec_label_pc_15bfb ]
  store i64 %v0_15b3b, i64* @rsi, align 8
  %v0_15b3e = load i64, i64* @rbp, align 8
  store i64 %v0_15b3e, i64* @rdi, align 8
  %v2_15b41 = call i64 @function_15810(i64 %v0_15b3e, i64 %v0_15b3b)
  store i64 %v2_15b41, i64* %rax.global-to-local, align 8
  %v4_15b46 = trunc i64 %v2_15b41 to i8
  %v5_15b46 = icmp eq i8 %v4_15b46, 0
  %v1_15b48 = icmp eq i1 %v5_15b46, false
  br i1 %v1_15b48, label %dec_label_pc_15b53, label %dec_label_pc_15b4a

dec_label_pc_15b4a:                               ; preds = %dec_label_pc_15b3b
  store i64 -1, i64* %stack_var_-96, align 8
  br label %dec_label_pc_15b53

dec_label_pc_15b53:                               ; preds = %dec_label_pc_15bfb, %dec_label_pc_15bf3, %dec_label_pc_15b90, %dec_label_pc_15b4a, %dec_label_pc_15b3b
  %v0_15b53 = load i64, i64* @r12, align 8
  %v10_15b53 = icmp eq i64 %v0_15b53, 1
  br i1 %v10_15b53, label %dec_label_pc_15b69, label %dec_label_pc_15b59

dec_label_pc_15b59:                               ; preds = %dec_label_pc_15b53
  store i64 %v0_15b53, i64* @rdi, align 8
  %v1_15b5c = call i64 @function_15720(i64 %v0_15b53)
  store i64 %v1_15b5c, i64* %rax.global-to-local, align 8
  %v4_15b61 = trunc i64 %v1_15b5c to i8
  %v5_15b61 = icmp eq i8 %v4_15b61, 0
  br i1 %v5_15b61, label %dec_label_pc_15c20, label %dec_label_pc_15b69

dec_label_pc_15b69:                               ; preds = %dec_label_pc_15b59, %dec_label_pc_15b53
  %v3_15b69 = load i64, i64* %stack_var_-96, align 8
  store i64 %v3_15b69, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_15b6e

dec_label_pc_15b6e:                               ; preds = %dec_label_pc_15c20, %dec_label_pc_15c10, %dec_label_pc_15b69
  store i64 %v0_15afb, i64* @rcx, align 8
  %v1_15b73 = call i64 @__readfsqword(i64 40)
  %v2_15b73 = xor i64 %v1_15b73, %v0_15afb
  %v3_15b73 = icmp eq i64 %v2_15b73, 0
  store i64 %v2_15b73, i64* @rcx, align 8
  %v1_15b7c = icmp eq i1 %v3_15b73, false
  br i1 %v1_15b7c, label %dec_label_pc_15c2c, label %dec_label_pc_15b82

dec_label_pc_15b82:                               ; preds = %dec_label_pc_15b6e
  %v0_15b8a = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_15b8a

dec_label_pc_15b90:                               ; preds = %dec_label_pc_15b28
  %v2_15b90 = ptrtoint i32* %stack_var_-88 to i64
  %tmp39 = bitcast i32* %stack_var_-88 to %tm*
  store i64 %v2_15b90, i64* @rsi, align 8
  %v2_15b95 = ptrtoint i64* %stack_var_-96 to i64
  %tmp40 = bitcast i64* %stack_var_-96 to i32*
  store i64 %v2_15b95, i64* @rdi, align 8
  %v6_15b9a = call %tm* @localtime_r(i32* %tmp40, %tm* %tmp39)
  %v8_15b9a = ptrtoint %tm* %v6_15b9a to i64
  store i64 %v8_15b9a, i64* %rax.global-to-local, align 8
  %v1_15b9f = icmp eq %tm* %v6_15b9a, null
  br i1 %v1_15b9f, label %dec_label_pc_15b53, label %dec_label_pc_15ba4

dec_label_pc_15ba4:                               ; preds = %dec_label_pc_15b90
  %v2_15ba4 = load i32, i32* bitcast (i64* @rsi to i32*), align 8
  %v3_15ba4 = zext i32 %v2_15ba4 to i64
  store i64 %v3_15ba4, i64* %rax.global-to-local, align 8
  %v0_15ba6 = load i64, i64* @rbx, align 8
  %v1_15ba6 = add i64 %v0_15ba6, 4
  %v2_15ba6 = inttoptr i64 %v1_15ba6 to i32*
  %v3_15ba6 = load i32, i32* %v2_15ba6, align 4
  %v5_15ba9 = load i32, i32* %stack_var_-88, align 4
  %v8_15ba9 = xor i32 %v5_15ba9, %v2_15ba4
  %v6_15bad = xor i32 %v3_15ba6, %tmp26
  %v13_15bad = zext i32 %v6_15bad to i64
  store i64 %v13_15bad, i64* @rdx, align 8
  %v4_15bb1 = zext i32 %tmp25 to i64
  store i64 %v4_15bb1, i64* @rcx, align 8
  %v4_15bb5 = or i32 %v8_15ba9, %v6_15bad
  %v11_15bb5 = zext i32 %v4_15bb5 to i64
  store i64 %v11_15bb5, i64* %rax.global-to-local, align 8
  %v1_15bb7 = add i64 %v0_15ba6, 8
  %v2_15bb7 = inttoptr i64 %v1_15bb7 to i32*
  %v3_15bb7 = load i32, i32* %v2_15bb7, align 4
  %v6_15bba = xor i32 %v3_15bb7, %tmp24
  %v13_15bba = zext i32 %v6_15bba to i64
  store i64 %v13_15bba, i64* @rdx, align 8
  %v4_15bbe = or i32 %v6_15bba, %v4_15bb5
  %v11_15bbe = zext i32 %v4_15bbe to i64
  store i64 %v11_15bbe, i64* %rax.global-to-local, align 8
  %v1_15bc0 = add i64 %v0_15ba6, 12
  %v2_15bc0 = inttoptr i64 %v1_15bc0 to i32*
  %v3_15bc0 = load i32, i32* %v2_15bc0, align 4
  %v6_15bc3 = xor i32 %v3_15bc0, %tmp23
  %v13_15bc3 = zext i32 %v6_15bc3 to i64
  store i64 %v13_15bc3, i64* @rdx, align 8
  %v4_15bc7 = or i32 %v6_15bc3, %v4_15bbe
  %v11_15bc7 = zext i32 %v4_15bc7 to i64
  store i64 %v11_15bc7, i64* %rax.global-to-local, align 8
  %v1_15bc9 = add i64 %v0_15ba6, 16
  %v2_15bc9 = inttoptr i64 %v1_15bc9 to i32*
  %v3_15bc9 = load i32, i32* %v2_15bc9, align 4
  %v6_15bcc = xor i32 %v3_15bc9, %tmp22
  %v13_15bcc = zext i32 %v6_15bcc to i64
  store i64 %v13_15bcc, i64* @rdx, align 8
  %v4_15bd0 = or i32 %v6_15bcc, %v4_15bc7
  %v11_15bd0 = zext i32 %v4_15bd0 to i64
  store i64 %v11_15bd0, i64* %rax.global-to-local, align 8
  %v1_15bd2 = add i64 %v0_15ba6, 20
  %v2_15bd2 = inttoptr i64 %v1_15bd2 to i32*
  %v3_15bd2 = load i32, i32* %v2_15bd2, align 4
  %v6_15bd5 = xor i32 %v3_15bd2, %tmp21
  %v13_15bd5 = zext i32 %v6_15bd5 to i64
  store i64 %v13_15bd5, i64* @rdx, align 8
  %v4_15bd9 = or i32 %v6_15bd5, %v4_15bd0
  %v11_15bd9 = zext i32 %v4_15bd9 to i64
  store i64 %v11_15bd9, i64* %rax.global-to-local, align 8
  %v1_15bdb = add i64 %v0_15ba6, 32
  %v2_15bdb = inttoptr i64 %v1_15bdb to i32*
  %v3_15bdb = load i32, i32* %v2_15bdb, align 4
  %v4_15bdb = zext i32 %v3_15bdb to i64
  store i64 %v4_15bdb, i64* @rdx, align 8
  %v5_15bde = icmp eq i32 %v3_15bdb, 0
  %v1_15be0 = zext i1 %v5_15bde to i64
  %v4_15be0 = and i64 %v2_15b95, -256
  %v5_15be0 = or i64 %v1_15be0, %v4_15be0
  store i64 %v5_15be0, i64* @rdi, align 8
  %v5_15be4 = icmp eq i32 %tmp25, 0
  %v6_15be4 = icmp slt i32 %tmp25, 0
  %v1_15be6 = zext i1 %v5_15be4 to i64
  %v4_15be6 = and i64 %v2_15b90, -256
  %v5_15be6 = or i64 %v1_15be6, %v4_15be6
  store i64 %v5_15be6, i64* @rsi, align 8
  %v14_15bea = icmp eq i1 %v5_15bde, %v5_15be4
  br i1 %v14_15bea, label %dec_label_pc_15bfb, label %dec_label_pc_15bef

dec_label_pc_15bef:                               ; preds = %dec_label_pc_15ba4
  %v6_15bef = icmp slt i32 %v3_15bdb, 0
  br i1 %v6_15bef, label %dec_label_pc_15bfb, label %dec_label_pc_15bf3

dec_label_pc_15bf3:                               ; preds = %dec_label_pc_15bef
  %v1_15bf5 = icmp eq i1 %v6_15be4, false
  br i1 %v1_15bf5, label %dec_label_pc_15b53, label %dec_label_pc_15bfb

dec_label_pc_15bfb:                               ; preds = %dec_label_pc_15bf3, %dec_label_pc_15bef, %dec_label_pc_15ba4
  %v5_15bfb = icmp eq i32 %v4_15bd9, 0
  br i1 %v5_15bfb, label %dec_label_pc_15b3b, label %dec_label_pc_15b53

dec_label_pc_15c10:                               ; preds = %dec_label_pc_15af0
  %v0_15c10 = load i64, i64* @rsi, align 8
  store i64 %v0_15c10, i64* @rdi, align 8
  %v1_15c13 = inttoptr i64 %v0_15c10 to %tm*
  %v2_15c13 = call i32 @timegm(%tm* %v1_15c13)
  %v4_15c13 = sext i32 %v2_15c13 to i64
  store i64 %v4_15c13, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_15b6e

dec_label_pc_15c20:                               ; preds = %dec_label_pc_15b59, %dec_label_pc_15b14
  store i64 -1, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_15b6e

dec_label_pc_15c2c:                               ; preds = %dec_label_pc_15b6e
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  ret i64 ptrtoint (i32* @0 to i64)
}

define i64 @function_15c40(i32 %arg1) local_unnamed_addr {
dec_label_pc_15c40:
  %tmp = sext i32 %arg1 to i64
  store i64 %tmp, i64* @rdi, align 8
  %v0_15c40 = load i64, i64* @rdi, align 8
  %v1_15c40 = trunc i64 %v0_15c40 to i32
  %v12_15c40 = icmp eq i32 %v1_15c40, 22
  br i1 %v12_15c40, label %dec_label_pc_15c65, label %dec_label_pc_15c45

dec_label_pc_15c45:                               ; preds = %dec_label_pc_15c40
  %v9_15c45 = icmp sgt i32 %v1_15c40, 22
  br i1 %v9_15c45, label %dec_label_pc_15c47, label %dec_label_pc_15c60

dec_label_pc_15c47:                               ; preds = %dec_label_pc_15c45
  %v11_15c47 = icmp eq i32 %v1_15c40, 38
  br i1 %v11_15c47, label %dec_label_pc_15c65, label %dec_label_pc_15c4c

dec_label_pc_15c4c:                               ; preds = %dec_label_pc_15c47
  %v11_15c4c = icmp eq i32 %v1_15c40, 95
  br i1 %v11_15c4c, label %dec_label_pc_15c65, label %dec_label_pc_15c51

dec_label_pc_15c51:                               ; preds = %dec_label_pc_15c60, %dec_label_pc_15c4c
  ret i64 1

dec_label_pc_15c60:                               ; preds = %dec_label_pc_15c45
  %v10_15c60 = icmp eq i32 %v1_15c40, 16
  %v1_15c63 = icmp eq i1 %v10_15c60, false
  br i1 %v1_15c63, label %dec_label_pc_15c51, label %dec_label_pc_15c65

dec_label_pc_15c65:                               ; preds = %dec_label_pc_15c60, %dec_label_pc_15c4c, %dec_label_pc_15c47, %dec_label_pc_15c40
  ret i64 0
}

define i64 @function_15c70(i64 %arg1) local_unnamed_addr {
dec_label_pc_15c70:
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_15c70 = load i64, i64* @r12, align 8
  %v0_15c72 = load i64, i64* @rbp, align 8
  store i64 %arg1, i64* @rbp, align 8
  %v0_15c76 = load i64, i64* @rbx, align 8
  store i64 %v0_15c76, i64* %stack_var_-24, align 8
  %v1_15c77 = inttoptr i64 %arg1 to %_IO_FILE*
  %v2_15c77 = call i32 @__fpending(%_IO_FILE* %v1_15c77)
  %v4_15c77 = sext i32 %v2_15c77 to i64
  %v2_15c7c = load i32, i32* bitcast (i64* @rdi to i32*), align 8
  %v3_15c7c = zext i32 %v2_15c7c to i64
  store i64 %v3_15c7c, i64* @rbx, align 8
  %v0_15c7f = load i64, i64* @rbp, align 8
  store i64 %v0_15c7f, i64* @rdi, align 8
  store i64 %v4_15c77, i64* @r12, align 8
  %v1_15c85 = load i64, i64* @rsi, align 8
  %v2_15c85 = call i64 @function_161a0(i64 %v0_15c7f, i64 %v1_15c85)
  %v0_15c8a = load i64, i64* @rbx, align 8
  %v2_15c8a = and i64 %v0_15c8a, 32
  %v3_15c8a = icmp eq i64 %v2_15c8a, 0
  %v1_15c8f = icmp eq i1 %v3_15c8a, false
  %v4_15ca8 = trunc i64 %v2_15c85 to i32
  %v5_15ca8 = icmp eq i32 %v4_15ca8, 0
  br i1 %v1_15c8f, label %dec_label_pc_15ca8, label %dec_label_pc_15c91

dec_label_pc_15c91:                               ; preds = %dec_label_pc_15c70
  br i1 %v5_15ca8, label %dec_label_pc_15c9f, label %dec_label_pc_15c95

dec_label_pc_15c95:                               ; preds = %dec_label_pc_15c91
  %v1_15c95 = icmp eq i32 %v2_15c77, 0
  br i1 %v1_15c95, label %dec_label_pc_15cd8, label %dec_label_pc_15c9f

dec_label_pc_15c9f:                               ; preds = %dec_label_pc_15c95, %dec_label_pc_15c91
  %v0_15ca3 = phi i64 [ 4294967295, %dec_label_pc_15c95 ], [ %v2_15c85, %dec_label_pc_15c91 ]
  %v2_15c9f = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_15c9f, i64* @rbx, align 8
  store i64 %v0_15c72, i64* @rbp, align 8
  store i64 %v0_15c70, i64* @r12, align 8
  ret i64 %v0_15ca3

dec_label_pc_15ca8:                               ; preds = %dec_label_pc_15c70
  %v1_15caa = icmp eq i1 %v5_15ca8, false
  br i1 %v1_15caa, label %dec_label_pc_15cc8, label %dec_label_pc_15cac

dec_label_pc_15cac:                               ; preds = %dec_label_pc_15ca8
  %v0_15cac = call i32* @__errno_location()
  store i32 0, i32* %v0_15cac, align 4
  %v2_15cbc = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_15cbc, i64* @rbx, align 8
  store i64 %v0_15c72, i64* @rbp, align 8
  store i64 %v0_15c70, i64* @r12, align 8
  ret i64 4294967295

dec_label_pc_15cc8:                               ; preds = %dec_label_pc_15ca8
  %v2_15cc8 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_15cc8, i64* @rbx, align 8
  store i64 %v0_15c72, i64* @rbp, align 8
  store i64 %v0_15c70, i64* @r12, align 8
  ret i64 4294967295

dec_label_pc_15cd8:                               ; preds = %dec_label_pc_15c95
  %v0_15cd8 = call i32* @__errno_location()
  %v2_15cd8 = ptrtoint i32* %v0_15cd8 to i64
  %v2_15cdd = load i32, i32* %v0_15cd8, align 4
  %v12_15cdd = icmp eq i32 %v2_15cdd, 9
  %v2_15ce0 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_15ce0, i64* @rbx, align 8
  store i64 %v0_15c72, i64* @rbp, align 8
  store i64 %v0_15c70, i64* @r12, align 8
  %v1_15ce4 = icmp eq i1 %v12_15cdd, false
  %v2_15ce4 = zext i1 %v1_15ce4 to i64
  %v4_15ce4 = and i64 %v2_15cd8, 4294967040
  %v5_15ce4 = or i64 %v2_15ce4, %v4_15ce4
  %v2_15cea = sub nsw i64 0, %v5_15ce4
  %v13_15cea = and i64 %v2_15cea, 4294967295
  ret i64 %v13_15cea
}

define i64 @function_15cf0(i64 %arg1) local_unnamed_addr {
dec_label_pc_15cf0:
  store i64 %arg1, i64* @rdi, align 8
  %v1_15cf4 = call i64 @function_cdb0(i64 %arg1)
  %v1_15cf9 = icmp eq i64 %v1_15cf4, 0
  br i1 %v1_15cf9, label %dec_label_pc_15d03, label %dec_label_pc_15cfe

dec_label_pc_15cfe:                               ; preds = %dec_label_pc_15cf0
  ret i64 %v1_15cf4

dec_label_pc_15d03:                               ; preds = %dec_label_pc_15cf0
  %v1_15d03 = call i64 @function_146d0(i64 %arg1)
  unreachable
}

define i64 @function_15d10(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_15d10:
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %tmp = trunc i64 %arg1 to i8
  %sext = mul i64 %arg1, 72057594037927936
  %v3_15d10 = sdiv i64 %sext, 72057594037927936
  store i64 %v3_15d10, i64* @rcx, align 8
  %v5_15d14 = icmp eq i8 %tmp, 0
  br i1 %v5_15d14, label %dec_label_pc_15d40, label %dec_label_pc_15d18

dec_label_pc_15d18:                               ; preds = %dec_label_pc_15d10
  br label %dec_label_pc_15d20

dec_label_pc_15d20:                               ; preds = %dec_label_pc_15d20, %dec_label_pc_15d18
  %v1_15d28 = phi i64 [ %v3_15d2b, %dec_label_pc_15d20 ], [ %v3_15d10, %dec_label_pc_15d18 ]
  %v0_15d24 = phi i64 [ %v1_15d24, %dec_label_pc_15d20 ], [ %arg1, %dec_label_pc_15d18 ]
  %v0_15d20 = phi i64 [ %v2_15d28, %dec_label_pc_15d20 ], [ 0, %dec_label_pc_15d18 ]
  %v1_15d20 = mul i64 %v0_15d20, 512
  %v2_15d20 = udiv i64 %v0_15d20, 36028797018963968
  %v3_15d20 = or i64 %v2_15d20, %v1_15d20
  %v1_15d24 = add i64 %v0_15d24, 1
  store i64 %v1_15d24, i64* @rdi, align 8
  %v2_15d28 = add i64 %v3_15d20, %v1_15d28
  %v1_15d2b = inttoptr i64 %v1_15d24 to i8*
  %v2_15d2b = load i8, i8* %v1_15d2b, align 1
  %v3_15d2b = sext i8 %v2_15d2b to i64
  store i64 %v3_15d2b, i64* @rcx, align 8
  %v5_15d2f = icmp eq i8 %v2_15d2b, 0
  %v1_15d31 = icmp eq i1 %v5_15d2f, false
  br i1 %v1_15d31, label %dec_label_pc_15d20, label %dec_label_pc_15d33

dec_label_pc_15d33:                               ; preds = %dec_label_pc_15d20
  %tmp7 = urem i64 %v2_15d28, %arg2
  store i64 %tmp7, i64* @rdx, align 8
  ret i64 %tmp7

dec_label_pc_15d40:                               ; preds = %dec_label_pc_15d10
  store i64 0, i64* @rdx, align 8
  ret i64 0
}

define i64 @function_15d50() local_unnamed_addr {
dec_label_pc_15d50:
  %r12.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %stack_var_-184 = alloca i64, align 8
  %stack_var_-120 = alloca i64, align 8
  %stack_var_-216 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  store i64 14, i64* @rdi, align 8
  %v0_15d5b = load i64, i64* @r12, align 8
  %v0_15d5d = load i64, i64* @rbp, align 8
  %v0_15d5e = load i64, i64* @rbx, align 8
  store i64 %v0_15d5e, i64* %stack_var_-48, align 8
  %v0_15d66 = call i64 @__readfsqword(i64 40)
  store i64 0, i64* %rax.global-to-local, align 8
  %v3_15d79 = call i8* @nl_langinfo(i32 14)
  %v4_15d79 = ptrtoint i8* %v3_15d79 to i64
  %v0_15d7e = load i8*, i8** @global_var_221558.502, align 8
  %v1_15d7e = ptrtoint i8* %v0_15d7e to i64
  store i64 %v1_15d7e, i64* %r15.global-to-local, align 8
  %v1_15d85 = icmp eq i8* %v3_15d79, null
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* %rax.global-to-local, align 8
  %v3_15d92 = select i1 %v1_15d85, i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64 %v4_15d79
  store i64 %v3_15d92, i64* @rbx, align 8
  %v1_15d96 = icmp eq i8* %v0_15d7e, null
  %v1_15d99 = icmp eq i1 %v1_15d96, false
  br i1 %v1_15d99, label %dec_label_pc_15dba.preheader, label %dec_label_pc_15e30

dec_label_pc_15dba.preheader:                     ; preds = %dec_label_pc_15d50, %dec_label_pc_15e7d
  %v0_15dba14 = phi i64 [ %v1_15d7e, %dec_label_pc_15d50 ], [ %v0_15e7d, %dec_label_pc_15e7d ]
  %v1_15dba15 = inttoptr i64 %v0_15dba14 to i8*
  %v2_15dba16 = load i8, i8* %v1_15dba15, align 1
  %v3_15dba17 = zext i8 %v2_15dba16 to i64
  store i64 %v3_15dba17, i64* %rbp.global-to-local, align 8
  %v5_15dbe18 = icmp eq i8 %v2_15dba16, 0
  br i1 %v5_15dbe18, label %dec_label_pc_15dec.loopexit, label %dec_label_pc_15dc3

dec_label_pc_15da0:                               ; preds = %dec_label_pc_15dd2, %dec_label_pc_15dd8
  %v1_15da0 = inttoptr i64 %v0_15da0.pre to i8*
  store i64 %v0_15da0.pre, i64* @rdi, align 8
  %v3_15da3 = call i32 @strlen(i8* %v1_15da0)
  %v5_15da3 = sext i32 %v3_15da3 to i64
  store i64 %v5_15da3, i64* %rax.global-to-local, align 8
  %v0_15da8 = load i64, i64* %r15.global-to-local, align 8
  %v3_15da8 = add nsw i64 %v5_15da3, 1
  %v4_15da8 = add i64 %v3_15da8, %v0_15da8
  store i64 %v4_15da8, i64* %rbp.global-to-local, align 8
  %v1_15dad = inttoptr i64 %v4_15da8 to i8*
  store i64 %v4_15da8, i64* @rdi, align 8
  %v3_15db0 = call i32 @strlen(i8* %v1_15dad)
  %v5_15db0 = sext i32 %v3_15db0 to i64
  store i64 %v5_15db0, i64* %rax.global-to-local, align 8
  %v3_15db5 = add nsw i64 %v5_15db0, 1
  %v4_15db5 = add i64 %v3_15db5, %v4_15da8
  store i64 %v4_15db5, i64* %r15.global-to-local, align 8
  %v1_15dba = inttoptr i64 %v4_15db5 to i8*
  %v2_15dba = load i8, i8* %v1_15dba, align 1
  %v3_15dba = zext i8 %v2_15dba to i64
  store i64 %v3_15dba, i64* %rbp.global-to-local, align 8
  %v5_15dbe = icmp eq i8 %v2_15dba, 0
  br i1 %v5_15dbe, label %dec_label_pc_15dec.loopexit, label %dec_label_pc_15dc3

dec_label_pc_15dc3:                               ; preds = %dec_label_pc_15dba.preheader, %dec_label_pc_15da0
  %v0_15dc3 = phi i64 [ %v4_15db5, %dec_label_pc_15da0 ], [ %v0_15dba14, %dec_label_pc_15dba.preheader ]
  %v1_15dc3 = inttoptr i64 %v0_15dc3 to i8*
  store i64 %v0_15dc3, i64* @rsi, align 8
  %v0_15dc6 = load i64, i64* @rbx, align 8
  %v1_15dc6 = inttoptr i64 %v0_15dc6 to i8*
  store i64 %v0_15dc6, i64* @rdi, align 8
  %v6_15dc9 = call i32 @strcmp(i8* %v1_15dc6, i8* %v1_15dc3)
  %v8_15dc9 = sext i32 %v6_15dc9 to i64
  store i64 %v8_15dc9, i64* %rax.global-to-local, align 8
  %v5_15dce = icmp eq i32 %v6_15dc9, 0
  br i1 %v5_15dce, label %dec_label_pc_15dc3.dec_label_pc_15ddf_crit_edge, label %dec_label_pc_15dd2

dec_label_pc_15dc3.dec_label_pc_15ddf_crit_edge:  ; preds = %dec_label_pc_15dc3
  %v0_15ddf.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_15ddf

dec_label_pc_15dd2:                               ; preds = %dec_label_pc_15dc3
  %v0_15dd2 = load i64, i64* %rbp.global-to-local, align 8
  %v1_15dd2 = trunc i64 %v0_15dd2 to i8
  %v11_15dd2 = icmp eq i8 %v1_15dd2, 42
  %v1_15dd6 = icmp eq i1 %v11_15dd2, false
  %v0_15da0.pre = load i64, i64* %r15.global-to-local, align 8
  br i1 %v1_15dd6, label %dec_label_pc_15da0, label %dec_label_pc_15dd8

dec_label_pc_15dd8:                               ; preds = %dec_label_pc_15dd2
  %v1_15dd8 = add i64 %v0_15da0.pre, 1
  %v2_15dd8 = inttoptr i64 %v1_15dd8 to i8*
  %v3_15dd8 = load i8, i8* %v2_15dd8, align 1
  %v10_15dd8 = icmp eq i8 %v3_15dd8, 0
  %v1_15ddd = icmp eq i1 %v10_15dd8, false
  br i1 %v1_15ddd, label %dec_label_pc_15da0, label %dec_label_pc_15ddf

dec_label_pc_15ddf:                               ; preds = %dec_label_pc_15dd8, %dec_label_pc_15dc3.dec_label_pc_15ddf_crit_edge
  %v0_15ddf = phi i64 [ %v0_15ddf.pre, %dec_label_pc_15dc3.dec_label_pc_15ddf_crit_edge ], [ %v0_15da0.pre, %dec_label_pc_15dd8 ]
  %v1_15ddf = inttoptr i64 %v0_15ddf to i8*
  store i64 %v0_15ddf, i64* @rdi, align 8
  %v3_15de2 = call i32 @strlen(i8* %v1_15ddf)
  %v5_15de2 = sext i32 %v3_15de2 to i64
  store i64 %v5_15de2, i64* %rax.global-to-local, align 8
  %v0_15de7 = load i64, i64* %r15.global-to-local, align 8
  %v3_15de7 = add nsw i64 %v5_15de2, 1
  %v4_15de7 = add i64 %v3_15de7, %v0_15de7
  br label %dec_label_pc_15dec

dec_label_pc_15dec.loopexit:                      ; preds = %dec_label_pc_15da0, %dec_label_pc_15dba.preheader
  %v0_15dec.pre = load i64, i64* @rbx, align 8
  br label %dec_label_pc_15dec

dec_label_pc_15dec:                               ; preds = %dec_label_pc_15dec.loopexit, %dec_label_pc_15ddf
  %v1_15df6 = phi i64 [ %v0_15dec.pre, %dec_label_pc_15dec.loopexit ], [ %v4_15de7, %dec_label_pc_15ddf ]
  %v1_15dec = inttoptr i64 %v1_15df6 to i8*
  %v2_15dec = load i8, i8* %v1_15dec, align 1
  %v9_15dec = icmp eq i8 %v2_15dec, 0
  store i64 ptrtoint ([6 x i8]* @global_var_1b163.503 to i64), i64* %rax.global-to-local, align 8
  %v3_15df6 = select i1 %v9_15dec, i64 ptrtoint ([6 x i8]* @global_var_1b163.503 to i64), i64 %v1_15df6
  store i64 %v3_15df6, i64* @rbx, align 8
  store i64 %v0_15d66, i64* @rcx, align 8
  %v1_15e02 = call i64 @__readfsqword(i64 40)
  %v2_15e02 = xor i64 %v1_15e02, %v0_15d66
  %v3_15e02 = icmp eq i64 %v2_15e02, 0
  store i64 %v2_15e02, i64* @rcx, align 8
  %v0_15e0b = load i64, i64* @rbx, align 8
  store i64 %v0_15e0b, i64* %rax.global-to-local, align 8
  %v1_15e0e = icmp eq i1 %v3_15e02, false
  br i1 %v1_15e0e, label %dec_label_pc_1618c, label %dec_label_pc_15e14

dec_label_pc_15e14:                               ; preds = %dec_label_pc_15dec
  %v2_15e1b = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_15e1b, i64* @rbx, align 8
  store i64 %v0_15d5d, i64* %rbp.global-to-local, align 8
  store i64 %v0_15d5b, i64* %r12.global-to-local, align 8
  ret i64 %v0_15e0b

dec_label_pc_15e30:                               ; preds = %dec_label_pc_15d50
  store i64 ptrtoint ([16 x i8]* @global_var_1b183.504 to i64), i64* @rdi, align 8
  %v3_15e37 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_1b183.504, i64 0, i64 0))
  %v4_15e37 = ptrtoint i8* %v3_15e37 to i64
  store i64 %v4_15e37, i64* %rax.global-to-local, align 8
  %v2_15e3c = icmp eq i8* %v3_15e37, null
  store i64 %v4_15e37, i64* @r13, align 8
  br i1 %v2_15e3c, label %dec_label_pc_15e90, label %dec_label_pc_15e44

dec_label_pc_15e44:                               ; preds = %dec_label_pc_15e30
  %v3_15e44 = load i8, i8* %v3_15e37, align 1
  %v10_15e44 = icmp eq i8 %v3_15e44, 0
  br i1 %v10_15e44, label %dec_label_pc_15e90, label %dec_label_pc_15e49

dec_label_pc_15e49:                               ; preds = %dec_label_pc_15e44
  store i64 %v4_15e37, i64* @rdi, align 8
  %v3_15e4c = call i32 @strlen(i8* nonnull %v3_15e37)
  %v5_15e4c = sext i32 %v3_15e4c to i64
  store i64 %v5_15e4c, i64* %rax.global-to-local, align 8
  %v1_15e51 = icmp eq i32 %v3_15e4c, 0
  store i64 %v5_15e4c, i64* @r12, align 8
  store i64 %v5_15e4c, i64* @r14, align 8
  %v1_15e5a = icmp eq i1 %v1_15e51, false
  br i1 %v1_15e5a, label %dec_label_pc_1617b, label %dec_label_pc_15e65

dec_label_pc_15e65:                               ; preds = %dec_label_pc_15e49, %dec_label_pc_16183
  %storemerge10 = phi i64 [ %v1_16183, %dec_label_pc_16183 ], [ 14, %dec_label_pc_15e49 ]
  store i64 %storemerge10, i64* @rdi, align 8
  %v1_15e65 = trunc i64 %storemerge10 to i32
  %v2_15e65 = call i64* @malloc(i32 %v1_15e65)
  %v3_15e65 = ptrtoint i64* %v2_15e65 to i64
  store i64 %v3_15e65, i64* %rax.global-to-local, align 8
  %v1_15e6a = icmp eq i64* %v2_15e65, null
  store i64 %v3_15e65, i64* @rbp, align 8
  %v1_15e70 = icmp eq i1 %v1_15e6a, false
  br i1 %v1_15e70, label %dec_label_pc_15f18, label %dec_label_pc_15e76

dec_label_pc_15e76:                               ; preds = %dec_label_pc_15ea8, %dec_label_pc_15e65
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* %r15.global-to-local, align 8
  br label %dec_label_pc_15e7d

dec_label_pc_15e7d:                               ; preds = %dec_label_pc_15f0b, %dec_label_pc_15e76
  %v0_15e7d = phi i64 [ %v0_15e7d.pre, %dec_label_pc_15f0b ], [ ptrtoint (i8** @global_var_17c4a.6 to i64), %dec_label_pc_15e76 ]
  %v1_15e7d = inttoptr i64 %v0_15e7d to i8*
  store i8* %v1_15e7d, i8** @global_var_221558.502, align 8
  br label %dec_label_pc_15dba.preheader

dec_label_pc_15e90:                               ; preds = %dec_label_pc_15e44, %dec_label_pc_15e30
  store i64 ptrtoint ([26 x i8]* @global_var_1b169.505 to i64), i64* @r13, align 8
  store i64 40, i64* @rdi, align 8
  store i64 26, i64* @r12, align 8
  store i64 25, i64* @r14, align 8
  br label %dec_label_pc_15ea8

dec_label_pc_15ea8:                               ; preds = %dec_label_pc_16191, %dec_label_pc_15e90
  %v0_15ea8 = phi i64 [ %v1_16191, %dec_label_pc_16191 ], [ 40, %dec_label_pc_15e90 ]
  %v1_15ea8 = trunc i64 %v0_15ea8 to i32
  %v2_15ea8 = call i64* @malloc(i32 %v1_15ea8)
  %v3_15ea8 = ptrtoint i64* %v2_15ea8 to i64
  store i64 %v3_15ea8, i64* %rax.global-to-local, align 8
  %v1_15ead = icmp eq i64* %v2_15ea8, null
  store i64 %v3_15ea8, i64* @rbp, align 8
  br i1 %v1_15ead, label %dec_label_pc_15e76, label %dec_label_pc_15eb5

dec_label_pc_15eb5:                               ; preds = %dec_label_pc_15ea8
  %v0_15eb5 = load i64, i64* @r14, align 8
  store i64 %v0_15eb5, i64* @rdx, align 8
  %v0_15eb8 = load i64, i64* @r13, align 8
  store i64 %v0_15eb8, i64* @rsi, align 8
  store i64 %v3_15ea8, i64* @rdi, align 8
  %v3_15ebe = inttoptr i64 %v0_15eb8 to i64*
  %v5_15ebe = trunc i64 %v0_15eb5 to i32
  %v6_15ebe = call i64* @memcpy(i64* nonnull %v2_15ea8, i64* %v3_15ebe, i32 %v5_15ebe)
  %v8_15ebe = ptrtoint i64* %v6_15ebe to i64
  store i64 %v8_15ebe, i64* %rax.global-to-local, align 8
  %v0_15ec3 = load i64, i64* @rbp, align 8
  %v1_15ec3 = load i64, i64* @r14, align 8
  %v3_15ec3 = add i64 %v1_15ec3, %v0_15ec3
  %v4_15ec3 = inttoptr i64 %v3_15ec3 to i8*
  store i8 47, i8* %v4_15ec3, align 1
  br label %dec_label_pc_15ec9

dec_label_pc_15ec9:                               ; preds = %dec_label_pc_15f18, %dec_label_pc_15eb5
  %v0_15ec9 = load i64, i64* @r12, align 8
  %v1_15ec9 = load i64, i64* @rbp, align 8
  %v2_15ec9 = add i64 %v1_15ec9, %v0_15ec9
  store i64 %v2_15ec9, i64* %r12.global-to-local, align 8
  store i64 131072, i64* @rsi, align 8
  %v2_15edb = inttoptr i64 %v2_15ec9 to i64*
  store i64 3347411969557751907, i64* %v2_15edb, align 8
  store i64 115, i64* %rax.global-to-local, align 8
  %v0_15ee4 = load i64, i64* %r12.global-to-local, align 8
  %v1_15ee4 = add i64 %v0_15ee4, 8
  %v2_15ee4 = inttoptr i64 %v1_15ee4 to i32*
  store i32 1634298977, i32* %v2_15ee4, align 4
  %v0_15eed = load i64, i64* %rax.global-to-local, align 8
  %v1_15eed = trunc i64 %v0_15eed to i16
  %v2_15eed = load i64, i64* %r12.global-to-local, align 8
  %v3_15eed = add i64 %v2_15eed, 12
  %v4_15eed = inttoptr i64 %v3_15eed to i16*
  store i16 %v1_15eed, i16* %v4_15eed, align 2
  %v0_15ef3 = load i64, i64* @rbp, align 8
  %v1_15ef3 = inttoptr i64 %v0_15ef3 to i8*
  store i64 %v0_15ef3, i64* @rdi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v6_15ef8 = call i32 (i8*, i32, ...) @open(i8* %v1_15ef3, i32 131072)
  %v8_15ef8 = sext i32 %v6_15ef8 to i64
  store i64 %v8_15ef8, i64* %rax.global-to-local, align 8
  %v6_15efd = icmp slt i32 %v6_15ef8, 0
  store i64 %v8_15ef8, i64* @r12, align 8
  %v1_15f02 = icmp eq i1 %v6_15efd, false
  br i1 %v1_15f02, label %dec_label_pc_15f28, label %dec_label_pc_15f04

dec_label_pc_15f04:                               ; preds = %dec_label_pc_16123, %dec_label_pc_160cd, %dec_label_pc_15ec9
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* %r15.global-to-local, align 8
  br label %dec_label_pc_15f0b

dec_label_pc_15f0b:                               ; preds = %dec_label_pc_1615f, %dec_label_pc_160e2, %dec_label_pc_15f04
  %v0_15f0b = load i64, i64* @rbp, align 8
  store i64 %v0_15f0b, i64* @rdi, align 8
  %v1_15f0e = inttoptr i64 %v0_15f0b to i64*
  call void @free(i64* %v1_15f0e)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_15e7d.pre = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_15e7d

dec_label_pc_15f18:                               ; preds = %dec_label_pc_15e65
  %v0_15f18 = load i64, i64* @r14, align 8
  store i64 %v0_15f18, i64* @rdx, align 8
  %v0_15f1b = load i64, i64* @r13, align 8
  store i64 %v0_15f1b, i64* @rsi, align 8
  store i64 %v3_15e65, i64* @rdi, align 8
  %v3_15f21 = inttoptr i64 %v0_15f1b to i64*
  %v5_15f21 = trunc i64 %v0_15f18 to i32
  %v6_15f21 = call i64* @memcpy(i64* %v2_15e65, i64* %v3_15f21, i32 %v5_15f21)
  %v8_15f21 = ptrtoint i64* %v6_15f21 to i64
  store i64 %v8_15f21, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_15ec9

dec_label_pc_15f28:                               ; preds = %dec_label_pc_15ec9
  store i64 ptrtoint ([2 x i8]* @global_var_17f6a.506 to i64), i64* @rsi, align 8
  store i64 %v8_15ef8, i64* @rdi, align 8
  store i64 0, i64* %r15.global-to-local, align 8
  %v5_15f34 = call %_IO_FILE* @fdopen(i32 %v6_15ef8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_var_17f6a.506, i64 0, i64 0))
  %v6_15f34 = ptrtoint %_IO_FILE* %v5_15f34 to i64
  store i64 %v6_15f34, i64* %rax.global-to-local, align 8
  %sext = mul i64 %v6_15f34, 4294967296
  %v2_15f39 = icmp eq i64 %sext, 0
  %v1_15f3c = sdiv i64 %sext, 4294967296
  store i64 %v1_15f3c, i64* @r14, align 8
  store i64 0, i64* %stack_var_-216, align 8
  br i1 %v2_15f39, label %dec_label_pc_16123, label %dec_label_pc_15f4d

dec_label_pc_15f4d:                               ; preds = %dec_label_pc_15f28
  %v2_15f4d = ptrtoint i64* %stack_var_-120 to i64
  %v2_15f57 = ptrtoint i64* %stack_var_-184 to i64
  store i64 %v2_15f57, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_15f61

dec_label_pc_15f61:                               ; preds = %dec_label_pc_15f61.backedge, %dec_label_pc_15f4d
  %v0_15f61 = phi i64 [ %v0_15f61.pre, %dec_label_pc_15f61.backedge ], [ %v1_15f3c, %dec_label_pc_15f4d ]
  %v1_15f61 = add i64 %v0_15f61, 8
  %v2_15f61 = inttoptr i64 %v1_15f61 to i64*
  %v3_15f61 = load i64, i64* %v2_15f61, align 8
  store i64 %v3_15f61, i64* %rax.global-to-local, align 8
  %v2_15f65 = add i64 %v0_15f61, 16
  %v3_15f65 = inttoptr i64 %v2_15f65 to i64*
  %v4_15f65 = load i64, i64* %v3_15f65, align 8
  %v10_15f65 = icmp ult i64 %v3_15f61, %v4_15f65
  %v1_15f69 = icmp eq i1 %v10_15f65, false
  br i1 %v1_15f69, label %dec_label_pc_160ba, label %dec_label_pc_15f6f

dec_label_pc_15f6f:                               ; preds = %dec_label_pc_16071, %dec_label_pc_15f61
  %v1_15f73 = phi i64 [ %v0_160ac, %dec_label_pc_16071 ], [ %v0_15f61, %dec_label_pc_15f61 ]
  %v0_15f6f = phi i64 [ %v3_160ac, %dec_label_pc_16071 ], [ %v3_15f61, %dec_label_pc_15f61 ]
  %v1_15f6f = add i64 %v0_15f6f, 1
  store i64 %v1_15f6f, i64* @rdx, align 8
  %v2_15f73 = add i64 %v1_15f73, 8
  %v3_15f73 = inttoptr i64 %v2_15f73 to i64*
  store i64 %v1_15f6f, i64* %v3_15f73, align 8
  %v0_15f77 = load i64, i64* %rax.global-to-local, align 8
  %v1_15f77 = inttoptr i64 %v0_15f77 to i8*
  %v2_15f77 = load i8, i8* %v1_15f77, align 1
  %v3_15f77 = zext i8 %v2_15f77 to i64
  store i64 %v3_15f77, i64* @rdi, align 8
  br label %dec_label_pc_15f7a

dec_label_pc_15f7a:                               ; preds = %dec_label_pc_160ba, %dec_label_pc_15f6f
  %v0_15f93 = phi i64 [ %v5_160bd, %dec_label_pc_160ba ], [ %v3_15f77, %dec_label_pc_15f6f ]
  %v1_15f7a = add nsw i64 %v0_15f93, -9
  store i64 %v1_15f7a, i64* %rax.global-to-local, align 8
  %v1_15f7d = trunc i64 %v1_15f7a to i32
  %tmp131 = or i32 %v1_15f7d, 1
  %tmp132 = icmp eq i32 %tmp131, 1
  br i1 %tmp132, label %dec_label_pc_15f61.backedge, label %dec_label_pc_15f82

dec_label_pc_15f61.backedge:                      ; preds = %dec_label_pc_15f7a, %dec_label_pc_15f82, %dec_label_pc_16130
  %v0_15f61.pre = load i64, i64* @r14, align 8
  br label %dec_label_pc_15f61

dec_label_pc_15f82:                               ; preds = %dec_label_pc_15f7a
  %v1_15f82 = trunc i64 %v0_15f93 to i32
  %v10_15f82 = icmp eq i32 %v1_15f82, 32
  br i1 %v10_15f82, label %dec_label_pc_15f61.backedge, label %dec_label_pc_15f87

dec_label_pc_15f87:                               ; preds = %dec_label_pc_15f82
  %v11_15f87 = icmp eq i32 %v1_15f82, 35
  br i1 %v11_15f87, label %dec_label_pc_16109, label %dec_label_pc_15f90

dec_label_pc_15f90:                               ; preds = %dec_label_pc_15f87
  %v0_15f90 = load i64, i64* @r14, align 8
  %v1_15f90 = inttoptr i64 %v0_15f90 to %_IO_FILE*
  store i64 %v0_15f90, i64* @rsi, align 8
  %v5_15f93 = call i32 @ungetc(i32 %v1_15f82, %_IO_FILE* %v1_15f90)
  store i64 %v2_15f57, i64* @r13, align 8
  store i64 %v2_15f4d, i64* @rcx, align 8
  store i64 ptrtoint ([10 x i8]* @global_var_1b193.507 to i64), i64* @rsi, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  %v0_15fab = load i64, i64* @r14, align 8
  %v1_15fab = inttoptr i64 %v0_15fab to %_IO_FILE*
  store i64 %v0_15fab, i64* @rdi, align 8
  store i64 %v2_15f57, i64* @rdx, align 8
  %v11_15fb1 = call i32 (%_IO_FILE*, i8*, ...) @fscanf(%_IO_FILE* %v1_15fab, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_1b193.507, i64 0, i64 0), i64* nonnull %stack_var_-184, i64* nonnull %stack_var_-120)
  %v13_15fb1 = sext i32 %v11_15fb1 to i64
  store i64 %v13_15fb1, i64* %rax.global-to-local, align 8
  %v9_15fb9 = icmp sgt i32 %v11_15fb1, 1
  br i1 %v9_15fb9, label %dec_label_pc_15fbf, label %dec_label_pc_160cd

dec_label_pc_15fbf:                               ; preds = %dec_label_pc_15f90
  %v0_15fbf = load i64, i64* @r13, align 8
  store i64 %v0_15fbf, i64* @rdx, align 8
  br label %dec_label_pc_15fc2

dec_label_pc_15fc2:                               ; preds = %dec_label_pc_15fc2, %dec_label_pc_15fbf
  %v0_15fc2 = phi i64 [ %v1_15fc4, %dec_label_pc_15fc2 ], [ %v0_15fbf, %dec_label_pc_15fbf ]
  %v1_15fc2 = inttoptr i64 %v0_15fc2 to i32*
  %v2_15fc2 = load i32, i32* %v1_15fc2, align 4
  %v3_15fc2 = zext i32 %v2_15fc2 to i64
  %v1_15fc4 = add i64 %v0_15fc2, 4
  store i64 %v1_15fc4, i64* @rdx, align 8
  %v1_15fc8 = add nuw nsw i64 %v3_15fc2, 4278124287
  %v3_15fce = xor i64 %v3_15fc2, 4294967295
  store i64 %v3_15fce, i64* @rcx, align 8
  %v4_15fd06 = and i64 %v3_15fce, %v1_15fc8
  %v4_15fd0 = trunc i64 %v4_15fd06 to i32
  %v2_15fd2 = and i32 %v4_15fd0, -2139062144
  %v3_15fd2 = icmp eq i32 %v2_15fd2, 0
  %v9_15fd2 = zext i32 %v2_15fd2 to i64
  store i64 %v9_15fd2, i64* %rax.global-to-local, align 8
  br i1 %v3_15fd2, label %dec_label_pc_15fc2, label %dec_label_pc_15fd9

dec_label_pc_15fd9:                               ; preds = %dec_label_pc_15fc2
  %v3_15fe0 = udiv i32 %v2_15fd2, 65536
  %v10_15fe0 = zext i32 %v3_15fe0 to i64
  %v2_15fe3 = and i32 %v4_15fd0, 32896
  %v3_15fe3 = icmp eq i32 %v2_15fe3, 0
  %v5_15fe8.v = select i1 %v3_15fe3, i64 %v10_15fe0, i64 %v9_15fd2
  store i64 %v5_15fe8.v, i64* %rax.global-to-local, align 8
  %v1_15feb = add i64 %v0_15fc2, 6
  %v3_15fef = select i1 %v3_15fe3, i64 %v1_15feb, i64 %v1_15fc4
  %v1_15ff5 = trunc i64 %v5_15fe8.v to i8
  %v9_15ff5 = icmp ne i8 %v1_15ff5, 0
  %v21_15ff5 = and i64 %v5_15fe8.v, 2155905024
  store i64 %v21_15ff5, i64* @rcx, align 8
  %v3_15ff7 = select i1 %v9_15ff5, i64 4, i64 3
  %v4_15ff7 = sub i64 %v3_15fef, %v3_15ff7
  %v6_15ffb = sub i64 %v4_15ff7, %v2_15f57
  store i64 %v6_15ffb, i64* @rdx, align 8
  br label %dec_label_pc_16000

dec_label_pc_16000:                               ; preds = %dec_label_pc_16000, %dec_label_pc_15fd9
  %v0_16000 = phi i64 [ %v1_16004, %dec_label_pc_16000 ], [ %v2_15f4d, %dec_label_pc_15fd9 ]
  %v1_16000 = inttoptr i64 %v0_16000 to i32*
  %v2_16000 = load i32, i32* %v1_16000, align 4
  %v3_16000 = zext i32 %v2_16000 to i64
  %v1_16004 = add i64 %v0_16000, 4
  %v1_16008 = add nuw nsw i64 %v3_16000, 4278124287
  %v3_1600e = xor i64 %v3_16000, 4294967295
  store i64 %v3_1600e, i64* @rsi, align 8
  %v4_160107 = and i64 %v3_1600e, %v1_16008
  %v4_16010 = trunc i64 %v4_160107 to i32
  %v2_16012 = and i32 %v4_16010, -2139062144
  %v3_16012 = icmp eq i32 %v2_16012, 0
  %v9_16012 = zext i32 %v2_16012 to i64
  store i64 %v9_16012, i64* %rax.global-to-local, align 8
  br i1 %v3_16012, label %dec_label_pc_16000, label %dec_label_pc_16019

dec_label_pc_16019:                               ; preds = %dec_label_pc_16000
  %v3_16020 = udiv i32 %v2_16012, 65536
  %v10_16020 = zext i32 %v3_16020 to i64
  %v2_16023 = and i32 %v4_16010, 32896
  %v3_16023 = icmp eq i32 %v2_16023, 0
  %v5_16028.v = select i1 %v3_16023, i64 %v10_16020, i64 %v9_16012
  %v1_1602b = add i64 %v0_16000, 6
  store i64 %v1_1602b, i64* @rsi, align 8
  %v3_16031 = select i1 %v3_16023, i64 %v1_1602b, i64 %v1_16004
  %v1_16035 = trunc i64 %v5_16028.v to i8
  %v9_16035 = icmp ne i8 %v1_16035, 0
  %v21_16035 = and i64 %v5_16028.v, 2155905024
  store i64 %v21_16035, i64* @rcx, align 8
  %v3_16037 = select i1 %v9_16035, i64 4, i64 3
  %v4_16037 = sub i64 %v3_16031, %v3_16037
  %v5_1603b = sub i64 %v4_16037, %v2_15f4d
  store i64 %v5_1603b, i64* @r13, align 8
  %v2_16040 = load i64, i64* %stack_var_-216, align 8
  %v9_16040 = icmp eq i64 %v2_16040, 0
  %v3_16045 = add i64 %v6_15ffb, %v5_1603b
  store i64 %v3_16045, i64* %rax.global-to-local, align 8
  %v1_16049 = icmp eq i1 %v9_16040, false
  br i1 %v1_16049, label %dec_label_pc_1613a, label %dec_label_pc_1604f

dec_label_pc_1604f:                               ; preds = %dec_label_pc_16019
  %v1_1604f = add i64 %v3_16045, 2
  store i64 %v1_1604f, i64* @rcx, align 8
  %v1_16053 = add i64 %v3_16045, 3
  %v2_16053 = trunc i64 %v1_16053 to i32
  store i64 %v1_16053, i64* @rdi, align 8
  store i64 %v1_1604f, i64* %stack_var_-216, align 8
  %v3_1605b = call i64* @malloc(i32 %v2_16053)
  br label %dec_label_pc_16068

dec_label_pc_16068:                               ; preds = %dec_label_pc_1613a, %dec_label_pc_1604f
  %v4_1614d.sink = phi i64* [ %v4_1614d, %dec_label_pc_1613a ], [ %v3_1605b, %dec_label_pc_1604f ]
  %v6_1614d = ptrtoint i64* %v4_1614d.sink to i64
  store i64 %v6_1614d, i64* %rax.global-to-local, align 8
  store i64 %v6_15ffb, i64* @rdx, align 8
  store i64 %v6_1614d, i64* @r12, align 8
  %v1_16068 = icmp eq i64* %v4_1614d.sink, null
  br i1 %v1_16068, label %dec_label_pc_1615f, label %dec_label_pc_16071

dec_label_pc_16071:                               ; preds = %dec_label_pc_16068
  %v2_16071 = load i64, i64* %stack_var_-216, align 8
  store i64 %v2_15f57, i64* @rsi, align 8
  %v2_16081 = sub i64 -2, %v6_15ffb
  %v1_16084 = add i64 %v6_15ffb, 1
  %v16_16084 = trunc i64 %v1_16084 to i32
  store i64 %v1_16084, i64* @rdx, align 8
  %v1_16088 = load i64, i64* @r13, align 8
  %v2_16088 = sub i64 %v2_16071, %v1_16088
  store i64 %v2_16088, i64* %r15.global-to-local, align 8
  %v2_1608b = add i64 %v2_16088, %v2_16081
  %v2_1608e = add i64 %v2_1608b, %v6_1614d
  store i64 %v2_1608e, i64* @rdi, align 8
  %v1_16091 = inttoptr i64 %v2_1608e to i64*
  %v7_16091 = call i64* @memcpy(i64* %v1_16091, i64* nonnull %stack_var_-184, i32 %v16_16084)
  %v9_16091 = ptrtoint i64* %v7_16091 to i64
  store i64 %v9_16091, i64* %rax.global-to-local, align 8
  store i64 %v2_15f4d, i64* @rsi, align 8
  %v0_1609b = load i64, i64* @r12, align 8
  %v1_1609b = load i64, i64* %r15.global-to-local, align 8
  %v3_1609b = add i64 %v0_1609b, -1
  %v4_1609b = add i64 %v3_1609b, %v1_1609b
  store i64 %v4_1609b, i64* @rdi, align 8
  %v0_160a0 = load i64, i64* @r13, align 8
  %v1_160a0 = add i64 %v0_160a0, 1
  store i64 %v1_160a0, i64* @rdx, align 8
  store i64 %v0_1609b, i64* %r15.global-to-local, align 8
  %v1_160a7 = inttoptr i64 %v4_1609b to i64*
  %v5_160a7 = trunc i64 %v1_160a0 to i32
  %v6_160a7 = call i64* @memcpy(i64* %v1_160a7, i64* nonnull %stack_var_-120, i32 %v5_160a7)
  %v8_160a7 = ptrtoint i64* %v6_160a7 to i64
  store i64 %v8_160a7, i64* %rax.global-to-local, align 8
  %v0_160ac = load i64, i64* @r14, align 8
  %v1_160ac = add i64 %v0_160ac, 8
  %v2_160ac = inttoptr i64 %v1_160ac to i64*
  %v3_160ac = load i64, i64* %v2_160ac, align 8
  store i64 %v3_160ac, i64* %rax.global-to-local, align 8
  %v2_160b0 = add i64 %v0_160ac, 16
  %v3_160b0 = inttoptr i64 %v2_160b0 to i64*
  %v4_160b0 = load i64, i64* %v3_160b0, align 8
  %v10_160b0 = icmp ult i64 %v3_160ac, %v4_160b0
  br i1 %v10_160b0, label %dec_label_pc_15f6f, label %dec_label_pc_160ba

dec_label_pc_160ba:                               ; preds = %dec_label_pc_16071, %dec_label_pc_15f61
  %v0_160ba = phi i64 [ %v0_160ac, %dec_label_pc_16071 ], [ %v0_15f61, %dec_label_pc_15f61 ]
  %v1_160ba = inttoptr i64 %v0_160ba to %_IO_FILE*
  store i64 %v0_160ba, i64* @rdi, align 8
  %v3_160bd = call i32 @__uflow(%_IO_FILE* %v1_160ba)
  %v5_160bd = sext i32 %v3_160bd to i64
  store i64 %v5_160bd, i64* %rax.global-to-local, align 8
  %v11_160c2 = icmp eq i32 %v3_160bd, -1
  store i64 %v5_160bd, i64* @rdi, align 8
  %v1_160c7 = icmp eq i1 %v11_160c2, false
  br i1 %v1_160c7, label %dec_label_pc_15f7a, label %dec_label_pc_160cd

dec_label_pc_160cd:                               ; preds = %dec_label_pc_15f90, %dec_label_pc_16130, %dec_label_pc_160ba
  %v0_160cd = load i64, i64* @r14, align 8
  store i64 %v0_160cd, i64* @rdi, align 8
  %v1_160d0 = load i64, i64* @rsi, align 8
  %v2_160d0 = call i64 @function_161a0(i64 %v0_160cd, i64 %v1_160d0)
  %v2_160d5 = load i64, i64* %stack_var_-216, align 8
  store i64 %v2_160d5, i64* %rax.global-to-local, align 8
  %v1_160d9 = icmp eq i64 %v2_160d5, 0
  br i1 %v1_160d9, label %dec_label_pc_15f04, label %dec_label_pc_160e2

dec_label_pc_160e2:                               ; preds = %dec_label_pc_160cd
  %v0_160e2 = load i64, i64* %r15.global-to-local, align 8
  %v3_160e2 = add i64 %v0_160e2, %v2_160d5
  %v4_160e2 = inttoptr i64 %v3_160e2 to i8*
  store i8 0, i8* %v4_160e2, align 1
  br label %dec_label_pc_15f0b

dec_label_pc_160f0:                               ; preds = %dec_label_pc_16109
  %v1_160f0 = add i64 %v3_16109, 1
  store i64 %v1_160f0, i64* @rdx, align 8
  store i64 %v1_160f0, i64* %v2_16109, align 8
  %v0_160f8 = load i64, i64* %rax.global-to-local, align 8
  %v1_160f8 = inttoptr i64 %v0_160f8 to i8*
  %v2_160f8 = load i8, i8* %v1_160f8, align 1
  %v3_160f8 = zext i8 %v2_160f8 to i64
  store i64 %v3_160f8, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_16100

dec_label_pc_16100:                               ; preds = %dec_label_pc_160f0, %dec_label_pc_16113
  %v0_16130 = phi i64 [ %v3_160f8, %dec_label_pc_160f0 ], [ %v5_16116, %dec_label_pc_16113 ]
  %v0_16105 = phi i64 [ 1, %dec_label_pc_160f0 ], [ %v5_1611e, %dec_label_pc_16113 ]
  store i64 %v0_16105, i64* @rdx, align 8
  %v1_16100 = trunc i64 %v0_16130 to i32
  %v11_16100 = icmp eq i32 %v1_16100, 10
  br i1 %v11_16100, label %dec_label_pc_16130, label %dec_label_pc_16105

dec_label_pc_16105:                               ; preds = %dec_label_pc_16100
  %v4_16105 = trunc i64 %v0_16105 to i8
  %v5_16105 = icmp eq i8 %v4_16105, 0
  br i1 %v5_16105, label %dec_label_pc_16130, label %dec_label_pc_16109

dec_label_pc_16109:                               ; preds = %dec_label_pc_15f87, %dec_label_pc_16105
  %v0_16109 = load i64, i64* @r14, align 8
  %v1_16109 = add i64 %v0_16109, 8
  %v2_16109 = inttoptr i64 %v1_16109 to i64*
  %v3_16109 = load i64, i64* %v2_16109, align 8
  store i64 %v3_16109, i64* %rax.global-to-local, align 8
  %v2_1610d = add i64 %v0_16109, 16
  %v3_1610d = inttoptr i64 %v2_1610d to i64*
  %v4_1610d = load i64, i64* %v3_1610d, align 8
  %v10_1610d = icmp ult i64 %v3_16109, %v4_1610d
  br i1 %v10_1610d, label %dec_label_pc_160f0, label %dec_label_pc_16113

dec_label_pc_16113:                               ; preds = %dec_label_pc_16109
  %v1_16113 = inttoptr i64 %v0_16109 to %_IO_FILE*
  store i64 %v0_16109, i64* @rdi, align 8
  %v3_16116 = call i32 @__uflow(%_IO_FILE* %v1_16113)
  %v5_16116 = sext i32 %v3_16116 to i64
  store i64 %v5_16116, i64* %rax.global-to-local, align 8
  %v11_1611b = icmp eq i32 %v3_16116, -1
  %v1_1611e = icmp eq i1 %v11_1611b, false
  %v2_1611e = zext i1 %v1_1611e to i64
  %v3_1611e = load i64, i64* @rdx, align 8
  %v4_1611e = and i64 %v3_1611e, -256
  %v5_1611e = or i64 %v4_1611e, %v2_1611e
  br label %dec_label_pc_16100

dec_label_pc_16123:                               ; preds = %dec_label_pc_15f28
  %v0_16123 = load i64, i64* @r12, align 8
  %v1_16123 = trunc i64 %v0_16123 to i32
  store i64 %v0_16123, i64* @rdi, align 8
  %v3_16126 = call i32 @close(i32 %v1_16123)
  %v5_16126 = sext i32 %v3_16126 to i64
  store i64 %v5_16126, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_15f04

dec_label_pc_16130:                               ; preds = %dec_label_pc_16105, %dec_label_pc_16100
  %v11_16130 = icmp eq i32 %v1_16100, -1
  br i1 %v11_16130, label %dec_label_pc_160cd, label %dec_label_pc_15f61.backedge

dec_label_pc_1613a:                               ; preds = %dec_label_pc_16019
  %v4_1613a = add i64 %v3_16045, %v2_16040
  store i64 %v4_1613a, i64* %rax.global-to-local, align 8
  %v0_1613e = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_1613e, i64* @rdi, align 8
  %v1_16141 = add i64 %v4_1613a, 2
  store i64 %v1_16141, i64* @rcx, align 8
  %v1_16145 = add i64 %v4_1613a, 3
  store i64 %v1_16145, i64* @rsi, align 8
  store i64 %v1_16141, i64* %stack_var_-216, align 8
  %v1_1614d = inttoptr i64 %v0_1613e to i64*
  %v3_1614d = trunc i64 %v1_16145 to i32
  %v4_1614d = call i64* @realloc(i64* %v1_1614d, i32 %v3_1614d)
  br label %dec_label_pc_16068

dec_label_pc_1615f:                               ; preds = %dec_label_pc_16068
  %v0_1615f = load i64, i64* %r15.global-to-local, align 8
  store i64 %v0_1615f, i64* @rdi, align 8
  store i64 ptrtoint (i8** @global_var_17c4a.6 to i64), i64* %r15.global-to-local, align 8
  %v1_16169 = inttoptr i64 %v0_1615f to i64*
  call void @free(i64* %v1_16169)
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_1616e = load i64, i64* @r14, align 8
  store i64 %v0_1616e, i64* @rdi, align 8
  %v1_16171 = load i64, i64* @rsi, align 8
  %v2_16171 = call i64 @function_161a0(i64 %v0_1616e, i64 %v1_16171)
  store i64 %v2_16171, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_15f0b

dec_label_pc_1617b:                               ; preds = %dec_label_pc_15e49
  %v0_1617b = load i64, i64* @r13, align 8
  %v3_1617b = add nsw i64 %v5_15e4c, -1
  %v4_1617b = add i64 %v3_1617b, %v0_1617b
  %v5_1617b = inttoptr i64 %v4_1617b to i8*
  %v6_1617b = load i8, i8* %v5_1617b, align 1
  %v16_1617b = icmp eq i8 %v6_1617b, 47
  %v1_16181 = icmp eq i1 %v16_1617b, false
  br i1 %v1_16181, label %dec_label_pc_16191, label %dec_label_pc_16183

dec_label_pc_16183:                               ; preds = %dec_label_pc_1617b
  %v1_16183 = add nsw i64 %v5_15e4c, 14
  br label %dec_label_pc_15e65

dec_label_pc_1618c:                               ; preds = %dec_label_pc_15dec
  call void @__stack_chk_fail()
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.global-to-local, align 8
  %v0_16195.pre = load i64, i64* @r12, align 8
  br label %dec_label_pc_16191

dec_label_pc_16191:                               ; preds = %dec_label_pc_1618c, %dec_label_pc_1617b
  %v0_16195 = phi i64 [ %v0_16195.pre, %dec_label_pc_1618c ], [ %v5_15e4c, %dec_label_pc_1617b ]
  %v0_16191 = phi i64 [ ptrtoint (i32* @0 to i64), %dec_label_pc_1618c ], [ %v5_15e4c, %dec_label_pc_1617b ]
  %v1_16191 = add i64 %v0_16191, 15
  store i64 %v1_16191, i64* @rdi, align 8
  %v1_16195 = add i64 %v0_16195, 1
  store i64 %v1_16195, i64* @r12, align 8
  br label %dec_label_pc_15ea8
}

define i64 @function_161a0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_161a0:
  %r12.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v0_161a3 = load i64, i64* @rbx, align 8
  store i64 %v0_161a3, i64* %stack_var_-24, align 8
  store i64 %arg1, i64* @rbx, align 8
  %v1_161a7 = inttoptr i64 %arg1 to %_IO_FILE*
  %v2_161a7 = call i32 @fileno(%_IO_FILE* %v1_161a7)
  %v6_161ac = icmp slt i32 %v2_161a7, 0
  %v0_161ae = load i64, i64* @rbx, align 8
  store i64 %v0_161ae, i64* @rdi, align 8
  br i1 %v6_161ac, label %dec_label_pc_16207, label %dec_label_pc_161b3

dec_label_pc_161b3:                               ; preds = %dec_label_pc_161a0
  %v1_161b3 = inttoptr i64 %v0_161ae to %_IO_FILE*
  %v2_161b3 = call i32 @__freading(%_IO_FILE* %v1_161b3)
  %v5_161b8 = icmp eq i32 %v2_161b3, 0
  %v1_161ba = icmp eq i1 %v5_161b8, false
  br i1 %v1_161ba, label %dec_label_pc_161e8, label %dec_label_pc_161bc

dec_label_pc_161bc:                               ; preds = %dec_label_pc_161e8, %dec_label_pc_161b3
  %v0_161bc = load i64, i64* @rbx, align 8
  store i64 %v0_161bc, i64* @rdi, align 8
  %v1_161bf = load i64, i64* @rsi, align 8
  %v2_161bf = call i64 @function_16220(i64 %v0_161bc, i64 %v1_161bf)
  %v4_161c4 = trunc i64 %v2_161bf to i32
  %v5_161c4 = icmp eq i32 %v4_161c4, 0
  br i1 %v5_161c4, label %dec_label_pc_16204, label %dec_label_pc_161c8

dec_label_pc_161c8:                               ; preds = %dec_label_pc_161bc
  %v0_161c8 = call i32* @__errno_location()
  %v2_161c8 = ptrtoint i32* %v0_161c8 to i64
  %v2_161cd = load i32, i32* %v0_161c8, align 4
  %v3_161cd = zext i32 %v2_161cd to i64
  store i64 %v3_161cd, i64* %r12.global-to-local, align 8
  %v0_161d0 = load i64, i64* @rbx, align 8
  store i64 %v0_161d0, i64* @rdi, align 8
  store i64 %v2_161c8, i64* %rbp.global-to-local, align 8
  %v1_161d6 = inttoptr i64 %v0_161d0 to %_IO_FILE*
  %v2_161d6 = call i32 @fclose(%_IO_FILE* %v1_161d6)
  %v4_161d6 = sext i32 %v2_161d6 to i64
  %v0_161db = load i64, i64* %r12.global-to-local, align 8
  %v4_161db = trunc i64 %v0_161db to i32
  %v5_161db = icmp eq i32 %v4_161db, 0
  %v1_161de = icmp eq i1 %v5_161db, false
  br i1 %v1_161de, label %dec_label_pc_16210, label %dec_label_pc_161e0

dec_label_pc_161e0:                               ; preds = %dec_label_pc_16210, %dec_label_pc_161c8
  %v0_161e4 = phi i64 [ 4294967295, %dec_label_pc_16210 ], [ %v4_161d6, %dec_label_pc_161c8 ]
  %v2_161e0 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_161e0, i64* @rbx, align 8
  ret i64 %v0_161e4

dec_label_pc_161e8:                               ; preds = %dec_label_pc_161b3
  %v0_161e8 = load i64, i64* @rbx, align 8
  store i64 %v0_161e8, i64* @rdi, align 8
  %v1_161eb = inttoptr i64 %v0_161e8 to %_IO_FILE*
  %v2_161eb = call i32 @fileno(%_IO_FILE* %v1_161eb)
  %v4_161eb = sext i32 %v2_161eb to i64
  store i64 0, i64* @rsi, align 8
  store i64 1, i64* @rdx, align 8
  store i64 %v4_161eb, i64* @rdi, align 8
  %v8_161f9 = call i32 @lseek(i32 %v2_161eb, i32 0, i32 1)
  %v10_161fe = icmp eq i32 %v8_161f9, -1
  %v1_16202 = icmp eq i1 %v10_161fe, false
  br i1 %v1_16202, label %dec_label_pc_161bc, label %dec_label_pc_16204

dec_label_pc_16204:                               ; preds = %dec_label_pc_161e8, %dec_label_pc_161bc
  %v0_16204 = load i64, i64* @rbx, align 8
  store i64 %v0_16204, i64* @rdi, align 8
  br label %dec_label_pc_16207

dec_label_pc_16207:                               ; preds = %dec_label_pc_16204, %dec_label_pc_161a0
  %v0_1620b = phi i64 [ %v0_16204, %dec_label_pc_16204 ], [ %v0_161ae, %dec_label_pc_161a0 ]
  %v2_16207 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_16207, i64* @rbx, align 8
  %v1_1620b = inttoptr i64 %v0_1620b to %_IO_FILE*
  %v2_1620b = call i32 @fclose(%_IO_FILE* %v1_1620b)
  %v4_1620b = sext i32 %v2_1620b to i64
  ret i64 %v4_1620b

dec_label_pc_16210:                               ; preds = %dec_label_pc_161c8
  %v2_16210 = load i64, i64* %rbp.global-to-local, align 8
  %v3_16210 = inttoptr i64 %v2_16210 to i32*
  store i32 %v4_161db, i32* %v3_16210, align 4
  br label %dec_label_pc_161e0
}

define i64 @function_16220(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_16220:
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-8 = alloca i64, align 8
  %v1_16220 = icmp eq i64 %arg1, 0
  %v0_16223 = load i64, i64* @rbx, align 8
  store i64 %v0_16223, i64* %stack_var_-8, align 8
  store i64 %arg1, i64* @rbx, align 8
  br i1 %v1_16220, label %dec_label_pc_1623a, label %dec_label_pc_16229

dec_label_pc_16229:                               ; preds = %dec_label_pc_16220
  %v1_16229 = inttoptr i64 %arg1 to %_IO_FILE*
  %v2_16229 = call i32 @__freading(%_IO_FILE* %v1_16229)
  %v5_1622e = icmp eq i32 %v2_16229, 0
  br i1 %v5_1622e, label %dec_label_pc_1623a, label %dec_label_pc_16232

dec_label_pc_16232:                               ; preds = %dec_label_pc_16229
  %v2_16232 = load i32, i32* bitcast (i64* @rdi to i32*), align 8
  %v3_16232 = and i32 %v2_16232, 256
  %v4_16232 = icmp eq i32 %v3_16232, 0
  %v1_16238 = icmp eq i1 %v4_16232, false
  br i1 %v1_16238, label %dec_label_pc_16248, label %dec_label_pc_1623a

dec_label_pc_1623a:                               ; preds = %dec_label_pc_16232, %dec_label_pc_16229, %dec_label_pc_16220
  %v0_1623a = load i64, i64* @rbx, align 8
  store i64 %v0_1623a, i64* @rdi, align 8
  %v2_1623d = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_1623d, i64* @rbx, align 8
  %v1_1623e = inttoptr i64 %v0_1623a to %_IO_FILE*
  %v2_1623e = call i32 @fflush(%_IO_FILE* %v1_1623e)
  %v4_1623e = sext i32 %v2_1623e to i64
  ret i64 %v4_1623e

dec_label_pc_16248:                               ; preds = %dec_label_pc_16232
  %v0_16248 = load i64, i64* @rbx, align 8
  store i64 %v0_16248, i64* @rdi, align 8
  store i64 1, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  %v5_16252 = call i64 @function_16260(i64 %v0_16248, i32 0, i64 1)
  %v0_16257 = load i64, i64* @rbx, align 8
  store i64 %v0_16257, i64* @rdi, align 8
  %v2_1625a = load i64, i64* %stack_var_-8, align 8
  store i64 %v2_1625a, i64* @rbx, align 8
  %v1_1625b = inttoptr i64 %v0_16257 to %_IO_FILE*
  %v2_1625b = call i32 @fflush(%_IO_FILE* %v1_1625b)
  %v4_1625b = sext i32 %v2_1625b to i64
  ret i64 %v4_1625b
}

define i64 @function_16260(i64 %arg1, i32 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_16260:
  %r12.global-to-local = alloca i64, align 8
  %rax.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  %tmp12 = sext i32 %arg2 to i64
  store i64 %tmp12, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-24 = alloca i64, align 8
  %v1_16260 = add i64 %arg1, 8
  %v2_16260 = inttoptr i64 %v1_16260 to i64*
  %v3_16260 = load i64, i64* %v2_16260, align 8
  store i64 %v3_16260, i64* %rax.global-to-local, align 8
  %v1_16264 = add i64 %arg1, 16
  %v2_16264 = inttoptr i64 %v1_16264 to i64*
  %v3_16264 = load i64, i64* %v2_16264, align 8
  %v15_16264 = icmp eq i64 %v3_16264, %v3_16260
  br i1 %v15_16264, label %dec_label_pc_16270, label %dec_label_pc_1626a

dec_label_pc_1626a:                               ; preds = %dec_label_pc_1627a, %dec_label_pc_16270, %dec_label_pc_16260
  %v1_1626a = inttoptr i64 %arg1 to %_IO_FILE*
  %v6_1626a = trunc i64 %arg3 to i32
  %v7_1626a = call i32 @fseeko(%_IO_FILE* %v1_1626a, i32 %arg2, i32 %v6_1626a)
  %v9_1626a = sext i32 %v7_1626a to i64
  store i64 %v9_1626a, i64* %rax.global-to-local, align 8
  ret i64 %v9_1626a

dec_label_pc_16270:                               ; preds = %dec_label_pc_16260
  %v1_16270 = add i64 %arg1, 32
  %v2_16270 = inttoptr i64 %v1_16270 to i64*
  %v3_16270 = load i64, i64* %v2_16270, align 8
  store i64 %v3_16270, i64* %rax.global-to-local, align 8
  %v1_16274 = add i64 %arg1, 40
  %v2_16274 = inttoptr i64 %v1_16274 to i64*
  %v3_16274 = load i64, i64* %v2_16274, align 8
  %v15_16274 = icmp eq i64 %v3_16274, %v3_16270
  %v1_16278 = icmp eq i1 %v15_16274, false
  br i1 %v1_16278, label %dec_label_pc_1626a, label %dec_label_pc_1627a

dec_label_pc_1627a:                               ; preds = %dec_label_pc_16270
  %v1_1627a = add i64 %arg1, 72
  %v2_1627a = inttoptr i64 %v1_1627a to i64*
  %v3_1627a = load i64, i64* %v2_1627a, align 8
  %v10_1627a = icmp eq i64 %v3_1627a, 0
  %v1_1627f = icmp eq i1 %v10_1627a, false
  br i1 %v1_1627f, label %dec_label_pc_1626a, label %dec_label_pc_16281

dec_label_pc_16281:                               ; preds = %dec_label_pc_1627a
  %v0_16281 = load i64, i64* @r12, align 8
  %v0_16283 = load i64, i64* @rbp, align 8
  store i64 %arg3, i64* %r12.global-to-local, align 8
  %v0_16287 = load i64, i64* @rbx, align 8
  store i64 %v0_16287, i64* %stack_var_-24, align 8
  store i64 %tmp12, i64* %rbp.global-to-local, align 8
  store i64 %arg1, i64* %rbx.global-to-local, align 8
  %v1_1628e = inttoptr i64 %arg1 to %_IO_FILE*
  %v2_1628e = call i32 @fileno(%_IO_FILE* %v1_1628e)
  %v4_1628e = sext i32 %v2_1628e to i64
  store i64 %v4_1628e, i64* %rax.global-to-local, align 8
  %v0_16293 = load i64, i64* %r12.global-to-local, align 8
  store i64 %v0_16293, i64* @rdx, align 8
  %v0_16296 = load i64, i64* %rbp.global-to-local, align 8
  %v1_16296 = trunc i64 %v0_16296 to i32
  store i64 %v0_16296, i64* @rsi, align 8
  store i64 %v4_1628e, i64* @rdi, align 8
  %v7_1629b = trunc i64 %v0_16293 to i32
  %v8_1629b = call i32 @lseek(i32 %v2_1628e, i32 %v1_16296, i32 %v7_1629b)
  %v10_1629b = sext i32 %v8_1629b to i64
  store i64 %v10_1629b, i64* %rax.global-to-local, align 8
  %v10_162a0 = icmp eq i32 %v8_1629b, -1
  br i1 %v10_162a0, label %dec_label_pc_162b2, label %dec_label_pc_162a6

dec_label_pc_162a6:                               ; preds = %dec_label_pc_16281
  %v2_162a6 = load i32, i32* bitcast (i64* @rdi to i32*), align 8
  %v3_162a6 = and i32 %v2_162a6, -17
  %v10_162a6 = load i64, i64* %rbx.global-to-local, align 8
  %v11_162a6 = inttoptr i64 %v10_162a6 to i32*
  store i32 %v3_162a6, i32* %v11_162a6, align 4
  %v0_162a9 = load i64, i64* %rax.global-to-local, align 8
  %v1_162a9 = load i64, i64* %rbx.global-to-local, align 8
  %v2_162a9 = add i64 %v1_162a9, 144
  %v3_162a9 = inttoptr i64 %v2_162a9 to i64*
  store i64 %v0_162a9, i64* %v3_162a9, align 8
  store i64 0, i64* %rax.global-to-local, align 8
  br label %dec_label_pc_162b2

dec_label_pc_162b2:                               ; preds = %dec_label_pc_162a6, %dec_label_pc_16281
  %v0_162b6 = phi i64 [ 0, %dec_label_pc_162a6 ], [ %v10_1629b, %dec_label_pc_16281 ]
  %v2_162b2 = load i64, i64* %stack_var_-24, align 8
  store i64 %v2_162b2, i64* @rbx, align 8
  store i64 %v0_16283, i64* %rbp.global-to-local, align 8
  store i64 %v0_16281, i64* %r12.global-to-local, align 8
  ret i64 %v0_162b6
}

define i64 @function_162c0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_162c0:
  %r12.global-to-local = alloca i64, align 8
  %r13.global-to-local = alloca i64, align 8
  %r14.global-to-local = alloca i64, align 8
  %r15.global-to-local = alloca i64, align 8
  %rbp.global-to-local = alloca i64, align 8
  %rbx.global-to-local = alloca i64, align 8
  store i64 %arg3, i64* @rdx, align 8
  store i64 %arg2, i64* @rsi, align 8
  store i64 %arg1, i64* @rdi, align 8
  %stack_var_-48 = alloca i64, align 8
  %v0_162c0 = load i64, i64* %r15.global-to-local, align 8
  %v0_162c2 = load i64, i64* %r14.global-to-local, align 8
  %v0_162c4 = load i64, i64* @rdi, align 8
  store i64 %v0_162c4, i64* %r15.global-to-local, align 8
  %v0_162c7 = load i64, i64* %r13.global-to-local, align 8
  %v0_162c9 = load i64, i64* %r12.global-to-local, align 8
  store i64 ptrtoint (i64* @global_var_21eff0.508 to i64), i64* %r12.global-to-local, align 8
  %v0_162d2 = load i64, i64* %rbp.global-to-local, align 8
  %v0_162da = load i64, i64* %rbx.global-to-local, align 8
  store i64 %v0_162da, i64* %stack_var_-48, align 8
  %v0_162db = load i64, i64* @rsi, align 8
  store i64 %v0_162db, i64* %r14.global-to-local, align 8
  %v0_162de = load i64, i64* @rdx, align 8
  store i64 %v0_162de, i64* %r13.global-to-local, align 8
  store i64 ashr (i64 sub (i64 ptrtoint (i64* @global_var_21eff8.509 to i64), i64 ptrtoint (i64* @global_var_21eff0.508 to i64)), i64 3), i64* %rbp.global-to-local, align 8
  %v0_162ec = call i64 @_init()
  br i1 icmp eq (i64 ashr (i64 sub (i64 ptrtoint (i64* @global_var_21eff8.509 to i64), i64 ptrtoint (i64* @global_var_21eff0.508 to i64)), i64 3), i64 0), label %dec_label_pc_16316, label %dec_label_pc_162f6

dec_label_pc_162f6:                               ; preds = %dec_label_pc_162c0
  store i64 0, i64* %rbx.global-to-local, align 8
  %v0_16300 = load i64, i64* %r13.global-to-local, align 8
  %v0_16303 = load i64, i64* %r14.global-to-local, align 8
  %v0_16306 = load i64, i64* %r15.global-to-local, align 8
  br label %dec_label_pc_16300

dec_label_pc_16300:                               ; preds = %dec_label_pc_16300, %dec_label_pc_162f6
  %v1_1630d2 = phi i64 [ %v1_1630d, %dec_label_pc_16300 ], [ 0, %dec_label_pc_162f6 ]
  %v1_1630d = add i64 %v1_1630d2, 1
  %v12_16311 = icmp eq i64 %v1_1630d2, sub (i64 ashr (i64 sub (i64 ptrtoint (i64* @global_var_21eff8.509 to i64), i64 ptrtoint (i64* @global_var_21eff0.508 to i64)), i64 3), i64 1)
  %v1_16314 = icmp eq i1 %v12_16311, false
  br i1 %v1_16314, label %dec_label_pc_16300, label %dec_label_pc_16316.loopexit

dec_label_pc_16316.loopexit:                      ; preds = %dec_label_pc_16300
  store i64 %v0_16300, i64* @rdx, align 8
  store i64 %v0_16303, i64* @rsi, align 8
  store i64 %v0_16306, i64* @rdi, align 8
  store i64 %v1_1630d, i64* %rbx.global-to-local, align 8
  br label %dec_label_pc_16316

dec_label_pc_16316:                               ; preds = %dec_label_pc_16316.loopexit, %dec_label_pc_162c0
  %v2_1631a = load i64, i64* %stack_var_-48, align 8
  store i64 %v2_1631a, i64* %rbx.global-to-local, align 8
  store i64 %v0_162d2, i64* %rbp.global-to-local, align 8
  store i64 %v0_162c9, i64* %r12.global-to-local, align 8
  store i64 %v0_162c7, i64* %r13.global-to-local, align 8
  store i64 %v0_162c2, i64* %r14.global-to-local, align 8
  store i64 %v0_162c0, i64* %r15.global-to-local, align 8
  ret i64 %v0_162ec
}

define i64 @function_16330() local_unnamed_addr {
dec_label_pc_16330:
  %rax.global-to-local = alloca i64, align 8
  %v0_16330 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_16330
}

define i64 @function_16340(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_16340:
  store i64 %arg1, i64* @rdi, align 8
  %v2_1634c = load i64, i64* @global_var_220008, align 8
  store i64 %v2_1634c, i64* @rdx, align 8
  store i64 0, i64* @rsi, align 8
  %v1_16351 = inttoptr i64 %arg1 to void (i64*)*
  %v5_16351 = inttoptr i64 %v2_1634c to i64*
  %v6_16351 = call i32 @__cxa_atexit(void (i64*)* %v1_16351, i64* null, i64* %v5_16351)
  %v8_16351 = sext i32 %v6_16351 to i64
  ret i64 %v8_16351
}

define i64 @_fini() local_unnamed_addr {
dec_label_pc_1636c:
  %rax.global-to-local = alloca i64, align 8
  %v0_16374 = load i64, i64* %rax.global-to-local, align 8
  ret i64 %v0_16374
}

declare i32** @__ctype_toupper_loc() local_unnamed_addr

declare i32 @__uflow(%_IO_FILE*) local_unnamed_addr

declare i8* @getenv(i8*) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @__snprintf_chk(i8*, i32, i32, i32, i8*, ...) local_unnamed_addr

declare i32 @raise(i32) local_unnamed_addr

declare void @abort() local_unnamed_addr

declare i32* @__errno_location() local_unnamed_addr

declare i32 @strncmp(i8*, i8*, i32) local_unnamed_addr

declare %tm* @localtime_r(i32*, %tm*) local_unnamed_addr

declare void @_exit(i32) local_unnamed_addr

declare i8* @strcpy(i8*, i8*) local_unnamed_addr

declare i32 @__fpending(%_IO_FILE*) local_unnamed_addr

declare i32 @isatty(i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare i32 @iswcntrl(i32) local_unnamed_addr

declare i32 @wcswidth(i32*, i32) local_unnamed_addr

declare %lconv* @localeconv() local_unnamed_addr

declare i32 @mbstowcs(i32*, i8*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @clock_gettime(i32, %timespec*) local_unnamed_addr

declare i32 @setenv(i8*, i8*, i32) local_unnamed_addr

declare i8* @textdomain(i8*) local_unnamed_addr

declare i32 @fclose(%_IO_FILE*) local_unnamed_addr

declare %__dirstream* @opendir(i8*) local_unnamed_addr

declare %passwd* @getpwuid(i32) local_unnamed_addr

declare i8* @bindtextdomain(i8*, i8*) local_unnamed_addr

declare i8* @dcgettext(i8*, i8*, i32) local_unnamed_addr

declare i32 @__ctype_get_mb_cur_max() local_unnamed_addr

declare i32 @strlen(i8*) local_unnamed_addr

declare i32 @__lxstat(i32, i8*, %stat*) local_unnamed_addr

declare void @__stack_chk_fail() local_unnamed_addr

declare i32 @getopt_long(i32, i8**, i8*, %option*, i32*) local_unnamed_addr

declare i32 @mbrtowc(i32*, i8*, i32, %_TYPEDEF___mbstate_t*) local_unnamed_addr

declare i8* @strchr(i8*, i32) local_unnamed_addr

declare %group* @getgrgid(i32) local_unnamed_addr

declare i32 @snprintf(i8*, i32, i8*, ...) local_unnamed_addr

declare i32 @__overflow(%_IO_FILE*, i32) local_unnamed_addr

declare i8* @strrchr(i8*, i32) local_unnamed_addr

declare i64 @fgetfilecon() local_unnamed_addr

declare %tm* @gmtime_r(i32*, %tm*) local_unnamed_addr

declare i32 @lseek(i32, i32, i32) local_unnamed_addr

declare i32 @gettimeofday(%timeval*, %timezone*) local_unnamed_addr

declare void @__assert_fail(i8*, i8*, i32, i8*) local_unnamed_addr

declare i32 @__strtoul_internal(i8*, i8**, i32, i32) local_unnamed_addr

declare i32 @fnmatch(i8*, i8*, i32) local_unnamed_addr

declare i64* @memset(i64*, i32, i32) local_unnamed_addr

declare i32 @fscanf(%_IO_FILE*, i8*, ...) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i8* @getcwd(i8*, i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @strspn(i8*, i8*) local_unnamed_addr

declare i32 @closedir(%__dirstream*) local_unnamed_addr

declare i32 @memcmp(i64*, i64*, i32) local_unnamed_addr

declare i32 @_setjmp([1 x %__jmp_buf_tag]) local_unnamed_addr

declare i32 @fputs_unlocked(i8*, %_IO_FILE*) local_unnamed_addr

declare i64* @calloc(i32, i32) local_unnamed_addr

declare i64 @lgetfilecon() local_unnamed_addr

declare i32 @strcmp(i8*, i8*) local_unnamed_addr

declare void (i32)* @signal(i32, void (i32)*) local_unnamed_addr

declare i32 @dirfd(%__dirstream*) local_unnamed_addr

declare %passwd* @getpwnam(i8*) local_unnamed_addr

declare i64* @__memcpy_chk(i64*, i64*, i32, i32) local_unnamed_addr

declare i32 @sigemptyset(%_TYPEDEF_sigset_t*) local_unnamed_addr

declare i64* @memcpy(i64*, i64*, i32) local_unnamed_addr

declare %group* @getgrnam(i8*) local_unnamed_addr

declare i64 @getfilecon() local_unnamed_addr

declare void @tzset() local_unnamed_addr

declare i32 @fileno(%_IO_FILE*) local_unnamed_addr

declare i32 @tcgetpgrp(i32) local_unnamed_addr

declare i32 @__xstat(i32, i8*, %stat*) local_unnamed_addr

declare %dirent* @readdir(%__dirstream*) local_unnamed_addr

declare i32 @wcwidth(i32) local_unnamed_addr

declare i32 @fflush(%_IO_FILE*) local_unnamed_addr

declare i8* @nl_langinfo(i32) local_unnamed_addr

declare i32 @ungetc(i32, %_IO_FILE*) local_unnamed_addr

declare i32 @__fxstat(i32, i32, %stat*) local_unnamed_addr

declare i32 @strcoll(i8*, i8*) local_unnamed_addr

declare i32 @mktime(%tm*) local_unnamed_addr

declare i32 @__freading(%_IO_FILE*) local_unnamed_addr

declare i32 @fwrite_unlocked(i64*, i32, i32, %_IO_FILE*) local_unnamed_addr

declare i64* @realloc(i64*, i32) local_unnamed_addr

declare i8* @stpncpy(i8*, i8*, i32) local_unnamed_addr

declare %_IO_FILE* @fdopen(i32, i8*) local_unnamed_addr

declare i8* @setlocale(i32, i8*) local_unnamed_addr

declare i32 @__printf_chk(i32, i8*, ...) local_unnamed_addr

declare i32 @timegm(%tm*) local_unnamed_addr

declare i32 @strftime(i8*, i32, i8*, %tm*) local_unnamed_addr

declare i64* @mempcpy(i64*, i64*, i32) local_unnamed_addr

declare i64* @memmove(i64*, i64*, i32) local_unnamed_addr

declare void @error(i32, i32, i8*, ...) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @fseeko(%_IO_FILE*, i32, i32) local_unnamed_addr

declare i32 @unsetenv(i8*) local_unnamed_addr

declare i32 @strtoul(i8*, i8**, i32) local_unnamed_addr

declare i32 @__cxa_atexit(void (i64*)*, i64*, i64*) local_unnamed_addr

declare i32 @wcstombs(i8*, i32*, i32) local_unnamed_addr

declare i32 @getxattr(i8*, i8*, i64*, i32) local_unnamed_addr

declare i64 @freecon() local_unnamed_addr

declare i32 @gethostname(i8*, i32) local_unnamed_addr

declare i32 @sigismember(%_TYPEDEF_sigset_t*, i32) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fwrite(i64*, i32, i32, %_IO_FILE*) local_unnamed_addr

declare i32 @__fprintf_chk(%_IO_FILE*, i32, i8*, ...) local_unnamed_addr

declare i32 @fflush_unlocked(%_IO_FILE*) local_unnamed_addr

declare i32 @mbsinit(%_TYPEDEF___mbstate_t*) local_unnamed_addr

declare i32 @iswprint(i32) local_unnamed_addr

declare i32 @sigaddset(%_TYPEDEF_sigset_t*, i32) local_unnamed_addr

declare i32** @__ctype_tolower_loc() local_unnamed_addr

declare i16** @__ctype_b_loc() local_unnamed_addr

declare i32 @__sprintf_chk(i8*, i32, i32, i8*, ...) local_unnamed_addr

declare void @free(i64*) local_unnamed_addr

declare i32 @__libc_start_main(i64, i32, i8**, void ()*, void ()*, void ()*) local_unnamed_addr

declare void @__gmon_start__() local_unnamed_addr

declare i64* @malloc(i32) local_unnamed_addr

declare void @__cxa_finalize(i64*) local_unnamed_addr

declare i64 @__asm_hlt() local_unnamed_addr

declare i128 @__asm_movdqa(i128) local_unnamed_addr

declare void @__asm_movups(i128, i128) local_unnamed_addr

declare void @__asm_rep_stosq_memset(i8*, i64, i64) local_unnamed_addr

declare i128 @__asm_movdqu(i128) local_unnamed_addr

declare i128 @__asm_movss(i32) local_unnamed_addr

declare i128 @__asm_pxor(i128, i128) local_unnamed_addr

declare i128 @__asm_cvtsi2ss(i64) local_unnamed_addr

declare i128 @__asm_divss(i128, i128) local_unnamed_addr

declare void @__asm_ucomiss(i128, i32) local_unnamed_addr

declare i128 @__asm_subss(i128, i32) local_unnamed_addr

declare i64 @__asm_cvttss2si(i128) local_unnamed_addr

declare i128 @__asm_addss(i128, i128) local_unnamed_addr

declare void @__asm_ucomiss.1(i128, i128) local_unnamed_addr

declare i128 @__asm_addss.2(i128, i32) local_unnamed_addr

declare i128 @__asm_mulss(i128, i32) local_unnamed_addr

declare i128 @__asm_movaps(i128) local_unnamed_addr

declare i128 @__asm_mulss.3(i128, i128) local_unnamed_addr

declare i128 @__asm_divss.4(i128, i32) local_unnamed_addr

declare i64 @__asm_movaps.5(i128) local_unnamed_addr

declare i128 @__asm_cvtsi2sd(i64) local_unnamed_addr

declare i128 @__asm_mulsd(i128, i64) local_unnamed_addr

declare i128 @__asm_divsd(i128, i128) local_unnamed_addr

declare i128 @__asm_addsd(i128, i128) local_unnamed_addr

declare i64 @__readfsqword(i64) local_unnamed_addr

declare i64 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8* @__decompiler_undefined_function_1() local_unnamed_addr

declare i32 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8 @__decompiler_undefined_function_5() local_unnamed_addr

declare i16 @__decompiler_undefined_function_8() local_unnamed_addr

declare i128 @__decompiler_undefined_function_12() local_unnamed_addr
